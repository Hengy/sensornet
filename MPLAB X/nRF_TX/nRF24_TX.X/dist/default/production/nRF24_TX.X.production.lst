

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Mon Sep 29 12:11:47 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F24K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    26  0000                     
    27                           	psect	idataCOMRAM
    28  003AF8                     __pidataCOMRAM:
    29                           	opt stack 0
    30                           
    31                           ;initializer for _CONFIG_CURR
    32  003AF8  4A                 	db	74
    33                           
    34                           ;initializer for _EN_AA_CURR
    35  003AF9  01                 	db	1
    36                           
    37                           ;initializer for _EN_RXADDR_CURR
    38  003AFA  03                 	db	3
    39                           
    40                           ;initializer for _RF_CH_CURR
    41  003AFB  69                 	db	105
    42                           
    43                           ;initializer for _RF_SETUP_CURR
    44  003AFC  06                 	db	6
    45                           
    46                           ;initializer for _RX_PW_P0_CURR
    47  003AFD  01                 	db	1
    48                           
    49                           ;initializer for _SETUP_AW_CURR
    50  003AFE  02                 	db	2
    51                           
    52                           ;initializer for _SETUP_RETR_CURR
    53  003AFF  25                 	db	37
    54                           
    55                           ;initializer for _RX_ADDRESS
    56  003B00  E7                 	db	231
    57  003B01  E7                 	db	231
    58  003B02  E7                 	db	231
    59  003B03  E7                 	db	231
    60                           
    61                           ;initializer for _TX_ADDRESS
    62  003B04  C7                 	db	199
    63  003B05  C7                 	db	199
    64  003B06  C7                 	db	199
    65  003B07  C7                 	db	199
    66  0000                     _LATA	set	3977
    67  0000                     _LATAbits	set	3977
    68  0000                     _LATB	set	3978
    69  0000                     _LATC	set	3979
    70  0000                     _SSP1ADD	set	4040
    71  0000                     _SSP1BUF	set	4041
    72  0000                     _SSP1CON1bits	set	4038
    73  0000                     _SSP1STATbits	set	4039
    74  0000                     _TRISA	set	3986
    75  0000                     _TRISB	set	3987
    76  0000                     _TRISC	set	3988
    77                           
    78                           ; #config settings
    79  0000                     
    80                           	psect	cinit
    81  003BC2                     __pcinit:
    82                           	opt stack 0
    83  003BC2                     start_initialization:
    84                           	opt stack 0
    85  003BC2                     __initialization:
    86                           	opt stack 0
    87                           
    88                           ; Clear objects allocated to BANK0 (32 bytes)
    89  003BC2  EE00  F060         	lfsr	0,__pbssBANK0
    90  003BC6  0E20               	movlw	32
    91  003BC8                     clear_0:
    92  003BC8  6AEE               	clrf	postinc0,c
    93  003BCA  06E8               	decf	wreg,f,c
    94  003BCC  E1FD               	bnz	clear_0
    95                           
    96                           ; Clear objects allocated to COMRAM (33 bytes)
    97  003BCE  EE00  F001         	lfsr	0,__pbssCOMRAM
    98  003BD2  0E21               	movlw	33
    99  003BD4                     clear_1:
   100  003BD4  6AEE               	clrf	postinc0,c
   101  003BD6  06E8               	decf	wreg,f,c
   102  003BD8  E1FD               	bnz	clear_1
   103                           
   104                           ; Initialize objects allocated to COMRAM (16 bytes)
   105                           ; load TBLPTR registers with __pidataCOMRAM
   106  003BDA  0EF8               	movlw	low __pidataCOMRAM
   107  003BDC  6EF6               	movwf	tblptrl,c
   108  003BDE  0E3A               	movlw	high __pidataCOMRAM
   109  003BE0  6EF7               	movwf	tblptrh,c
   110  003BE2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   111  003BE4  6EF8               	movwf	tblptru,c
   112  003BE6  EE00  F035         	lfsr	0,__pdataCOMRAM
   113  003BEA  EE10 F010          	lfsr	1,16
   114  003BEE                     copy_data0:
   115  003BEE  0009               	tblrd		*+
   116  003BF0  CFF5 FFEE          	movff	tablat,postinc0
   117  003BF4  50E5               	movf	postdec1,w,c
   118  003BF6  50E1               	movf	fsr1l,w,c
   119  003BF8  E1FA               	bnz	copy_data0
   120  003BFA                     end_of_initialization:
   121                           	opt stack 0
   122  003BFA                     __end_of__initialization:
   123                           	opt stack 0
   124  003BFA  0100               	movlb	0
   125  003BFC  EFDD  F01E         	goto	_main	;jump to C main() function
   126                           tblptru	equ	0xFF8
   127                           tblptrh	equ	0xFF7
   128                           tblptrl	equ	0xFF6
   129                           tablat	equ	0xFF5
   130                           postinc0	equ	0xFEE
   131                           wreg	equ	0xFE8
   132                           postdec1	equ	0xFE5
   133                           fsr1l	equ	0xFE1
   134                           
   135                           	psect	bssCOMRAM
   136  000001                     __pbssCOMRAM:
   137                           	opt stack 0
   138  000001                     _dataBufIn:
   139                           	opt stack 0
   140  000001                     	ds	32
   141  000021                     _nrfSTATUS:
   142                           	opt stack 0
   143  000021                     	ds	1
   144                           tblptru	equ	0xFF8
   145                           tblptrh	equ	0xFF7
   146                           tblptrl	equ	0xFF6
   147                           tablat	equ	0xFF5
   148                           postinc0	equ	0xFEE
   149                           wreg	equ	0xFE8
   150                           postdec1	equ	0xFE5
   151                           fsr1l	equ	0xFE1
   152                           
   153                           	psect	dataCOMRAM
   154  000035                     __pdataCOMRAM:
   155                           	opt stack 0
   156  000035                     _CONFIG_CURR:
   157                           	opt stack 0
   158  000035                     	ds	1
   159  000036                     _EN_AA_CURR:
   160                           	opt stack 0
   161  000036                     	ds	1
   162  000037                     _EN_RXADDR_CURR:
   163                           	opt stack 0
   164  000037                     	ds	1
   165  000038                     _RF_CH_CURR:
   166                           	opt stack 0
   167  000038                     	ds	1
   168  000039                     _RF_SETUP_CURR:
   169                           	opt stack 0
   170  000039                     	ds	1
   171  00003A                     _RX_PW_P0_CURR:
   172                           	opt stack 0
   173  00003A                     	ds	1
   174  00003B                     _SETUP_AW_CURR:
   175                           	opt stack 0
   176  00003B                     	ds	1
   177  00003C                     _SETUP_RETR_CURR:
   178                           	opt stack 0
   179  00003C                     	ds	1
   180  00003D                     _RX_ADDRESS:
   181                           	opt stack 0
   182  00003D                     	ds	4
   183  000041                     _TX_ADDRESS:
   184                           	opt stack 0
   185  000041                     	ds	4
   186                           tblptru	equ	0xFF8
   187                           tblptrh	equ	0xFF7
   188                           tblptrl	equ	0xFF6
   189                           tablat	equ	0xFF5
   190                           postinc0	equ	0xFEE
   191                           wreg	equ	0xFE8
   192                           postdec1	equ	0xFE5
   193                           fsr1l	equ	0xFE1
   194                           
   195                           	psect	bssBANK0
   196  000060                     __pbssBANK0:
   197                           	opt stack 0
   198  000060                     _dataBufOut:
   199                           	opt stack 0
   200  000060                     	ds	32
   201                           tblptru	equ	0xFF8
   202                           tblptrh	equ	0xFF7
   203                           tblptrl	equ	0xFF6
   204                           tablat	equ	0xFF5
   205                           postinc0	equ	0xFEE
   206                           wreg	equ	0xFE8
   207                           postdec1	equ	0xFE5
   208                           fsr1l	equ	0xFE1
   209                           
   210                           	psect	cstackCOMRAM
   211  000022                     __pcstackCOMRAM:
   212                           	opt stack 0
   213  000022                     spiTransferByte@data:
   214                           	opt stack 0
   215  000022                     setCSN@level:
   216                           	opt stack 0
   217  000022                     delay10ms@ms_multi:
   218                           	opt stack 0
   219                           
   220                           ; 2 bytes @ 0x0
   221  000022                     	ds	2
   222  000024                     ??_delay10ms:
   223  000024                     nrfConfigReg@command:
   224                           	opt stack 0
   225  000024                     spiTransfer@command:
   226                           	opt stack 0
   227  000024                     nrfSetTXAddr@addr:
   228                           	opt stack 0
   229  000024                     nrfSetRXAddr@addr:
   230                           	opt stack 0
   231  000024                     nrfTXData@len:
   232                           	opt stack 0
   233                           
   234                           ; 2 bytes @ 0x2
   235  000024                     	ds	1
   236  000025                     nrfConfigReg@data:
   237                           	opt stack 0
   238  000025                     spiTransfer@len:
   239                           	opt stack 0
   240  000025                     delay10ms@i:
   241                           	opt stack 0
   242                           
   243                           ; 2 bytes @ 0x3
   244  000025                     	ds	1
   245  000026                     ??_nrfTXData:
   246  000026                     nrfConfigReg@wr:
   247                           	opt stack 0
   248  000026                     nrfSetTXAddr@len:
   249                           	opt stack 0
   250  000026                     nrfSetRXAddr@len:
   251                           	opt stack 0
   252                           
   253                           ; 2 bytes @ 0x4
   254  000026                     	ds	1
   255  000027                     ??_spiTransfer:
   256                           
   257                           ; 0 bytes @ 0x5
   258  000027                     	ds	1
   259  000028                     ??_nrfSetRXAddr:
   260  000028                     ??_nrfSetTXAddr:
   261                           
   262                           ; 0 bytes @ 0x6
   263  000028                     	ds	2
   264  00002A                     nrfTXData@i:
   265                           	opt stack 0
   266                           
   267                           ; 2 bytes @ 0x8
   268  00002A                     	ds	2
   269  00002C                     nrfSetRXAddr@pipe:
   270                           	opt stack 0
   271  00002C                     nrfSetTXAddr@i:
   272                           	opt stack 0
   273                           
   274                           ; 2 bytes @ 0xA
   275  00002C                     	ds	1
   276  00002D                     nrfSetRXAddr@i:
   277                           	opt stack 0
   278                           
   279                           ; 2 bytes @ 0xB
   280  00002D                     	ds	2
   281  00002F                     spiTransfer@wrn:
   282                           	opt stack 0
   283                           
   284                           ; 1 bytes @ 0xD
   285  00002F                     	ds	1
   286  000030                     spiTransfer@i:
   287                           	opt stack 0
   288                           
   289                           ; 2 bytes @ 0xE
   290  000030                     	ds	2
   291  000032                     ??_main:
   292                           
   293                           ; 0 bytes @ 0x10
   294  000032                     	ds	1
   295  000033                     main@count:
   296                           	opt stack 0
   297                           
   298                           ; 2 bytes @ 0x11
   299  000033                     	ds	2
   300                           tblptru	equ	0xFF8
   301                           tblptrh	equ	0xFF7
   302                           tblptrl	equ	0xFF6
   303                           tablat	equ	0xFF5
   304                           postinc0	equ	0xFEE
   305                           wreg	equ	0xFE8
   306                           postdec1	equ	0xFE5
   307                           fsr1l	equ	0xFE1
   308                           
   309 ;;
   310 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   311 ;;
   312 ;; *************** function _main *****************
   313 ;; Defined at:
   314 ;;		line 189 in file "main.c"
   315 ;; Parameters:    Size  Location     Type
   316 ;;		None
   317 ;; Auto vars:     Size  Location     Type
   318 ;;  count           2   17[COMRAM] int 
   319 ;; Return value:  Size  Location     Type
   320 ;;		None               void
   321 ;; Registers used:
   322 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   323 ;; Tracked objects:
   324 ;;		On entry : 0/0
   325 ;;		On exit  : 0/0
   326 ;;		Unchanged: 0/0
   327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   328 ;;      Params:         0       0       0       0
   329 ;;      Locals:         2       0       0       0
   330 ;;      Temps:          1       0       0       0
   331 ;;      Totals:         3       0       0       0
   332 ;;Total ram usage:        3 bytes
   333 ;; Hardware stack levels required when called:    3
   334 ;; This function calls:
   335 ;;		_delay10ms
   336 ;;		_nrfConfig
   337 ;;		_nrfGetStatus
   338 ;;		_nrfTXData
   339 ;;		_portConfig
   340 ;;		_spiConfig_1
   341 ;;		_spiTransfer
   342 ;; This function is called by:
   343 ;;		Startup code after reset
   344 ;; This function uses a non-reentrant model
   345 ;;
   346                           
   347                           	psect	text0
   348  003DBA                     __ptext0:
   349                           	opt stack 0
   350  003DBA                     _main:
   351                           	opt stack 28
   352                           
   353                           ;main.c: 192: portConfig();
   354                           
   355                           ;incstack = 0
   356  003DBA  ECA5  F01D         	call	_portConfig	;wreg free
   357                           
   358                           ;main.c: 193: spiConfig_1();
   359  003DBE  EC99  F01D         	call	_spiConfig_1	;wreg free
   360                           
   361                           ;main.c: 194: nrfConfig();
   362  003DC2  EC97  F01F         	call	_nrfConfig	;wreg free
   363                           
   364                           ;main.c: 196: delay10ms(1);
   365  003DC6  0E00               	movlw	0
   366  003DC8  6E23               	movwf	delay10ms@ms_multi+1,c
   367  003DCA  0E01               	movlw	1
   368  003DCC  6E22               	movwf	delay10ms@ms_multi,c
   369  003DCE  ECC3  F01D         	call	_delay10ms	;wreg free
   370                           
   371                           ;main.c: 199: int count = 1;
   372  003DD2  0E00               	movlw	0
   373  003DD4  6E34               	movwf	main@count+1,c
   374  003DD6  0E01               	movlw	1
   375  003DD8  6E33               	movwf	main@count,c
   376  003DDA                     l1064:
   377                           
   378                           ;main.c: 202: dataBufOut[0] = count;
   379  003DDA  C033  F060         	movff	main@count,_dataBufOut
   380                           
   381                           ;main.c: 203: nrfTXData(1);
   382  003DDE  0E00               	movlw	0
   383  003DE0  6E25               	movwf	nrfTXData@len+1,c
   384  003DE2  0E01               	movlw	1
   385  003DE4  6E24               	movwf	nrfTXData@len,c
   386  003DE6  EC9B  F01E         	call	_nrfTXData	;wreg free
   387                           
   388                           ;main.c: 204: count++;
   389  003DEA  4A33               	infsnz	main@count,f,c
   390  003DEC  2A34               	incf	main@count+1,f,c
   391                           
   392                           ;main.c: 206: delay10ms(1);
   393  003DEE  0E00               	movlw	0
   394  003DF0  6E23               	movwf	delay10ms@ms_multi+1,c
   395  003DF2  0E01               	movlw	1
   396  003DF4  6E22               	movwf	delay10ms@ms_multi,c
   397  003DF6  ECC3  F01D         	call	_delay10ms	;wreg free
   398                           
   399                           ;main.c: 208: nrfGetStatus();
   400  003DFA  ECB2  F01D         	call	_nrfGetStatus	;wreg free
   401                           
   402                           ;main.c: 210: while (nrfSTATUS == 0x0E) {
   403  003DFE  D002               	goto	l1076
   404  003E00                     l1074:
   405                           
   406                           ;main.c: 211: nrfGetStatus();
   407  003E00  ECB2  F01D         	call	_nrfGetStatus	;wreg free
   408  003E04                     l1076:
   409  003E04  5021               	movf	_nrfSTATUS,w,c
   410  003E06  0A0E               	xorlw	14
   411  003E08  B4D8               	btfsc	status,2,c
   412  003E0A  D7FA               	goto	l1074
   413                           
   414                           ;main.c: 212: }
   415                           ;main.c: 215: spiTransfer('r',0x08,1);
   416  003E0C  0E08               	movlw	8
   417  003E0E  6E24               	movwf	spiTransfer@command,c
   418  003E10  0E00               	movlw	0
   419  003E12  6E26               	movwf	spiTransfer@len+1,c
   420  003E14  0E01               	movlw	1
   421  003E16  6E25               	movwf	spiTransfer@len,c
   422  003E18  0E72               	movlw	114
   423  003E1A  EC32  F01F         	call	_spiTransfer
   424                           
   425                           ;main.c: 216: if ((dataBufIn[0]&0b11110000)!=0) {
   426  003E1E  C001  F032         	movff	_dataBufIn,??_main
   427  003E22  0EF0               	movlw	240
   428  003E24  1632               	andwf	??_main,f,c
   429  003E26  B4D8               	btfsc	status,2,c
   430  003E28  D00A               	goto	l1088
   431                           
   432                           ;main.c: 217: LATAbits.LATA0 = 1;
   433  003E2A  8089               	bsf	3977,0,c	;volatile
   434                           
   435                           ;main.c: 218: delay10ms(10);
   436  003E2C  0E00               	movlw	0
   437  003E2E  6E23               	movwf	delay10ms@ms_multi+1,c
   438  003E30  0E0A               	movlw	10
   439  003E32  6E22               	movwf	delay10ms@ms_multi,c
   440  003E34  ECC3  F01D         	call	_delay10ms	;wreg free
   441                           
   442                           ;main.c: 219: LATAbits.LATA0 = 0;
   443  003E38  9089               	bcf	3977,0,c	;volatile
   444                           
   445                           ;main.c: 220: nrfGetStatus();
   446  003E3A  ECB2  F01D         	call	_nrfGetStatus	;wreg free
   447  003E3E                     l1088:
   448                           
   449                           ;main.c: 221: }
   450                           ;main.c: 224: dataBufOut[0] = 0b01110000;
   451  003E3E  0E70               	movlw	112
   452  003E40  0100               	movlb	0	; () banked
   453  003E42  6F60               	movwf	_dataBufOut& (0+255),b
   454                           
   455                           ; BSR set to: 0
   456                           ;main.c: 225: spiTransfer('w',0x07,1);
   457  003E44  0E07               	movlw	7
   458  003E46  6E24               	movwf	spiTransfer@command,c
   459  003E48  0E00               	movlw	0
   460  003E4A  6E26               	movwf	spiTransfer@len+1,c
   461  003E4C  0E01               	movlw	1
   462  003E4E  6E25               	movwf	spiTransfer@len,c
   463  003E50  0E77               	movlw	119
   464  003E52  EC32  F01F         	call	_spiTransfer
   465                           
   466                           ;main.c: 227: delay10ms(80);
   467  003E56  0E00               	movlw	0
   468  003E58  6E23               	movwf	delay10ms@ms_multi+1,c
   469  003E5A  0E50               	movlw	80
   470  003E5C  6E22               	movwf	delay10ms@ms_multi,c
   471  003E5E  ECC3  F01D         	call	_delay10ms	;wreg free
   472                           
   473                           ;main.c: 228: }
   474  003E62  D7BB               	goto	l1064
   475  003E64                     __end_of_main:
   476                           	opt stack 0
   477                           tblptru	equ	0xFF8
   478                           tblptrh	equ	0xFF7
   479                           tblptrl	equ	0xFF6
   480                           tablat	equ	0xFF5
   481                           postinc0	equ	0xFEE
   482                           wreg	equ	0xFE8
   483                           postdec1	equ	0xFE5
   484                           fsr1l	equ	0xFE1
   485                           status	equ	0xFD8
   486                           
   487 ;; *************** function _spiConfig_1 *****************
   488 ;; Defined at:
   489 ;;		line 248 in file "main.c"
   490 ;; Parameters:    Size  Location     Type
   491 ;;		None
   492 ;; Auto vars:     Size  Location     Type
   493 ;;		None
   494 ;; Return value:  Size  Location     Type
   495 ;;		None               void
   496 ;; Registers used:
   497 ;;		wreg, status,2
   498 ;; Tracked objects:
   499 ;;		On entry : 0/0
   500 ;;		On exit  : 0/0
   501 ;;		Unchanged: 0/0
   502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   503 ;;      Params:         0       0       0       0
   504 ;;      Locals:         0       0       0       0
   505 ;;      Temps:          0       0       0       0
   506 ;;      Totals:         0       0       0       0
   507 ;;Total ram usage:        0 bytes
   508 ;; Hardware stack levels used:    1
   509 ;; This function calls:
   510 ;;		Nothing
   511 ;; This function is called by:
   512 ;;		_main
   513 ;; This function uses a non-reentrant model
   514 ;;
   515                           
   516                           	psect	text1
   517  003B32                     __ptext1:
   518                           	opt stack 0
   519  003B32                     _spiConfig_1:
   520                           	opt stack 30
   521                           
   522                           ;main.c: 249: SSP1CON1bits.CKP = 0;
   523                           
   524                           ;incstack = 0
   525  003B32  98C6               	bcf	4038,4,c	;volatile
   526                           
   527                           ;main.c: 250: SSP1STATbits.CKE = 1;
   528  003B34  8CC7               	bsf	4039,6,c	;volatile
   529                           
   530                           ;main.c: 251: SSP1STATbits.SMP = 1;
   531  003B36  8EC7               	bsf	4039,7,c	;volatile
   532                           
   533                           ;main.c: 252: SSP1ADD = 0b00001111;
   534  003B38  0E0F               	movlw	15
   535  003B3A  6EC8               	movwf	4040,c	;volatile
   536                           
   537                           ;main.c: 253: SSP1CON1bits.SSPM = 0b1010;
   538  003B3C  50C6               	movf	4038,w,c	;volatile
   539  003B3E  0BF0               	andlw	-16
   540  003B40  090A               	iorlw	10
   541  003B42  6EC6               	movwf	4038,c	;volatile
   542                           
   543                           ;main.c: 255: SSP1CON1bits.SSPEN = 1;
   544  003B44  8AC6               	bsf	4038,5,c	;volatile
   545                           
   546                           ;main.c: 256: LATAbits.LATA2 = 1;
   547  003B46  8489               	bsf	3977,2,c	;volatile
   548  003B48  0012               	return	
   549  003B4A                     __end_of_spiConfig_1:
   550                           	opt stack 0
   551                           tblptru	equ	0xFF8
   552                           tblptrh	equ	0xFF7
   553                           tblptrl	equ	0xFF6
   554                           tablat	equ	0xFF5
   555                           postinc0	equ	0xFEE
   556                           wreg	equ	0xFE8
   557                           postdec1	equ	0xFE5
   558                           fsr1l	equ	0xFE1
   559                           status	equ	0xFD8
   560                           
   561 ;; *************** function _portConfig *****************
   562 ;; Defined at:
   563 ;;		line 234 in file "main.c"
   564 ;; Parameters:    Size  Location     Type
   565 ;;		None
   566 ;; Auto vars:     Size  Location     Type
   567 ;;		None
   568 ;; Return value:  Size  Location     Type
   569 ;;		None               void
   570 ;; Registers used:
   571 ;;		wreg, status,2
   572 ;; Tracked objects:
   573 ;;		On entry : 0/0
   574 ;;		On exit  : 0/0
   575 ;;		Unchanged: 0/0
   576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   577 ;;      Params:         0       0       0       0
   578 ;;      Locals:         0       0       0       0
   579 ;;      Temps:          0       0       0       0
   580 ;;      Totals:         0       0       0       0
   581 ;;Total ram usage:        0 bytes
   582 ;; Hardware stack levels used:    1
   583 ;; This function calls:
   584 ;;		Nothing
   585 ;; This function is called by:
   586 ;;		_main
   587 ;; This function uses a non-reentrant model
   588 ;;
   589                           
   590                           	psect	text2
   591  003B4A                     __ptext2:
   592                           	opt stack 0
   593  003B4A                     _portConfig:
   594                           	opt stack 30
   595                           
   596                           ;main.c: 235: TRISA = 0b00001000;
   597                           
   598                           ;incstack = 0
   599  003B4A  0E08               	movlw	8
   600  003B4C  6E92               	movwf	3986,c	;volatile
   601                           
   602                           ;main.c: 236: TRISB = 0b00000000;
   603  003B4E  0E00               	movlw	0
   604  003B50  6E93               	movwf	3987,c	;volatile
   605                           
   606                           ;main.c: 237: TRISC = 0b00010000;
   607  003B52  0E10               	movlw	16
   608  003B54  6E94               	movwf	3988,c	;volatile
   609                           
   610                           ;main.c: 239: LATA = 0b00000100;
   611  003B56  0E04               	movlw	4
   612  003B58  6E89               	movwf	3977,c	;volatile
   613                           
   614                           ;main.c: 240: LATB = 0x00;
   615  003B5A  0E00               	movlw	0
   616  003B5C  6E8A               	movwf	3978,c	;volatile
   617                           
   618                           ;main.c: 241: LATC = 0x00;
   619  003B5E  0E00               	movlw	0
   620  003B60  6E8B               	movwf	3979,c	;volatile
   621  003B62  0012               	return	
   622  003B64                     __end_of_portConfig:
   623                           	opt stack 0
   624                           tblptru	equ	0xFF8
   625                           tblptrh	equ	0xFF7
   626                           tblptrl	equ	0xFF6
   627                           tablat	equ	0xFF5
   628                           postinc0	equ	0xFEE
   629                           wreg	equ	0xFE8
   630                           postdec1	equ	0xFE5
   631                           fsr1l	equ	0xFE1
   632                           status	equ	0xFD8
   633                           
   634 ;; *************** function _nrfTXData *****************
   635 ;; Defined at:
   636 ;;		line 426 in file "main.c"
   637 ;; Parameters:    Size  Location     Type
   638 ;;  len             2    2[COMRAM] int 
   639 ;; Auto vars:     Size  Location     Type
   640 ;;  i               2    8[COMRAM] int 
   641 ;; Return value:  Size  Location     Type
   642 ;;		None               void
   643 ;; Registers used:
   644 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   645 ;; Tracked objects:
   646 ;;		On entry : 0/0
   647 ;;		On exit  : 0/0
   648 ;;		Unchanged: 0/0
   649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   650 ;;      Params:         2       0       0       0
   651 ;;      Locals:         2       0       0       0
   652 ;;      Temps:          4       0       0       0
   653 ;;      Totals:         8       0       0       0
   654 ;;Total ram usage:        8 bytes
   655 ;; Hardware stack levels used:    1
   656 ;; Hardware stack levels required when called:    1
   657 ;; This function calls:
   658 ;;		_setCSN
   659 ;;		_spiTransferByte
   660 ;; This function is called by:
   661 ;;		_main
   662 ;; This function uses a non-reentrant model
   663 ;;
   664                           
   665                           	psect	text3
   666  003D36                     __ptext3:
   667                           	opt stack 0
   668  003D36                     _nrfTXData:
   669                           	opt stack 29
   670                           
   671                           ;main.c: 428: setCSN(0);
   672                           
   673                           ;incstack = 0
   674  003D36  0E00               	movlw	0
   675  003D38  6E23               	movwf	setCSN@level+1,c
   676  003D3A  0E00               	movlw	0
   677  003D3C  6E22               	movwf	setCSN@level,c
   678  003D3E  EC8D  F01D         	call	_setCSN	;wreg free
   679                           
   680                           ;main.c: 430: spiTransferByte(0xA0);
   681  003D42  0EA0               	movlw	160
   682  003D44  EC84  F01D         	call	_spiTransferByte
   683                           
   684                           ;main.c: 432: if (len != 0) {
   685  003D48  5025               	movf	nrfTXData@len+1,w,c
   686  003D4A  1024               	iorwf	nrfTXData@len,w,c
   687  003D4C  B4D8               	btfsc	status,2,c
   688  003D4E  D028               	goto	l1042
   689                           
   690                           ;main.c: 433: for (int i=1;i<=len;i++) {
   691  003D50  0E00               	movlw	0
   692  003D52  6E2B               	movwf	nrfTXData@i+1,c
   693  003D54  0E01               	movlw	1
   694  003D56  6E2A               	movwf	nrfTXData@i,c
   695  003D58  D019               	goto	l1040
   696  003D5A                     l1036:
   697                           
   698                           ;main.c: 434: spiTransferByte(dataBufOut[i-1]);
   699  003D5A  0EFF               	movlw	255
   700  003D5C  6E26               	movwf	??_nrfTXData& (0+255),c
   701  003D5E  0EFF               	movlw	255
   702  003D60  6E27               	movwf	(??_nrfTXData+1)& (0+255),c
   703  003D62  C02A  F028         	movff	nrfTXData@i,??_nrfTXData+2
   704  003D66  C02B  F029         	movff	nrfTXData@i+1,??_nrfTXData+3
   705  003D6A  5026               	movf	??_nrfTXData,w,c
   706  003D6C  2628               	addwf	??_nrfTXData+2,f,c
   707  003D6E  5027               	movf	??_nrfTXData+1,w,c
   708  003D70  2229               	addwfc	??_nrfTXData+3,f,c
   709  003D72  0100               	movlb	0	; () banked
   710  003D74  0E60               	movlw	low _dataBufOut
   711  003D76  2428               	addwf	??_nrfTXData+2,w,c
   712  003D78  6ED9               	movwf	fsr2l,c
   713  003D7A  0100               	movlb	0	; () banked
   714  003D7C  0E00               	movlw	high _dataBufOut
   715  003D7E  2029               	addwfc	??_nrfTXData+3,w,c
   716  003D80  6EDA               	movwf	fsr2h,c
   717  003D82  50DF               	movf	indf2,w,c
   718  003D84  EC84  F01D         	call	_spiTransferByte
   719  003D88  4A2A               	infsnz	nrfTXData@i,f,c
   720  003D8A  2A2B               	incf	nrfTXData@i+1,f,c
   721  003D8C                     l1040:
   722  003D8C  5025               	movf	nrfTXData@len+1,w,c
   723  003D8E  0A80               	xorlw	128
   724  003D90  6E26               	movwf	??_nrfTXData& (0+255),c
   725  003D92  502A               	movf	nrfTXData@i,w,c
   726  003D94  5C24               	subwf	nrfTXData@len,w,c
   727  003D96  502B               	movf	nrfTXData@i+1,w,c
   728  003D98  0A80               	xorlw	128
   729  003D9A  5826               	subwfb	??_nrfTXData& (0+255),w,c
   730  003D9C  B0D8               	btfsc	status,0,c
   731  003D9E  D7DD               	goto	l1036
   732  003DA0                     l1042:
   733                           
   734                           ;main.c: 435: }
   735                           ;main.c: 436: }
   736                           ;main.c: 438: setCSN(1);
   737  003DA0  0E00               	movlw	0
   738  003DA2  6E23               	movwf	setCSN@level+1,c
   739  003DA4  0E01               	movlw	1
   740  003DA6  6E22               	movwf	setCSN@level,c
   741  003DA8  EC8D  F01D         	call	_setCSN	;wreg free
   742                           
   743                           ;main.c: 441: LATAbits.LATA1 = 1;
   744  003DAC  8289               	bsf	3977,1,c	;volatile
   745                           
   746                           ;main.c: 442: _delay((unsigned long)((11)*(64000000/4000000.0)));
   747  003DAE  0E3A               	movlw	58
   748  003DB0                     u357:
   749  003DB0  2EE8               	decfsz	wreg,f,c
   750  003DB2  D7FE               	goto	u357
   751  003DB4  D000               	nop2		;nop
   752                           
   753                           ;main.c: 443: LATAbits.LATA1 = 0;
   754  003DB6  9289               	bcf	3977,1,c	;volatile
   755  003DB8  0012               	return	
   756  003DBA                     __end_of_nrfTXData:
   757                           	opt stack 0
   758                           tblptru	equ	0xFF8
   759                           tblptrh	equ	0xFF7
   760                           tblptrl	equ	0xFF6
   761                           tablat	equ	0xFF5
   762                           postinc0	equ	0xFEE
   763                           wreg	equ	0xFE8
   764                           postdec1	equ	0xFE5
   765                           fsr1l	equ	0xFE1
   766                           indf2	equ	0xFDF
   767                           fsr2h	equ	0xFDA
   768                           fsr2l	equ	0xFD9
   769                           status	equ	0xFD8
   770                           
   771 ;; *************** function _nrfGetStatus *****************
   772 ;; Defined at:
   773 ;;		line 309 in file "main.c"
   774 ;; Parameters:    Size  Location     Type
   775 ;;		None
   776 ;; Auto vars:     Size  Location     Type
   777 ;;		None
   778 ;; Return value:  Size  Location     Type
   779 ;;		None               void
   780 ;; Registers used:
   781 ;;		wreg, status,2, status,0, cstack
   782 ;; Tracked objects:
   783 ;;		On entry : 0/0
   784 ;;		On exit  : 0/0
   785 ;;		Unchanged: 0/0
   786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   787 ;;      Params:         0       0       0       0
   788 ;;      Locals:         0       0       0       0
   789 ;;      Temps:          0       0       0       0
   790 ;;      Totals:         0       0       0       0
   791 ;;Total ram usage:        0 bytes
   792 ;; Hardware stack levels used:    1
   793 ;; Hardware stack levels required when called:    1
   794 ;; This function calls:
   795 ;;		_setCSN
   796 ;;		_spiTransferByte
   797 ;; This function is called by:
   798 ;;		_main
   799 ;; This function uses a non-reentrant model
   800 ;;
   801                           
   802                           	psect	text4
   803  003B64                     __ptext4:
   804                           	opt stack 0
   805  003B64                     _nrfGetStatus:
   806                           	opt stack 29
   807                           
   808                           ;main.c: 311: setCSN(0);
   809                           
   810                           ;incstack = 0
   811  003B64  0E00               	movlw	0
   812  003B66  6E23               	movwf	setCSN@level+1,c
   813  003B68  0E00               	movlw	0
   814  003B6A  6E22               	movwf	setCSN@level,c
   815  003B6C  EC8D  F01D         	call	_setCSN	;wreg free
   816                           
   817                           ;main.c: 313: nrfSTATUS = spiTransferByte(0xFF);
   818  003B70  0EFF               	movlw	255
   819  003B72  EC84  F01D         	call	_spiTransferByte
   820  003B76  6E21               	movwf	_nrfSTATUS,c
   821                           
   822                           ;main.c: 315: setCSN(1);
   823  003B78  0E00               	movlw	0
   824  003B7A  6E23               	movwf	setCSN@level+1,c
   825  003B7C  0E01               	movlw	1
   826  003B7E  6E22               	movwf	setCSN@level,c
   827  003B80  EC8D  F01D         	call	_setCSN	;wreg free
   828  003B84  0012               	return	
   829  003B86                     __end_of_nrfGetStatus:
   830                           	opt stack 0
   831                           tblptru	equ	0xFF8
   832                           tblptrh	equ	0xFF7
   833                           tblptrl	equ	0xFF6
   834                           tablat	equ	0xFF5
   835                           postinc0	equ	0xFEE
   836                           wreg	equ	0xFE8
   837                           postdec1	equ	0xFE5
   838                           fsr1l	equ	0xFE1
   839                           indf2	equ	0xFDF
   840                           fsr2h	equ	0xFDA
   841                           fsr2l	equ	0xFD9
   842                           status	equ	0xFD8
   843                           
   844 ;; *************** function _nrfConfig *****************
   845 ;; Defined at:
   846 ;;		line 262 in file "main.c"
   847 ;; Parameters:    Size  Location     Type
   848 ;;		None
   849 ;; Auto vars:     Size  Location     Type
   850 ;;		None
   851 ;; Return value:  Size  Location     Type
   852 ;;		None               void
   853 ;; Registers used:
   854 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   855 ;; Tracked objects:
   856 ;;		On entry : 0/0
   857 ;;		On exit  : 0/0
   858 ;;		Unchanged: 0/0
   859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   860 ;;      Params:         0       0       0       0
   861 ;;      Locals:         0       0       0       0
   862 ;;      Temps:          0       0       0       0
   863 ;;      Totals:         0       0       0       0
   864 ;;Total ram usage:        0 bytes
   865 ;; Hardware stack levels used:    1
   866 ;; Hardware stack levels required when called:    2
   867 ;; This function calls:
   868 ;;		_nrfConfigReg
   869 ;;		_nrfSetRXAddr
   870 ;;		_nrfSetTXAddr
   871 ;;		_spiTransfer
   872 ;; This function is called by:
   873 ;;		_main
   874 ;; This function uses a non-reentrant model
   875 ;;
   876                           
   877                           	psect	text5
   878  003F2E                     __ptext5:
   879                           	opt stack 0
   880  003F2E                     _nrfConfig:
   881                           	opt stack 28
   882                           
   883                           ;main.c: 265: nrfConfigReg('w',0x00,CONFIG_CURR);
   884                           
   885                           ;incstack = 0
   886  003F2E  0E00               	movlw	0
   887  003F30  6E24               	movwf	nrfConfigReg@command,c
   888  003F32  C035  F025         	movff	_CONFIG_CURR,nrfConfigReg@data
   889  003F36  0E77               	movlw	119
   890  003F38  EC00  F01E         	call	_nrfConfigReg
   891                           
   892                           ;main.c: 267: nrfConfigReg('w',0x01,EN_AA_CURR);
   893  003F3C  0E01               	movlw	1
   894  003F3E  6E24               	movwf	nrfConfigReg@command,c
   895  003F40  C036  F025         	movff	_EN_AA_CURR,nrfConfigReg@data
   896  003F44  0E77               	movlw	119
   897  003F46  EC00  F01E         	call	_nrfConfigReg
   898                           
   899                           ;main.c: 269: nrfConfigReg('w',0x02,EN_RXADDR_CURR);
   900  003F4A  0E02               	movlw	2
   901  003F4C  6E24               	movwf	nrfConfigReg@command,c
   902  003F4E  C037  F025         	movff	_EN_RXADDR_CURR,nrfConfigReg@data
   903  003F52  0E77               	movlw	119
   904  003F54  EC00  F01E         	call	_nrfConfigReg
   905                           
   906                           ;main.c: 271: nrfConfigReg('w',0x03,SETUP_AW_CURR);
   907  003F58  0E03               	movlw	3
   908  003F5A  6E24               	movwf	nrfConfigReg@command,c
   909  003F5C  C03B  F025         	movff	_SETUP_AW_CURR,nrfConfigReg@data
   910  003F60  0E77               	movlw	119
   911  003F62  EC00  F01E         	call	_nrfConfigReg
   912                           
   913                           ;main.c: 273: nrfConfigReg('w',0x04,SETUP_RETR_CURR);
   914  003F66  0E04               	movlw	4
   915  003F68  6E24               	movwf	nrfConfigReg@command,c
   916  003F6A  C03C  F025         	movff	_SETUP_RETR_CURR,nrfConfigReg@data
   917  003F6E  0E77               	movlw	119
   918  003F70  EC00  F01E         	call	_nrfConfigReg
   919                           
   920                           ;main.c: 275: nrfConfigReg('w',0x05,RF_CH_CURR);
   921  003F74  0E05               	movlw	5
   922  003F76  6E24               	movwf	nrfConfigReg@command,c
   923  003F78  C038  F025         	movff	_RF_CH_CURR,nrfConfigReg@data
   924  003F7C  0E77               	movlw	119
   925  003F7E  EC00  F01E         	call	_nrfConfigReg
   926                           
   927                           ;main.c: 277: nrfConfigReg('w',0x06,RF_SETUP_CURR);
   928  003F82  0E06               	movlw	6
   929  003F84  6E24               	movwf	nrfConfigReg@command,c
   930  003F86  C039  F025         	movff	_RF_SETUP_CURR,nrfConfigReg@data
   931  003F8A  0E77               	movlw	119
   932  003F8C  EC00  F01E         	call	_nrfConfigReg
   933                           
   934                           ;main.c: 279: nrfSetRXAddr(0x0A,TX_ADDRESS,4);
   935  003F90  0E00               	movlw	high _TX_ADDRESS
   936  003F92  6E25               	movwf	nrfSetRXAddr@addr+1,c
   937  003F94  0E41               	movlw	low _TX_ADDRESS
   938  003F96  6E24               	movwf	nrfSetRXAddr@addr,c
   939  003F98  0E00               	movlw	0
   940  003F9A  6E27               	movwf	nrfSetRXAddr@len+1,c
   941  003F9C  0E04               	movlw	4
   942  003F9E  6E26               	movwf	nrfSetRXAddr@len,c
   943  003FA0  0E0A               	movlw	10
   944  003FA2  EC5F  F01E         	call	_nrfSetRXAddr
   945                           
   946                           ;main.c: 281: nrfSetRXAddr(0x0B,RX_ADDRESS,4);
   947  003FA6  0E00               	movlw	high _RX_ADDRESS
   948  003FA8  6E25               	movwf	nrfSetRXAddr@addr+1,c
   949  003FAA  0E3D               	movlw	low _RX_ADDRESS
   950  003FAC  6E24               	movwf	nrfSetRXAddr@addr,c
   951  003FAE  0E00               	movlw	0
   952  003FB0  6E27               	movwf	nrfSetRXAddr@len+1,c
   953  003FB2  0E04               	movlw	4
   954  003FB4  6E26               	movwf	nrfSetRXAddr@len,c
   955  003FB6  0E0B               	movlw	11
   956  003FB8  EC5F  F01E         	call	_nrfSetRXAddr
   957                           
   958                           ;main.c: 283: nrfSetTXAddr(TX_ADDRESS,4);
   959  003FBC  0E00               	movlw	high _TX_ADDRESS
   960  003FBE  6E25               	movwf	nrfSetTXAddr@addr+1,c
   961  003FC0  0E41               	movlw	low _TX_ADDRESS
   962  003FC2  6E24               	movwf	nrfSetTXAddr@addr,c
   963  003FC4  0E00               	movlw	0
   964  003FC6  6E27               	movwf	nrfSetTXAddr@len+1,c
   965  003FC8  0E04               	movlw	4
   966  003FCA  6E26               	movwf	nrfSetTXAddr@len,c
   967  003FCC  EC25  F01E         	call	_nrfSetTXAddr	;wreg free
   968                           
   969                           ;main.c: 285: nrfConfigReg('w',0x11,RX_PW_P0_CURR);
   970  003FD0  0E11               	movlw	17
   971  003FD2  6E24               	movwf	nrfConfigReg@command,c
   972  003FD4  C03A  F025         	movff	_RX_PW_P0_CURR,nrfConfigReg@data
   973  003FD8  0E77               	movlw	119
   974  003FDA  EC00  F01E         	call	_nrfConfigReg
   975                           
   976                           ;main.c: 287: nrfConfigReg('w',0x12,RX_PW_P0_CURR);
   977  003FDE  0E12               	movlw	18
   978  003FE0  6E24               	movwf	nrfConfigReg@command,c
   979  003FE2  C03A  F025         	movff	_RX_PW_P0_CURR,nrfConfigReg@data
   980  003FE6  0E77               	movlw	119
   981  003FE8  EC00  F01E         	call	_nrfConfigReg
   982                           
   983                           ;main.c: 289: spiTransfer('n',0xE1,0);
   984  003FEC  0EE1               	movlw	225
   985  003FEE  6E24               	movwf	spiTransfer@command,c
   986  003FF0  0E00               	movlw	0
   987  003FF2  6E26               	movwf	spiTransfer@len+1,c
   988  003FF4  0E00               	movlw	0
   989  003FF6  6E25               	movwf	spiTransfer@len,c
   990  003FF8  0E6E               	movlw	110
   991  003FFA  EC32  F01F         	call	_spiTransfer
   992  003FFE  0012               	return	
   993  004000                     __end_of_nrfConfig:
   994                           	opt stack 0
   995                           tblptru	equ	0xFF8
   996                           tblptrh	equ	0xFF7
   997                           tblptrl	equ	0xFF6
   998                           tablat	equ	0xFF5
   999                           postinc0	equ	0xFEE
  1000                           wreg	equ	0xFE8
  1001                           postdec1	equ	0xFE5
  1002                           fsr1l	equ	0xFE1
  1003                           indf2	equ	0xFDF
  1004                           fsr2h	equ	0xFDA
  1005                           fsr2l	equ	0xFD9
  1006                           status	equ	0xFD8
  1007                           
  1008 ;; *************** function _spiTransfer *****************
  1009 ;; Defined at:
  1010 ;;		line 389 in file "main.c"
  1011 ;; Parameters:    Size  Location     Type
  1012 ;;  wrn             1    wreg     unsigned char 
  1013 ;;  command         1    2[COMRAM] unsigned char 
  1014 ;;  len             2    3[COMRAM] int 
  1015 ;; Auto vars:     Size  Location     Type
  1016 ;;  wrn             1   13[COMRAM] unsigned char 
  1017 ;;  i               2   14[COMRAM] int 
  1018 ;; Return value:  Size  Location     Type
  1019 ;;		None               void
  1020 ;; Registers used:
  1021 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1022 ;; Tracked objects:
  1023 ;;		On entry : 0/0
  1024 ;;		On exit  : 0/0
  1025 ;;		Unchanged: 0/0
  1026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1027 ;;      Params:         3       0       0       0
  1028 ;;      Locals:         3       0       0       0
  1029 ;;      Temps:          8       0       0       0
  1030 ;;      Totals:        14       0       0       0
  1031 ;;Total ram usage:       14 bytes
  1032 ;; Hardware stack levels used:    1
  1033 ;; Hardware stack levels required when called:    1
  1034 ;; This function calls:
  1035 ;;		_setCSN
  1036 ;;		_spiTransferByte
  1037 ;; This function is called by:
  1038 ;;		_main
  1039 ;;		_nrfConfig
  1040 ;; This function uses a non-reentrant model
  1041 ;;
  1042                           
  1043                           	psect	text6
  1044  003E64                     __ptext6:
  1045                           	opt stack 0
  1046  003E64                     _spiTransfer:
  1047                           	opt stack 29
  1048                           
  1049                           ;incstack = 0
  1050                           ;spiTransfer@wrn stored from wreg
  1051  003E64  6E2F               	movwf	spiTransfer@wrn,c
  1052                           
  1053                           ;main.c: 391: setCSN(0);
  1054  003E66  0E00               	movlw	0
  1055  003E68  6E23               	movwf	setCSN@level+1,c
  1056  003E6A  0E00               	movlw	0
  1057  003E6C  6E22               	movwf	setCSN@level,c
  1058  003E6E  EC8D  F01D         	call	_setCSN	;wreg free
  1059                           
  1060                           ;main.c: 393: if (wrn == 'w') {
  1061  003E72  502F               	movf	spiTransfer@wrn,w,c
  1062  003E74  0A77               	xorlw	119
  1063  003E76  A4D8               	btfss	status,2,c
  1064  003E78  D005               	goto	l932
  1065                           
  1066                           ;main.c: 394: spiTransferByte(0x20|command);
  1067  003E7A  5024               	movf	spiTransfer@command,w,c
  1068  003E7C  0920               	iorlw	32
  1069  003E7E  EC84  F01D         	call	_spiTransferByte
  1070                           
  1071                           ;main.c: 395: } else if (wrn == 'r') {
  1072  003E82  D00F               	goto	l940
  1073  003E84                     l932:
  1074  003E84  502F               	movf	spiTransfer@wrn,w,c
  1075  003E86  0A72               	xorlw	114
  1076  003E88  A4D8               	btfss	status,2,c
  1077  003E8A  D004               	goto	l936
  1078                           
  1079                           ;main.c: 396: spiTransferByte(0x00|command);
  1080  003E8C  5024               	movf	spiTransfer@command,w,c
  1081  003E8E  EC84  F01D         	call	_spiTransferByte
  1082                           
  1083                           ;main.c: 397: } else if(wrn == 'n') {
  1084  003E92  D007               	goto	l940
  1085  003E94                     l936:
  1086  003E94  502F               	movf	spiTransfer@wrn,w,c
  1087  003E96  0A6E               	xorlw	110
  1088  003E98  A4D8               	btfss	status,2,c
  1089  003E9A  D003               	goto	l940
  1090                           
  1091                           ;main.c: 398: spiTransferByte(command);
  1092  003E9C  5024               	movf	spiTransfer@command,w,c
  1093  003E9E  EC84  F01D         	call	_spiTransferByte
  1094  003EA2                     l940:
  1095                           
  1096                           ;main.c: 399: }
  1097                           ;main.c: 401: if (len != 0) {
  1098  003EA2  5026               	movf	spiTransfer@len+1,w,c
  1099  003EA4  1025               	iorwf	spiTransfer@len,w,c
  1100  003EA6  B4D8               	btfsc	status,2,c
  1101  003EA8  D03B               	goto	l950
  1102                           
  1103                           ;main.c: 402: for (int i=1;i<=len;i++) {
  1104  003EAA  0E00               	movlw	0
  1105  003EAC  6E31               	movwf	spiTransfer@i+1,c
  1106  003EAE  0E01               	movlw	1
  1107  003EB0  6E30               	movwf	spiTransfer@i,c
  1108  003EB2  D02C               	goto	l948
  1109  003EB4                     l944:
  1110                           
  1111                           ;main.c: 403: dataBufIn[i-1] = spiTransferByte(dataBufOut[i-1]);
  1112  003EB4  0EFF               	movlw	255
  1113  003EB6  6E27               	movwf	??_spiTransfer& (0+255),c
  1114  003EB8  0EFF               	movlw	255
  1115  003EBA  6E28               	movwf	(??_spiTransfer+1)& (0+255),c
  1116  003EBC  C030  F029         	movff	spiTransfer@i,??_spiTransfer+2
  1117  003EC0  C031  F02A         	movff	spiTransfer@i+1,??_spiTransfer+3
  1118  003EC4  5027               	movf	??_spiTransfer,w,c
  1119  003EC6  2629               	addwf	??_spiTransfer+2,f,c
  1120  003EC8  5028               	movf	??_spiTransfer+1,w,c
  1121  003ECA  222A               	addwfc	??_spiTransfer+3,f,c
  1122  003ECC  0E01               	movlw	low _dataBufIn
  1123  003ECE  2429               	addwf	??_spiTransfer+2,w,c
  1124  003ED0  6ED9               	movwf	fsr2l,c
  1125  003ED2  0E00               	movlw	high _dataBufIn
  1126  003ED4  202A               	addwfc	??_spiTransfer+3,w,c
  1127  003ED6  6EDA               	movwf	fsr2h,c
  1128  003ED8  0EFF               	movlw	255
  1129  003EDA  6E2B               	movwf	(??_spiTransfer+4)& (0+255),c
  1130  003EDC  0EFF               	movlw	255
  1131  003EDE  6E2C               	movwf	(??_spiTransfer+5)& (0+255),c
  1132  003EE0  C030  F02D         	movff	spiTransfer@i,??_spiTransfer+6
  1133  003EE4  C031  F02E         	movff	spiTransfer@i+1,??_spiTransfer+7
  1134  003EE8  502B               	movf	??_spiTransfer+4,w,c
  1135  003EEA  262D               	addwf	??_spiTransfer+6,f,c
  1136  003EEC  502C               	movf	??_spiTransfer+5,w,c
  1137  003EEE  222E               	addwfc	??_spiTransfer+7,f,c
  1138  003EF0  0100               	movlb	0	; () banked
  1139  003EF2  0E60               	movlw	low _dataBufOut
  1140  003EF4  242D               	addwf	??_spiTransfer+6,w,c
  1141  003EF6  6EE1               	movwf	fsr1l,c
  1142  003EF8  0100               	movlb	0	; () banked
  1143  003EFA  0E00               	movlw	high _dataBufOut
  1144  003EFC  202E               	addwfc	??_spiTransfer+7,w,c
  1145  003EFE  6EE2               	movwf	fsr1h,c
  1146  003F00  50E7               	movf	indf1,w,c
  1147  003F02  EC84  F01D         	call	_spiTransferByte
  1148  003F06  6EDF               	movwf	indf2,c
  1149  003F08  4A30               	infsnz	spiTransfer@i,f,c
  1150  003F0A  2A31               	incf	spiTransfer@i+1,f,c
  1151  003F0C                     l948:
  1152  003F0C  5026               	movf	spiTransfer@len+1,w,c
  1153  003F0E  0A80               	xorlw	128
  1154  003F10  6E27               	movwf	??_spiTransfer& (0+255),c
  1155  003F12  5030               	movf	spiTransfer@i,w,c
  1156  003F14  5C25               	subwf	spiTransfer@len,w,c
  1157  003F16  5031               	movf	spiTransfer@i+1,w,c
  1158  003F18  0A80               	xorlw	128
  1159  003F1A  5827               	subwfb	??_spiTransfer& (0+255),w,c
  1160  003F1C  B0D8               	btfsc	status,0,c
  1161  003F1E  D7CA               	goto	l944
  1162  003F20                     l950:
  1163                           
  1164                           ;main.c: 404: }
  1165                           ;main.c: 405: }
  1166                           ;main.c: 407: setCSN(1);
  1167  003F20  0E00               	movlw	0
  1168  003F22  6E23               	movwf	setCSN@level+1,c
  1169  003F24  0E01               	movlw	1
  1170  003F26  6E22               	movwf	setCSN@level,c
  1171  003F28  EC8D  F01D         	call	_setCSN	;wreg free
  1172  003F2C  0012               	return	
  1173  003F2E                     __end_of_spiTransfer:
  1174                           	opt stack 0
  1175                           tblptru	equ	0xFF8
  1176                           tblptrh	equ	0xFF7
  1177                           tblptrl	equ	0xFF6
  1178                           tablat	equ	0xFF5
  1179                           postinc0	equ	0xFEE
  1180                           wreg	equ	0xFE8
  1181                           indf1	equ	0xFE7
  1182                           postdec1	equ	0xFE5
  1183                           fsr1h	equ	0xFE2
  1184                           fsr1l	equ	0xFE1
  1185                           indf2	equ	0xFDF
  1186                           fsr2h	equ	0xFDA
  1187                           fsr2l	equ	0xFD9
  1188                           status	equ	0xFD8
  1189                           
  1190 ;; *************** function _nrfSetTXAddr *****************
  1191 ;; Defined at:
  1192 ;;		line 343 in file "main.c"
  1193 ;; Parameters:    Size  Location     Type
  1194 ;;  addr            2    2[COMRAM] PTR unsigned char 
  1195 ;;		 -> TX_ADDRESS(4), 
  1196 ;;  len             2    4[COMRAM] int 
  1197 ;; Auto vars:     Size  Location     Type
  1198 ;;  i               2   10[COMRAM] int 
  1199 ;; Return value:  Size  Location     Type
  1200 ;;		None               void
  1201 ;; Registers used:
  1202 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1203 ;; Tracked objects:
  1204 ;;		On entry : 0/0
  1205 ;;		On exit  : 0/0
  1206 ;;		Unchanged: 0/0
  1207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1208 ;;      Params:         4       0       0       0
  1209 ;;      Locals:         2       0       0       0
  1210 ;;      Temps:          4       0       0       0
  1211 ;;      Totals:        10       0       0       0
  1212 ;;Total ram usage:       10 bytes
  1213 ;; Hardware stack levels used:    1
  1214 ;; Hardware stack levels required when called:    1
  1215 ;; This function calls:
  1216 ;;		_setCSN
  1217 ;;		_spiTransferByte
  1218 ;; This function is called by:
  1219 ;;		_nrfConfig
  1220 ;; This function uses a non-reentrant model
  1221 ;;
  1222                           
  1223                           	psect	text7
  1224  003C4A                     __ptext7:
  1225                           	opt stack 0
  1226  003C4A                     _nrfSetTXAddr:
  1227                           	opt stack 28
  1228                           
  1229                           ;main.c: 345: setCSN(0);
  1230                           
  1231                           ;incstack = 0
  1232  003C4A  0E00               	movlw	0
  1233  003C4C  6E23               	movwf	setCSN@level+1,c
  1234  003C4E  0E00               	movlw	0
  1235  003C50  6E22               	movwf	setCSN@level,c
  1236  003C52  EC8D  F01D         	call	_setCSN	;wreg free
  1237                           
  1238                           ;main.c: 347: spiTransferByte(0x20|0x10);
  1239  003C56  0E30               	movlw	48
  1240  003C58  EC84  F01D         	call	_spiTransferByte
  1241                           
  1242                           ;main.c: 349: if (len != 0) {
  1243  003C5C  5027               	movf	nrfSetTXAddr@len+1,w,c
  1244  003C5E  1026               	iorwf	nrfSetTXAddr@len,w,c
  1245  003C60  B4D8               	btfsc	status,2,c
  1246  003C62  D026               	goto	l996
  1247                           
  1248                           ;main.c: 351: for (int i=1;i<=len;i++) {
  1249  003C64  0E00               	movlw	0
  1250  003C66  6E2D               	movwf	nrfSetTXAddr@i+1,c
  1251  003C68  0E01               	movlw	1
  1252  003C6A  6E2C               	movwf	nrfSetTXAddr@i,c
  1253  003C6C  D017               	goto	l994
  1254  003C6E                     l990:
  1255                           
  1256                           ;main.c: 352: spiTransferByte(addr[i-1]);
  1257  003C6E  0EFF               	movlw	255
  1258  003C70  6E28               	movwf	??_nrfSetTXAddr& (0+255),c
  1259  003C72  0EFF               	movlw	255
  1260  003C74  6E29               	movwf	(??_nrfSetTXAddr+1)& (0+255),c
  1261  003C76  C02C  F02A         	movff	nrfSetTXAddr@i,??_nrfSetTXAddr+2
  1262  003C7A  C02D  F02B         	movff	nrfSetTXAddr@i+1,??_nrfSetTXAddr+3
  1263  003C7E  5028               	movf	??_nrfSetTXAddr,w,c
  1264  003C80  262A               	addwf	??_nrfSetTXAddr+2,f,c
  1265  003C82  5029               	movf	??_nrfSetTXAddr+1,w,c
  1266  003C84  222B               	addwfc	??_nrfSetTXAddr+3,f,c
  1267  003C86  502A               	movf	??_nrfSetTXAddr+2,w,c
  1268  003C88  2424               	addwf	nrfSetTXAddr@addr,w,c
  1269  003C8A  6ED9               	movwf	fsr2l,c
  1270  003C8C  502B               	movf	??_nrfSetTXAddr+3,w,c
  1271  003C8E  2025               	addwfc	nrfSetTXAddr@addr+1,w,c
  1272  003C90  6EDA               	movwf	fsr2h,c
  1273  003C92  50DF               	movf	indf2,w,c
  1274  003C94  EC84  F01D         	call	_spiTransferByte
  1275  003C98  4A2C               	infsnz	nrfSetTXAddr@i,f,c
  1276  003C9A  2A2D               	incf	nrfSetTXAddr@i+1,f,c
  1277  003C9C                     l994:
  1278  003C9C  5027               	movf	nrfSetTXAddr@len+1,w,c
  1279  003C9E  0A80               	xorlw	128
  1280  003CA0  6E28               	movwf	??_nrfSetTXAddr& (0+255),c
  1281  003CA2  502C               	movf	nrfSetTXAddr@i,w,c
  1282  003CA4  5C26               	subwf	nrfSetTXAddr@len,w,c
  1283  003CA6  502D               	movf	nrfSetTXAddr@i+1,w,c
  1284  003CA8  0A80               	xorlw	128
  1285  003CAA  5828               	subwfb	??_nrfSetTXAddr& (0+255),w,c
  1286  003CAC  B0D8               	btfsc	status,0,c
  1287  003CAE  D7DF               	goto	l990
  1288  003CB0                     l996:
  1289                           
  1290                           ;main.c: 353: }
  1291                           ;main.c: 354: }
  1292                           ;main.c: 356: setCSN(1);
  1293  003CB0  0E00               	movlw	0
  1294  003CB2  6E23               	movwf	setCSN@level+1,c
  1295  003CB4  0E01               	movlw	1
  1296  003CB6  6E22               	movwf	setCSN@level,c
  1297  003CB8  EC8D  F01D         	call	_setCSN	;wreg free
  1298  003CBC  0012               	return	
  1299  003CBE                     __end_of_nrfSetTXAddr:
  1300                           	opt stack 0
  1301                           tblptru	equ	0xFF8
  1302                           tblptrh	equ	0xFF7
  1303                           tblptrl	equ	0xFF6
  1304                           tablat	equ	0xFF5
  1305                           postinc0	equ	0xFEE
  1306                           wreg	equ	0xFE8
  1307                           indf1	equ	0xFE7
  1308                           postdec1	equ	0xFE5
  1309                           fsr1h	equ	0xFE2
  1310                           fsr1l	equ	0xFE1
  1311                           indf2	equ	0xFDF
  1312                           fsr2h	equ	0xFDA
  1313                           fsr2l	equ	0xFD9
  1314                           status	equ	0xFD8
  1315                           
  1316 ;; *************** function _nrfSetRXAddr *****************
  1317 ;; Defined at:
  1318 ;;		line 365 in file "main.c"
  1319 ;; Parameters:    Size  Location     Type
  1320 ;;  pipe            1    wreg     unsigned char 
  1321 ;;  addr            2    2[COMRAM] PTR unsigned char 
  1322 ;;		 -> RX_ADDRESS(4), TX_ADDRESS(4), 
  1323 ;;  len             2    4[COMRAM] int 
  1324 ;; Auto vars:     Size  Location     Type
  1325 ;;  pipe            1   10[COMRAM] unsigned char 
  1326 ;;  i               2   11[COMRAM] int 
  1327 ;; Return value:  Size  Location     Type
  1328 ;;		None               void
  1329 ;; Registers used:
  1330 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1331 ;; Tracked objects:
  1332 ;;		On entry : 0/0
  1333 ;;		On exit  : 0/0
  1334 ;;		Unchanged: 0/0
  1335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1336 ;;      Params:         4       0       0       0
  1337 ;;      Locals:         3       0       0       0
  1338 ;;      Temps:          4       0       0       0
  1339 ;;      Totals:        11       0       0       0
  1340 ;;Total ram usage:       11 bytes
  1341 ;; Hardware stack levels used:    1
  1342 ;; Hardware stack levels required when called:    1
  1343 ;; This function calls:
  1344 ;;		_setCSN
  1345 ;;		_spiTransferByte
  1346 ;; This function is called by:
  1347 ;;		_nrfConfig
  1348 ;; This function uses a non-reentrant model
  1349 ;;
  1350                           
  1351                           	psect	text8
  1352  003CBE                     __ptext8:
  1353                           	opt stack 0
  1354  003CBE                     _nrfSetRXAddr:
  1355                           	opt stack 28
  1356                           
  1357                           ;incstack = 0
  1358                           ;nrfSetRXAddr@pipe stored from wreg
  1359  003CBE  6E2C               	movwf	nrfSetRXAddr@pipe,c
  1360                           
  1361                           ;main.c: 367: setCSN(0);
  1362  003CC0  0E00               	movlw	0
  1363  003CC2  6E23               	movwf	setCSN@level+1,c
  1364  003CC4  0E00               	movlw	0
  1365  003CC6  6E22               	movwf	setCSN@level,c
  1366  003CC8  EC8D  F01D         	call	_setCSN	;wreg free
  1367                           
  1368                           ;main.c: 369: spiTransferByte(0x20|pipe);
  1369  003CCC  502C               	movf	nrfSetRXAddr@pipe,w,c
  1370  003CCE  0920               	iorlw	32
  1371  003CD0  EC84  F01D         	call	_spiTransferByte
  1372                           
  1373                           ;main.c: 371: if (len != 0) {
  1374  003CD4  5027               	movf	nrfSetRXAddr@len+1,w,c
  1375  003CD6  1026               	iorwf	nrfSetRXAddr@len,w,c
  1376  003CD8  B4D8               	btfsc	status,2,c
  1377  003CDA  D026               	goto	l980
  1378                           
  1379                           ;main.c: 373: for (int i=1;i<=len;i++) {
  1380  003CDC  0E00               	movlw	0
  1381  003CDE  6E2E               	movwf	nrfSetRXAddr@i+1,c
  1382  003CE0  0E01               	movlw	1
  1383  003CE2  6E2D               	movwf	nrfSetRXAddr@i,c
  1384  003CE4  D017               	goto	l978
  1385  003CE6                     l974:
  1386                           
  1387                           ;main.c: 374: spiTransferByte(addr[i-1]);
  1388  003CE6  0EFF               	movlw	255
  1389  003CE8  6E28               	movwf	??_nrfSetRXAddr& (0+255),c
  1390  003CEA  0EFF               	movlw	255
  1391  003CEC  6E29               	movwf	(??_nrfSetRXAddr+1)& (0+255),c
  1392  003CEE  C02D  F02A         	movff	nrfSetRXAddr@i,??_nrfSetRXAddr+2
  1393  003CF2  C02E  F02B         	movff	nrfSetRXAddr@i+1,??_nrfSetRXAddr+3
  1394  003CF6  5028               	movf	??_nrfSetRXAddr,w,c
  1395  003CF8  262A               	addwf	??_nrfSetRXAddr+2,f,c
  1396  003CFA  5029               	movf	??_nrfSetRXAddr+1,w,c
  1397  003CFC  222B               	addwfc	??_nrfSetRXAddr+3,f,c
  1398  003CFE  502A               	movf	??_nrfSetRXAddr+2,w,c
  1399  003D00  2424               	addwf	nrfSetRXAddr@addr,w,c
  1400  003D02  6ED9               	movwf	fsr2l,c
  1401  003D04  502B               	movf	??_nrfSetRXAddr+3,w,c
  1402  003D06  2025               	addwfc	nrfSetRXAddr@addr+1,w,c
  1403  003D08  6EDA               	movwf	fsr2h,c
  1404  003D0A  50DF               	movf	indf2,w,c
  1405  003D0C  EC84  F01D         	call	_spiTransferByte
  1406  003D10  4A2D               	infsnz	nrfSetRXAddr@i,f,c
  1407  003D12  2A2E               	incf	nrfSetRXAddr@i+1,f,c
  1408  003D14                     l978:
  1409  003D14  5027               	movf	nrfSetRXAddr@len+1,w,c
  1410  003D16  0A80               	xorlw	128
  1411  003D18  6E28               	movwf	??_nrfSetRXAddr& (0+255),c
  1412  003D1A  502D               	movf	nrfSetRXAddr@i,w,c
  1413  003D1C  5C26               	subwf	nrfSetRXAddr@len,w,c
  1414  003D1E  502E               	movf	nrfSetRXAddr@i+1,w,c
  1415  003D20  0A80               	xorlw	128
  1416  003D22  5828               	subwfb	??_nrfSetRXAddr& (0+255),w,c
  1417  003D24  B0D8               	btfsc	status,0,c
  1418  003D26  D7DF               	goto	l974
  1419  003D28                     l980:
  1420                           
  1421                           ;main.c: 375: }
  1422                           ;main.c: 376: }
  1423                           ;main.c: 378: setCSN(1);
  1424  003D28  0E00               	movlw	0
  1425  003D2A  6E23               	movwf	setCSN@level+1,c
  1426  003D2C  0E01               	movlw	1
  1427  003D2E  6E22               	movwf	setCSN@level,c
  1428  003D30  EC8D  F01D         	call	_setCSN	;wreg free
  1429  003D34  0012               	return	
  1430  003D36                     __end_of_nrfSetRXAddr:
  1431                           	opt stack 0
  1432                           tblptru	equ	0xFF8
  1433                           tblptrh	equ	0xFF7
  1434                           tblptrl	equ	0xFF6
  1435                           tablat	equ	0xFF5
  1436                           postinc0	equ	0xFEE
  1437                           wreg	equ	0xFE8
  1438                           indf1	equ	0xFE7
  1439                           postdec1	equ	0xFE5
  1440                           fsr1h	equ	0xFE2
  1441                           fsr1l	equ	0xFE1
  1442                           indf2	equ	0xFDF
  1443                           fsr2h	equ	0xFDA
  1444                           fsr2l	equ	0xFD9
  1445                           status	equ	0xFD8
  1446                           
  1447 ;; *************** function _nrfConfigReg *****************
  1448 ;; Defined at:
  1449 ;;		line 321 in file "main.c"
  1450 ;; Parameters:    Size  Location     Type
  1451 ;;  wr              1    wreg     unsigned char 
  1452 ;;  command         1    2[COMRAM] unsigned char 
  1453 ;;  data            1    3[COMRAM] unsigned char 
  1454 ;; Auto vars:     Size  Location     Type
  1455 ;;  wr              1    4[COMRAM] unsigned char 
  1456 ;; Return value:  Size  Location     Type
  1457 ;;                  1    wreg      unsigned char 
  1458 ;; Registers used:
  1459 ;;		wreg, status,2, status,0, cstack
  1460 ;; Tracked objects:
  1461 ;;		On entry : 0/0
  1462 ;;		On exit  : 0/0
  1463 ;;		Unchanged: 0/0
  1464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1465 ;;      Params:         2       0       0       0
  1466 ;;      Locals:         1       0       0       0
  1467 ;;      Temps:          0       0       0       0
  1468 ;;      Totals:         3       0       0       0
  1469 ;;Total ram usage:        3 bytes
  1470 ;; Hardware stack levels used:    1
  1471 ;; Hardware stack levels required when called:    1
  1472 ;; This function calls:
  1473 ;;		_setCSN
  1474 ;;		_spiTransferByte
  1475 ;; This function is called by:
  1476 ;;		_nrfConfig
  1477 ;; This function uses a non-reentrant model
  1478 ;;
  1479                           
  1480                           	psect	text9
  1481  003C00                     __ptext9:
  1482                           	opt stack 0
  1483  003C00                     _nrfConfigReg:
  1484                           	opt stack 28
  1485                           
  1486                           ;incstack = 0
  1487                           ;nrfConfigReg@wr stored from wreg
  1488  003C00  6E26               	movwf	nrfConfigReg@wr,c
  1489                           
  1490                           ;main.c: 323: setCSN(0);
  1491  003C02  0E00               	movlw	0
  1492  003C04  6E23               	movwf	setCSN@level+1,c
  1493  003C06  0E00               	movlw	0
  1494  003C08  6E22               	movwf	setCSN@level,c
  1495  003C0A  EC8D  F01D         	call	_setCSN	;wreg free
  1496                           
  1497                           ;main.c: 325: if (wr == 'w') {
  1498  003C0E  5026               	movf	nrfConfigReg@wr,w,c
  1499  003C10  0A77               	xorlw	119
  1500  003C12  A4D8               	btfss	status,2,c
  1501  003C14  D008               	goto	l960
  1502                           
  1503                           ;main.c: 326: spiTransferByte(0x20|command);
  1504  003C16  5024               	movf	nrfConfigReg@command,w,c
  1505  003C18  0920               	iorlw	32
  1506  003C1A  EC84  F01D         	call	_spiTransferByte
  1507                           
  1508                           ;main.c: 327: spiTransferByte(data);
  1509  003C1E  5025               	movf	nrfConfigReg@data,w,c
  1510  003C20  EC84  F01D         	call	_spiTransferByte
  1511                           
  1512                           ;main.c: 328: } else if (wr == 'r') {
  1513  003C24  D00B               	goto	l964
  1514  003C26                     l960:
  1515  003C26  5026               	movf	nrfConfigReg@wr,w,c
  1516  003C28  0A72               	xorlw	114
  1517  003C2A  A4D8               	btfss	status,2,c
  1518  003C2C  D007               	goto	l964
  1519                           
  1520                           ;main.c: 329: spiTransferByte(0x00|command);
  1521  003C2E  5024               	movf	nrfConfigReg@command,w,c
  1522  003C30  EC84  F01D         	call	_spiTransferByte
  1523                           
  1524                           ;main.c: 330: data = spiTransferByte(0xFF);
  1525  003C34  0EFF               	movlw	255
  1526  003C36  EC84  F01D         	call	_spiTransferByte
  1527  003C3A  6E25               	movwf	nrfConfigReg@data,c
  1528  003C3C                     l964:
  1529                           
  1530                           ;main.c: 331: }
  1531                           ;main.c: 333: setCSN(1);
  1532  003C3C  0E00               	movlw	0
  1533  003C3E  6E23               	movwf	setCSN@level+1,c
  1534  003C40  0E01               	movlw	1
  1535  003C42  6E22               	movwf	setCSN@level,c
  1536  003C44  EC8D  F01D         	call	_setCSN	;wreg free
  1537  003C48  0012               	return	
  1538  003C4A                     __end_of_nrfConfigReg:
  1539                           	opt stack 0
  1540                           tblptru	equ	0xFF8
  1541                           tblptrh	equ	0xFF7
  1542                           tblptrl	equ	0xFF6
  1543                           tablat	equ	0xFF5
  1544                           postinc0	equ	0xFEE
  1545                           wreg	equ	0xFE8
  1546                           indf1	equ	0xFE7
  1547                           postdec1	equ	0xFE5
  1548                           fsr1h	equ	0xFE2
  1549                           fsr1l	equ	0xFE1
  1550                           indf2	equ	0xFDF
  1551                           fsr2h	equ	0xFDA
  1552                           fsr2l	equ	0xFD9
  1553                           status	equ	0xFD8
  1554                           
  1555 ;; *************** function _spiTransferByte *****************
  1556 ;; Defined at:
  1557 ;;		line 413 in file "main.c"
  1558 ;; Parameters:    Size  Location     Type
  1559 ;;  data            1    wreg     unsigned char 
  1560 ;; Auto vars:     Size  Location     Type
  1561 ;;  data            1    0[COMRAM] unsigned char 
  1562 ;; Return value:  Size  Location     Type
  1563 ;;                  1    wreg      unsigned char 
  1564 ;; Registers used:
  1565 ;;		wreg, status,2, cstack
  1566 ;; Tracked objects:
  1567 ;;		On entry : 0/0
  1568 ;;		On exit  : 0/0
  1569 ;;		Unchanged: 0/0
  1570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1571 ;;      Params:         0       0       0       0
  1572 ;;      Locals:         1       0       0       0
  1573 ;;      Temps:          0       0       0       0
  1574 ;;      Totals:         1       0       0       0
  1575 ;;Total ram usage:        1 bytes
  1576 ;; Hardware stack levels used:    1
  1577 ;; This function calls:
  1578 ;;		Nothing
  1579 ;; This function is called by:
  1580 ;;		_nrfGetStatus
  1581 ;;		_nrfConfigReg
  1582 ;;		_nrfSetTXAddr
  1583 ;;		_nrfSetRXAddr
  1584 ;;		_spiTransfer
  1585 ;;		_nrfTXData
  1586 ;; This function uses a non-reentrant model
  1587 ;;
  1588                           
  1589                           	psect	text10
  1590  003B08                     __ptext10:
  1591                           	opt stack 0
  1592  003B08                     _spiTransferByte:
  1593                           	opt stack 29
  1594                           
  1595                           ;incstack = 0
  1596                           ;spiTransferByte@data stored from wreg
  1597  003B08  6E22               	movwf	spiTransferByte@data,c
  1598                           
  1599                           ;main.c: 415: SSP1BUF = data;
  1600  003B0A  C022  FFC9         	movff	spiTransferByte@data,4041	;volatile
  1601                           
  1602                           ;main.c: 417: _delay((unsigned long)((8)*(64000000/4000000.0)));
  1603  003B0E  0E2A               	movlw	42
  1604  003B10                     u367:
  1605  003B10  2EE8               	decfsz	wreg,f,c
  1606  003B12  D7FE               	goto	u367
  1607  003B14  D000               	nop2		;nop
  1608                           
  1609                           ;main.c: 419: return SSP1BUF;
  1610  003B16  50C9               	movf	4041,w,c	;volatile
  1611  003B18  0012               	return	
  1612  003B1A                     __end_of_spiTransferByte:
  1613                           	opt stack 0
  1614                           tblptru	equ	0xFF8
  1615                           tblptrh	equ	0xFF7
  1616                           tblptrl	equ	0xFF6
  1617                           tablat	equ	0xFF5
  1618                           postinc0	equ	0xFEE
  1619                           wreg	equ	0xFE8
  1620                           indf1	equ	0xFE7
  1621                           postdec1	equ	0xFE5
  1622                           fsr1h	equ	0xFE2
  1623                           fsr1l	equ	0xFE1
  1624                           indf2	equ	0xFDF
  1625                           fsr2h	equ	0xFDA
  1626                           fsr2l	equ	0xFD9
  1627                           status	equ	0xFD8
  1628                           
  1629 ;; *************** function _setCSN *****************
  1630 ;; Defined at:
  1631 ;;		line 295 in file "main.c"
  1632 ;; Parameters:    Size  Location     Type
  1633 ;;  level           2    0[COMRAM] int 
  1634 ;; Auto vars:     Size  Location     Type
  1635 ;;		None
  1636 ;; Return value:  Size  Location     Type
  1637 ;;		None               void
  1638 ;; Registers used:
  1639 ;;		wreg, status,2, status,0
  1640 ;; Tracked objects:
  1641 ;;		On entry : 0/0
  1642 ;;		On exit  : 0/0
  1643 ;;		Unchanged: 0/0
  1644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1645 ;;      Params:         2       0       0       0
  1646 ;;      Locals:         0       0       0       0
  1647 ;;      Temps:          0       0       0       0
  1648 ;;      Totals:         2       0       0       0
  1649 ;;Total ram usage:        2 bytes
  1650 ;; Hardware stack levels used:    1
  1651 ;; This function calls:
  1652 ;;		Nothing
  1653 ;; This function is called by:
  1654 ;;		_nrfGetStatus
  1655 ;;		_nrfConfigReg
  1656 ;;		_nrfSetTXAddr
  1657 ;;		_nrfSetRXAddr
  1658 ;;		_spiTransfer
  1659 ;;		_nrfTXData
  1660 ;; This function uses a non-reentrant model
  1661 ;;
  1662                           
  1663                           	psect	text11
  1664  003B1A                     __ptext11:
  1665                           	opt stack 0
  1666  003B1A                     _setCSN:
  1667                           	opt stack 29
  1668                           
  1669                           ;main.c: 297: if (level == 1) {
  1670                           
  1671                           ;incstack = 0
  1672  003B1A  0422               	decf	setCSN@level,w,c
  1673  003B1C  1023               	iorwf	setCSN@level+1,w,c
  1674  003B1E  A4D8               	btfss	status,2,c
  1675  003B20  D006               	goto	l93
  1676                           
  1677                           ;main.c: 298: _delay((unsigned long)((1)*(64000000/4000000.0)));
  1678  003B22  0E05               	movlw	5
  1679  003B24                     u377:
  1680  003B24  2EE8               	decfsz	wreg,f,c
  1681  003B26  D7FE               	goto	u377
  1682  003B28  F000               	nop	
  1683                           
  1684                           ;main.c: 299: LATAbits.LATA2 = 1;
  1685  003B2A  8489               	bsf	3977,2,c	;volatile
  1686                           
  1687                           ;main.c: 300: } else {
  1688  003B2C  0012               	return	
  1689  003B2E                     l93:
  1690                           
  1691                           ;main.c: 301: LATAbits.LATA2 = 0;
  1692  003B2E  9489               	bcf	3977,2,c	;volatile
  1693  003B30  0012               	return	
  1694  003B32                     __end_of_setCSN:
  1695                           	opt stack 0
  1696                           tblptru	equ	0xFF8
  1697                           tblptrh	equ	0xFF7
  1698                           tblptrl	equ	0xFF6
  1699                           tablat	equ	0xFF5
  1700                           postinc0	equ	0xFEE
  1701                           wreg	equ	0xFE8
  1702                           indf1	equ	0xFE7
  1703                           postdec1	equ	0xFE5
  1704                           fsr1h	equ	0xFE2
  1705                           fsr1l	equ	0xFE1
  1706                           indf2	equ	0xFDF
  1707                           fsr2h	equ	0xFDA
  1708                           fsr2l	equ	0xFD9
  1709                           status	equ	0xFD8
  1710                           
  1711 ;; *************** function _delay10ms *****************
  1712 ;; Defined at:
  1713 ;;		line 453 in file "main.c"
  1714 ;; Parameters:    Size  Location     Type
  1715 ;;  ms_multi        2    0[COMRAM] int 
  1716 ;; Auto vars:     Size  Location     Type
  1717 ;;  i               2    3[COMRAM] int 
  1718 ;; Return value:  Size  Location     Type
  1719 ;;		None               void
  1720 ;; Registers used:
  1721 ;;		wreg, status,2, status,0
  1722 ;; Tracked objects:
  1723 ;;		On entry : 0/0
  1724 ;;		On exit  : 0/0
  1725 ;;		Unchanged: 0/0
  1726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1727 ;;      Params:         2       0       0       0
  1728 ;;      Locals:         2       0       0       0
  1729 ;;      Temps:          1       0       0       0
  1730 ;;      Totals:         5       0       0       0
  1731 ;;Total ram usage:        5 bytes
  1732 ;; Hardware stack levels used:    1
  1733 ;; This function calls:
  1734 ;;		Nothing
  1735 ;; This function is called by:
  1736 ;;		_main
  1737 ;; This function uses a non-reentrant model
  1738 ;;
  1739                           
  1740                           	psect	text12
  1741  003B86                     __ptext12:
  1742                           	opt stack 0
  1743  003B86                     _delay10ms:
  1744                           	opt stack 30
  1745                           
  1746                           ;main.c: 454: int i = 0;
  1747                           
  1748                           ;incstack = 0
  1749  003B86  0E00               	movlw	0
  1750  003B88  6E26               	movwf	delay10ms@i+1,c
  1751  003B8A  0E00               	movlw	0
  1752  003B8C  6E25               	movwf	delay10ms@i,c
  1753                           
  1754                           ;main.c: 455: for (i=0;i<ms_multi;i++) {
  1755  003B8E  0E00               	movlw	0
  1756  003B90  6E26               	movwf	delay10ms@i+1,c
  1757  003B92  0E00               	movlw	0
  1758  003B94  6E25               	movwf	delay10ms@i,c
  1759  003B96  D00A               	goto	l143
  1760  003B98                     l1024:
  1761                           
  1762                           ;main.c: 456: _delay((unsigned long)((11)*(64000000/4000.0)));
  1763  003B98  0EE5               	movlw	229
  1764  003B9A  6E24               	movwf	??_delay10ms& (0+255),c
  1765  003B9C  0E91               	movlw	145
  1766  003B9E                     u387:
  1767  003B9E  2EE8               	decfsz	wreg,f,c
  1768  003BA0  D7FE               	goto	u387
  1769  003BA2  2E24               	decfsz	??_delay10ms& (0+255),f,c
  1770  003BA4  D7FC               	goto	u387
  1771  003BA6  F000               	nop	
  1772  003BA8  4A25               	infsnz	delay10ms@i,f,c
  1773  003BAA  2A26               	incf	delay10ms@i+1,f,c
  1774  003BAC                     l143:
  1775  003BAC  5026               	movf	delay10ms@i+1,w,c
  1776  003BAE  0A80               	xorlw	128
  1777  003BB0  6E24               	movwf	??_delay10ms& (0+255),c
  1778  003BB2  5022               	movf	delay10ms@ms_multi,w,c
  1779  003BB4  5C25               	subwf	delay10ms@i,w,c
  1780  003BB6  5023               	movf	delay10ms@ms_multi+1,w,c
  1781  003BB8  0A80               	xorlw	128
  1782  003BBA  5824               	subwfb	??_delay10ms& (0+255),w,c
  1783  003BBC  B0D8               	btfsc	status,0,c
  1784  003BBE  0012               	return	
  1785  003BC0  D7EB               	goto	l1024
  1786  003BC2                     __end_of_delay10ms:
  1787                           	opt stack 0
  1788  0000                     tblptru	equ	0xFF8
  1789                           tblptrh	equ	0xFF7
  1790                           tblptrl	equ	0xFF6
  1791                           tablat	equ	0xFF5
  1792                           postinc0	equ	0xFEE
  1793                           wreg	equ	0xFE8
  1794                           indf1	equ	0xFE7
  1795                           postdec1	equ	0xFE5
  1796                           fsr1h	equ	0xFE2
  1797                           fsr1l	equ	0xFE1
  1798                           indf2	equ	0xFDF
  1799                           fsr2h	equ	0xFDA
  1800                           fsr2l	equ	0xFD9
  1801                           status	equ	0xFD8
  1802                           tblptru	equ	0xFF8
  1803                           tblptrh	equ	0xFF7
  1804                           tblptrl	equ	0xFF6
  1805                           tablat	equ	0xFF5
  1806                           postinc0	equ	0xFEE
  1807                           wreg	equ	0xFE8
  1808                           indf1	equ	0xFE7
  1809                           postdec1	equ	0xFE5
  1810                           fsr1h	equ	0xFE2
  1811                           fsr1l	equ	0xFE1
  1812                           indf2	equ	0xFDF
  1813                           fsr2h	equ	0xFDA
  1814                           fsr2l	equ	0xFD9
  1815                           status	equ	0xFD8
  1816                           
  1817                           	psect	rparam
  1818  0000                     tblptru	equ	0xFF8
  1819                           tblptrh	equ	0xFF7
  1820                           tblptrl	equ	0xFF6
  1821                           tablat	equ	0xFF5
  1822                           postinc0	equ	0xFEE
  1823                           wreg	equ	0xFE8
  1824                           indf1	equ	0xFE7
  1825                           postdec1	equ	0xFE5
  1826                           fsr1h	equ	0xFE2
  1827                           fsr1l	equ	0xFE1
  1828                           indf2	equ	0xFDF
  1829                           fsr2h	equ	0xFDA
  1830                           fsr2l	equ	0xFD9
  1831                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        16
    BSS         65
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     19      68
    BANK0           160      0      32
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    nrfSetRXAddr@addr	PTR unsigned char  size(2) Largest target is 4
		 -> RX_ADDRESS(COMRAM[4]), TX_ADDRESS(COMRAM[4]), 

    nrfSetTXAddr@addr	PTR unsigned char  size(2) Largest target is 4
		 -> TX_ADDRESS(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->_spiTransfer
    _nrfTXData->_setCSN
    _nrfGetStatus->_setCSN
    _nrfConfig->_spiTransfer
    _spiTransfer->_setCSN
    _nrfSetTXAddr->_setCSN
    _nrfSetRXAddr->_setCSN
    _nrfConfigReg->_setCSN

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    7945
                                             16 COMRAM     3     3      0
                          _delay10ms
                          _nrfConfig
                       _nrfGetStatus
                          _nrfTXData
                         _portConfig
                        _spiConfig_1
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiConfig_1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _portConfig                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _nrfTXData                                            8     6      2     823
                                              2 COMRAM     8     6      2
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (1) _nrfGetStatus                                         0     0      0     680
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (1) _nrfConfig                                            0     0      0    4917
                       _nrfConfigReg
                       _nrfSetRXAddr
                       _nrfSetTXAddr
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiTransfer                                         14    11      3    1242
                                              2 COMRAM    14    11      3
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfSetTXAddr                                        10     6      4     898
                                              2 COMRAM    10     6      4
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfSetRXAddr                                        11     7      4    1026
                                              2 COMRAM    11     7      4
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfConfigReg                                         3     1      2    1751
                                              2 COMRAM     3     1      2
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _spiTransferByte                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setCSN                                               2     0      2     658
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _delay10ms                                            5     3      2     259
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay10ms
   _nrfConfig
     _nrfConfigReg
       _setCSN
       _spiTransferByte
     _nrfSetRXAddr
       _setCSN
       _spiTransferByte
     _nrfSetTXAddr
       _setCSN
       _spiTransferByte
     _spiTransfer
       _setCSN
       _spiTransferByte
   _nrfGetStatus
     _setCSN
     _spiTransferByte
   _nrfTXData
     _setCSN
     _spiTransferByte
   _portConfig
   _spiConfig_1
   _spiTransfer
     _setCSN
     _spiTransferByte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       6        0.0%
BANK2              100      0       0       7        0.0%
BITBANK1           100      0       0       9        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      20       4       20.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     13      44       1       71.6%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      64       8        0.0%
DATA                 0      0      64      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Mon Sep 29 12:11:47 2014

__size_of_spiTransferByte 0012                        l93 3B2E                _RX_ADDRESS 003D  
             __CFG_LVP$ON 000000                       l143 3BAC                       l940 3EA2  
                     l932 3E84                       l950 3F20                       l960 3C26  
                     l944 3EB4                       l936 3E94                       l964 3C3C  
                     l980 3D28                       l948 3F0C                       l974 3CE6  
                     l990 3C6E                       l978 3D14                       l994 3C9C  
                     l996 3CB0                       u357 3DB0                       u367 3B10  
                     u377 3B24                       u387 3B9E                       wreg 000FE8  
              _TX_ADDRESS 0041                      l1024 3B98                      l1040 3D8C  
                    l1042 3DA0                      l1036 3D5A                      l1064 3DDA  
                    l1074 3E00                      l1076 3E04                      l1088 3E3E  
                    _LATA 000F89                      _LATB 000F8A                      _LATC 000F8B  
      spiTransfer@command 0024                      _main 3DBA                      indf1 000FE7  
                    fsr1l 000FE1                      indf2 000FDF                      fsr2l 000FD9  
           __CFG_BORV$190 000000                      start 0000             __CFG_IESO$OFF 000000  
          nrfConfigReg@wr 0026                     ?_main 0022                     _TRISA 000F92  
                   _TRISB 000F93                     _TRISC 000F94            __CFG_FCMEN$OFF 000000  
      __CFG_MCLRE$EXTMCLR 000000                     tablat 000FF5                     status 000FD8  
          __CFG_HFOFST$ON 000000            __CFG_FOSC$HSHP 000000           __initialization 3BC2  
            __end_of_main 3E64       spiTransferByte@data 0022                    ??_main 0032  
           __activetblptr 000000         ??_spiTransferByte 0022            __CFG_PLLCFG$ON 000000  
           nrfSetRXAddr@i 002D             nrfSetTXAddr@i 002C            __CFG_WDTEN$OFF 000000  
            ?_spiConfig_1 0022            __CFG_PWRTEN$ON 000000            __CFG_XINST$OFF 000000  
          __CFG_STVREN$ON 000000                    _setCSN 3B1A                    clear_0 3BC8  
                  clear_1 3BD4               setCSN@level 0022             ?_nrfGetStatus 0022  
           ?_nrfConfigReg 0024              __pdataCOMRAM 0035              ?_spiTransfer 0024  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
              __accesstop 0060   __end_of__initialization 3BFA           __CFG_PBADEN$OFF 000000  
           ?_nrfSetRXAddr 0024             ?_nrfSetTXAddr 0024            __pcstackCOMRAM 0022  
      __size_of_delay10ms 003C            ??_nrfGetStatus 0024            _EN_RXADDR_CURR 0037  
          ??_nrfConfigReg 0026          nrfConfigReg@data 0025                _dataBufOut 0060  
              __pbssBANK0 0060            ??_nrfSetRXAddr 0028            ??_nrfSetTXAddr 0028  
      __size_of_nrfTXData 0084        __size_of_nrfConfig 00D2       nrfConfigReg@command 0024  
      __CFG_CCP2MX$PORTC1 000000        __CFG_CCP3MX$PORTB5 000000                   ?_setCSN 0022  
                 _SSP1ADD 000FC8                   _SSP1BUF 000FC9         __end_of_delay10ms 3BC2  
        nrfSetRXAddr@addr 0024          nrfSetRXAddr@pipe 002C                   __Hparam 0000  
                 __Lparam 0000      __size_of_spiConfig_1 0018           _spiTransferByte 3B08  
              delay10ms@i 0025             _RX_PW_P0_CURR 003A                   __pcinit 3BC2  
         __size_of_setCSN 0018          nrfSetTXAddr@addr 0024                   __ramtop 0300  
                 __ptext0 3DBA                   __ptext1 3B32                   __ptext2 3B4A  
                 __ptext3 3D36                   __ptext4 3B64                   __ptext5 3F2E  
                 __ptext6 3E64                   __ptext7 3C4A                   __ptext8 3CBE  
                 __ptext9 3C00         __end_of_nrfTXData 3DBA         __end_of_nrfConfig 4000  
    __size_of_spiTransfer 00CA      end_of_initialization 3BFA      __end_of_nrfGetStatus 3B86  
    __end_of_nrfConfigReg 3C4A                   postdec1 000FE5                   postinc0 000FEE  
            nrfTXData@len 0024                _portConfig 3B4A      __end_of_nrfSetRXAddr 3D36  
    __end_of_nrfSetTXAddr 3CBE   __end_of_spiTransferByte 3B1A             __pidataCOMRAM 3AF8  
          __end_of_setCSN 3B32       start_initialization 3BC2                  ??_setCSN 0024  
             ?_portConfig 0022                nrfTXData@i 002A               __pbssCOMRAM 0001  
   __size_of_nrfGetStatus 0022     __size_of_nrfConfigReg 004A                 _dataBufIn 0001  
        ?_spiTransferByte 0022                 _delay10ms 3B86               _CONFIG_CURR 0035  
           _SETUP_AW_CURR 003B     __size_of_nrfSetRXAddr 0078     __size_of_nrfSetTXAddr 0074  
         _SETUP_RETR_CURR 003C          __CFG_PRICLKEN$ON 000000              _nrfGetStatus 3B64  
            _nrfConfigReg 3C00           nrfSetRXAddr@len 0026                 _nrfSTATUS 0021  
               _nrfTXData 3D36           nrfSetTXAddr@len 0026                 _nrfConfig 3F2E  
     __size_of_portConfig 001A                  _LATAbits 000F89                ?_delay10ms 0022  
           ??_spiConfig_1 0022              _nrfSetRXAddr 3CBE              _nrfSetTXAddr 3C4A  
        __CFG_WDTPS$32768 000000             _RF_SETUP_CURR 0039         delay10ms@ms_multi 0022  
           ??_spiTransfer 0027                 main@count 0033                ?_nrfTXData 0024  
               copy_data0 3BEE                ?_nrfConfig 0022                  __Hrparam 0000  
                __Lrparam 0000        __CFG_BOREN$SBORDIS 000000         __CFG_P2BMX$PORTB5 000000  
     __end_of_spiConfig_1 3B4A                  __ptext10 3B08                  __ptext11 3B1A  
                __ptext12 3B86              _SSP1CON1bits 000FC6       __end_of_spiTransfer 3F2E  
           __size_of_main 00AA               ??_delay10ms 0024                _EN_AA_CURR 0036  
            _SSP1STATbits 000FC7              ??_portConfig 0022               ??_nrfTXData 0026  
             ??_nrfConfig 0032        __end_of_portConfig 3B64               _spiConfig_1 3B32  
          spiTransfer@len 0025            spiTransfer@wrn 002F                _RF_CH_CURR 0038  
             _spiTransfer 3E64         __CFG_T3CMX$PORTC0 000000              spiTransfer@i 0030  
