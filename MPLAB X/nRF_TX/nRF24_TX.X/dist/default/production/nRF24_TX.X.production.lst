

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Tue Sep 30 10:21:06 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F24K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    26  0000                     
    27                           	psect	idataCOMRAM
    28  003AED                     __pidataCOMRAM:
    29                           	opt stack 0
    30                           
    31                           ;initializer for _CONFIG_CURR
    32  003AED  4A                 	db	74
    33                           
    34                           ;initializer for _EN_RXADDR_CURR
    35  003AEE  01                 	db	1
    36                           
    37                           ;initializer for _RF_CH_CURR
    38  003AEF  69                 	db	105
    39                           
    40                           ;initializer for _RF_SETUP_CURR
    41  003AF0  06                 	db	6
    42                           
    43                           ;initializer for _RX_PW_P0_CURR
    44  003AF1  01                 	db	1
    45                           
    46                           ;initializer for _SETUP_AW_CURR
    47  003AF2  02                 	db	2
    48                           
    49                           ;initializer for _SETUP_RETR_CURR
    50  003AF3  20                 	db	32
    51                           
    52                           ;initializer for _RX_ADDRESS
    53  003AF4  E7                 	db	231
    54  003AF5  E7                 	db	231
    55  003AF6  E7                 	db	231
    56  003AF7  E7                 	db	231
    57                           
    58                           ;initializer for _TX_ADDRESS
    59  003AF8  C7                 	db	199
    60  003AF9  C7                 	db	199
    61  003AFA  C7                 	db	199
    62  003AFB  C7                 	db	199
    63  0000                     _LATA	set	3977
    64  0000                     _LATAbits	set	3977
    65  0000                     _LATB	set	3978
    66  0000                     _LATC	set	3979
    67  0000                     _SSP1ADD	set	4040
    68  0000                     _SSP1BUF	set	4041
    69  0000                     _SSP1CON1bits	set	4038
    70  0000                     _SSP1STATbits	set	4039
    71  0000                     _TRISA	set	3986
    72  0000                     _TRISB	set	3987
    73  0000                     _TRISC	set	3988
    74                           
    75                           ; #config settings
    76  0000                     
    77                           	psect	cinit
    78  003BB6                     __pcinit:
    79                           	opt stack 0
    80  003BB6                     start_initialization:
    81                           	opt stack 0
    82  003BB6                     __initialization:
    83                           	opt stack 0
    84                           
    85                           ; Clear objects allocated to BANK0 (32 bytes)
    86  003BB6  EE00  F060         	lfsr	0,__pbssBANK0
    87  003BBA  0E20               	movlw	32
    88  003BBC                     clear_0:
    89  003BBC  6AEE               	clrf	postinc0,c
    90  003BBE  06E8               	decf	wreg,f,c
    91  003BC0  E1FD               	bnz	clear_0
    92                           
    93                           ; Clear objects allocated to COMRAM (34 bytes)
    94  003BC2  EE00  F001         	lfsr	0,__pbssCOMRAM
    95  003BC6  0E22               	movlw	34
    96  003BC8                     clear_1:
    97  003BC8  6AEE               	clrf	postinc0,c
    98  003BCA  06E8               	decf	wreg,f,c
    99  003BCC  E1FD               	bnz	clear_1
   100                           
   101                           ; Initialize objects allocated to COMRAM (15 bytes)
   102                           ; load TBLPTR registers with __pidataCOMRAM
   103  003BCE  0EED               	movlw	low __pidataCOMRAM
   104  003BD0  6EF6               	movwf	tblptrl,c
   105  003BD2  0E3A               	movlw	high __pidataCOMRAM
   106  003BD4  6EF7               	movwf	tblptrh,c
   107  003BD6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   108  003BD8  6EF8               	movwf	tblptru,c
   109  003BDA  EE00  F035         	lfsr	0,__pdataCOMRAM
   110  003BDE  EE10 F00F          	lfsr	1,15
   111  003BE2                     copy_data0:
   112  003BE2  0009               	tblrd		*+
   113  003BE4  CFF5 FFEE          	movff	tablat,postinc0
   114  003BE8  50E5               	movf	postdec1,w,c
   115  003BEA  50E1               	movf	fsr1l,w,c
   116  003BEC  E1FA               	bnz	copy_data0
   117  003BEE                     end_of_initialization:
   118                           	opt stack 0
   119  003BEE                     __end_of__initialization:
   120                           	opt stack 0
   121  003BEE  0100               	movlb	0
   122  003BF0  EFD5  F01E         	goto	_main	;jump to C main() function
   123                           tblptru	equ	0xFF8
   124                           tblptrh	equ	0xFF7
   125                           tblptrl	equ	0xFF6
   126                           tablat	equ	0xFF5
   127                           postinc0	equ	0xFEE
   128                           wreg	equ	0xFE8
   129                           postdec1	equ	0xFE5
   130                           fsr1l	equ	0xFE1
   131                           
   132                           	psect	bssCOMRAM
   133  000001                     __pbssCOMRAM:
   134                           	opt stack 0
   135  000001                     _dataBufOut:
   136                           	opt stack 0
   137  000001                     	ds	32
   138  000021                     _EN_AA_CURR:
   139                           	opt stack 0
   140  000021                     	ds	1
   141  000022                     _nrfSTATUS:
   142                           	opt stack 0
   143  000022                     	ds	1
   144                           tblptru	equ	0xFF8
   145                           tblptrh	equ	0xFF7
   146                           tblptrl	equ	0xFF6
   147                           tablat	equ	0xFF5
   148                           postinc0	equ	0xFEE
   149                           wreg	equ	0xFE8
   150                           postdec1	equ	0xFE5
   151                           fsr1l	equ	0xFE1
   152                           
   153                           	psect	dataCOMRAM
   154  000035                     __pdataCOMRAM:
   155                           	opt stack 0
   156  000035                     _CONFIG_CURR:
   157                           	opt stack 0
   158  000035                     	ds	1
   159  000036                     _EN_RXADDR_CURR:
   160                           	opt stack 0
   161  000036                     	ds	1
   162  000037                     _RF_CH_CURR:
   163                           	opt stack 0
   164  000037                     	ds	1
   165  000038                     _RF_SETUP_CURR:
   166                           	opt stack 0
   167  000038                     	ds	1
   168  000039                     _RX_PW_P0_CURR:
   169                           	opt stack 0
   170  000039                     	ds	1
   171  00003A                     _SETUP_AW_CURR:
   172                           	opt stack 0
   173  00003A                     	ds	1
   174  00003B                     _SETUP_RETR_CURR:
   175                           	opt stack 0
   176  00003B                     	ds	1
   177  00003C                     _RX_ADDRESS:
   178                           	opt stack 0
   179  00003C                     	ds	4
   180  000040                     _TX_ADDRESS:
   181                           	opt stack 0
   182  000040                     	ds	4
   183                           tblptru	equ	0xFF8
   184                           tblptrh	equ	0xFF7
   185                           tblptrl	equ	0xFF6
   186                           tablat	equ	0xFF5
   187                           postinc0	equ	0xFEE
   188                           wreg	equ	0xFE8
   189                           postdec1	equ	0xFE5
   190                           fsr1l	equ	0xFE1
   191                           
   192                           	psect	bssBANK0
   193  000060                     __pbssBANK0:
   194                           	opt stack 0
   195  000060                     _dataBufIn:
   196                           	opt stack 0
   197  000060                     	ds	32
   198                           tblptru	equ	0xFF8
   199                           tblptrh	equ	0xFF7
   200                           tblptrl	equ	0xFF6
   201                           tablat	equ	0xFF5
   202                           postinc0	equ	0xFEE
   203                           wreg	equ	0xFE8
   204                           postdec1	equ	0xFE5
   205                           fsr1l	equ	0xFE1
   206                           
   207                           	psect	cstackCOMRAM
   208  000023                     __pcstackCOMRAM:
   209                           	opt stack 0
   210  000023                     spiTransferByte@data:
   211                           	opt stack 0
   212  000023                     setCSN@level:
   213                           	opt stack 0
   214  000023                     delay10ms@ms_multi:
   215                           	opt stack 0
   216                           
   217                           ; 2 bytes @ 0x0
   218  000023                     	ds	2
   219  000025                     ??_delay10ms:
   220  000025                     nrfConfigReg@command:
   221                           	opt stack 0
   222  000025                     spiTransfer@command:
   223                           	opt stack 0
   224  000025                     nrfSetTXAddr@addr:
   225                           	opt stack 0
   226  000025                     nrfSetRXAddr@addr:
   227                           	opt stack 0
   228  000025                     nrfTXData@len:
   229                           	opt stack 0
   230                           
   231                           ; 2 bytes @ 0x2
   232  000025                     	ds	1
   233  000026                     nrfConfigReg@data:
   234                           	opt stack 0
   235  000026                     spiTransfer@len:
   236                           	opt stack 0
   237  000026                     delay10ms@i:
   238                           	opt stack 0
   239                           
   240                           ; 2 bytes @ 0x3
   241  000026                     	ds	1
   242  000027                     ??_nrfTXData:
   243  000027                     nrfConfigReg@wr:
   244                           	opt stack 0
   245  000027                     nrfSetTXAddr@len:
   246                           	opt stack 0
   247  000027                     nrfSetRXAddr@len:
   248                           	opt stack 0
   249                           
   250                           ; 2 bytes @ 0x4
   251  000027                     	ds	1
   252  000028                     ??_spiTransfer:
   253                           
   254                           ; 0 bytes @ 0x5
   255  000028                     	ds	1
   256  000029                     ??_nrfSetRXAddr:
   257  000029                     ??_nrfSetTXAddr:
   258                           
   259                           ; 0 bytes @ 0x6
   260  000029                     	ds	2
   261  00002B                     nrfTXData@i:
   262                           	opt stack 0
   263                           
   264                           ; 2 bytes @ 0x8
   265  00002B                     	ds	2
   266  00002D                     nrfSetRXAddr@pipe:
   267                           	opt stack 0
   268  00002D                     nrfSetTXAddr@i:
   269                           	opt stack 0
   270                           
   271                           ; 2 bytes @ 0xA
   272  00002D                     	ds	1
   273  00002E                     nrfSetRXAddr@i:
   274                           	opt stack 0
   275                           
   276                           ; 2 bytes @ 0xB
   277  00002E                     	ds	2
   278  000030                     spiTransfer@wrn:
   279                           	opt stack 0
   280                           
   281                           ; 1 bytes @ 0xD
   282  000030                     	ds	1
   283  000031                     spiTransfer@i:
   284                           	opt stack 0
   285                           
   286                           ; 2 bytes @ 0xE
   287  000031                     	ds	2
   288  000033                     main@count:
   289                           	opt stack 0
   290                           
   291                           ; 2 bytes @ 0x10
   292  000033                     	ds	2
   293                           tblptru	equ	0xFF8
   294                           tblptrh	equ	0xFF7
   295                           tblptrl	equ	0xFF6
   296                           tablat	equ	0xFF5
   297                           postinc0	equ	0xFEE
   298                           wreg	equ	0xFE8
   299                           postdec1	equ	0xFE5
   300                           fsr1l	equ	0xFE1
   301                           
   302 ;;
   303 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   304 ;;
   305 ;; *************** function _main *****************
   306 ;; Defined at:
   307 ;;		line 191 in file "main.c"
   308 ;; Parameters:    Size  Location     Type
   309 ;;		None
   310 ;; Auto vars:     Size  Location     Type
   311 ;;  count           2   16[COMRAM] int 
   312 ;; Return value:  Size  Location     Type
   313 ;;		None               void
   314 ;; Registers used:
   315 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   316 ;; Tracked objects:
   317 ;;		On entry : 0/0
   318 ;;		On exit  : 0/0
   319 ;;		Unchanged: 0/0
   320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   321 ;;      Params:         0       0       0       0
   322 ;;      Locals:         2       0       0       0
   323 ;;      Temps:          0       0       0       0
   324 ;;      Totals:         2       0       0       0
   325 ;;Total ram usage:        2 bytes
   326 ;; Hardware stack levels required when called:    3
   327 ;; This function calls:
   328 ;;		_delay10ms
   329 ;;		_nrfConfig
   330 ;;		_nrfGetStatus
   331 ;;		_nrfTXData
   332 ;;		_portConfig
   333 ;;		_spiConfig_1
   334 ;;		_spiTransfer
   335 ;; This function is called by:
   336 ;;		Startup code after reset
   337 ;; This function uses a non-reentrant model
   338 ;;
   339                           
   340                           	psect	text0
   341  003DAA                     __ptext0:
   342                           	opt stack 0
   343  003DAA                     _main:
   344                           	opt stack 28
   345                           
   346                           ;main.c: 194: portConfig();
   347                           
   348                           ;incstack = 0
   349  003DAA  EC9F  F01D         	call	_portConfig	;wreg free
   350                           
   351                           ;main.c: 195: spiConfig_1();
   352  003DAE  EC93  F01D         	call	_spiConfig_1	;wreg free
   353                           
   354                           ;main.c: 196: nrfConfig();
   355  003DB2  EC8E  F01F         	call	_nrfConfig	;wreg free
   356                           
   357                           ;main.c: 198: delay10ms(1);
   358  003DB6  0E00               	movlw	0
   359  003DB8  6E24               	movwf	delay10ms@ms_multi+1,c
   360  003DBA  0E01               	movlw	1
   361  003DBC  6E23               	movwf	delay10ms@ms_multi,c
   362  003DBE  ECBD  F01D         	call	_delay10ms	;wreg free
   363                           
   364                           ;main.c: 201: int count = 1;
   365  003DC2  0E00               	movlw	0
   366  003DC4  6E34               	movwf	main@count+1,c
   367  003DC6  0E01               	movlw	1
   368  003DC8  6E33               	movwf	main@count,c
   369  003DCA                     l1049:
   370                           
   371                           ;main.c: 204: dataBufOut[0] = count;
   372  003DCA  C033  F001         	movff	main@count,_dataBufOut
   373                           
   374                           ;main.c: 205: nrfTXData(1);
   375  003DCE  0E00               	movlw	0
   376  003DD0  6E26               	movwf	nrfTXData@len+1,c
   377  003DD2  0E01               	movlw	1
   378  003DD4  6E25               	movwf	nrfTXData@len,c
   379  003DD6  EC95  F01E         	call	_nrfTXData	;wreg free
   380                           
   381                           ;main.c: 206: count++;
   382  003DDA  4A33               	infsnz	main@count,f,c
   383  003DDC  2A34               	incf	main@count+1,f,c
   384                           
   385                           ;main.c: 208: delay10ms(1);
   386  003DDE  0E00               	movlw	0
   387  003DE0  6E24               	movwf	delay10ms@ms_multi+1,c
   388  003DE2  0E01               	movlw	1
   389  003DE4  6E23               	movwf	delay10ms@ms_multi,c
   390  003DE6  ECBD  F01D         	call	_delay10ms	;wreg free
   391                           
   392                           ;main.c: 210: nrfGetStatus();
   393  003DEA  ECAC  F01D         	call	_nrfGetStatus	;wreg free
   394                           
   395                           ;main.c: 212: if (nrfSTATUS != 0x0E) {
   396  003DEE  5022               	movf	_nrfSTATUS,w,c
   397  003DF0  0A0E               	xorlw	14
   398  003DF2  B4D8               	btfsc	status,2,c
   399  003DF4  D008               	goto	l1067
   400                           
   401                           ;main.c: 213: LATAbits.LATA0 = 1;
   402  003DF6  8089               	bsf	3977,0,c	;volatile
   403                           
   404                           ;main.c: 214: delay10ms(20);
   405  003DF8  0E00               	movlw	0
   406  003DFA  6E24               	movwf	delay10ms@ms_multi+1,c
   407  003DFC  0E14               	movlw	20
   408  003DFE  6E23               	movwf	delay10ms@ms_multi,c
   409  003E00  ECBD  F01D         	call	_delay10ms	;wreg free
   410                           
   411                           ;main.c: 215: LATAbits.LATA0 = 0;
   412  003E04  9089               	bcf	3977,0,c	;volatile
   413  003E06                     l1067:
   414                           
   415                           ;main.c: 216: }
   416                           ;main.c: 218: dataBufOut[0] = 0b01110000;
   417  003E06  0E70               	movlw	112
   418  003E08  6E01               	movwf	_dataBufOut,c
   419                           
   420                           ;main.c: 219: spiTransfer('w',0x07,1);
   421  003E0A  0E07               	movlw	7
   422  003E0C  6E25               	movwf	spiTransfer@command,c
   423  003E0E  0E00               	movlw	0
   424  003E10  6E27               	movwf	spiTransfer@len+1,c
   425  003E12  0E01               	movlw	1
   426  003E14  6E26               	movwf	spiTransfer@len,c
   427  003E16  0E77               	movlw	119
   428  003E18  EC29  F01F         	call	_spiTransfer
   429                           
   430                           ;main.c: 221: spiTransfer('n',0xE1,0);
   431  003E1C  0EE1               	movlw	225
   432  003E1E  6E25               	movwf	spiTransfer@command,c
   433  003E20  0E00               	movlw	0
   434  003E22  6E27               	movwf	spiTransfer@len+1,c
   435  003E24  0E00               	movlw	0
   436  003E26  6E26               	movwf	spiTransfer@len,c
   437  003E28  0E6E               	movlw	110
   438  003E2A  EC29  F01F         	call	_spiTransfer
   439                           
   440                           ;main.c: 222: spiTransfer('n',0xE2,0);
   441  003E2E  0EE2               	movlw	226
   442  003E30  6E25               	movwf	spiTransfer@command,c
   443  003E32  0E00               	movlw	0
   444  003E34  6E27               	movwf	spiTransfer@len+1,c
   445  003E36  0E00               	movlw	0
   446  003E38  6E26               	movwf	spiTransfer@len,c
   447  003E3A  0E6E               	movlw	110
   448  003E3C  EC29  F01F         	call	_spiTransfer
   449                           
   450                           ;main.c: 224: nrfGetStatus();
   451  003E40  ECAC  F01D         	call	_nrfGetStatus	;wreg free
   452                           
   453                           ;main.c: 226: delay10ms(100);
   454  003E44  0E00               	movlw	0
   455  003E46  6E24               	movwf	delay10ms@ms_multi+1,c
   456  003E48  0E64               	movlw	100
   457  003E4A  6E23               	movwf	delay10ms@ms_multi,c
   458  003E4C  ECBD  F01D         	call	_delay10ms	;wreg free
   459                           
   460                           ;main.c: 227: }
   461  003E50  D7BC               	goto	l1049
   462  003E52                     __end_of_main:
   463                           	opt stack 0
   464                           tblptru	equ	0xFF8
   465                           tblptrh	equ	0xFF7
   466                           tblptrl	equ	0xFF6
   467                           tablat	equ	0xFF5
   468                           postinc0	equ	0xFEE
   469                           wreg	equ	0xFE8
   470                           postdec1	equ	0xFE5
   471                           fsr1l	equ	0xFE1
   472                           status	equ	0xFD8
   473                           
   474 ;; *************** function _spiConfig_1 *****************
   475 ;; Defined at:
   476 ;;		line 247 in file "main.c"
   477 ;; Parameters:    Size  Location     Type
   478 ;;		None
   479 ;; Auto vars:     Size  Location     Type
   480 ;;		None
   481 ;; Return value:  Size  Location     Type
   482 ;;		None               void
   483 ;; Registers used:
   484 ;;		wreg, status,2
   485 ;; Tracked objects:
   486 ;;		On entry : 0/0
   487 ;;		On exit  : 0/0
   488 ;;		Unchanged: 0/0
   489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   490 ;;      Params:         0       0       0       0
   491 ;;      Locals:         0       0       0       0
   492 ;;      Temps:          0       0       0       0
   493 ;;      Totals:         0       0       0       0
   494 ;;Total ram usage:        0 bytes
   495 ;; Hardware stack levels used:    1
   496 ;; This function calls:
   497 ;;		Nothing
   498 ;; This function is called by:
   499 ;;		_main
   500 ;; This function uses a non-reentrant model
   501 ;;
   502                           
   503                           	psect	text1
   504  003B26                     __ptext1:
   505                           	opt stack 0
   506  003B26                     _spiConfig_1:
   507                           	opt stack 30
   508                           
   509                           ;main.c: 248: SSP1CON1bits.CKP = 0;
   510                           
   511                           ;incstack = 0
   512  003B26  98C6               	bcf	4038,4,c	;volatile
   513                           
   514                           ;main.c: 249: SSP1STATbits.CKE = 1;
   515  003B28  8CC7               	bsf	4039,6,c	;volatile
   516                           
   517                           ;main.c: 250: SSP1STATbits.SMP = 1;
   518  003B2A  8EC7               	bsf	4039,7,c	;volatile
   519                           
   520                           ;main.c: 251: SSP1ADD = 0b00001111;
   521  003B2C  0E0F               	movlw	15
   522  003B2E  6EC8               	movwf	4040,c	;volatile
   523                           
   524                           ;main.c: 252: SSP1CON1bits.SSPM = 0b1010;
   525  003B30  50C6               	movf	4038,w,c	;volatile
   526  003B32  0BF0               	andlw	-16
   527  003B34  090A               	iorlw	10
   528  003B36  6EC6               	movwf	4038,c	;volatile
   529                           
   530                           ;main.c: 254: SSP1CON1bits.SSPEN = 1;
   531  003B38  8AC6               	bsf	4038,5,c	;volatile
   532                           
   533                           ;main.c: 255: LATAbits.LATA2 = 1;
   534  003B3A  8489               	bsf	3977,2,c	;volatile
   535  003B3C  0012               	return	
   536  003B3E                     __end_of_spiConfig_1:
   537                           	opt stack 0
   538                           tblptru	equ	0xFF8
   539                           tblptrh	equ	0xFF7
   540                           tblptrl	equ	0xFF6
   541                           tablat	equ	0xFF5
   542                           postinc0	equ	0xFEE
   543                           wreg	equ	0xFE8
   544                           postdec1	equ	0xFE5
   545                           fsr1l	equ	0xFE1
   546                           status	equ	0xFD8
   547                           
   548 ;; *************** function _portConfig *****************
   549 ;; Defined at:
   550 ;;		line 233 in file "main.c"
   551 ;; Parameters:    Size  Location     Type
   552 ;;		None
   553 ;; Auto vars:     Size  Location     Type
   554 ;;		None
   555 ;; Return value:  Size  Location     Type
   556 ;;		None               void
   557 ;; Registers used:
   558 ;;		wreg, status,2
   559 ;; Tracked objects:
   560 ;;		On entry : 0/0
   561 ;;		On exit  : 0/0
   562 ;;		Unchanged: 0/0
   563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   564 ;;      Params:         0       0       0       0
   565 ;;      Locals:         0       0       0       0
   566 ;;      Temps:          0       0       0       0
   567 ;;      Totals:         0       0       0       0
   568 ;;Total ram usage:        0 bytes
   569 ;; Hardware stack levels used:    1
   570 ;; This function calls:
   571 ;;		Nothing
   572 ;; This function is called by:
   573 ;;		_main
   574 ;; This function uses a non-reentrant model
   575 ;;
   576                           
   577                           	psect	text2
   578  003B3E                     __ptext2:
   579                           	opt stack 0
   580  003B3E                     _portConfig:
   581                           	opt stack 30
   582                           
   583                           ;main.c: 234: TRISA = 0b00001000;
   584                           
   585                           ;incstack = 0
   586  003B3E  0E08               	movlw	8
   587  003B40  6E92               	movwf	3986,c	;volatile
   588                           
   589                           ;main.c: 235: TRISB = 0b00000000;
   590  003B42  0E00               	movlw	0
   591  003B44  6E93               	movwf	3987,c	;volatile
   592                           
   593                           ;main.c: 236: TRISC = 0b00010000;
   594  003B46  0E10               	movlw	16
   595  003B48  6E94               	movwf	3988,c	;volatile
   596                           
   597                           ;main.c: 238: LATA = 0b00000100;
   598  003B4A  0E04               	movlw	4
   599  003B4C  6E89               	movwf	3977,c	;volatile
   600                           
   601                           ;main.c: 239: LATB = 0x00;
   602  003B4E  0E00               	movlw	0
   603  003B50  6E8A               	movwf	3978,c	;volatile
   604                           
   605                           ;main.c: 240: LATC = 0x00;
   606  003B52  0E00               	movlw	0
   607  003B54  6E8B               	movwf	3979,c	;volatile
   608  003B56  0012               	return	
   609  003B58                     __end_of_portConfig:
   610                           	opt stack 0
   611                           tblptru	equ	0xFF8
   612                           tblptrh	equ	0xFF7
   613                           tblptrl	equ	0xFF6
   614                           tablat	equ	0xFF5
   615                           postinc0	equ	0xFEE
   616                           wreg	equ	0xFE8
   617                           postdec1	equ	0xFE5
   618                           fsr1l	equ	0xFE1
   619                           status	equ	0xFD8
   620                           
   621 ;; *************** function _nrfTXData *****************
   622 ;; Defined at:
   623 ;;		line 429 in file "main.c"
   624 ;; Parameters:    Size  Location     Type
   625 ;;  len             2    2[COMRAM] int 
   626 ;; Auto vars:     Size  Location     Type
   627 ;;  i               2    8[COMRAM] int 
   628 ;; Return value:  Size  Location     Type
   629 ;;		None               void
   630 ;; Registers used:
   631 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   632 ;; Tracked objects:
   633 ;;		On entry : 0/0
   634 ;;		On exit  : 0/0
   635 ;;		Unchanged: 0/0
   636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   637 ;;      Params:         2       0       0       0
   638 ;;      Locals:         2       0       0       0
   639 ;;      Temps:          4       0       0       0
   640 ;;      Totals:         8       0       0       0
   641 ;;Total ram usage:        8 bytes
   642 ;; Hardware stack levels used:    1
   643 ;; Hardware stack levels required when called:    1
   644 ;; This function calls:
   645 ;;		_setCSN
   646 ;;		_spiTransferByte
   647 ;; This function is called by:
   648 ;;		_main
   649 ;; This function uses a non-reentrant model
   650 ;;
   651                           
   652                           	psect	text3
   653  003D2A                     __ptext3:
   654                           	opt stack 0
   655  003D2A                     _nrfTXData:
   656                           	opt stack 29
   657                           
   658                           ;main.c: 431: setCSN(0);
   659                           
   660                           ;incstack = 0
   661  003D2A  0E00               	movlw	0
   662  003D2C  6E24               	movwf	setCSN@level+1,c
   663  003D2E  0E00               	movlw	0
   664  003D30  6E23               	movwf	setCSN@level,c
   665  003D32  EC87  F01D         	call	_setCSN	;wreg free
   666                           
   667                           ;main.c: 433: spiTransferByte(0xA0);
   668  003D36  0EA0               	movlw	160
   669  003D38  EC7E  F01D         	call	_spiTransferByte
   670                           
   671                           ;main.c: 435: if (len != 0) {
   672  003D3C  5026               	movf	nrfTXData@len+1,w,c
   673  003D3E  1025               	iorwf	nrfTXData@len,w,c
   674  003D40  B4D8               	btfsc	status,2,c
   675  003D42  D026               	goto	l1027
   676                           
   677                           ;main.c: 436: for (int i=1;i<=len;i++) {
   678  003D44  0E00               	movlw	0
   679  003D46  6E2C               	movwf	nrfTXData@i+1,c
   680  003D48  0E01               	movlw	1
   681  003D4A  6E2B               	movwf	nrfTXData@i,c
   682  003D4C  D017               	goto	l1025
   683  003D4E                     l1021:
   684                           
   685                           ;main.c: 437: spiTransferByte(dataBufOut[i-1]);
   686  003D4E  0EFF               	movlw	255
   687  003D50  6E27               	movwf	??_nrfTXData& (0+255),c
   688  003D52  0EFF               	movlw	255
   689  003D54  6E28               	movwf	(??_nrfTXData+1)& (0+255),c
   690  003D56  C02B  F029         	movff	nrfTXData@i,??_nrfTXData+2
   691  003D5A  C02C  F02A         	movff	nrfTXData@i+1,??_nrfTXData+3
   692  003D5E  5027               	movf	??_nrfTXData,w,c
   693  003D60  2629               	addwf	??_nrfTXData+2,f,c
   694  003D62  5028               	movf	??_nrfTXData+1,w,c
   695  003D64  222A               	addwfc	??_nrfTXData+3,f,c
   696  003D66  0E01               	movlw	low _dataBufOut
   697  003D68  2429               	addwf	??_nrfTXData+2,w,c
   698  003D6A  6ED9               	movwf	fsr2l,c
   699  003D6C  0E00               	movlw	high _dataBufOut
   700  003D6E  202A               	addwfc	??_nrfTXData+3,w,c
   701  003D70  6EDA               	movwf	fsr2h,c
   702  003D72  50DF               	movf	indf2,w,c
   703  003D74  EC7E  F01D         	call	_spiTransferByte
   704  003D78  4A2B               	infsnz	nrfTXData@i,f,c
   705  003D7A  2A2C               	incf	nrfTXData@i+1,f,c
   706  003D7C                     l1025:
   707  003D7C  5026               	movf	nrfTXData@len+1,w,c
   708  003D7E  0A80               	xorlw	128
   709  003D80  6E27               	movwf	??_nrfTXData& (0+255),c
   710  003D82  502B               	movf	nrfTXData@i,w,c
   711  003D84  5C25               	subwf	nrfTXData@len,w,c
   712  003D86  502C               	movf	nrfTXData@i+1,w,c
   713  003D88  0A80               	xorlw	128
   714  003D8A  5827               	subwfb	??_nrfTXData& (0+255),w,c
   715  003D8C  B0D8               	btfsc	status,0,c
   716  003D8E  D7DF               	goto	l1021
   717  003D90                     l1027:
   718                           
   719                           ;main.c: 438: }
   720                           ;main.c: 439: }
   721                           ;main.c: 441: setCSN(1);
   722  003D90  0E00               	movlw	0
   723  003D92  6E24               	movwf	setCSN@level+1,c
   724  003D94  0E01               	movlw	1
   725  003D96  6E23               	movwf	setCSN@level,c
   726  003D98  EC87  F01D         	call	_setCSN	;wreg free
   727                           
   728                           ;main.c: 444: LATAbits.LATA1 = 1;
   729  003D9C  8289               	bsf	3977,1,c	;volatile
   730                           
   731                           ;main.c: 445: _delay((unsigned long)((11)*(64000000/4000000.0)));
   732  003D9E  0E3A               	movlw	58
   733  003DA0                     u327:
   734  003DA0  2EE8               	decfsz	wreg,f,c
   735  003DA2  D7FE               	goto	u327
   736  003DA4  D000               	nop2		;nop
   737                           
   738                           ;main.c: 446: LATAbits.LATA1 = 0;
   739  003DA6  9289               	bcf	3977,1,c	;volatile
   740  003DA8  0012               	return	
   741  003DAA                     __end_of_nrfTXData:
   742                           	opt stack 0
   743                           tblptru	equ	0xFF8
   744                           tblptrh	equ	0xFF7
   745                           tblptrl	equ	0xFF6
   746                           tablat	equ	0xFF5
   747                           postinc0	equ	0xFEE
   748                           wreg	equ	0xFE8
   749                           postdec1	equ	0xFE5
   750                           fsr1l	equ	0xFE1
   751                           indf2	equ	0xFDF
   752                           fsr2h	equ	0xFDA
   753                           fsr2l	equ	0xFD9
   754                           status	equ	0xFD8
   755                           
   756 ;; *************** function _nrfGetStatus *****************
   757 ;; Defined at:
   758 ;;		line 312 in file "main.c"
   759 ;; Parameters:    Size  Location     Type
   760 ;;		None
   761 ;; Auto vars:     Size  Location     Type
   762 ;;		None
   763 ;; Return value:  Size  Location     Type
   764 ;;		None               void
   765 ;; Registers used:
   766 ;;		wreg, status,2, status,0, cstack
   767 ;; Tracked objects:
   768 ;;		On entry : 0/0
   769 ;;		On exit  : 0/0
   770 ;;		Unchanged: 0/0
   771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   772 ;;      Params:         0       0       0       0
   773 ;;      Locals:         0       0       0       0
   774 ;;      Temps:          0       0       0       0
   775 ;;      Totals:         0       0       0       0
   776 ;;Total ram usage:        0 bytes
   777 ;; Hardware stack levels used:    1
   778 ;; Hardware stack levels required when called:    1
   779 ;; This function calls:
   780 ;;		_setCSN
   781 ;;		_spiTransferByte
   782 ;; This function is called by:
   783 ;;		_main
   784 ;; This function uses a non-reentrant model
   785 ;;
   786                           
   787                           	psect	text4
   788  003B58                     __ptext4:
   789                           	opt stack 0
   790  003B58                     _nrfGetStatus:
   791                           	opt stack 29
   792                           
   793                           ;main.c: 314: setCSN(0);
   794                           
   795                           ;incstack = 0
   796  003B58  0E00               	movlw	0
   797  003B5A  6E24               	movwf	setCSN@level+1,c
   798  003B5C  0E00               	movlw	0
   799  003B5E  6E23               	movwf	setCSN@level,c
   800  003B60  EC87  F01D         	call	_setCSN	;wreg free
   801                           
   802                           ;main.c: 316: nrfSTATUS = spiTransferByte(0xFF);
   803  003B64  0EFF               	movlw	255
   804  003B66  EC7E  F01D         	call	_spiTransferByte
   805  003B6A  6E22               	movwf	_nrfSTATUS,c
   806                           
   807                           ;main.c: 318: setCSN(1);
   808  003B6C  0E00               	movlw	0
   809  003B6E  6E24               	movwf	setCSN@level+1,c
   810  003B70  0E01               	movlw	1
   811  003B72  6E23               	movwf	setCSN@level,c
   812  003B74  EC87  F01D         	call	_setCSN	;wreg free
   813  003B78  0012               	return	
   814  003B7A                     __end_of_nrfGetStatus:
   815                           	opt stack 0
   816                           tblptru	equ	0xFF8
   817                           tblptrh	equ	0xFF7
   818                           tblptrl	equ	0xFF6
   819                           tablat	equ	0xFF5
   820                           postinc0	equ	0xFEE
   821                           wreg	equ	0xFE8
   822                           postdec1	equ	0xFE5
   823                           fsr1l	equ	0xFE1
   824                           indf2	equ	0xFDF
   825                           fsr2h	equ	0xFDA
   826                           fsr2l	equ	0xFD9
   827                           status	equ	0xFD8
   828                           
   829 ;; *************** function _nrfConfig *****************
   830 ;; Defined at:
   831 ;;		line 261 in file "main.c"
   832 ;; Parameters:    Size  Location     Type
   833 ;;		None
   834 ;; Auto vars:     Size  Location     Type
   835 ;;		None
   836 ;; Return value:  Size  Location     Type
   837 ;;		None               void
   838 ;; Registers used:
   839 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   840 ;; Tracked objects:
   841 ;;		On entry : 0/0
   842 ;;		On exit  : 0/0
   843 ;;		Unchanged: 0/0
   844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   845 ;;      Params:         0       0       0       0
   846 ;;      Locals:         0       0       0       0
   847 ;;      Temps:          0       0       0       0
   848 ;;      Totals:         0       0       0       0
   849 ;;Total ram usage:        0 bytes
   850 ;; Hardware stack levels used:    1
   851 ;; Hardware stack levels required when called:    2
   852 ;; This function calls:
   853 ;;		_nrfConfigReg
   854 ;;		_nrfSetRXAddr
   855 ;;		_nrfSetTXAddr
   856 ;;		_spiTransfer
   857 ;; This function is called by:
   858 ;;		_main
   859 ;; This function uses a non-reentrant model
   860 ;;
   861                           
   862                           	psect	text5
   863  003F1C                     __ptext5:
   864                           	opt stack 0
   865  003F1C                     _nrfConfig:
   866                           	opt stack 28
   867                           
   868                           ;main.c: 264: nrfConfigReg('w',0x00,CONFIG_CURR);
   869                           
   870                           ;incstack = 0
   871  003F1C  0E00               	movlw	0
   872  003F1E  6E25               	movwf	nrfConfigReg@command,c
   873  003F20  C035  F026         	movff	_CONFIG_CURR,nrfConfigReg@data
   874  003F24  0E77               	movlw	119
   875  003F26  ECFA  F01D         	call	_nrfConfigReg
   876                           
   877                           ;main.c: 266: nrfConfigReg('w',0x01,EN_AA_CURR);
   878  003F2A  0E01               	movlw	1
   879  003F2C  6E25               	movwf	nrfConfigReg@command,c
   880  003F2E  C021  F026         	movff	_EN_AA_CURR,nrfConfigReg@data
   881  003F32  0E77               	movlw	119
   882  003F34  ECFA  F01D         	call	_nrfConfigReg
   883                           
   884                           ;main.c: 268: nrfConfigReg('w',0x02,EN_RXADDR_CURR);
   885  003F38  0E02               	movlw	2
   886  003F3A  6E25               	movwf	nrfConfigReg@command,c
   887  003F3C  C036  F026         	movff	_EN_RXADDR_CURR,nrfConfigReg@data
   888  003F40  0E77               	movlw	119
   889  003F42  ECFA  F01D         	call	_nrfConfigReg
   890                           
   891                           ;main.c: 270: nrfConfigReg('w',0x03,SETUP_AW_CURR);
   892  003F46  0E03               	movlw	3
   893  003F48  6E25               	movwf	nrfConfigReg@command,c
   894  003F4A  C03A  F026         	movff	_SETUP_AW_CURR,nrfConfigReg@data
   895  003F4E  0E77               	movlw	119
   896  003F50  ECFA  F01D         	call	_nrfConfigReg
   897                           
   898                           ;main.c: 272: nrfConfigReg('w',0x04,SETUP_RETR_CURR);
   899  003F54  0E04               	movlw	4
   900  003F56  6E25               	movwf	nrfConfigReg@command,c
   901  003F58  C03B  F026         	movff	_SETUP_RETR_CURR,nrfConfigReg@data
   902  003F5C  0E77               	movlw	119
   903  003F5E  ECFA  F01D         	call	_nrfConfigReg
   904                           
   905                           ;main.c: 274: nrfConfigReg('w',0x05,RF_CH_CURR);
   906  003F62  0E05               	movlw	5
   907  003F64  6E25               	movwf	nrfConfigReg@command,c
   908  003F66  C037  F026         	movff	_RF_CH_CURR,nrfConfigReg@data
   909  003F6A  0E77               	movlw	119
   910  003F6C  ECFA  F01D         	call	_nrfConfigReg
   911                           
   912                           ;main.c: 276: nrfConfigReg('w',0x06,RF_SETUP_CURR);
   913  003F70  0E06               	movlw	6
   914  003F72  6E25               	movwf	nrfConfigReg@command,c
   915  003F74  C038  F026         	movff	_RF_SETUP_CURR,nrfConfigReg@data
   916  003F78  0E77               	movlw	119
   917  003F7A  ECFA  F01D         	call	_nrfConfigReg
   918                           
   919                           ;main.c: 278: nrfSetRXAddr(0x0A,TX_ADDRESS,4);
   920  003F7E  0E00               	movlw	high _TX_ADDRESS
   921  003F80  6E26               	movwf	nrfSetRXAddr@addr+1,c
   922  003F82  0E40               	movlw	low _TX_ADDRESS
   923  003F84  6E25               	movwf	nrfSetRXAddr@addr,c
   924  003F86  0E00               	movlw	0
   925  003F88  6E28               	movwf	nrfSetRXAddr@len+1,c
   926  003F8A  0E04               	movlw	4
   927  003F8C  6E27               	movwf	nrfSetRXAddr@len,c
   928  003F8E  0E0A               	movlw	10
   929  003F90  EC59  F01E         	call	_nrfSetRXAddr
   930                           
   931                           ;main.c: 280: nrfSetRXAddr(0x0B,RX_ADDRESS,4);
   932  003F94  0E00               	movlw	high _RX_ADDRESS
   933  003F96  6E26               	movwf	nrfSetRXAddr@addr+1,c
   934  003F98  0E3C               	movlw	low _RX_ADDRESS
   935  003F9A  6E25               	movwf	nrfSetRXAddr@addr,c
   936  003F9C  0E00               	movlw	0
   937  003F9E  6E28               	movwf	nrfSetRXAddr@len+1,c
   938  003FA0  0E04               	movlw	4
   939  003FA2  6E27               	movwf	nrfSetRXAddr@len,c
   940  003FA4  0E0B               	movlw	11
   941  003FA6  EC59  F01E         	call	_nrfSetRXAddr
   942                           
   943                           ;main.c: 282: nrfSetTXAddr(TX_ADDRESS,4);
   944  003FAA  0E00               	movlw	high _TX_ADDRESS
   945  003FAC  6E26               	movwf	nrfSetTXAddr@addr+1,c
   946  003FAE  0E40               	movlw	low _TX_ADDRESS
   947  003FB0  6E25               	movwf	nrfSetTXAddr@addr,c
   948  003FB2  0E00               	movlw	0
   949  003FB4  6E28               	movwf	nrfSetTXAddr@len+1,c
   950  003FB6  0E04               	movlw	4
   951  003FB8  6E27               	movwf	nrfSetTXAddr@len,c
   952  003FBA  EC1F  F01E         	call	_nrfSetTXAddr	;wreg free
   953                           
   954                           ;main.c: 284: nrfConfigReg('w',0x11,RX_PW_P0_CURR);
   955  003FBE  0E11               	movlw	17
   956  003FC0  6E25               	movwf	nrfConfigReg@command,c
   957  003FC2  C039  F026         	movff	_RX_PW_P0_CURR,nrfConfigReg@data
   958  003FC6  0E77               	movlw	119
   959  003FC8  ECFA  F01D         	call	_nrfConfigReg
   960                           
   961                           ;main.c: 286: nrfConfigReg('w',0x12,RX_PW_P0_CURR);
   962  003FCC  0E12               	movlw	18
   963  003FCE  6E25               	movwf	nrfConfigReg@command,c
   964  003FD0  C039  F026         	movff	_RX_PW_P0_CURR,nrfConfigReg@data
   965  003FD4  0E77               	movlw	119
   966  003FD6  ECFA  F01D         	call	_nrfConfigReg
   967                           
   968                           ;main.c: 290: spiTransfer('n',0xE1,0);
   969  003FDA  0EE1               	movlw	225
   970  003FDC  6E25               	movwf	spiTransfer@command,c
   971  003FDE  0E00               	movlw	0
   972  003FE0  6E27               	movwf	spiTransfer@len+1,c
   973  003FE2  0E00               	movlw	0
   974  003FE4  6E26               	movwf	spiTransfer@len,c
   975  003FE6  0E6E               	movlw	110
   976  003FE8  EC29  F01F         	call	_spiTransfer
   977                           
   978                           ;main.c: 292: spiTransfer('n',0xE2,0);
   979  003FEC  0EE2               	movlw	226
   980  003FEE  6E25               	movwf	spiTransfer@command,c
   981  003FF0  0E00               	movlw	0
   982  003FF2  6E27               	movwf	spiTransfer@len+1,c
   983  003FF4  0E00               	movlw	0
   984  003FF6  6E26               	movwf	spiTransfer@len,c
   985  003FF8  0E6E               	movlw	110
   986  003FFA  EC29  F01F         	call	_spiTransfer
   987  003FFE  0012               	return	
   988  004000                     __end_of_nrfConfig:
   989                           	opt stack 0
   990                           tblptru	equ	0xFF8
   991                           tblptrh	equ	0xFF7
   992                           tblptrl	equ	0xFF6
   993                           tablat	equ	0xFF5
   994                           postinc0	equ	0xFEE
   995                           wreg	equ	0xFE8
   996                           postdec1	equ	0xFE5
   997                           fsr1l	equ	0xFE1
   998                           indf2	equ	0xFDF
   999                           fsr2h	equ	0xFDA
  1000                           fsr2l	equ	0xFD9
  1001                           status	equ	0xFD8
  1002                           
  1003 ;; *************** function _spiTransfer *****************
  1004 ;; Defined at:
  1005 ;;		line 392 in file "main.c"
  1006 ;; Parameters:    Size  Location     Type
  1007 ;;  wrn             1    wreg     unsigned char 
  1008 ;;  command         1    2[COMRAM] unsigned char 
  1009 ;;  len             2    3[COMRAM] int 
  1010 ;; Auto vars:     Size  Location     Type
  1011 ;;  wrn             1   13[COMRAM] unsigned char 
  1012 ;;  i               2   14[COMRAM] int 
  1013 ;; Return value:  Size  Location     Type
  1014 ;;		None               void
  1015 ;; Registers used:
  1016 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1017 ;; Tracked objects:
  1018 ;;		On entry : 0/0
  1019 ;;		On exit  : 0/0
  1020 ;;		Unchanged: 0/0
  1021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1022 ;;      Params:         3       0       0       0
  1023 ;;      Locals:         3       0       0       0
  1024 ;;      Temps:          8       0       0       0
  1025 ;;      Totals:        14       0       0       0
  1026 ;;Total ram usage:       14 bytes
  1027 ;; Hardware stack levels used:    1
  1028 ;; Hardware stack levels required when called:    1
  1029 ;; This function calls:
  1030 ;;		_setCSN
  1031 ;;		_spiTransferByte
  1032 ;; This function is called by:
  1033 ;;		_main
  1034 ;;		_nrfConfig
  1035 ;; This function uses a non-reentrant model
  1036 ;;
  1037                           
  1038                           	psect	text6
  1039  003E52                     __ptext6:
  1040                           	opt stack 0
  1041  003E52                     _spiTransfer:
  1042                           	opt stack 29
  1043                           
  1044                           ;incstack = 0
  1045                           ;spiTransfer@wrn stored from wreg
  1046  003E52  6E30               	movwf	spiTransfer@wrn,c
  1047                           
  1048                           ;main.c: 394: setCSN(0);
  1049  003E54  0E00               	movlw	0
  1050  003E56  6E24               	movwf	setCSN@level+1,c
  1051  003E58  0E00               	movlw	0
  1052  003E5A  6E23               	movwf	setCSN@level,c
  1053  003E5C  EC87  F01D         	call	_setCSN	;wreg free
  1054                           
  1055                           ;main.c: 396: if (wrn == 'w') {
  1056  003E60  5030               	movf	spiTransfer@wrn,w,c
  1057  003E62  0A77               	xorlw	119
  1058  003E64  A4D8               	btfss	status,2,c
  1059  003E66  D005               	goto	l931
  1060                           
  1061                           ;main.c: 397: spiTransferByte(0x20|command);
  1062  003E68  5025               	movf	spiTransfer@command,w,c
  1063  003E6A  0920               	iorlw	32
  1064  003E6C  EC7E  F01D         	call	_spiTransferByte
  1065                           
  1066                           ;main.c: 398: } else if (wrn == 'r') {
  1067  003E70  D00F               	goto	l939
  1068  003E72                     l931:
  1069  003E72  5030               	movf	spiTransfer@wrn,w,c
  1070  003E74  0A72               	xorlw	114
  1071  003E76  A4D8               	btfss	status,2,c
  1072  003E78  D004               	goto	l935
  1073                           
  1074                           ;main.c: 399: spiTransferByte(0x00|command);
  1075  003E7A  5025               	movf	spiTransfer@command,w,c
  1076  003E7C  EC7E  F01D         	call	_spiTransferByte
  1077                           
  1078                           ;main.c: 400: } else if(wrn == 'n') {
  1079  003E80  D007               	goto	l939
  1080  003E82                     l935:
  1081  003E82  5030               	movf	spiTransfer@wrn,w,c
  1082  003E84  0A6E               	xorlw	110
  1083  003E86  A4D8               	btfss	status,2,c
  1084  003E88  D003               	goto	l939
  1085                           
  1086                           ;main.c: 401: spiTransferByte(command);
  1087  003E8A  5025               	movf	spiTransfer@command,w,c
  1088  003E8C  EC7E  F01D         	call	_spiTransferByte
  1089  003E90                     l939:
  1090                           
  1091                           ;main.c: 402: }
  1092                           ;main.c: 404: if (len != 0) {
  1093  003E90  5027               	movf	spiTransfer@len+1,w,c
  1094  003E92  1026               	iorwf	spiTransfer@len,w,c
  1095  003E94  B4D8               	btfsc	status,2,c
  1096  003E96  D03B               	goto	l949
  1097                           
  1098                           ;main.c: 405: for (int i=1;i<=len;i++) {
  1099  003E98  0E00               	movlw	0
  1100  003E9A  6E32               	movwf	spiTransfer@i+1,c
  1101  003E9C  0E01               	movlw	1
  1102  003E9E  6E31               	movwf	spiTransfer@i,c
  1103  003EA0  D02C               	goto	l947
  1104  003EA2                     l943:
  1105                           
  1106                           ;main.c: 406: dataBufIn[i-1] = spiTransferByte(dataBufOut[i-1]);
  1107  003EA2  0EFF               	movlw	255
  1108  003EA4  6E28               	movwf	??_spiTransfer& (0+255),c
  1109  003EA6  0EFF               	movlw	255
  1110  003EA8  6E29               	movwf	(??_spiTransfer+1)& (0+255),c
  1111  003EAA  C031  F02A         	movff	spiTransfer@i,??_spiTransfer+2
  1112  003EAE  C032  F02B         	movff	spiTransfer@i+1,??_spiTransfer+3
  1113  003EB2  5028               	movf	??_spiTransfer,w,c
  1114  003EB4  262A               	addwf	??_spiTransfer+2,f,c
  1115  003EB6  5029               	movf	??_spiTransfer+1,w,c
  1116  003EB8  222B               	addwfc	??_spiTransfer+3,f,c
  1117  003EBA  0100               	movlb	0	; () banked
  1118  003EBC  0E60               	movlw	low _dataBufIn
  1119  003EBE  242A               	addwf	??_spiTransfer+2,w,c
  1120  003EC0  6ED9               	movwf	fsr2l,c
  1121  003EC2  0100               	movlb	0	; () banked
  1122  003EC4  0E00               	movlw	high _dataBufIn
  1123  003EC6  202B               	addwfc	??_spiTransfer+3,w,c
  1124  003EC8  6EDA               	movwf	fsr2h,c
  1125  003ECA  0EFF               	movlw	255
  1126  003ECC  6E2C               	movwf	(??_spiTransfer+4)& (0+255),c
  1127  003ECE  0EFF               	movlw	255
  1128  003ED0  6E2D               	movwf	(??_spiTransfer+5)& (0+255),c
  1129  003ED2  C031  F02E         	movff	spiTransfer@i,??_spiTransfer+6
  1130  003ED6  C032  F02F         	movff	spiTransfer@i+1,??_spiTransfer+7
  1131  003EDA  502C               	movf	??_spiTransfer+4,w,c
  1132  003EDC  262E               	addwf	??_spiTransfer+6,f,c
  1133  003EDE  502D               	movf	??_spiTransfer+5,w,c
  1134  003EE0  222F               	addwfc	??_spiTransfer+7,f,c
  1135  003EE2  0E01               	movlw	low _dataBufOut
  1136  003EE4  242E               	addwf	??_spiTransfer+6,w,c
  1137  003EE6  6EE1               	movwf	fsr1l,c
  1138  003EE8  0E00               	movlw	high _dataBufOut
  1139  003EEA  202F               	addwfc	??_spiTransfer+7,w,c
  1140  003EEC  6EE2               	movwf	fsr1h,c
  1141  003EEE  50E7               	movf	indf1,w,c
  1142  003EF0  EC7E  F01D         	call	_spiTransferByte
  1143  003EF4  6EDF               	movwf	indf2,c
  1144  003EF6  4A31               	infsnz	spiTransfer@i,f,c
  1145  003EF8  2A32               	incf	spiTransfer@i+1,f,c
  1146  003EFA                     l947:
  1147  003EFA  5027               	movf	spiTransfer@len+1,w,c
  1148  003EFC  0A80               	xorlw	128
  1149  003EFE  6E28               	movwf	??_spiTransfer& (0+255),c
  1150  003F00  5031               	movf	spiTransfer@i,w,c
  1151  003F02  5C26               	subwf	spiTransfer@len,w,c
  1152  003F04  5032               	movf	spiTransfer@i+1,w,c
  1153  003F06  0A80               	xorlw	128
  1154  003F08  5828               	subwfb	??_spiTransfer& (0+255),w,c
  1155  003F0A  B0D8               	btfsc	status,0,c
  1156  003F0C  D7CA               	goto	l943
  1157  003F0E                     l949:
  1158                           
  1159                           ;main.c: 407: }
  1160                           ;main.c: 408: }
  1161                           ;main.c: 410: setCSN(1);
  1162  003F0E  0E00               	movlw	0
  1163  003F10  6E24               	movwf	setCSN@level+1,c
  1164  003F12  0E01               	movlw	1
  1165  003F14  6E23               	movwf	setCSN@level,c
  1166  003F16  EC87  F01D         	call	_setCSN	;wreg free
  1167  003F1A  0012               	return	
  1168  003F1C                     __end_of_spiTransfer:
  1169                           	opt stack 0
  1170                           tblptru	equ	0xFF8
  1171                           tblptrh	equ	0xFF7
  1172                           tblptrl	equ	0xFF6
  1173                           tablat	equ	0xFF5
  1174                           postinc0	equ	0xFEE
  1175                           wreg	equ	0xFE8
  1176                           indf1	equ	0xFE7
  1177                           postdec1	equ	0xFE5
  1178                           fsr1h	equ	0xFE2
  1179                           fsr1l	equ	0xFE1
  1180                           indf2	equ	0xFDF
  1181                           fsr2h	equ	0xFDA
  1182                           fsr2l	equ	0xFD9
  1183                           status	equ	0xFD8
  1184                           
  1185 ;; *************** function _nrfSetTXAddr *****************
  1186 ;; Defined at:
  1187 ;;		line 346 in file "main.c"
  1188 ;; Parameters:    Size  Location     Type
  1189 ;;  addr            2    2[COMRAM] PTR unsigned char 
  1190 ;;		 -> TX_ADDRESS(4), 
  1191 ;;  len             2    4[COMRAM] int 
  1192 ;; Auto vars:     Size  Location     Type
  1193 ;;  i               2   10[COMRAM] int 
  1194 ;; Return value:  Size  Location     Type
  1195 ;;		None               void
  1196 ;; Registers used:
  1197 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1198 ;; Tracked objects:
  1199 ;;		On entry : 0/0
  1200 ;;		On exit  : 0/0
  1201 ;;		Unchanged: 0/0
  1202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1203 ;;      Params:         4       0       0       0
  1204 ;;      Locals:         2       0       0       0
  1205 ;;      Temps:          4       0       0       0
  1206 ;;      Totals:        10       0       0       0
  1207 ;;Total ram usage:       10 bytes
  1208 ;; Hardware stack levels used:    1
  1209 ;; Hardware stack levels required when called:    1
  1210 ;; This function calls:
  1211 ;;		_setCSN
  1212 ;;		_spiTransferByte
  1213 ;; This function is called by:
  1214 ;;		_nrfConfig
  1215 ;; This function uses a non-reentrant model
  1216 ;;
  1217                           
  1218                           	psect	text7
  1219  003C3E                     __ptext7:
  1220                           	opt stack 0
  1221  003C3E                     _nrfSetTXAddr:
  1222                           	opt stack 28
  1223                           
  1224                           ;main.c: 348: setCSN(0);
  1225                           
  1226                           ;incstack = 0
  1227  003C3E  0E00               	movlw	0
  1228  003C40  6E24               	movwf	setCSN@level+1,c
  1229  003C42  0E00               	movlw	0
  1230  003C44  6E23               	movwf	setCSN@level,c
  1231  003C46  EC87  F01D         	call	_setCSN	;wreg free
  1232                           
  1233                           ;main.c: 350: spiTransferByte(0x20|0x10);
  1234  003C4A  0E30               	movlw	48
  1235  003C4C  EC7E  F01D         	call	_spiTransferByte
  1236                           
  1237                           ;main.c: 352: if (len != 0) {
  1238  003C50  5028               	movf	nrfSetTXAddr@len+1,w,c
  1239  003C52  1027               	iorwf	nrfSetTXAddr@len,w,c
  1240  003C54  B4D8               	btfsc	status,2,c
  1241  003C56  D026               	goto	l995
  1242                           
  1243                           ;main.c: 354: for (int i=1;i<=len;i++) {
  1244  003C58  0E00               	movlw	0
  1245  003C5A  6E2E               	movwf	nrfSetTXAddr@i+1,c
  1246  003C5C  0E01               	movlw	1
  1247  003C5E  6E2D               	movwf	nrfSetTXAddr@i,c
  1248  003C60  D017               	goto	l993
  1249  003C62                     l989:
  1250                           
  1251                           ;main.c: 355: spiTransferByte(addr[i-1]);
  1252  003C62  0EFF               	movlw	255
  1253  003C64  6E29               	movwf	??_nrfSetTXAddr& (0+255),c
  1254  003C66  0EFF               	movlw	255
  1255  003C68  6E2A               	movwf	(??_nrfSetTXAddr+1)& (0+255),c
  1256  003C6A  C02D  F02B         	movff	nrfSetTXAddr@i,??_nrfSetTXAddr+2
  1257  003C6E  C02E  F02C         	movff	nrfSetTXAddr@i+1,??_nrfSetTXAddr+3
  1258  003C72  5029               	movf	??_nrfSetTXAddr,w,c
  1259  003C74  262B               	addwf	??_nrfSetTXAddr+2,f,c
  1260  003C76  502A               	movf	??_nrfSetTXAddr+1,w,c
  1261  003C78  222C               	addwfc	??_nrfSetTXAddr+3,f,c
  1262  003C7A  502B               	movf	??_nrfSetTXAddr+2,w,c
  1263  003C7C  2425               	addwf	nrfSetTXAddr@addr,w,c
  1264  003C7E  6ED9               	movwf	fsr2l,c
  1265  003C80  502C               	movf	??_nrfSetTXAddr+3,w,c
  1266  003C82  2026               	addwfc	nrfSetTXAddr@addr+1,w,c
  1267  003C84  6EDA               	movwf	fsr2h,c
  1268  003C86  50DF               	movf	indf2,w,c
  1269  003C88  EC7E  F01D         	call	_spiTransferByte
  1270  003C8C  4A2D               	infsnz	nrfSetTXAddr@i,f,c
  1271  003C8E  2A2E               	incf	nrfSetTXAddr@i+1,f,c
  1272  003C90                     l993:
  1273  003C90  5028               	movf	nrfSetTXAddr@len+1,w,c
  1274  003C92  0A80               	xorlw	128
  1275  003C94  6E29               	movwf	??_nrfSetTXAddr& (0+255),c
  1276  003C96  502D               	movf	nrfSetTXAddr@i,w,c
  1277  003C98  5C27               	subwf	nrfSetTXAddr@len,w,c
  1278  003C9A  502E               	movf	nrfSetTXAddr@i+1,w,c
  1279  003C9C  0A80               	xorlw	128
  1280  003C9E  5829               	subwfb	??_nrfSetTXAddr& (0+255),w,c
  1281  003CA0  B0D8               	btfsc	status,0,c
  1282  003CA2  D7DF               	goto	l989
  1283  003CA4                     l995:
  1284                           
  1285                           ;main.c: 356: }
  1286                           ;main.c: 357: }
  1287                           ;main.c: 359: setCSN(1);
  1288  003CA4  0E00               	movlw	0
  1289  003CA6  6E24               	movwf	setCSN@level+1,c
  1290  003CA8  0E01               	movlw	1
  1291  003CAA  6E23               	movwf	setCSN@level,c
  1292  003CAC  EC87  F01D         	call	_setCSN	;wreg free
  1293  003CB0  0012               	return	
  1294  003CB2                     __end_of_nrfSetTXAddr:
  1295                           	opt stack 0
  1296                           tblptru	equ	0xFF8
  1297                           tblptrh	equ	0xFF7
  1298                           tblptrl	equ	0xFF6
  1299                           tablat	equ	0xFF5
  1300                           postinc0	equ	0xFEE
  1301                           wreg	equ	0xFE8
  1302                           indf1	equ	0xFE7
  1303                           postdec1	equ	0xFE5
  1304                           fsr1h	equ	0xFE2
  1305                           fsr1l	equ	0xFE1
  1306                           indf2	equ	0xFDF
  1307                           fsr2h	equ	0xFDA
  1308                           fsr2l	equ	0xFD9
  1309                           status	equ	0xFD8
  1310                           
  1311 ;; *************** function _nrfSetRXAddr *****************
  1312 ;; Defined at:
  1313 ;;		line 368 in file "main.c"
  1314 ;; Parameters:    Size  Location     Type
  1315 ;;  pipe            1    wreg     unsigned char 
  1316 ;;  addr            2    2[COMRAM] PTR unsigned char 
  1317 ;;		 -> RX_ADDRESS(4), TX_ADDRESS(4), 
  1318 ;;  len             2    4[COMRAM] int 
  1319 ;; Auto vars:     Size  Location     Type
  1320 ;;  pipe            1   10[COMRAM] unsigned char 
  1321 ;;  i               2   11[COMRAM] int 
  1322 ;; Return value:  Size  Location     Type
  1323 ;;		None               void
  1324 ;; Registers used:
  1325 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1326 ;; Tracked objects:
  1327 ;;		On entry : 0/0
  1328 ;;		On exit  : 0/0
  1329 ;;		Unchanged: 0/0
  1330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1331 ;;      Params:         4       0       0       0
  1332 ;;      Locals:         3       0       0       0
  1333 ;;      Temps:          4       0       0       0
  1334 ;;      Totals:        11       0       0       0
  1335 ;;Total ram usage:       11 bytes
  1336 ;; Hardware stack levels used:    1
  1337 ;; Hardware stack levels required when called:    1
  1338 ;; This function calls:
  1339 ;;		_setCSN
  1340 ;;		_spiTransferByte
  1341 ;; This function is called by:
  1342 ;;		_nrfConfig
  1343 ;; This function uses a non-reentrant model
  1344 ;;
  1345                           
  1346                           	psect	text8
  1347  003CB2                     __ptext8:
  1348                           	opt stack 0
  1349  003CB2                     _nrfSetRXAddr:
  1350                           	opt stack 28
  1351                           
  1352                           ;incstack = 0
  1353                           ;nrfSetRXAddr@pipe stored from wreg
  1354  003CB2  6E2D               	movwf	nrfSetRXAddr@pipe,c
  1355                           
  1356                           ;main.c: 370: setCSN(0);
  1357  003CB4  0E00               	movlw	0
  1358  003CB6  6E24               	movwf	setCSN@level+1,c
  1359  003CB8  0E00               	movlw	0
  1360  003CBA  6E23               	movwf	setCSN@level,c
  1361  003CBC  EC87  F01D         	call	_setCSN	;wreg free
  1362                           
  1363                           ;main.c: 372: spiTransferByte(0x20|pipe);
  1364  003CC0  502D               	movf	nrfSetRXAddr@pipe,w,c
  1365  003CC2  0920               	iorlw	32
  1366  003CC4  EC7E  F01D         	call	_spiTransferByte
  1367                           
  1368                           ;main.c: 374: if (len != 0) {
  1369  003CC8  5028               	movf	nrfSetRXAddr@len+1,w,c
  1370  003CCA  1027               	iorwf	nrfSetRXAddr@len,w,c
  1371  003CCC  B4D8               	btfsc	status,2,c
  1372  003CCE  D026               	goto	l979
  1373                           
  1374                           ;main.c: 376: for (int i=1;i<=len;i++) {
  1375  003CD0  0E00               	movlw	0
  1376  003CD2  6E2F               	movwf	nrfSetRXAddr@i+1,c
  1377  003CD4  0E01               	movlw	1
  1378  003CD6  6E2E               	movwf	nrfSetRXAddr@i,c
  1379  003CD8  D017               	goto	l977
  1380  003CDA                     l973:
  1381                           
  1382                           ;main.c: 377: spiTransferByte(addr[i-1]);
  1383  003CDA  0EFF               	movlw	255
  1384  003CDC  6E29               	movwf	??_nrfSetRXAddr& (0+255),c
  1385  003CDE  0EFF               	movlw	255
  1386  003CE0  6E2A               	movwf	(??_nrfSetRXAddr+1)& (0+255),c
  1387  003CE2  C02E  F02B         	movff	nrfSetRXAddr@i,??_nrfSetRXAddr+2
  1388  003CE6  C02F  F02C         	movff	nrfSetRXAddr@i+1,??_nrfSetRXAddr+3
  1389  003CEA  5029               	movf	??_nrfSetRXAddr,w,c
  1390  003CEC  262B               	addwf	??_nrfSetRXAddr+2,f,c
  1391  003CEE  502A               	movf	??_nrfSetRXAddr+1,w,c
  1392  003CF0  222C               	addwfc	??_nrfSetRXAddr+3,f,c
  1393  003CF2  502B               	movf	??_nrfSetRXAddr+2,w,c
  1394  003CF4  2425               	addwf	nrfSetRXAddr@addr,w,c
  1395  003CF6  6ED9               	movwf	fsr2l,c
  1396  003CF8  502C               	movf	??_nrfSetRXAddr+3,w,c
  1397  003CFA  2026               	addwfc	nrfSetRXAddr@addr+1,w,c
  1398  003CFC  6EDA               	movwf	fsr2h,c
  1399  003CFE  50DF               	movf	indf2,w,c
  1400  003D00  EC7E  F01D         	call	_spiTransferByte
  1401  003D04  4A2E               	infsnz	nrfSetRXAddr@i,f,c
  1402  003D06  2A2F               	incf	nrfSetRXAddr@i+1,f,c
  1403  003D08                     l977:
  1404  003D08  5028               	movf	nrfSetRXAddr@len+1,w,c
  1405  003D0A  0A80               	xorlw	128
  1406  003D0C  6E29               	movwf	??_nrfSetRXAddr& (0+255),c
  1407  003D0E  502E               	movf	nrfSetRXAddr@i,w,c
  1408  003D10  5C27               	subwf	nrfSetRXAddr@len,w,c
  1409  003D12  502F               	movf	nrfSetRXAddr@i+1,w,c
  1410  003D14  0A80               	xorlw	128
  1411  003D16  5829               	subwfb	??_nrfSetRXAddr& (0+255),w,c
  1412  003D18  B0D8               	btfsc	status,0,c
  1413  003D1A  D7DF               	goto	l973
  1414  003D1C                     l979:
  1415                           
  1416                           ;main.c: 378: }
  1417                           ;main.c: 379: }
  1418                           ;main.c: 381: setCSN(1);
  1419  003D1C  0E00               	movlw	0
  1420  003D1E  6E24               	movwf	setCSN@level+1,c
  1421  003D20  0E01               	movlw	1
  1422  003D22  6E23               	movwf	setCSN@level,c
  1423  003D24  EC87  F01D         	call	_setCSN	;wreg free
  1424  003D28  0012               	return	
  1425  003D2A                     __end_of_nrfSetRXAddr:
  1426                           	opt stack 0
  1427                           tblptru	equ	0xFF8
  1428                           tblptrh	equ	0xFF7
  1429                           tblptrl	equ	0xFF6
  1430                           tablat	equ	0xFF5
  1431                           postinc0	equ	0xFEE
  1432                           wreg	equ	0xFE8
  1433                           indf1	equ	0xFE7
  1434                           postdec1	equ	0xFE5
  1435                           fsr1h	equ	0xFE2
  1436                           fsr1l	equ	0xFE1
  1437                           indf2	equ	0xFDF
  1438                           fsr2h	equ	0xFDA
  1439                           fsr2l	equ	0xFD9
  1440                           status	equ	0xFD8
  1441                           
  1442 ;; *************** function _nrfConfigReg *****************
  1443 ;; Defined at:
  1444 ;;		line 324 in file "main.c"
  1445 ;; Parameters:    Size  Location     Type
  1446 ;;  wr              1    wreg     unsigned char 
  1447 ;;  command         1    2[COMRAM] unsigned char 
  1448 ;;  data            1    3[COMRAM] unsigned char 
  1449 ;; Auto vars:     Size  Location     Type
  1450 ;;  wr              1    4[COMRAM] unsigned char 
  1451 ;; Return value:  Size  Location     Type
  1452 ;;                  1    wreg      unsigned char 
  1453 ;; Registers used:
  1454 ;;		wreg, status,2, status,0, cstack
  1455 ;; Tracked objects:
  1456 ;;		On entry : 0/0
  1457 ;;		On exit  : 0/0
  1458 ;;		Unchanged: 0/0
  1459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1460 ;;      Params:         2       0       0       0
  1461 ;;      Locals:         1       0       0       0
  1462 ;;      Temps:          0       0       0       0
  1463 ;;      Totals:         3       0       0       0
  1464 ;;Total ram usage:        3 bytes
  1465 ;; Hardware stack levels used:    1
  1466 ;; Hardware stack levels required when called:    1
  1467 ;; This function calls:
  1468 ;;		_setCSN
  1469 ;;		_spiTransferByte
  1470 ;; This function is called by:
  1471 ;;		_nrfConfig
  1472 ;; This function uses a non-reentrant model
  1473 ;;
  1474                           
  1475                           	psect	text9
  1476  003BF4                     __ptext9:
  1477                           	opt stack 0
  1478  003BF4                     _nrfConfigReg:
  1479                           	opt stack 28
  1480                           
  1481                           ;incstack = 0
  1482                           ;nrfConfigReg@wr stored from wreg
  1483  003BF4  6E27               	movwf	nrfConfigReg@wr,c
  1484                           
  1485                           ;main.c: 326: setCSN(0);
  1486  003BF6  0E00               	movlw	0
  1487  003BF8  6E24               	movwf	setCSN@level+1,c
  1488  003BFA  0E00               	movlw	0
  1489  003BFC  6E23               	movwf	setCSN@level,c
  1490  003BFE  EC87  F01D         	call	_setCSN	;wreg free
  1491                           
  1492                           ;main.c: 328: if (wr == 'w') {
  1493  003C02  5027               	movf	nrfConfigReg@wr,w,c
  1494  003C04  0A77               	xorlw	119
  1495  003C06  A4D8               	btfss	status,2,c
  1496  003C08  D008               	goto	l959
  1497                           
  1498                           ;main.c: 329: spiTransferByte(0x20|command);
  1499  003C0A  5025               	movf	nrfConfigReg@command,w,c
  1500  003C0C  0920               	iorlw	32
  1501  003C0E  EC7E  F01D         	call	_spiTransferByte
  1502                           
  1503                           ;main.c: 330: spiTransferByte(data);
  1504  003C12  5026               	movf	nrfConfigReg@data,w,c
  1505  003C14  EC7E  F01D         	call	_spiTransferByte
  1506                           
  1507                           ;main.c: 331: } else if (wr == 'r') {
  1508  003C18  D00B               	goto	l963
  1509  003C1A                     l959:
  1510  003C1A  5027               	movf	nrfConfigReg@wr,w,c
  1511  003C1C  0A72               	xorlw	114
  1512  003C1E  A4D8               	btfss	status,2,c
  1513  003C20  D007               	goto	l963
  1514                           
  1515                           ;main.c: 332: spiTransferByte(0x00|command);
  1516  003C22  5025               	movf	nrfConfigReg@command,w,c
  1517  003C24  EC7E  F01D         	call	_spiTransferByte
  1518                           
  1519                           ;main.c: 333: data = spiTransferByte(0xFF);
  1520  003C28  0EFF               	movlw	255
  1521  003C2A  EC7E  F01D         	call	_spiTransferByte
  1522  003C2E  6E26               	movwf	nrfConfigReg@data,c
  1523  003C30                     l963:
  1524                           
  1525                           ;main.c: 334: }
  1526                           ;main.c: 336: setCSN(1);
  1527  003C30  0E00               	movlw	0
  1528  003C32  6E24               	movwf	setCSN@level+1,c
  1529  003C34  0E01               	movlw	1
  1530  003C36  6E23               	movwf	setCSN@level,c
  1531  003C38  EC87  F01D         	call	_setCSN	;wreg free
  1532  003C3C  0012               	return	
  1533  003C3E                     __end_of_nrfConfigReg:
  1534                           	opt stack 0
  1535                           tblptru	equ	0xFF8
  1536                           tblptrh	equ	0xFF7
  1537                           tblptrl	equ	0xFF6
  1538                           tablat	equ	0xFF5
  1539                           postinc0	equ	0xFEE
  1540                           wreg	equ	0xFE8
  1541                           indf1	equ	0xFE7
  1542                           postdec1	equ	0xFE5
  1543                           fsr1h	equ	0xFE2
  1544                           fsr1l	equ	0xFE1
  1545                           indf2	equ	0xFDF
  1546                           fsr2h	equ	0xFDA
  1547                           fsr2l	equ	0xFD9
  1548                           status	equ	0xFD8
  1549                           
  1550 ;; *************** function _spiTransferByte *****************
  1551 ;; Defined at:
  1552 ;;		line 416 in file "main.c"
  1553 ;; Parameters:    Size  Location     Type
  1554 ;;  data            1    wreg     unsigned char 
  1555 ;; Auto vars:     Size  Location     Type
  1556 ;;  data            1    0[COMRAM] unsigned char 
  1557 ;; Return value:  Size  Location     Type
  1558 ;;                  1    wreg      unsigned char 
  1559 ;; Registers used:
  1560 ;;		wreg, status,2, cstack
  1561 ;; Tracked objects:
  1562 ;;		On entry : 0/0
  1563 ;;		On exit  : 0/0
  1564 ;;		Unchanged: 0/0
  1565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1566 ;;      Params:         0       0       0       0
  1567 ;;      Locals:         1       0       0       0
  1568 ;;      Temps:          0       0       0       0
  1569 ;;      Totals:         1       0       0       0
  1570 ;;Total ram usage:        1 bytes
  1571 ;; Hardware stack levels used:    1
  1572 ;; This function calls:
  1573 ;;		Nothing
  1574 ;; This function is called by:
  1575 ;;		_nrfGetStatus
  1576 ;;		_nrfConfigReg
  1577 ;;		_nrfSetTXAddr
  1578 ;;		_nrfSetRXAddr
  1579 ;;		_spiTransfer
  1580 ;;		_nrfTXData
  1581 ;; This function uses a non-reentrant model
  1582 ;;
  1583                           
  1584                           	psect	text10
  1585  003AFC                     __ptext10:
  1586                           	opt stack 0
  1587  003AFC                     _spiTransferByte:
  1588                           	opt stack 29
  1589                           
  1590                           ;incstack = 0
  1591                           ;spiTransferByte@data stored from wreg
  1592  003AFC  6E23               	movwf	spiTransferByte@data,c
  1593                           
  1594                           ;main.c: 418: SSP1BUF = data;
  1595  003AFE  C023  FFC9         	movff	spiTransferByte@data,4041	;volatile
  1596                           
  1597                           ;main.c: 420: _delay((unsigned long)((8)*(64000000/4000000.0)));
  1598  003B02  0E2A               	movlw	42
  1599  003B04                     u337:
  1600  003B04  2EE8               	decfsz	wreg,f,c
  1601  003B06  D7FE               	goto	u337
  1602  003B08  D000               	nop2		;nop
  1603                           
  1604                           ;main.c: 422: return SSP1BUF;
  1605  003B0A  50C9               	movf	4041,w,c	;volatile
  1606  003B0C  0012               	return	
  1607  003B0E                     __end_of_spiTransferByte:
  1608                           	opt stack 0
  1609                           tblptru	equ	0xFF8
  1610                           tblptrh	equ	0xFF7
  1611                           tblptrl	equ	0xFF6
  1612                           tablat	equ	0xFF5
  1613                           postinc0	equ	0xFEE
  1614                           wreg	equ	0xFE8
  1615                           indf1	equ	0xFE7
  1616                           postdec1	equ	0xFE5
  1617                           fsr1h	equ	0xFE2
  1618                           fsr1l	equ	0xFE1
  1619                           indf2	equ	0xFDF
  1620                           fsr2h	equ	0xFDA
  1621                           fsr2l	equ	0xFD9
  1622                           status	equ	0xFD8
  1623                           
  1624 ;; *************** function _setCSN *****************
  1625 ;; Defined at:
  1626 ;;		line 298 in file "main.c"
  1627 ;; Parameters:    Size  Location     Type
  1628 ;;  level           2    0[COMRAM] int 
  1629 ;; Auto vars:     Size  Location     Type
  1630 ;;		None
  1631 ;; Return value:  Size  Location     Type
  1632 ;;		None               void
  1633 ;; Registers used:
  1634 ;;		wreg, status,2, status,0
  1635 ;; Tracked objects:
  1636 ;;		On entry : 0/0
  1637 ;;		On exit  : 0/0
  1638 ;;		Unchanged: 0/0
  1639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1640 ;;      Params:         2       0       0       0
  1641 ;;      Locals:         0       0       0       0
  1642 ;;      Temps:          0       0       0       0
  1643 ;;      Totals:         2       0       0       0
  1644 ;;Total ram usage:        2 bytes
  1645 ;; Hardware stack levels used:    1
  1646 ;; This function calls:
  1647 ;;		Nothing
  1648 ;; This function is called by:
  1649 ;;		_nrfGetStatus
  1650 ;;		_nrfConfigReg
  1651 ;;		_nrfSetTXAddr
  1652 ;;		_nrfSetRXAddr
  1653 ;;		_spiTransfer
  1654 ;;		_nrfTXData
  1655 ;; This function uses a non-reentrant model
  1656 ;;
  1657                           
  1658                           	psect	text11
  1659  003B0E                     __ptext11:
  1660                           	opt stack 0
  1661  003B0E                     _setCSN:
  1662                           	opt stack 29
  1663                           
  1664                           ;main.c: 300: if (level == 1) {
  1665                           
  1666                           ;incstack = 0
  1667  003B0E  0423               	decf	setCSN@level,w,c
  1668  003B10  1024               	iorwf	setCSN@level+1,w,c
  1669  003B12  A4D8               	btfss	status,2,c
  1670  003B14  D006               	goto	l90
  1671                           
  1672                           ;main.c: 301: _delay((unsigned long)((1)*(64000000/4000000.0)));
  1673  003B16  0E05               	movlw	5
  1674  003B18                     u347:
  1675  003B18  2EE8               	decfsz	wreg,f,c
  1676  003B1A  D7FE               	goto	u347
  1677  003B1C  F000               	nop	
  1678                           
  1679                           ;main.c: 302: LATAbits.LATA2 = 1;
  1680  003B1E  8489               	bsf	3977,2,c	;volatile
  1681                           
  1682                           ;main.c: 303: } else {
  1683  003B20  0012               	return	
  1684  003B22                     l90:
  1685                           
  1686                           ;main.c: 304: LATAbits.LATA2 = 0;
  1687  003B22  9489               	bcf	3977,2,c	;volatile
  1688  003B24  0012               	return	
  1689  003B26                     __end_of_setCSN:
  1690                           	opt stack 0
  1691                           tblptru	equ	0xFF8
  1692                           tblptrh	equ	0xFF7
  1693                           tblptrl	equ	0xFF6
  1694                           tablat	equ	0xFF5
  1695                           postinc0	equ	0xFEE
  1696                           wreg	equ	0xFE8
  1697                           indf1	equ	0xFE7
  1698                           postdec1	equ	0xFE5
  1699                           fsr1h	equ	0xFE2
  1700                           fsr1l	equ	0xFE1
  1701                           indf2	equ	0xFDF
  1702                           fsr2h	equ	0xFDA
  1703                           fsr2l	equ	0xFD9
  1704                           status	equ	0xFD8
  1705                           
  1706 ;; *************** function _delay10ms *****************
  1707 ;; Defined at:
  1708 ;;		line 456 in file "main.c"
  1709 ;; Parameters:    Size  Location     Type
  1710 ;;  ms_multi        2    0[COMRAM] int 
  1711 ;; Auto vars:     Size  Location     Type
  1712 ;;  i               2    3[COMRAM] int 
  1713 ;; Return value:  Size  Location     Type
  1714 ;;		None               void
  1715 ;; Registers used:
  1716 ;;		wreg, status,2, status,0
  1717 ;; Tracked objects:
  1718 ;;		On entry : 0/0
  1719 ;;		On exit  : 0/0
  1720 ;;		Unchanged: 0/0
  1721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1722 ;;      Params:         2       0       0       0
  1723 ;;      Locals:         2       0       0       0
  1724 ;;      Temps:          1       0       0       0
  1725 ;;      Totals:         5       0       0       0
  1726 ;;Total ram usage:        5 bytes
  1727 ;; Hardware stack levels used:    1
  1728 ;; This function calls:
  1729 ;;		Nothing
  1730 ;; This function is called by:
  1731 ;;		_main
  1732 ;; This function uses a non-reentrant model
  1733 ;;
  1734                           
  1735                           	psect	text12
  1736  003B7A                     __ptext12:
  1737                           	opt stack 0
  1738  003B7A                     _delay10ms:
  1739                           	opt stack 30
  1740                           
  1741                           ;main.c: 457: int i = 0;
  1742                           
  1743                           ;incstack = 0
  1744  003B7A  0E00               	movlw	0
  1745  003B7C  6E27               	movwf	delay10ms@i+1,c
  1746  003B7E  0E00               	movlw	0
  1747  003B80  6E26               	movwf	delay10ms@i,c
  1748                           
  1749                           ;main.c: 458: for (i=0;i<ms_multi;i++) {
  1750  003B82  0E00               	movlw	0
  1751  003B84  6E27               	movwf	delay10ms@i+1,c
  1752  003B86  0E00               	movlw	0
  1753  003B88  6E26               	movwf	delay10ms@i,c
  1754  003B8A  D00A               	goto	l140
  1755  003B8C                     l841:
  1756                           
  1757                           ;main.c: 459: _delay((unsigned long)((11)*(64000000/4000.0)));
  1758  003B8C  0EE5               	movlw	229
  1759  003B8E  6E25               	movwf	??_delay10ms& (0+255),c
  1760  003B90  0E91               	movlw	145
  1761  003B92                     u357:
  1762  003B92  2EE8               	decfsz	wreg,f,c
  1763  003B94  D7FE               	goto	u357
  1764  003B96  2E25               	decfsz	??_delay10ms& (0+255),f,c
  1765  003B98  D7FC               	goto	u357
  1766  003B9A  F000               	nop	
  1767  003B9C  4A26               	infsnz	delay10ms@i,f,c
  1768  003B9E  2A27               	incf	delay10ms@i+1,f,c
  1769  003BA0                     l140:
  1770  003BA0  5027               	movf	delay10ms@i+1,w,c
  1771  003BA2  0A80               	xorlw	128
  1772  003BA4  6E25               	movwf	??_delay10ms& (0+255),c
  1773  003BA6  5023               	movf	delay10ms@ms_multi,w,c
  1774  003BA8  5C26               	subwf	delay10ms@i,w,c
  1775  003BAA  5024               	movf	delay10ms@ms_multi+1,w,c
  1776  003BAC  0A80               	xorlw	128
  1777  003BAE  5825               	subwfb	??_delay10ms& (0+255),w,c
  1778  003BB0  B0D8               	btfsc	status,0,c
  1779  003BB2  0012               	return	
  1780  003BB4  D7EB               	goto	l841
  1781  003BB6                     __end_of_delay10ms:
  1782                           	opt stack 0
  1783  0000                     tblptru	equ	0xFF8
  1784                           tblptrh	equ	0xFF7
  1785                           tblptrl	equ	0xFF6
  1786                           tablat	equ	0xFF5
  1787                           postinc0	equ	0xFEE
  1788                           wreg	equ	0xFE8
  1789                           indf1	equ	0xFE7
  1790                           postdec1	equ	0xFE5
  1791                           fsr1h	equ	0xFE2
  1792                           fsr1l	equ	0xFE1
  1793                           indf2	equ	0xFDF
  1794                           fsr2h	equ	0xFDA
  1795                           fsr2l	equ	0xFD9
  1796                           status	equ	0xFD8
  1797                           tblptru	equ	0xFF8
  1798                           tblptrh	equ	0xFF7
  1799                           tblptrl	equ	0xFF6
  1800                           tablat	equ	0xFF5
  1801                           postinc0	equ	0xFEE
  1802                           wreg	equ	0xFE8
  1803                           indf1	equ	0xFE7
  1804                           postdec1	equ	0xFE5
  1805                           fsr1h	equ	0xFE2
  1806                           fsr1l	equ	0xFE1
  1807                           indf2	equ	0xFDF
  1808                           fsr2h	equ	0xFDA
  1809                           fsr2l	equ	0xFD9
  1810                           status	equ	0xFD8
  1811                           
  1812                           	psect	rparam
  1813  0000                     tblptru	equ	0xFF8
  1814                           tblptrh	equ	0xFF7
  1815                           tblptrl	equ	0xFF6
  1816                           tablat	equ	0xFF5
  1817                           postinc0	equ	0xFEE
  1818                           wreg	equ	0xFE8
  1819                           indf1	equ	0xFE7
  1820                           postdec1	equ	0xFE5
  1821                           fsr1h	equ	0xFE2
  1822                           fsr1l	equ	0xFE1
  1823                           indf2	equ	0xFDF
  1824                           fsr2h	equ	0xFDA
  1825                           fsr2l	equ	0xFD9
  1826                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        15
    BSS         66
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     18      67
    BANK0           160      0      32
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    nrfSetRXAddr@addr	PTR unsigned char  size(2) Largest target is 4
		 -> RX_ADDRESS(COMRAM[4]), TX_ADDRESS(COMRAM[4]), 

    nrfSetTXAddr@addr	PTR unsigned char  size(2) Largest target is 4
		 -> TX_ADDRESS(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->_spiTransfer
    _nrfTXData->_setCSN
    _nrfGetStatus->_setCSN
    _nrfConfig->_spiTransfer
    _spiTransfer->_setCSN
    _nrfSetTXAddr->_setCSN
    _nrfSetRXAddr->_setCSN
    _nrfConfigReg->_setCSN

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    8312
                                             16 COMRAM     2     2      0
                          _delay10ms
                          _nrfConfig
                       _nrfGetStatus
                          _nrfTXData
                         _portConfig
                        _spiConfig_1
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiConfig_1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _portConfig                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _nrfTXData                                            8     6      2     823
                                              2 COMRAM     8     6      2
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (1) _nrfGetStatus                                         0     0      0     680
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (1) _nrfConfig                                            0     0      0    5129
                       _nrfConfigReg
                       _nrfSetRXAddr
                       _nrfSetTXAddr
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiTransfer                                         14    11      3    1454
                                              2 COMRAM    14    11      3
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfSetTXAddr                                        10     6      4     898
                                              2 COMRAM    10     6      4
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfSetRXAddr                                        11     7      4    1026
                                              2 COMRAM    11     7      4
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfConfigReg                                         3     1      2    1751
                                              2 COMRAM     3     1      2
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _spiTransferByte                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setCSN                                               2     0      2     658
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _delay10ms                                            5     3      2     202
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay10ms
   _nrfConfig
     _nrfConfigReg
       _setCSN
       _spiTransferByte
     _nrfSetRXAddr
       _setCSN
       _spiTransferByte
     _nrfSetTXAddr
       _setCSN
       _spiTransferByte
     _spiTransfer
       _setCSN
       _spiTransferByte
   _nrfGetStatus
     _setCSN
     _spiTransferByte
   _nrfTXData
     _setCSN
     _spiTransferByte
   _portConfig
   _spiConfig_1
   _spiTransfer
     _setCSN
     _spiTransferByte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       6        0.0%
BANK2              100      0       0       7        0.0%
BITBANK1           100      0       0       9        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      20       4       20.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     12      43       1       70.5%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      63       8        0.0%
DATA                 0      0      63      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Tue Sep 30 10:21:06 2014

__size_of_spiTransferByte 0012                        l90 3B22                _RX_ADDRESS 003C  
             __CFG_LVP$ON 000000                       l140 3BA0                       l841 3B8C  
                     l931 3E72                       l943 3EA2                       l935 3E82  
                     l963 3C30                       l947 3EFA                       l939 3E90  
                     l973 3CDA                       l949 3F0E                       l959 3C1A  
                     l977 3D08                       l993 3C90                       l979 3D1C  
                     l995 3CA4                       l989 3C62                       u327 3DA0  
                     u337 3B04                       u347 3B18                       u357 3B92  
                     wreg 000FE8                _TX_ADDRESS 0040                      l1021 3D4E  
                    l1025 3D7C                      l1027 3D90                      l1049 3DCA  
                    l1067 3E06                      _LATA 000F89                      _LATB 000F8A  
                    _LATC 000F8B        spiTransfer@command 0025                      _main 3DAA  
                    indf1 000FE7                      fsr1l 000FE1                      indf2 000FDF  
                    fsr2l 000FD9             __CFG_BORV$190 000000                      start 0000  
           __CFG_IESO$OFF 000000            nrfConfigReg@wr 0027                     ?_main 0023  
                   _TRISA 000F92                     _TRISB 000F93                     _TRISC 000F94  
          __CFG_FCMEN$OFF 000000        __CFG_MCLRE$EXTMCLR 000000                     tablat 000FF5  
                   status 000FD8            __CFG_HFOFST$ON 000000            __CFG_FOSC$HSHP 000000  
         __initialization 3BB6              __end_of_main 3E52       spiTransferByte@data 0023  
                  ??_main 0033             __activetblptr 000000         ??_spiTransferByte 0023  
          __CFG_PLLCFG$ON 000000             nrfSetRXAddr@i 002E             nrfSetTXAddr@i 002D  
          __CFG_WDTEN$OFF 000000              ?_spiConfig_1 0023            __CFG_PWRTEN$ON 000000  
          __CFG_XINST$OFF 000000            __CFG_STVREN$ON 000000                    _setCSN 3B0E  
                  clear_0 3BBC                    clear_1 3BC8               setCSN@level 0023  
           ?_nrfGetStatus 0023             ?_nrfConfigReg 0025              __pdataCOMRAM 0035  
            ?_spiTransfer 0025                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8                __accesstop 0060   __end_of__initialization 3BEE  
         __CFG_PBADEN$OFF 000000             ?_nrfSetRXAddr 0025             ?_nrfSetTXAddr 0025  
          __pcstackCOMRAM 0023        __size_of_delay10ms 003C            ??_nrfGetStatus 0025  
          _EN_RXADDR_CURR 0036            ??_nrfConfigReg 0027          nrfConfigReg@data 0026  
              _dataBufOut 0001                __pbssBANK0 0060            ??_nrfSetRXAddr 0029  
          ??_nrfSetTXAddr 0029        __size_of_nrfTXData 0080        __size_of_nrfConfig 00E4  
     nrfConfigReg@command 0025        __CFG_CCP2MX$PORTC1 000000        __CFG_CCP3MX$PORTB5 000000  
                 ?_setCSN 0023                   _SSP1ADD 000FC8                   _SSP1BUF 000FC9  
       __end_of_delay10ms 3BB6          nrfSetRXAddr@addr 0025          nrfSetRXAddr@pipe 002D  
                 __Hparam 0000                   __Lparam 0000      __size_of_spiConfig_1 0018  
         _spiTransferByte 3AFC                delay10ms@i 0026             _RX_PW_P0_CURR 0039  
                 __pcinit 3BB6           __size_of_setCSN 0018          nrfSetTXAddr@addr 0025  
                 __ramtop 0300                   __ptext0 3DAA                   __ptext1 3B26  
                 __ptext2 3B3E                   __ptext3 3D2A                   __ptext4 3B58  
                 __ptext5 3F1C                   __ptext6 3E52                   __ptext7 3C3E  
                 __ptext8 3CB2                   __ptext9 3BF4         __end_of_nrfTXData 3DAA  
       __end_of_nrfConfig 4000      __size_of_spiTransfer 00CA      end_of_initialization 3BEE  
    __end_of_nrfGetStatus 3B7A      __end_of_nrfConfigReg 3C3E                   postdec1 000FE5  
                 postinc0 000FEE              nrfTXData@len 0025                _portConfig 3B3E  
    __end_of_nrfSetRXAddr 3D2A      __end_of_nrfSetTXAddr 3CB2   __end_of_spiTransferByte 3B0E  
           __pidataCOMRAM 3AED            __end_of_setCSN 3B26       start_initialization 3BB6  
                ??_setCSN 0025               ?_portConfig 0023                nrfTXData@i 002B  
             __pbssCOMRAM 0001     __size_of_nrfGetStatus 0022     __size_of_nrfConfigReg 004A  
               _dataBufIn 0060          ?_spiTransferByte 0023                 _delay10ms 3B7A  
             _CONFIG_CURR 0035             _SETUP_AW_CURR 003A     __size_of_nrfSetRXAddr 0078  
   __size_of_nrfSetTXAddr 0074           _SETUP_RETR_CURR 003B          __CFG_PRICLKEN$ON 000000  
            _nrfGetStatus 3B58              _nrfConfigReg 3BF4           nrfSetRXAddr@len 0027  
               _nrfSTATUS 0022                 _nrfTXData 3D2A           nrfSetTXAddr@len 0027  
               _nrfConfig 3F1C       __size_of_portConfig 001A                  _LATAbits 000F89  
              ?_delay10ms 0023             ??_spiConfig_1 0023              _nrfSetRXAddr 3CB2  
            _nrfSetTXAddr 3C3E          __CFG_WDTPS$32768 000000             _RF_SETUP_CURR 0038  
       delay10ms@ms_multi 0023             ??_spiTransfer 0028                 main@count 0033  
              ?_nrfTXData 0025                 copy_data0 3BE2                ?_nrfConfig 0023  
                __Hrparam 0000                  __Lrparam 0000        __CFG_BOREN$SBORDIS 000000  
       __CFG_P2BMX$PORTB5 000000       __end_of_spiConfig_1 3B3E                  __ptext10 3AFC  
                __ptext11 3B0E                  __ptext12 3B7A              _SSP1CON1bits 000FC6  
     __end_of_spiTransfer 3F1C             __size_of_main 00A8               ??_delay10ms 0025  
              _EN_AA_CURR 0021              _SSP1STATbits 000FC7              ??_portConfig 0023  
             ??_nrfTXData 0027               ??_nrfConfig 0033        __end_of_portConfig 3B58  
             _spiConfig_1 3B26            spiTransfer@len 0026            spiTransfer@wrn 0030  
              _RF_CH_CURR 0037               _spiTransfer 3E52         __CFG_T3CMX$PORTC0 000000  
            spiTransfer@i 0031  
