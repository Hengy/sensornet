

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Fri Sep 26 11:07:03 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F24K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    26  0000                     
    27                           	psect	idataCOMRAM
    28  003B1F                     __pidataCOMRAM:
    29                           	opt stack 0
    30                           
    31                           ;initializer for _CONFIG_CURR
    32  003B1F  5A                 	db	90
    33                           
    34                           ;initializer for _EN_RXADDR_CURR
    35  003B20  01                 	db	1
    36                           
    37                           ;initializer for _RF_CH_CURR
    38  003B21  69                 	db	105
    39                           
    40                           ;initializer for _RF_SETUP_CURR
    41  003B22  06                 	db	6
    42                           
    43                           ;initializer for _RX_PW_P0_CURR
    44  003B23  01                 	db	1
    45                           
    46                           ;initializer for _SETUP_AW_CURR
    47  003B24  02                 	db	2
    48                           
    49                           ;initializer for _SETUP_RETR_CURR
    50  003B25  20                 	db	32
    51                           
    52                           ;initializer for _RX_ADDRESS
    53  003B26  E7                 	db	231
    54  003B27  E7                 	db	231
    55  003B28  E7                 	db	231
    56  003B29  E7                 	db	231
    57                           
    58                           ;initializer for _TX_ADDRESS
    59  003B2A  E7                 	db	231
    60  003B2B  E7                 	db	231
    61  003B2C  E7                 	db	231
    62  003B2D  E7                 	db	231
    63  0000                     _LATA	set	3977
    64  0000                     _LATAbits	set	3977
    65  0000                     _LATB	set	3978
    66  0000                     _LATC	set	3979
    67  0000                     _SSP1ADD	set	4040
    68  0000                     _SSP1BUF	set	4041
    69  0000                     _SSP1CON1bits	set	4038
    70  0000                     _SSP1STATbits	set	4039
    71  0000                     _TRISA	set	3986
    72  0000                     _TRISB	set	3987
    73  0000                     _TRISC	set	3988
    74                           
    75                           ; #config settings
    76  0000                     
    77                           	psect	cinit
    78  003BE8                     __pcinit:
    79                           	opt stack 0
    80  003BE8                     start_initialization:
    81                           	opt stack 0
    82  003BE8                     __initialization:
    83                           	opt stack 0
    84                           
    85                           ; Clear objects allocated to BANK0 (32 bytes)
    86  003BE8  EE00  F060         	lfsr	0,__pbssBANK0
    87  003BEC  0E20               	movlw	32
    88  003BEE                     clear_0:
    89  003BEE  6AEE               	clrf	postinc0,c
    90  003BF0  06E8               	decf	wreg,f,c
    91  003BF2  E1FD               	bnz	clear_0
    92                           
    93                           ; Clear objects allocated to COMRAM (34 bytes)
    94  003BF4  EE00  F001         	lfsr	0,__pbssCOMRAM
    95  003BF8  0E22               	movlw	34
    96  003BFA                     clear_1:
    97  003BFA  6AEE               	clrf	postinc0,c
    98  003BFC  06E8               	decf	wreg,f,c
    99  003BFE  E1FD               	bnz	clear_1
   100                           
   101                           ; Initialize objects allocated to COMRAM (15 bytes)
   102                           ; load TBLPTR registers with __pidataCOMRAM
   103  003C00  0E1F               	movlw	low __pidataCOMRAM
   104  003C02  6EF6               	movwf	tblptrl,c
   105  003C04  0E3B               	movlw	high __pidataCOMRAM
   106  003C06  6EF7               	movwf	tblptrh,c
   107  003C08  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   108  003C0A  6EF8               	movwf	tblptru,c
   109  003C0C  EE00  F035         	lfsr	0,__pdataCOMRAM
   110  003C10  EE10 F00F          	lfsr	1,15
   111  003C14                     copy_data0:
   112  003C14  0009               	tblrd		*+
   113  003C16  CFF5 FFEE          	movff	tablat,postinc0
   114  003C1A  50E5               	movf	postdec1,w,c
   115  003C1C  50E1               	movf	fsr1l,w,c
   116  003C1E  E1FA               	bnz	copy_data0
   117  003C20                     end_of_initialization:
   118                           	opt stack 0
   119  003C20                     __end_of__initialization:
   120                           	opt stack 0
   121  003C20  0100               	movlb	0
   122  003C22  EF72  F01E         	goto	_main	;jump to C main() function
   123                           tblptru	equ	0xFF8
   124                           tblptrh	equ	0xFF7
   125                           tblptrl	equ	0xFF6
   126                           tablat	equ	0xFF5
   127                           postinc0	equ	0xFEE
   128                           wreg	equ	0xFE8
   129                           postdec1	equ	0xFE5
   130                           fsr1l	equ	0xFE1
   131                           
   132                           	psect	bssCOMRAM
   133  000001                     __pbssCOMRAM:
   134                           	opt stack 0
   135  000001                     _dataBufOut:
   136                           	opt stack 0
   137  000001                     	ds	32
   138  000021                     _EN_AA_CURR:
   139                           	opt stack 0
   140  000021                     	ds	1
   141  000022                     _nrfSTATUS:
   142                           	opt stack 0
   143  000022                     	ds	1
   144                           tblptru	equ	0xFF8
   145                           tblptrh	equ	0xFF7
   146                           tblptrl	equ	0xFF6
   147                           tablat	equ	0xFF5
   148                           postinc0	equ	0xFEE
   149                           wreg	equ	0xFE8
   150                           postdec1	equ	0xFE5
   151                           fsr1l	equ	0xFE1
   152                           
   153                           	psect	dataCOMRAM
   154  000035                     __pdataCOMRAM:
   155                           	opt stack 0
   156  000035                     _CONFIG_CURR:
   157                           	opt stack 0
   158  000035                     	ds	1
   159  000036                     _EN_RXADDR_CURR:
   160                           	opt stack 0
   161  000036                     	ds	1
   162  000037                     _RF_CH_CURR:
   163                           	opt stack 0
   164  000037                     	ds	1
   165  000038                     _RF_SETUP_CURR:
   166                           	opt stack 0
   167  000038                     	ds	1
   168  000039                     _RX_PW_P0_CURR:
   169                           	opt stack 0
   170  000039                     	ds	1
   171  00003A                     _SETUP_AW_CURR:
   172                           	opt stack 0
   173  00003A                     	ds	1
   174  00003B                     _SETUP_RETR_CURR:
   175                           	opt stack 0
   176  00003B                     	ds	1
   177  00003C                     _RX_ADDRESS:
   178                           	opt stack 0
   179  00003C                     	ds	4
   180  000040                     _TX_ADDRESS:
   181                           	opt stack 0
   182  000040                     	ds	4
   183                           tblptru	equ	0xFF8
   184                           tblptrh	equ	0xFF7
   185                           tblptrl	equ	0xFF6
   186                           tablat	equ	0xFF5
   187                           postinc0	equ	0xFEE
   188                           wreg	equ	0xFE8
   189                           postdec1	equ	0xFE5
   190                           fsr1l	equ	0xFE1
   191                           
   192                           	psect	bssBANK0
   193  000060                     __pbssBANK0:
   194                           	opt stack 0
   195  000060                     _dataBufIn:
   196                           	opt stack 0
   197  000060                     	ds	32
   198                           tblptru	equ	0xFF8
   199                           tblptrh	equ	0xFF7
   200                           tblptrl	equ	0xFF6
   201                           tablat	equ	0xFF5
   202                           postinc0	equ	0xFEE
   203                           wreg	equ	0xFE8
   204                           postdec1	equ	0xFE5
   205                           fsr1l	equ	0xFE1
   206                           
   207                           	psect	cstackCOMRAM
   208  000023                     __pcstackCOMRAM:
   209                           	opt stack 0
   210  000023                     spiTransferByte@data:
   211                           	opt stack 0
   212  000023                     setCSN@level:
   213                           	opt stack 0
   214  000023                     delay10ms@ms_multi:
   215                           	opt stack 0
   216                           
   217                           ; 2 bytes @ 0x0
   218  000023                     	ds	2
   219  000025                     ??_delay10ms:
   220  000025                     nrfConfigReg@command:
   221                           	opt stack 0
   222  000025                     spiTransfer@command:
   223                           	opt stack 0
   224  000025                     nrfSetTXAddr@addr:
   225                           	opt stack 0
   226  000025                     nrfSetRXAddr@addr:
   227                           	opt stack 0
   228  000025                     nrfTXData@len:
   229                           	opt stack 0
   230                           
   231                           ; 2 bytes @ 0x2
   232  000025                     	ds	1
   233  000026                     nrfConfigReg@data:
   234                           	opt stack 0
   235  000026                     spiTransfer@len:
   236                           	opt stack 0
   237  000026                     delay10ms@i:
   238                           	opt stack 0
   239                           
   240                           ; 2 bytes @ 0x3
   241  000026                     	ds	1
   242  000027                     ??_nrfTXData:
   243  000027                     nrfConfigReg@wr:
   244                           	opt stack 0
   245  000027                     nrfSetTXAddr@len:
   246                           	opt stack 0
   247  000027                     nrfSetRXAddr@len:
   248                           	opt stack 0
   249                           
   250                           ; 2 bytes @ 0x4
   251  000027                     	ds	1
   252  000028                     ??_spiTransfer:
   253                           
   254                           ; 0 bytes @ 0x5
   255  000028                     	ds	1
   256  000029                     ??_nrfSetRXAddr:
   257  000029                     ??_nrfSetTXAddr:
   258                           
   259                           ; 0 bytes @ 0x6
   260  000029                     	ds	2
   261  00002B                     nrfTXData@i_556:
   262                           	opt stack 0
   263                           
   264                           ; 2 bytes @ 0x8
   265  00002B                     	ds	2
   266  00002D                     nrfSetRXAddr@pipe:
   267                           	opt stack 0
   268  00002D                     nrfSetTXAddr@i:
   269                           	opt stack 0
   270  00002D                     nrfTXData@i:
   271                           	opt stack 0
   272                           
   273                           ; 2 bytes @ 0xA
   274  00002D                     	ds	1
   275  00002E                     nrfSetRXAddr@i:
   276                           	opt stack 0
   277                           
   278                           ; 2 bytes @ 0xB
   279  00002E                     	ds	2
   280  000030                     spiTransfer@wrn:
   281                           	opt stack 0
   282                           
   283                           ; 1 bytes @ 0xD
   284  000030                     	ds	1
   285  000031                     spiTransfer@i:
   286                           	opt stack 0
   287                           
   288                           ; 2 bytes @ 0xE
   289  000031                     	ds	2
   290  000033                     main@count:
   291                           	opt stack 0
   292                           
   293                           ; 2 bytes @ 0x10
   294  000033                     	ds	2
   295                           tblptru	equ	0xFF8
   296                           tblptrh	equ	0xFF7
   297                           tblptrl	equ	0xFF6
   298                           tablat	equ	0xFF5
   299                           postinc0	equ	0xFEE
   300                           wreg	equ	0xFE8
   301                           postdec1	equ	0xFE5
   302                           fsr1l	equ	0xFE1
   303                           
   304 ;;
   305 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   306 ;;
   307 ;; *************** function _main *****************
   308 ;; Defined at:
   309 ;;		line 187 in file "main.c"
   310 ;; Parameters:    Size  Location     Type
   311 ;;		None
   312 ;; Auto vars:     Size  Location     Type
   313 ;;  count           2   16[COMRAM] int 
   314 ;; Return value:  Size  Location     Type
   315 ;;		None               void
   316 ;; Registers used:
   317 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   318 ;; Tracked objects:
   319 ;;		On entry : 0/0
   320 ;;		On exit  : 0/0
   321 ;;		Unchanged: 0/0
   322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   323 ;;      Params:         0       0       0       0
   324 ;;      Locals:         2       0       0       0
   325 ;;      Temps:          0       0       0       0
   326 ;;      Totals:         2       0       0       0
   327 ;;Total ram usage:        2 bytes
   328 ;; Hardware stack levels required when called:    3
   329 ;; This function calls:
   330 ;;		_delay10ms
   331 ;;		_nrfConfig
   332 ;;		_nrfGetStatus
   333 ;;		_nrfTXData
   334 ;;		_portConfig
   335 ;;		_spiConfig_1
   336 ;;		_spiTransfer
   337 ;; This function is called by:
   338 ;;		Startup code after reset
   339 ;; This function uses a non-reentrant model
   340 ;;
   341                           
   342                           	psect	text0
   343  003CE4                     __ptext0:
   344                           	opt stack 0
   345  003CE4                     _main:
   346                           	opt stack 28
   347                           
   348                           ;main.c: 190: portConfig();
   349                           
   350                           ;incstack = 0
   351  003CE4  ECB8  F01D         	call	_portConfig	;wreg free
   352                           
   353                           ;main.c: 191: spiConfig_1();
   354  003CE8  ECAC  F01D         	call	_spiConfig_1	;wreg free
   355                           
   356                           ;main.c: 192: nrfConfig();
   357  003CEC  ECE8  F01E         	call	_nrfConfig	;wreg free
   358                           
   359                           ;main.c: 194: delay10ms(1);
   360  003CF0  0E00               	movlw	0
   361  003CF2  6E24               	movwf	delay10ms@ms_multi+1,c
   362  003CF4  0E01               	movlw	1
   363  003CF6  6E23               	movwf	delay10ms@ms_multi,c
   364  003CF8  ECD6  F01D         	call	_delay10ms	;wreg free
   365                           
   366                           ;main.c: 197: int count = 1;
   367  003CFC  0E00               	movlw	0
   368  003CFE  6E34               	movwf	main@count+1,c
   369  003D00  0E01               	movlw	1
   370  003D02  6E33               	movwf	main@count,c
   371  003D04                     l1044:
   372                           
   373                           ;main.c: 200: dataBufOut[0] = count;
   374  003D04  C033  F001         	movff	main@count,_dataBufOut
   375                           
   376                           ;main.c: 201: nrfTXData(1);
   377  003D08  0E00               	movlw	0
   378  003D0A  6E26               	movwf	nrfTXData@len+1,c
   379  003D0C  0E01               	movlw	1
   380  003D0E  6E25               	movwf	nrfTXData@len,c
   381  003D10  EC3F  F01F         	call	_nrfTXData	;wreg free
   382                           
   383                           ;main.c: 202: count++;
   384  003D14  4A33               	infsnz	main@count,f,c
   385  003D16  2A34               	incf	main@count+1,f,c
   386                           
   387                           ;main.c: 204: nrfGetStatus();
   388  003D18  ECC5  F01D         	call	_nrfGetStatus	;wreg free
   389                           
   390                           ;main.c: 206: if (nrfSTATUS != 0x0E) {
   391  003D1C  5022               	movf	_nrfSTATUS,w,c
   392  003D1E  0A0E               	xorlw	14
   393  003D20  B4D8               	btfsc	status,2,c
   394  003D22  D013               	goto	l1064
   395                           
   396                           ;main.c: 208: LATAbits.LATA0 = 1;
   397  003D24  8089               	bsf	3977,0,c	;volatile
   398                           
   399                           ;main.c: 211: dataBufOut[0] = 0b01110000;
   400  003D26  0E70               	movlw	112
   401  003D28  6E01               	movwf	_dataBufOut,c
   402                           
   403                           ;main.c: 212: spiTransfer('w',0x07,1);
   404  003D2A  0E07               	movlw	7
   405  003D2C  6E25               	movwf	spiTransfer@command,c
   406  003D2E  0E00               	movlw	0
   407  003D30  6E27               	movwf	spiTransfer@len+1,c
   408  003D32  0E01               	movlw	1
   409  003D34  6E26               	movwf	spiTransfer@len,c
   410  003D36  0E77               	movlw	119
   411  003D38  EC9B  F01F         	call	_spiTransfer
   412                           
   413                           ;main.c: 214: delay10ms(20);
   414  003D3C  0E00               	movlw	0
   415  003D3E  6E24               	movwf	delay10ms@ms_multi+1,c
   416  003D40  0E14               	movlw	20
   417  003D42  6E23               	movwf	delay10ms@ms_multi,c
   418  003D44  ECD6  F01D         	call	_delay10ms	;wreg free
   419                           
   420                           ;main.c: 216: LATAbits.LATA0 = 0;
   421  003D48  9089               	bcf	3977,0,c	;volatile
   422  003D4A                     l1064:
   423                           
   424                           ;main.c: 217: }
   425                           ;main.c: 219: delay10ms(80);
   426  003D4A  0E00               	movlw	0
   427  003D4C  6E24               	movwf	delay10ms@ms_multi+1,c
   428  003D4E  0E50               	movlw	80
   429  003D50  6E23               	movwf	delay10ms@ms_multi,c
   430  003D52  ECD6  F01D         	call	_delay10ms	;wreg free
   431                           
   432                           ;main.c: 220: }
   433  003D56  D7D6               	goto	l1044
   434  003D58                     __end_of_main:
   435                           	opt stack 0
   436                           tblptru	equ	0xFF8
   437                           tblptrh	equ	0xFF7
   438                           tblptrl	equ	0xFF6
   439                           tablat	equ	0xFF5
   440                           postinc0	equ	0xFEE
   441                           wreg	equ	0xFE8
   442                           postdec1	equ	0xFE5
   443                           fsr1l	equ	0xFE1
   444                           status	equ	0xFD8
   445                           
   446 ;; *************** function _spiConfig_1 *****************
   447 ;; Defined at:
   448 ;;		line 240 in file "main.c"
   449 ;; Parameters:    Size  Location     Type
   450 ;;		None
   451 ;; Auto vars:     Size  Location     Type
   452 ;;		None
   453 ;; Return value:  Size  Location     Type
   454 ;;		None               void
   455 ;; Registers used:
   456 ;;		wreg, status,2
   457 ;; Tracked objects:
   458 ;;		On entry : 0/0
   459 ;;		On exit  : 0/0
   460 ;;		Unchanged: 0/0
   461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   462 ;;      Params:         0       0       0       0
   463 ;;      Locals:         0       0       0       0
   464 ;;      Temps:          0       0       0       0
   465 ;;      Totals:         0       0       0       0
   466 ;;Total ram usage:        0 bytes
   467 ;; Hardware stack levels used:    1
   468 ;; This function calls:
   469 ;;		Nothing
   470 ;; This function is called by:
   471 ;;		_main
   472 ;; This function uses a non-reentrant model
   473 ;;
   474                           
   475                           	psect	text1
   476  003B58                     __ptext1:
   477                           	opt stack 0
   478  003B58                     _spiConfig_1:
   479                           	opt stack 30
   480                           
   481                           ;main.c: 241: SSP1CON1bits.CKP = 0;
   482                           
   483                           ;incstack = 0
   484  003B58  98C6               	bcf	4038,4,c	;volatile
   485                           
   486                           ;main.c: 242: SSP1STATbits.CKE = 1;
   487  003B5A  8CC7               	bsf	4039,6,c	;volatile
   488                           
   489                           ;main.c: 243: SSP1STATbits.SMP = 1;
   490  003B5C  8EC7               	bsf	4039,7,c	;volatile
   491                           
   492                           ;main.c: 244: SSP1ADD = 0b00001111;
   493  003B5E  0E0F               	movlw	15
   494  003B60  6EC8               	movwf	4040,c	;volatile
   495                           
   496                           ;main.c: 245: SSP1CON1bits.SSPM = 0b1010;
   497  003B62  50C6               	movf	4038,w,c	;volatile
   498  003B64  0BF0               	andlw	-16
   499  003B66  090A               	iorlw	10
   500  003B68  6EC6               	movwf	4038,c	;volatile
   501                           
   502                           ;main.c: 247: SSP1CON1bits.SSPEN = 1;
   503  003B6A  8AC6               	bsf	4038,5,c	;volatile
   504                           
   505                           ;main.c: 248: LATAbits.LATA2 = 1;
   506  003B6C  8489               	bsf	3977,2,c	;volatile
   507  003B6E  0012               	return	
   508  003B70                     __end_of_spiConfig_1:
   509                           	opt stack 0
   510                           tblptru	equ	0xFF8
   511                           tblptrh	equ	0xFF7
   512                           tblptrl	equ	0xFF6
   513                           tablat	equ	0xFF5
   514                           postinc0	equ	0xFEE
   515                           wreg	equ	0xFE8
   516                           postdec1	equ	0xFE5
   517                           fsr1l	equ	0xFE1
   518                           status	equ	0xFD8
   519                           
   520 ;; *************** function _portConfig *****************
   521 ;; Defined at:
   522 ;;		line 226 in file "main.c"
   523 ;; Parameters:    Size  Location     Type
   524 ;;		None
   525 ;; Auto vars:     Size  Location     Type
   526 ;;		None
   527 ;; Return value:  Size  Location     Type
   528 ;;		None               void
   529 ;; Registers used:
   530 ;;		wreg, status,2
   531 ;; Tracked objects:
   532 ;;		On entry : 0/0
   533 ;;		On exit  : 0/0
   534 ;;		Unchanged: 0/0
   535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   536 ;;      Params:         0       0       0       0
   537 ;;      Locals:         0       0       0       0
   538 ;;      Temps:          0       0       0       0
   539 ;;      Totals:         0       0       0       0
   540 ;;Total ram usage:        0 bytes
   541 ;; Hardware stack levels used:    1
   542 ;; This function calls:
   543 ;;		Nothing
   544 ;; This function is called by:
   545 ;;		_main
   546 ;; This function uses a non-reentrant model
   547 ;;
   548                           
   549                           	psect	text2
   550  003B70                     __ptext2:
   551                           	opt stack 0
   552  003B70                     _portConfig:
   553                           	opt stack 30
   554                           
   555                           ;main.c: 227: TRISA = 0b00001000;
   556                           
   557                           ;incstack = 0
   558  003B70  0E08               	movlw	8
   559  003B72  6E92               	movwf	3986,c	;volatile
   560                           
   561                           ;main.c: 228: TRISB = 0b00000000;
   562  003B74  0E00               	movlw	0
   563  003B76  6E93               	movwf	3987,c	;volatile
   564                           
   565                           ;main.c: 229: TRISC = 0b00010000;
   566  003B78  0E10               	movlw	16
   567  003B7A  6E94               	movwf	3988,c	;volatile
   568                           
   569                           ;main.c: 231: LATA = 0b00000100;
   570  003B7C  0E04               	movlw	4
   571  003B7E  6E89               	movwf	3977,c	;volatile
   572                           
   573                           ;main.c: 232: LATB = 0x00;
   574  003B80  0E00               	movlw	0
   575  003B82  6E8A               	movwf	3978,c	;volatile
   576                           
   577                           ;main.c: 233: LATC = 0x00;
   578  003B84  0E00               	movlw	0
   579  003B86  6E8B               	movwf	3979,c	;volatile
   580  003B88  0012               	return	
   581  003B8A                     __end_of_portConfig:
   582                           	opt stack 0
   583                           tblptru	equ	0xFF8
   584                           tblptrh	equ	0xFF7
   585                           tblptrl	equ	0xFF6
   586                           tablat	equ	0xFF5
   587                           postinc0	equ	0xFEE
   588                           wreg	equ	0xFE8
   589                           postdec1	equ	0xFE5
   590                           fsr1l	equ	0xFE1
   591                           status	equ	0xFD8
   592                           
   593 ;; *************** function _nrfTXData *****************
   594 ;; Defined at:
   595 ;;		line 414 in file "main.c"
   596 ;; Parameters:    Size  Location     Type
   597 ;;  len             2    2[COMRAM] int 
   598 ;; Auto vars:     Size  Location     Type
   599 ;;  i               2   10[COMRAM] int 
   600 ;;  i               2    8[COMRAM] int 
   601 ;; Return value:  Size  Location     Type
   602 ;;		None               void
   603 ;; Registers used:
   604 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   605 ;; Tracked objects:
   606 ;;		On entry : 0/0
   607 ;;		On exit  : 0/0
   608 ;;		Unchanged: 0/0
   609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   610 ;;      Params:         2       0       0       0
   611 ;;      Locals:         4       0       0       0
   612 ;;      Temps:          4       0       0       0
   613 ;;      Totals:        10       0       0       0
   614 ;;Total ram usage:       10 bytes
   615 ;; Hardware stack levels used:    1
   616 ;; Hardware stack levels required when called:    1
   617 ;; This function calls:
   618 ;;		_setCSN
   619 ;;		_spiTransferByte
   620 ;; This function is called by:
   621 ;;		_main
   622 ;; This function uses a non-reentrant model
   623 ;;
   624                           
   625                           	psect	text3
   626  003E7E                     __ptext3:
   627                           	opt stack 0
   628  003E7E                     _nrfTXData:
   629                           	opt stack 29
   630                           
   631                           ;main.c: 416: setCSN(0);
   632                           
   633                           ;incstack = 0
   634  003E7E  0E00               	movlw	0
   635  003E80  6E24               	movwf	setCSN@level+1,c
   636  003E82  0E00               	movlw	0
   637  003E84  6E23               	movwf	setCSN@level,c
   638  003E86  ECA0  F01D         	call	_setCSN	;wreg free
   639                           
   640                           ;main.c: 418: spiTransferByte(0xA0);
   641  003E8A  0EA0               	movlw	160
   642  003E8C  EC97  F01D         	call	_spiTransferByte
   643                           
   644                           ;main.c: 420: if (len != 0) {
   645  003E90  5026               	movf	nrfTXData@len+1,w,c
   646  003E92  1025               	iorwf	nrfTXData@len,w,c
   647  003E94  B4D8               	btfsc	status,2,c
   648  003E96  D026               	goto	l1014
   649                           
   650                           ;main.c: 421: for (int i=1;i<=len;i++) {
   651  003E98  0E00               	movlw	0
   652  003E9A  6E2E               	movwf	nrfTXData@i+1,c
   653  003E9C  0E01               	movlw	1
   654  003E9E  6E2D               	movwf	nrfTXData@i,c
   655  003EA0  D017               	goto	l1012
   656  003EA2                     l1008:
   657                           
   658                           ;main.c: 422: spiTransferByte(dataBufOut[i-1]);
   659  003EA2  0EFF               	movlw	255
   660  003EA4  6E27               	movwf	??_nrfTXData& (0+255),c
   661  003EA6  0EFF               	movlw	255
   662  003EA8  6E28               	movwf	(??_nrfTXData+1)& (0+255),c
   663  003EAA  C02D  F029         	movff	nrfTXData@i,??_nrfTXData+2
   664  003EAE  C02E  F02A         	movff	nrfTXData@i+1,??_nrfTXData+3
   665  003EB2  5027               	movf	??_nrfTXData,w,c
   666  003EB4  2629               	addwf	??_nrfTXData+2,f,c
   667  003EB6  5028               	movf	??_nrfTXData+1,w,c
   668  003EB8  222A               	addwfc	??_nrfTXData+3,f,c
   669  003EBA  0E01               	movlw	low _dataBufOut
   670  003EBC  2429               	addwf	??_nrfTXData+2,w,c
   671  003EBE  6ED9               	movwf	fsr2l,c
   672  003EC0  0E00               	movlw	high _dataBufOut
   673  003EC2  202A               	addwfc	??_nrfTXData+3,w,c
   674  003EC4  6EDA               	movwf	fsr2h,c
   675  003EC6  50DF               	movf	indf2,w,c
   676  003EC8  EC97  F01D         	call	_spiTransferByte
   677  003ECC  4A2D               	infsnz	nrfTXData@i,f,c
   678  003ECE  2A2E               	incf	nrfTXData@i+1,f,c
   679  003ED0                     l1012:
   680  003ED0  5026               	movf	nrfTXData@len+1,w,c
   681  003ED2  0A80               	xorlw	128
   682  003ED4  6E27               	movwf	??_nrfTXData& (0+255),c
   683  003ED6  502D               	movf	nrfTXData@i,w,c
   684  003ED8  5C25               	subwf	nrfTXData@len,w,c
   685  003EDA  502E               	movf	nrfTXData@i+1,w,c
   686  003EDC  0A80               	xorlw	128
   687  003EDE  5827               	subwfb	??_nrfTXData& (0+255),w,c
   688  003EE0  B0D8               	btfsc	status,0,c
   689  003EE2  D7DF               	goto	l1008
   690  003EE4                     l1014:
   691                           
   692                           ;main.c: 423: }
   693                           ;main.c: 424: }
   694                           ;main.c: 426: setCSN(1);
   695  003EE4  0E00               	movlw	0
   696  003EE6  6E24               	movwf	setCSN@level+1,c
   697  003EE8  0E01               	movlw	1
   698  003EEA  6E23               	movwf	setCSN@level,c
   699  003EEC  ECA0  F01D         	call	_setCSN	;wreg free
   700                           
   701                           ;main.c: 429: LATAbits.LATA1 = 1;
   702  003EF0  8289               	bsf	3977,1,c	;volatile
   703                           
   704                           ;main.c: 430: _delay((unsigned long)((11)*(64000000/4000000.0)));
   705  003EF2  0E3A               	movlw	58
   706  003EF4                     u347:
   707  003EF4  2EE8               	decfsz	wreg,f,c
   708  003EF6  D7FE               	goto	u347
   709  003EF8  D000               	nop2		;nop
   710                           
   711                           ;main.c: 431: LATAbits.LATA1 = 0;
   712  003EFA  9289               	bcf	3977,1,c	;volatile
   713                           
   714                           ;main.c: 432: _delay((unsigned long)((170)*(64000000/4000000.0)));
   715  003EFC  0E04               	movlw	4
   716  003EFE  6E27               	movwf	??_nrfTXData& (0+255),c
   717  003F00  0E87               	movlw	135
   718  003F02                     u357:
   719  003F02  2EE8               	decfsz	wreg,f,c
   720  003F04  D7FE               	goto	u357
   721  003F06  2E27               	decfsz	??_nrfTXData& (0+255),f,c
   722  003F08  D7FC               	goto	u357
   723  003F0A  F000               	nop	
   724                           
   725                           ;main.c: 433: for (int i=0;i<len;i++) {
   726  003F0C  0E00               	movlw	0
   727  003F0E  6E2C               	movwf	nrfTXData@i_556+1,c
   728  003F10  0E00               	movlw	0
   729  003F12  6E2B               	movwf	nrfTXData@i_556,c
   730  003F14  D005               	goto	l137
   731  003F16                     l1026:
   732                           
   733                           ;main.c: 434: _delay((unsigned long)((12)*(64000000/4000000.0)));
   734  003F16  0E40               	movlw	64
   735  003F18                     u367:
   736  003F18  2EE8               	decfsz	wreg,f,c
   737  003F1A  D7FE               	goto	u367
   738  003F1C  4A2B               	infsnz	nrfTXData@i_556,f,c
   739  003F1E  2A2C               	incf	nrfTXData@i_556+1,f,c
   740  003F20                     l137:
   741  003F20  502C               	movf	nrfTXData@i_556+1,w,c
   742  003F22  0A80               	xorlw	128
   743  003F24  6E27               	movwf	??_nrfTXData& (0+255),c
   744  003F26  5025               	movf	nrfTXData@len,w,c
   745  003F28  5C2B               	subwf	nrfTXData@i_556,w,c
   746  003F2A  5026               	movf	nrfTXData@len+1,w,c
   747  003F2C  0A80               	xorlw	128
   748  003F2E  5827               	subwfb	??_nrfTXData& (0+255),w,c
   749  003F30  B0D8               	btfsc	status,0,c
   750  003F32  0012               	return	
   751  003F34  D7F0               	goto	l1026
   752  003F36                     __end_of_nrfTXData:
   753                           	opt stack 0
   754                           tblptru	equ	0xFF8
   755                           tblptrh	equ	0xFF7
   756                           tblptrl	equ	0xFF6
   757                           tablat	equ	0xFF5
   758                           postinc0	equ	0xFEE
   759                           wreg	equ	0xFE8
   760                           postdec1	equ	0xFE5
   761                           fsr1l	equ	0xFE1
   762                           indf2	equ	0xFDF
   763                           fsr2h	equ	0xFDA
   764                           fsr2l	equ	0xFD9
   765                           status	equ	0xFD8
   766                           
   767 ;; *************** function _nrfGetStatus *****************
   768 ;; Defined at:
   769 ;;		line 297 in file "main.c"
   770 ;; Parameters:    Size  Location     Type
   771 ;;		None
   772 ;; Auto vars:     Size  Location     Type
   773 ;;		None
   774 ;; Return value:  Size  Location     Type
   775 ;;		None               void
   776 ;; Registers used:
   777 ;;		wreg, status,2, status,0, cstack
   778 ;; Tracked objects:
   779 ;;		On entry : 0/0
   780 ;;		On exit  : 0/0
   781 ;;		Unchanged: 0/0
   782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   783 ;;      Params:         0       0       0       0
   784 ;;      Locals:         0       0       0       0
   785 ;;      Temps:          0       0       0       0
   786 ;;      Totals:         0       0       0       0
   787 ;;Total ram usage:        0 bytes
   788 ;; Hardware stack levels used:    1
   789 ;; Hardware stack levels required when called:    1
   790 ;; This function calls:
   791 ;;		_setCSN
   792 ;;		_spiTransferByte
   793 ;; This function is called by:
   794 ;;		_main
   795 ;; This function uses a non-reentrant model
   796 ;;
   797                           
   798                           	psect	text4
   799  003B8A                     __ptext4:
   800                           	opt stack 0
   801  003B8A                     _nrfGetStatus:
   802                           	opt stack 29
   803                           
   804                           ;main.c: 299: setCSN(0);
   805                           
   806                           ;incstack = 0
   807  003B8A  0E00               	movlw	0
   808  003B8C  6E24               	movwf	setCSN@level+1,c
   809  003B8E  0E00               	movlw	0
   810  003B90  6E23               	movwf	setCSN@level,c
   811  003B92  ECA0  F01D         	call	_setCSN	;wreg free
   812                           
   813                           ;main.c: 301: nrfSTATUS = spiTransferByte(0xFF);
   814  003B96  0EFF               	movlw	255
   815  003B98  EC97  F01D         	call	_spiTransferByte
   816  003B9C  6E22               	movwf	_nrfSTATUS,c
   817                           
   818                           ;main.c: 303: setCSN(1);
   819  003B9E  0E00               	movlw	0
   820  003BA0  6E24               	movwf	setCSN@level+1,c
   821  003BA2  0E01               	movlw	1
   822  003BA4  6E23               	movwf	setCSN@level,c
   823  003BA6  ECA0  F01D         	call	_setCSN	;wreg free
   824  003BAA  0012               	return	
   825  003BAC                     __end_of_nrfGetStatus:
   826                           	opt stack 0
   827                           tblptru	equ	0xFF8
   828                           tblptrh	equ	0xFF7
   829                           tblptrl	equ	0xFF6
   830                           tablat	equ	0xFF5
   831                           postinc0	equ	0xFEE
   832                           wreg	equ	0xFE8
   833                           postdec1	equ	0xFE5
   834                           fsr1l	equ	0xFE1
   835                           indf2	equ	0xFDF
   836                           fsr2h	equ	0xFDA
   837                           fsr2l	equ	0xFD9
   838                           status	equ	0xFD8
   839                           
   840 ;; *************** function _nrfConfig *****************
   841 ;; Defined at:
   842 ;;		line 254 in file "main.c"
   843 ;; Parameters:    Size  Location     Type
   844 ;;		None
   845 ;; Auto vars:     Size  Location     Type
   846 ;;		None
   847 ;; Return value:  Size  Location     Type
   848 ;;		None               void
   849 ;; Registers used:
   850 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   851 ;; Tracked objects:
   852 ;;		On entry : 0/0
   853 ;;		On exit  : 0/0
   854 ;;		Unchanged: 0/0
   855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   856 ;;      Params:         0       0       0       0
   857 ;;      Locals:         0       0       0       0
   858 ;;      Temps:          0       0       0       0
   859 ;;      Totals:         0       0       0       0
   860 ;;Total ram usage:        0 bytes
   861 ;; Hardware stack levels used:    1
   862 ;; Hardware stack levels required when called:    2
   863 ;; This function calls:
   864 ;;		_nrfConfigReg
   865 ;;		_nrfSetRXAddr
   866 ;;		_nrfSetTXAddr
   867 ;;		_spiTransfer
   868 ;; This function is called by:
   869 ;;		_main
   870 ;; This function uses a non-reentrant model
   871 ;;
   872                           
   873                           	psect	text5
   874  003DD0                     __ptext5:
   875                           	opt stack 0
   876  003DD0                     _nrfConfig:
   877                           	opt stack 28
   878                           
   879                           ;main.c: 257: nrfConfigReg('w',0x00,CONFIG_CURR);
   880                           
   881                           ;incstack = 0
   882  003DD0  0E00               	movlw	0
   883  003DD2  6E25               	movwf	nrfConfigReg@command,c
   884  003DD4  C035  F026         	movff	_CONFIG_CURR,nrfConfigReg@data
   885  003DD8  0E77               	movlw	119
   886  003DDA  EC13  F01E         	call	_nrfConfigReg
   887                           
   888                           ;main.c: 259: nrfConfigReg('w',0x01,EN_AA_CURR);
   889  003DDE  0E01               	movlw	1
   890  003DE0  6E25               	movwf	nrfConfigReg@command,c
   891  003DE2  C021  F026         	movff	_EN_AA_CURR,nrfConfigReg@data
   892  003DE6  0E77               	movlw	119
   893  003DE8  EC13  F01E         	call	_nrfConfigReg
   894                           
   895                           ;main.c: 261: nrfConfigReg('w',0x02,EN_RXADDR_CURR);
   896  003DEC  0E02               	movlw	2
   897  003DEE  6E25               	movwf	nrfConfigReg@command,c
   898  003DF0  C036  F026         	movff	_EN_RXADDR_CURR,nrfConfigReg@data
   899  003DF4  0E77               	movlw	119
   900  003DF6  EC13  F01E         	call	_nrfConfigReg
   901                           
   902                           ;main.c: 263: nrfConfigReg('w',0x03,SETUP_AW_CURR);
   903  003DFA  0E03               	movlw	3
   904  003DFC  6E25               	movwf	nrfConfigReg@command,c
   905  003DFE  C03A  F026         	movff	_SETUP_AW_CURR,nrfConfigReg@data
   906  003E02  0E77               	movlw	119
   907  003E04  EC13  F01E         	call	_nrfConfigReg
   908                           
   909                           ;main.c: 265: nrfConfigReg('w',0x04,SETUP_RETR_CURR);
   910  003E08  0E04               	movlw	4
   911  003E0A  6E25               	movwf	nrfConfigReg@command,c
   912  003E0C  C03B  F026         	movff	_SETUP_RETR_CURR,nrfConfigReg@data
   913  003E10  0E77               	movlw	119
   914  003E12  EC13  F01E         	call	_nrfConfigReg
   915                           
   916                           ;main.c: 267: nrfConfigReg('w',0x05,RF_CH_CURR);
   917  003E16  0E05               	movlw	5
   918  003E18  6E25               	movwf	nrfConfigReg@command,c
   919  003E1A  C037  F026         	movff	_RF_CH_CURR,nrfConfigReg@data
   920  003E1E  0E77               	movlw	119
   921  003E20  EC13  F01E         	call	_nrfConfigReg
   922                           
   923                           ;main.c: 269: nrfConfigReg('w',0x06,RF_SETUP_CURR);
   924  003E24  0E06               	movlw	6
   925  003E26  6E25               	movwf	nrfConfigReg@command,c
   926  003E28  C038  F026         	movff	_RF_SETUP_CURR,nrfConfigReg@data
   927  003E2C  0E77               	movlw	119
   928  003E2E  EC13  F01E         	call	_nrfConfigReg
   929                           
   930                           ;main.c: 271: nrfSetRXAddr(0x0A,RX_ADDRESS,4);
   931  003E32  0E00               	movlw	high _RX_ADDRESS
   932  003E34  6E26               	movwf	nrfSetRXAddr@addr+1,c
   933  003E36  0E3C               	movlw	low _RX_ADDRESS
   934  003E38  6E25               	movwf	nrfSetRXAddr@addr,c
   935  003E3A  0E00               	movlw	0
   936  003E3C  6E28               	movwf	nrfSetRXAddr@len+1,c
   937  003E3E  0E04               	movlw	4
   938  003E40  6E27               	movwf	nrfSetRXAddr@len,c
   939  003E42  0E0A               	movlw	10
   940  003E44  ECAC  F01E         	call	_nrfSetRXAddr
   941                           
   942                           ;main.c: 273: nrfSetTXAddr(TX_ADDRESS,4);
   943  003E48  0E00               	movlw	high _TX_ADDRESS
   944  003E4A  6E26               	movwf	nrfSetTXAddr@addr+1,c
   945  003E4C  0E40               	movlw	low _TX_ADDRESS
   946  003E4E  6E25               	movwf	nrfSetTXAddr@addr,c
   947  003E50  0E00               	movlw	0
   948  003E52  6E28               	movwf	nrfSetTXAddr@len+1,c
   949  003E54  0E04               	movlw	4
   950  003E56  6E27               	movwf	nrfSetTXAddr@len,c
   951  003E58  EC38  F01E         	call	_nrfSetTXAddr	;wreg free
   952                           
   953                           ;main.c: 275: nrfConfigReg('w',0x11,RX_PW_P0_CURR);
   954  003E5C  0E11               	movlw	17
   955  003E5E  6E25               	movwf	nrfConfigReg@command,c
   956  003E60  C039  F026         	movff	_RX_PW_P0_CURR,nrfConfigReg@data
   957  003E64  0E77               	movlw	119
   958  003E66  EC13  F01E         	call	_nrfConfigReg
   959                           
   960                           ;main.c: 277: spiTransfer('n',0xE1,0);
   961  003E6A  0EE1               	movlw	225
   962  003E6C  6E25               	movwf	spiTransfer@command,c
   963  003E6E  0E00               	movlw	0
   964  003E70  6E27               	movwf	spiTransfer@len+1,c
   965  003E72  0E00               	movlw	0
   966  003E74  6E26               	movwf	spiTransfer@len,c
   967  003E76  0E6E               	movlw	110
   968  003E78  EC9B  F01F         	call	_spiTransfer
   969  003E7C  0012               	return	
   970  003E7E                     __end_of_nrfConfig:
   971                           	opt stack 0
   972                           tblptru	equ	0xFF8
   973                           tblptrh	equ	0xFF7
   974                           tblptrl	equ	0xFF6
   975                           tablat	equ	0xFF5
   976                           postinc0	equ	0xFEE
   977                           wreg	equ	0xFE8
   978                           postdec1	equ	0xFE5
   979                           fsr1l	equ	0xFE1
   980                           indf2	equ	0xFDF
   981                           fsr2h	equ	0xFDA
   982                           fsr2l	equ	0xFD9
   983                           status	equ	0xFD8
   984                           
   985 ;; *************** function _spiTransfer *****************
   986 ;; Defined at:
   987 ;;		line 377 in file "main.c"
   988 ;; Parameters:    Size  Location     Type
   989 ;;  wrn             1    wreg     unsigned char 
   990 ;;  command         1    2[COMRAM] unsigned char 
   991 ;;  len             2    3[COMRAM] int 
   992 ;; Auto vars:     Size  Location     Type
   993 ;;  wrn             1   13[COMRAM] unsigned char 
   994 ;;  i               2   14[COMRAM] int 
   995 ;; Return value:  Size  Location     Type
   996 ;;		None               void
   997 ;; Registers used:
   998 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   999 ;; Tracked objects:
  1000 ;;		On entry : 0/0
  1001 ;;		On exit  : 0/0
  1002 ;;		Unchanged: 0/0
  1003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1004 ;;      Params:         3       0       0       0
  1005 ;;      Locals:         3       0       0       0
  1006 ;;      Temps:          8       0       0       0
  1007 ;;      Totals:        14       0       0       0
  1008 ;;Total ram usage:       14 bytes
  1009 ;; Hardware stack levels used:    1
  1010 ;; Hardware stack levels required when called:    1
  1011 ;; This function calls:
  1012 ;;		_setCSN
  1013 ;;		_spiTransferByte
  1014 ;; This function is called by:
  1015 ;;		_main
  1016 ;;		_nrfConfig
  1017 ;; This function uses a non-reentrant model
  1018 ;;
  1019                           
  1020                           	psect	text6
  1021  003F36                     __ptext6:
  1022                           	opt stack 0
  1023  003F36                     _spiTransfer:
  1024                           	opt stack 29
  1025                           
  1026                           ;incstack = 0
  1027                           ;spiTransfer@wrn stored from wreg
  1028  003F36  6E30               	movwf	spiTransfer@wrn,c
  1029                           
  1030                           ;main.c: 379: setCSN(0);
  1031  003F38  0E00               	movlw	0
  1032  003F3A  6E24               	movwf	setCSN@level+1,c
  1033  003F3C  0E00               	movlw	0
  1034  003F3E  6E23               	movwf	setCSN@level,c
  1035  003F40  ECA0  F01D         	call	_setCSN	;wreg free
  1036                           
  1037                           ;main.c: 381: if (wrn == 'w') {
  1038  003F44  5030               	movf	spiTransfer@wrn,w,c
  1039  003F46  0A77               	xorlw	119
  1040  003F48  A4D8               	btfss	status,2,c
  1041  003F4A  D005               	goto	l926
  1042                           
  1043                           ;main.c: 382: spiTransferByte(0x20|command);
  1044  003F4C  5025               	movf	spiTransfer@command,w,c
  1045  003F4E  0920               	iorlw	32
  1046  003F50  EC97  F01D         	call	_spiTransferByte
  1047                           
  1048                           ;main.c: 383: } else if (wrn == 'r') {
  1049  003F54  D00F               	goto	l934
  1050  003F56                     l926:
  1051  003F56  5030               	movf	spiTransfer@wrn,w,c
  1052  003F58  0A72               	xorlw	114
  1053  003F5A  A4D8               	btfss	status,2,c
  1054  003F5C  D004               	goto	l930
  1055                           
  1056                           ;main.c: 384: spiTransferByte(0x00|command);
  1057  003F5E  5025               	movf	spiTransfer@command,w,c
  1058  003F60  EC97  F01D         	call	_spiTransferByte
  1059                           
  1060                           ;main.c: 385: } else if(wrn == 'n') {
  1061  003F64  D007               	goto	l934
  1062  003F66                     l930:
  1063  003F66  5030               	movf	spiTransfer@wrn,w,c
  1064  003F68  0A6E               	xorlw	110
  1065  003F6A  A4D8               	btfss	status,2,c
  1066  003F6C  D003               	goto	l934
  1067                           
  1068                           ;main.c: 386: spiTransferByte(command);
  1069  003F6E  5025               	movf	spiTransfer@command,w,c
  1070  003F70  EC97  F01D         	call	_spiTransferByte
  1071  003F74                     l934:
  1072                           
  1073                           ;main.c: 387: }
  1074                           ;main.c: 389: if (len != 0) {
  1075  003F74  5027               	movf	spiTransfer@len+1,w,c
  1076  003F76  1026               	iorwf	spiTransfer@len,w,c
  1077  003F78  B4D8               	btfsc	status,2,c
  1078  003F7A  D03B               	goto	l944
  1079                           
  1080                           ;main.c: 390: for (int i=1;i<=len;i++) {
  1081  003F7C  0E00               	movlw	0
  1082  003F7E  6E32               	movwf	spiTransfer@i+1,c
  1083  003F80  0E01               	movlw	1
  1084  003F82  6E31               	movwf	spiTransfer@i,c
  1085  003F84  D02C               	goto	l942
  1086  003F86                     l938:
  1087                           
  1088                           ;main.c: 391: dataBufIn[i-1] = spiTransferByte(dataBufOut[i-1]);
  1089  003F86  0EFF               	movlw	255
  1090  003F88  6E28               	movwf	??_spiTransfer& (0+255),c
  1091  003F8A  0EFF               	movlw	255
  1092  003F8C  6E29               	movwf	(??_spiTransfer+1)& (0+255),c
  1093  003F8E  C031  F02A         	movff	spiTransfer@i,??_spiTransfer+2
  1094  003F92  C032  F02B         	movff	spiTransfer@i+1,??_spiTransfer+3
  1095  003F96  5028               	movf	??_spiTransfer,w,c
  1096  003F98  262A               	addwf	??_spiTransfer+2,f,c
  1097  003F9A  5029               	movf	??_spiTransfer+1,w,c
  1098  003F9C  222B               	addwfc	??_spiTransfer+3,f,c
  1099  003F9E  0100               	movlb	0	; () banked
  1100  003FA0  0E60               	movlw	low _dataBufIn
  1101  003FA2  242A               	addwf	??_spiTransfer+2,w,c
  1102  003FA4  6ED9               	movwf	fsr2l,c
  1103  003FA6  0100               	movlb	0	; () banked
  1104  003FA8  0E00               	movlw	high _dataBufIn
  1105  003FAA  202B               	addwfc	??_spiTransfer+3,w,c
  1106  003FAC  6EDA               	movwf	fsr2h,c
  1107  003FAE  0EFF               	movlw	255
  1108  003FB0  6E2C               	movwf	(??_spiTransfer+4)& (0+255),c
  1109  003FB2  0EFF               	movlw	255
  1110  003FB4  6E2D               	movwf	(??_spiTransfer+5)& (0+255),c
  1111  003FB6  C031  F02E         	movff	spiTransfer@i,??_spiTransfer+6
  1112  003FBA  C032  F02F         	movff	spiTransfer@i+1,??_spiTransfer+7
  1113  003FBE  502C               	movf	??_spiTransfer+4,w,c
  1114  003FC0  262E               	addwf	??_spiTransfer+6,f,c
  1115  003FC2  502D               	movf	??_spiTransfer+5,w,c
  1116  003FC4  222F               	addwfc	??_spiTransfer+7,f,c
  1117  003FC6  0E01               	movlw	low _dataBufOut
  1118  003FC8  242E               	addwf	??_spiTransfer+6,w,c
  1119  003FCA  6EE1               	movwf	fsr1l,c
  1120  003FCC  0E00               	movlw	high _dataBufOut
  1121  003FCE  202F               	addwfc	??_spiTransfer+7,w,c
  1122  003FD0  6EE2               	movwf	fsr1h,c
  1123  003FD2  50E7               	movf	indf1,w,c
  1124  003FD4  EC97  F01D         	call	_spiTransferByte
  1125  003FD8  6EDF               	movwf	indf2,c
  1126  003FDA  4A31               	infsnz	spiTransfer@i,f,c
  1127  003FDC  2A32               	incf	spiTransfer@i+1,f,c
  1128  003FDE                     l942:
  1129  003FDE  5027               	movf	spiTransfer@len+1,w,c
  1130  003FE0  0A80               	xorlw	128
  1131  003FE2  6E28               	movwf	??_spiTransfer& (0+255),c
  1132  003FE4  5031               	movf	spiTransfer@i,w,c
  1133  003FE6  5C26               	subwf	spiTransfer@len,w,c
  1134  003FE8  5032               	movf	spiTransfer@i+1,w,c
  1135  003FEA  0A80               	xorlw	128
  1136  003FEC  5828               	subwfb	??_spiTransfer& (0+255),w,c
  1137  003FEE  B0D8               	btfsc	status,0,c
  1138  003FF0  D7CA               	goto	l938
  1139  003FF2                     l944:
  1140                           
  1141                           ;main.c: 392: }
  1142                           ;main.c: 393: }
  1143                           ;main.c: 395: setCSN(1);
  1144  003FF2  0E00               	movlw	0
  1145  003FF4  6E24               	movwf	setCSN@level+1,c
  1146  003FF6  0E01               	movlw	1
  1147  003FF8  6E23               	movwf	setCSN@level,c
  1148  003FFA  ECA0  F01D         	call	_setCSN	;wreg free
  1149  003FFE  0012               	return	
  1150  004000                     __end_of_spiTransfer:
  1151                           	opt stack 0
  1152                           tblptru	equ	0xFF8
  1153                           tblptrh	equ	0xFF7
  1154                           tblptrl	equ	0xFF6
  1155                           tablat	equ	0xFF5
  1156                           postinc0	equ	0xFEE
  1157                           wreg	equ	0xFE8
  1158                           indf1	equ	0xFE7
  1159                           postdec1	equ	0xFE5
  1160                           fsr1h	equ	0xFE2
  1161                           fsr1l	equ	0xFE1
  1162                           indf2	equ	0xFDF
  1163                           fsr2h	equ	0xFDA
  1164                           fsr2l	equ	0xFD9
  1165                           status	equ	0xFD8
  1166                           
  1167 ;; *************** function _nrfSetTXAddr *****************
  1168 ;; Defined at:
  1169 ;;		line 331 in file "main.c"
  1170 ;; Parameters:    Size  Location     Type
  1171 ;;  addr            2    2[COMRAM] PTR unsigned char 
  1172 ;;		 -> TX_ADDRESS(4), 
  1173 ;;  len             2    4[COMRAM] int 
  1174 ;; Auto vars:     Size  Location     Type
  1175 ;;  i               2   10[COMRAM] int 
  1176 ;; Return value:  Size  Location     Type
  1177 ;;		None               void
  1178 ;; Registers used:
  1179 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1180 ;; Tracked objects:
  1181 ;;		On entry : 0/0
  1182 ;;		On exit  : 0/0
  1183 ;;		Unchanged: 0/0
  1184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1185 ;;      Params:         4       0       0       0
  1186 ;;      Locals:         2       0       0       0
  1187 ;;      Temps:          4       0       0       0
  1188 ;;      Totals:        10       0       0       0
  1189 ;;Total ram usage:       10 bytes
  1190 ;; Hardware stack levels used:    1
  1191 ;; Hardware stack levels required when called:    1
  1192 ;; This function calls:
  1193 ;;		_setCSN
  1194 ;;		_spiTransferByte
  1195 ;; This function is called by:
  1196 ;;		_nrfConfig
  1197 ;; This function uses a non-reentrant model
  1198 ;;
  1199                           
  1200                           	psect	text7
  1201  003C70                     __ptext7:
  1202                           	opt stack 0
  1203  003C70                     _nrfSetTXAddr:
  1204                           	opt stack 28
  1205                           
  1206                           ;main.c: 333: setCSN(0);
  1207                           
  1208                           ;incstack = 0
  1209  003C70  0E00               	movlw	0
  1210  003C72  6E24               	movwf	setCSN@level+1,c
  1211  003C74  0E00               	movlw	0
  1212  003C76  6E23               	movwf	setCSN@level,c
  1213  003C78  ECA0  F01D         	call	_setCSN	;wreg free
  1214                           
  1215                           ;main.c: 335: spiTransferByte(0x20|0x10);
  1216  003C7C  0E30               	movlw	48
  1217  003C7E  EC97  F01D         	call	_spiTransferByte
  1218                           
  1219                           ;main.c: 337: if (len != 0) {
  1220  003C82  5028               	movf	nrfSetTXAddr@len+1,w,c
  1221  003C84  1027               	iorwf	nrfSetTXAddr@len,w,c
  1222  003C86  B4D8               	btfsc	status,2,c
  1223  003C88  D026               	goto	l990
  1224                           
  1225                           ;main.c: 339: for (int i=1;i<=len;i++) {
  1226  003C8A  0E00               	movlw	0
  1227  003C8C  6E2E               	movwf	nrfSetTXAddr@i+1,c
  1228  003C8E  0E01               	movlw	1
  1229  003C90  6E2D               	movwf	nrfSetTXAddr@i,c
  1230  003C92  D017               	goto	l988
  1231  003C94                     l984:
  1232                           
  1233                           ;main.c: 340: spiTransferByte(addr[i-1]);
  1234  003C94  0EFF               	movlw	255
  1235  003C96  6E29               	movwf	??_nrfSetTXAddr& (0+255),c
  1236  003C98  0EFF               	movlw	255
  1237  003C9A  6E2A               	movwf	(??_nrfSetTXAddr+1)& (0+255),c
  1238  003C9C  C02D  F02B         	movff	nrfSetTXAddr@i,??_nrfSetTXAddr+2
  1239  003CA0  C02E  F02C         	movff	nrfSetTXAddr@i+1,??_nrfSetTXAddr+3
  1240  003CA4  5029               	movf	??_nrfSetTXAddr,w,c
  1241  003CA6  262B               	addwf	??_nrfSetTXAddr+2,f,c
  1242  003CA8  502A               	movf	??_nrfSetTXAddr+1,w,c
  1243  003CAA  222C               	addwfc	??_nrfSetTXAddr+3,f,c
  1244  003CAC  502B               	movf	??_nrfSetTXAddr+2,w,c
  1245  003CAE  2425               	addwf	nrfSetTXAddr@addr,w,c
  1246  003CB0  6ED9               	movwf	fsr2l,c
  1247  003CB2  502C               	movf	??_nrfSetTXAddr+3,w,c
  1248  003CB4  2026               	addwfc	nrfSetTXAddr@addr+1,w,c
  1249  003CB6  6EDA               	movwf	fsr2h,c
  1250  003CB8  50DF               	movf	indf2,w,c
  1251  003CBA  EC97  F01D         	call	_spiTransferByte
  1252  003CBE  4A2D               	infsnz	nrfSetTXAddr@i,f,c
  1253  003CC0  2A2E               	incf	nrfSetTXAddr@i+1,f,c
  1254  003CC2                     l988:
  1255  003CC2  5028               	movf	nrfSetTXAddr@len+1,w,c
  1256  003CC4  0A80               	xorlw	128
  1257  003CC6  6E29               	movwf	??_nrfSetTXAddr& (0+255),c
  1258  003CC8  502D               	movf	nrfSetTXAddr@i,w,c
  1259  003CCA  5C27               	subwf	nrfSetTXAddr@len,w,c
  1260  003CCC  502E               	movf	nrfSetTXAddr@i+1,w,c
  1261  003CCE  0A80               	xorlw	128
  1262  003CD0  5829               	subwfb	??_nrfSetTXAddr& (0+255),w,c
  1263  003CD2  B0D8               	btfsc	status,0,c
  1264  003CD4  D7DF               	goto	l984
  1265  003CD6                     l990:
  1266                           
  1267                           ;main.c: 341: }
  1268                           ;main.c: 342: }
  1269                           ;main.c: 344: setCSN(1);
  1270  003CD6  0E00               	movlw	0
  1271  003CD8  6E24               	movwf	setCSN@level+1,c
  1272  003CDA  0E01               	movlw	1
  1273  003CDC  6E23               	movwf	setCSN@level,c
  1274  003CDE  ECA0  F01D         	call	_setCSN	;wreg free
  1275  003CE2  0012               	return	
  1276  003CE4                     __end_of_nrfSetTXAddr:
  1277                           	opt stack 0
  1278                           tblptru	equ	0xFF8
  1279                           tblptrh	equ	0xFF7
  1280                           tblptrl	equ	0xFF6
  1281                           tablat	equ	0xFF5
  1282                           postinc0	equ	0xFEE
  1283                           wreg	equ	0xFE8
  1284                           indf1	equ	0xFE7
  1285                           postdec1	equ	0xFE5
  1286                           fsr1h	equ	0xFE2
  1287                           fsr1l	equ	0xFE1
  1288                           indf2	equ	0xFDF
  1289                           fsr2h	equ	0xFDA
  1290                           fsr2l	equ	0xFD9
  1291                           status	equ	0xFD8
  1292                           
  1293 ;; *************** function _nrfSetRXAddr *****************
  1294 ;; Defined at:
  1295 ;;		line 353 in file "main.c"
  1296 ;; Parameters:    Size  Location     Type
  1297 ;;  pipe            1    wreg     unsigned char 
  1298 ;;  addr            2    2[COMRAM] PTR unsigned char 
  1299 ;;		 -> RX_ADDRESS(4), 
  1300 ;;  len             2    4[COMRAM] int 
  1301 ;; Auto vars:     Size  Location     Type
  1302 ;;  pipe            1   10[COMRAM] unsigned char 
  1303 ;;  i               2   11[COMRAM] int 
  1304 ;; Return value:  Size  Location     Type
  1305 ;;		None               void
  1306 ;; Registers used:
  1307 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1308 ;; Tracked objects:
  1309 ;;		On entry : 0/0
  1310 ;;		On exit  : 0/0
  1311 ;;		Unchanged: 0/0
  1312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1313 ;;      Params:         4       0       0       0
  1314 ;;      Locals:         3       0       0       0
  1315 ;;      Temps:          4       0       0       0
  1316 ;;      Totals:        11       0       0       0
  1317 ;;Total ram usage:       11 bytes
  1318 ;; Hardware stack levels used:    1
  1319 ;; Hardware stack levels required when called:    1
  1320 ;; This function calls:
  1321 ;;		_setCSN
  1322 ;;		_spiTransferByte
  1323 ;; This function is called by:
  1324 ;;		_nrfConfig
  1325 ;; This function uses a non-reentrant model
  1326 ;;
  1327                           
  1328                           	psect	text8
  1329  003D58                     __ptext8:
  1330                           	opt stack 0
  1331  003D58                     _nrfSetRXAddr:
  1332                           	opt stack 28
  1333                           
  1334                           ;incstack = 0
  1335                           ;nrfSetRXAddr@pipe stored from wreg
  1336  003D58  6E2D               	movwf	nrfSetRXAddr@pipe,c
  1337                           
  1338                           ;main.c: 355: setCSN(0);
  1339  003D5A  0E00               	movlw	0
  1340  003D5C  6E24               	movwf	setCSN@level+1,c
  1341  003D5E  0E00               	movlw	0
  1342  003D60  6E23               	movwf	setCSN@level,c
  1343  003D62  ECA0  F01D         	call	_setCSN	;wreg free
  1344                           
  1345                           ;main.c: 357: spiTransferByte(0x20|pipe);
  1346  003D66  502D               	movf	nrfSetRXAddr@pipe,w,c
  1347  003D68  0920               	iorlw	32
  1348  003D6A  EC97  F01D         	call	_spiTransferByte
  1349                           
  1350                           ;main.c: 359: if (len != 0) {
  1351  003D6E  5028               	movf	nrfSetRXAddr@len+1,w,c
  1352  003D70  1027               	iorwf	nrfSetRXAddr@len,w,c
  1353  003D72  B4D8               	btfsc	status,2,c
  1354  003D74  D026               	goto	l974
  1355                           
  1356                           ;main.c: 361: for (int i=1;i<=len;i++) {
  1357  003D76  0E00               	movlw	0
  1358  003D78  6E2F               	movwf	nrfSetRXAddr@i+1,c
  1359  003D7A  0E01               	movlw	1
  1360  003D7C  6E2E               	movwf	nrfSetRXAddr@i,c
  1361  003D7E  D017               	goto	l972
  1362  003D80                     l968:
  1363                           
  1364                           ;main.c: 362: spiTransferByte(addr[i-1]);
  1365  003D80  0EFF               	movlw	255
  1366  003D82  6E29               	movwf	??_nrfSetRXAddr& (0+255),c
  1367  003D84  0EFF               	movlw	255
  1368  003D86  6E2A               	movwf	(??_nrfSetRXAddr+1)& (0+255),c
  1369  003D88  C02E  F02B         	movff	nrfSetRXAddr@i,??_nrfSetRXAddr+2
  1370  003D8C  C02F  F02C         	movff	nrfSetRXAddr@i+1,??_nrfSetRXAddr+3
  1371  003D90  5029               	movf	??_nrfSetRXAddr,w,c
  1372  003D92  262B               	addwf	??_nrfSetRXAddr+2,f,c
  1373  003D94  502A               	movf	??_nrfSetRXAddr+1,w,c
  1374  003D96  222C               	addwfc	??_nrfSetRXAddr+3,f,c
  1375  003D98  502B               	movf	??_nrfSetRXAddr+2,w,c
  1376  003D9A  2425               	addwf	nrfSetRXAddr@addr,w,c
  1377  003D9C  6ED9               	movwf	fsr2l,c
  1378  003D9E  502C               	movf	??_nrfSetRXAddr+3,w,c
  1379  003DA0  2026               	addwfc	nrfSetRXAddr@addr+1,w,c
  1380  003DA2  6EDA               	movwf	fsr2h,c
  1381  003DA4  50DF               	movf	indf2,w,c
  1382  003DA6  EC97  F01D         	call	_spiTransferByte
  1383  003DAA  4A2E               	infsnz	nrfSetRXAddr@i,f,c
  1384  003DAC  2A2F               	incf	nrfSetRXAddr@i+1,f,c
  1385  003DAE                     l972:
  1386  003DAE  5028               	movf	nrfSetRXAddr@len+1,w,c
  1387  003DB0  0A80               	xorlw	128
  1388  003DB2  6E29               	movwf	??_nrfSetRXAddr& (0+255),c
  1389  003DB4  502E               	movf	nrfSetRXAddr@i,w,c
  1390  003DB6  5C27               	subwf	nrfSetRXAddr@len,w,c
  1391  003DB8  502F               	movf	nrfSetRXAddr@i+1,w,c
  1392  003DBA  0A80               	xorlw	128
  1393  003DBC  5829               	subwfb	??_nrfSetRXAddr& (0+255),w,c
  1394  003DBE  B0D8               	btfsc	status,0,c
  1395  003DC0  D7DF               	goto	l968
  1396  003DC2                     l974:
  1397                           
  1398                           ;main.c: 363: }
  1399                           ;main.c: 364: }
  1400                           ;main.c: 366: setCSN(1);
  1401  003DC2  0E00               	movlw	0
  1402  003DC4  6E24               	movwf	setCSN@level+1,c
  1403  003DC6  0E01               	movlw	1
  1404  003DC8  6E23               	movwf	setCSN@level,c
  1405  003DCA  ECA0  F01D         	call	_setCSN	;wreg free
  1406  003DCE  0012               	return	
  1407  003DD0                     __end_of_nrfSetRXAddr:
  1408                           	opt stack 0
  1409                           tblptru	equ	0xFF8
  1410                           tblptrh	equ	0xFF7
  1411                           tblptrl	equ	0xFF6
  1412                           tablat	equ	0xFF5
  1413                           postinc0	equ	0xFEE
  1414                           wreg	equ	0xFE8
  1415                           indf1	equ	0xFE7
  1416                           postdec1	equ	0xFE5
  1417                           fsr1h	equ	0xFE2
  1418                           fsr1l	equ	0xFE1
  1419                           indf2	equ	0xFDF
  1420                           fsr2h	equ	0xFDA
  1421                           fsr2l	equ	0xFD9
  1422                           status	equ	0xFD8
  1423                           
  1424 ;; *************** function _nrfConfigReg *****************
  1425 ;; Defined at:
  1426 ;;		line 309 in file "main.c"
  1427 ;; Parameters:    Size  Location     Type
  1428 ;;  wr              1    wreg     unsigned char 
  1429 ;;  command         1    2[COMRAM] unsigned char 
  1430 ;;  data            1    3[COMRAM] unsigned char 
  1431 ;; Auto vars:     Size  Location     Type
  1432 ;;  wr              1    4[COMRAM] unsigned char 
  1433 ;; Return value:  Size  Location     Type
  1434 ;;                  1    wreg      unsigned char 
  1435 ;; Registers used:
  1436 ;;		wreg, status,2, status,0, cstack
  1437 ;; Tracked objects:
  1438 ;;		On entry : 0/0
  1439 ;;		On exit  : 0/0
  1440 ;;		Unchanged: 0/0
  1441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1442 ;;      Params:         2       0       0       0
  1443 ;;      Locals:         1       0       0       0
  1444 ;;      Temps:          0       0       0       0
  1445 ;;      Totals:         3       0       0       0
  1446 ;;Total ram usage:        3 bytes
  1447 ;; Hardware stack levels used:    1
  1448 ;; Hardware stack levels required when called:    1
  1449 ;; This function calls:
  1450 ;;		_setCSN
  1451 ;;		_spiTransferByte
  1452 ;; This function is called by:
  1453 ;;		_nrfConfig
  1454 ;; This function uses a non-reentrant model
  1455 ;;
  1456                           
  1457                           	psect	text9
  1458  003C26                     __ptext9:
  1459                           	opt stack 0
  1460  003C26                     _nrfConfigReg:
  1461                           	opt stack 28
  1462                           
  1463                           ;incstack = 0
  1464                           ;nrfConfigReg@wr stored from wreg
  1465  003C26  6E27               	movwf	nrfConfigReg@wr,c
  1466                           
  1467                           ;main.c: 311: setCSN(0);
  1468  003C28  0E00               	movlw	0
  1469  003C2A  6E24               	movwf	setCSN@level+1,c
  1470  003C2C  0E00               	movlw	0
  1471  003C2E  6E23               	movwf	setCSN@level,c
  1472  003C30  ECA0  F01D         	call	_setCSN	;wreg free
  1473                           
  1474                           ;main.c: 313: if (wr == 'w') {
  1475  003C34  5027               	movf	nrfConfigReg@wr,w,c
  1476  003C36  0A77               	xorlw	119
  1477  003C38  A4D8               	btfss	status,2,c
  1478  003C3A  D008               	goto	l954
  1479                           
  1480                           ;main.c: 314: spiTransferByte(0x20|command);
  1481  003C3C  5025               	movf	nrfConfigReg@command,w,c
  1482  003C3E  0920               	iorlw	32
  1483  003C40  EC97  F01D         	call	_spiTransferByte
  1484                           
  1485                           ;main.c: 315: spiTransferByte(data);
  1486  003C44  5026               	movf	nrfConfigReg@data,w,c
  1487  003C46  EC97  F01D         	call	_spiTransferByte
  1488                           
  1489                           ;main.c: 316: } else if (wr == 'r') {
  1490  003C4A  D00B               	goto	l958
  1491  003C4C                     l954:
  1492  003C4C  5027               	movf	nrfConfigReg@wr,w,c
  1493  003C4E  0A72               	xorlw	114
  1494  003C50  A4D8               	btfss	status,2,c
  1495  003C52  D007               	goto	l958
  1496                           
  1497                           ;main.c: 317: spiTransferByte(0x00|command);
  1498  003C54  5025               	movf	nrfConfigReg@command,w,c
  1499  003C56  EC97  F01D         	call	_spiTransferByte
  1500                           
  1501                           ;main.c: 318: data = spiTransferByte(0xFF);
  1502  003C5A  0EFF               	movlw	255
  1503  003C5C  EC97  F01D         	call	_spiTransferByte
  1504  003C60  6E26               	movwf	nrfConfigReg@data,c
  1505  003C62                     l958:
  1506                           
  1507                           ;main.c: 319: }
  1508                           ;main.c: 321: setCSN(1);
  1509  003C62  0E00               	movlw	0
  1510  003C64  6E24               	movwf	setCSN@level+1,c
  1511  003C66  0E01               	movlw	1
  1512  003C68  6E23               	movwf	setCSN@level,c
  1513  003C6A  ECA0  F01D         	call	_setCSN	;wreg free
  1514  003C6E  0012               	return	
  1515  003C70                     __end_of_nrfConfigReg:
  1516                           	opt stack 0
  1517                           tblptru	equ	0xFF8
  1518                           tblptrh	equ	0xFF7
  1519                           tblptrl	equ	0xFF6
  1520                           tablat	equ	0xFF5
  1521                           postinc0	equ	0xFEE
  1522                           wreg	equ	0xFE8
  1523                           indf1	equ	0xFE7
  1524                           postdec1	equ	0xFE5
  1525                           fsr1h	equ	0xFE2
  1526                           fsr1l	equ	0xFE1
  1527                           indf2	equ	0xFDF
  1528                           fsr2h	equ	0xFDA
  1529                           fsr2l	equ	0xFD9
  1530                           status	equ	0xFD8
  1531                           
  1532 ;; *************** function _spiTransferByte *****************
  1533 ;; Defined at:
  1534 ;;		line 401 in file "main.c"
  1535 ;; Parameters:    Size  Location     Type
  1536 ;;  data            1    wreg     unsigned char 
  1537 ;; Auto vars:     Size  Location     Type
  1538 ;;  data            1    0[COMRAM] unsigned char 
  1539 ;; Return value:  Size  Location     Type
  1540 ;;                  1    wreg      unsigned char 
  1541 ;; Registers used:
  1542 ;;		wreg, status,2, cstack
  1543 ;; Tracked objects:
  1544 ;;		On entry : 0/0
  1545 ;;		On exit  : 0/0
  1546 ;;		Unchanged: 0/0
  1547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1548 ;;      Params:         0       0       0       0
  1549 ;;      Locals:         1       0       0       0
  1550 ;;      Temps:          0       0       0       0
  1551 ;;      Totals:         1       0       0       0
  1552 ;;Total ram usage:        1 bytes
  1553 ;; Hardware stack levels used:    1
  1554 ;; This function calls:
  1555 ;;		Nothing
  1556 ;; This function is called by:
  1557 ;;		_nrfGetStatus
  1558 ;;		_nrfConfigReg
  1559 ;;		_nrfSetTXAddr
  1560 ;;		_nrfSetRXAddr
  1561 ;;		_spiTransfer
  1562 ;;		_nrfTXData
  1563 ;; This function uses a non-reentrant model
  1564 ;;
  1565                           
  1566                           	psect	text10
  1567  003B2E                     __ptext10:
  1568                           	opt stack 0
  1569  003B2E                     _spiTransferByte:
  1570                           	opt stack 29
  1571                           
  1572                           ;incstack = 0
  1573                           ;spiTransferByte@data stored from wreg
  1574  003B2E  6E23               	movwf	spiTransferByte@data,c
  1575                           
  1576                           ;main.c: 403: SSP1BUF = data;
  1577  003B30  C023  FFC9         	movff	spiTransferByte@data,4041	;volatile
  1578                           
  1579                           ;main.c: 405: _delay((unsigned long)((8)*(64000000/4000000.0)));
  1580  003B34  0E2A               	movlw	42
  1581  003B36                     u377:
  1582  003B36  2EE8               	decfsz	wreg,f,c
  1583  003B38  D7FE               	goto	u377
  1584  003B3A  D000               	nop2		;nop
  1585                           
  1586                           ;main.c: 407: return SSP1BUF;
  1587  003B3C  50C9               	movf	4041,w,c	;volatile
  1588  003B3E  0012               	return	
  1589  003B40                     __end_of_spiTransferByte:
  1590                           	opt stack 0
  1591                           tblptru	equ	0xFF8
  1592                           tblptrh	equ	0xFF7
  1593                           tblptrl	equ	0xFF6
  1594                           tablat	equ	0xFF5
  1595                           postinc0	equ	0xFEE
  1596                           wreg	equ	0xFE8
  1597                           indf1	equ	0xFE7
  1598                           postdec1	equ	0xFE5
  1599                           fsr1h	equ	0xFE2
  1600                           fsr1l	equ	0xFE1
  1601                           indf2	equ	0xFDF
  1602                           fsr2h	equ	0xFDA
  1603                           fsr2l	equ	0xFD9
  1604                           status	equ	0xFD8
  1605                           
  1606 ;; *************** function _setCSN *****************
  1607 ;; Defined at:
  1608 ;;		line 283 in file "main.c"
  1609 ;; Parameters:    Size  Location     Type
  1610 ;;  level           2    0[COMRAM] int 
  1611 ;; Auto vars:     Size  Location     Type
  1612 ;;		None
  1613 ;; Return value:  Size  Location     Type
  1614 ;;		None               void
  1615 ;; Registers used:
  1616 ;;		wreg, status,2, status,0
  1617 ;; Tracked objects:
  1618 ;;		On entry : 0/0
  1619 ;;		On exit  : 0/0
  1620 ;;		Unchanged: 0/0
  1621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1622 ;;      Params:         2       0       0       0
  1623 ;;      Locals:         0       0       0       0
  1624 ;;      Temps:          0       0       0       0
  1625 ;;      Totals:         2       0       0       0
  1626 ;;Total ram usage:        2 bytes
  1627 ;; Hardware stack levels used:    1
  1628 ;; This function calls:
  1629 ;;		Nothing
  1630 ;; This function is called by:
  1631 ;;		_nrfGetStatus
  1632 ;;		_nrfConfigReg
  1633 ;;		_nrfSetTXAddr
  1634 ;;		_nrfSetRXAddr
  1635 ;;		_spiTransfer
  1636 ;;		_nrfTXData
  1637 ;; This function uses a non-reentrant model
  1638 ;;
  1639                           
  1640                           	psect	text11
  1641  003B40                     __ptext11:
  1642                           	opt stack 0
  1643  003B40                     _setCSN:
  1644                           	opt stack 29
  1645                           
  1646                           ;main.c: 285: if (level == 1) {
  1647                           
  1648                           ;incstack = 0
  1649  003B40  0423               	decf	setCSN@level,w,c
  1650  003B42  1024               	iorwf	setCSN@level+1,w,c
  1651  003B44  A4D8               	btfss	status,2,c
  1652  003B46  D006               	goto	l90
  1653                           
  1654                           ;main.c: 286: _delay((unsigned long)((1)*(64000000/4000000.0)));
  1655  003B48  0E05               	movlw	5
  1656  003B4A                     u387:
  1657  003B4A  2EE8               	decfsz	wreg,f,c
  1658  003B4C  D7FE               	goto	u387
  1659  003B4E  F000               	nop	
  1660                           
  1661                           ;main.c: 287: LATAbits.LATA2 = 1;
  1662  003B50  8489               	bsf	3977,2,c	;volatile
  1663                           
  1664                           ;main.c: 288: } else {
  1665  003B52  0012               	return	
  1666  003B54                     l90:
  1667                           
  1668                           ;main.c: 289: LATAbits.LATA2 = 0;
  1669  003B54  9489               	bcf	3977,2,c	;volatile
  1670  003B56  0012               	return	
  1671  003B58                     __end_of_setCSN:
  1672                           	opt stack 0
  1673                           tblptru	equ	0xFF8
  1674                           tblptrh	equ	0xFF7
  1675                           tblptrl	equ	0xFF6
  1676                           tablat	equ	0xFF5
  1677                           postinc0	equ	0xFEE
  1678                           wreg	equ	0xFE8
  1679                           indf1	equ	0xFE7
  1680                           postdec1	equ	0xFE5
  1681                           fsr1h	equ	0xFE2
  1682                           fsr1l	equ	0xFE1
  1683                           indf2	equ	0xFDF
  1684                           fsr2h	equ	0xFDA
  1685                           fsr2l	equ	0xFD9
  1686                           status	equ	0xFD8
  1687                           
  1688 ;; *************** function _delay10ms *****************
  1689 ;; Defined at:
  1690 ;;		line 441 in file "main.c"
  1691 ;; Parameters:    Size  Location     Type
  1692 ;;  ms_multi        2    0[COMRAM] int 
  1693 ;; Auto vars:     Size  Location     Type
  1694 ;;  i               2    3[COMRAM] int 
  1695 ;; Return value:  Size  Location     Type
  1696 ;;		None               void
  1697 ;; Registers used:
  1698 ;;		wreg, status,2, status,0
  1699 ;; Tracked objects:
  1700 ;;		On entry : 0/0
  1701 ;;		On exit  : 0/0
  1702 ;;		Unchanged: 0/0
  1703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1704 ;;      Params:         2       0       0       0
  1705 ;;      Locals:         2       0       0       0
  1706 ;;      Temps:          1       0       0       0
  1707 ;;      Totals:         5       0       0       0
  1708 ;;Total ram usage:        5 bytes
  1709 ;; Hardware stack levels used:    1
  1710 ;; This function calls:
  1711 ;;		Nothing
  1712 ;; This function is called by:
  1713 ;;		_main
  1714 ;; This function uses a non-reentrant model
  1715 ;;
  1716                           
  1717                           	psect	text12
  1718  003BAC                     __ptext12:
  1719                           	opt stack 0
  1720  003BAC                     _delay10ms:
  1721                           	opt stack 30
  1722                           
  1723                           ;main.c: 442: int i = 0;
  1724                           
  1725                           ;incstack = 0
  1726  003BAC  0E00               	movlw	0
  1727  003BAE  6E27               	movwf	delay10ms@i+1,c
  1728  003BB0  0E00               	movlw	0
  1729  003BB2  6E26               	movwf	delay10ms@i,c
  1730                           
  1731                           ;main.c: 443: for (i=0;i<ms_multi;i++) {
  1732  003BB4  0E00               	movlw	0
  1733  003BB6  6E27               	movwf	delay10ms@i+1,c
  1734  003BB8  0E00               	movlw	0
  1735  003BBA  6E26               	movwf	delay10ms@i,c
  1736  003BBC  D00A               	goto	l143
  1737  003BBE                     l836:
  1738                           
  1739                           ;main.c: 444: _delay((unsigned long)((11)*(64000000/4000.0)));
  1740  003BBE  0EE5               	movlw	229
  1741  003BC0  6E25               	movwf	??_delay10ms& (0+255),c
  1742  003BC2  0E91               	movlw	145
  1743  003BC4                     u397:
  1744  003BC4  2EE8               	decfsz	wreg,f,c
  1745  003BC6  D7FE               	goto	u397
  1746  003BC8  2E25               	decfsz	??_delay10ms& (0+255),f,c
  1747  003BCA  D7FC               	goto	u397
  1748  003BCC  F000               	nop	
  1749  003BCE  4A26               	infsnz	delay10ms@i,f,c
  1750  003BD0  2A27               	incf	delay10ms@i+1,f,c
  1751  003BD2                     l143:
  1752  003BD2  5027               	movf	delay10ms@i+1,w,c
  1753  003BD4  0A80               	xorlw	128
  1754  003BD6  6E25               	movwf	??_delay10ms& (0+255),c
  1755  003BD8  5023               	movf	delay10ms@ms_multi,w,c
  1756  003BDA  5C26               	subwf	delay10ms@i,w,c
  1757  003BDC  5024               	movf	delay10ms@ms_multi+1,w,c
  1758  003BDE  0A80               	xorlw	128
  1759  003BE0  5825               	subwfb	??_delay10ms& (0+255),w,c
  1760  003BE2  B0D8               	btfsc	status,0,c
  1761  003BE4  0012               	return	
  1762  003BE6  D7EB               	goto	l836
  1763  003BE8                     __end_of_delay10ms:
  1764                           	opt stack 0
  1765  0000                     tblptru	equ	0xFF8
  1766                           tblptrh	equ	0xFF7
  1767                           tblptrl	equ	0xFF6
  1768                           tablat	equ	0xFF5
  1769                           postinc0	equ	0xFEE
  1770                           wreg	equ	0xFE8
  1771                           indf1	equ	0xFE7
  1772                           postdec1	equ	0xFE5
  1773                           fsr1h	equ	0xFE2
  1774                           fsr1l	equ	0xFE1
  1775                           indf2	equ	0xFDF
  1776                           fsr2h	equ	0xFDA
  1777                           fsr2l	equ	0xFD9
  1778                           status	equ	0xFD8
  1779                           tblptru	equ	0xFF8
  1780                           tblptrh	equ	0xFF7
  1781                           tblptrl	equ	0xFF6
  1782                           tablat	equ	0xFF5
  1783                           postinc0	equ	0xFEE
  1784                           wreg	equ	0xFE8
  1785                           indf1	equ	0xFE7
  1786                           postdec1	equ	0xFE5
  1787                           fsr1h	equ	0xFE2
  1788                           fsr1l	equ	0xFE1
  1789                           indf2	equ	0xFDF
  1790                           fsr2h	equ	0xFDA
  1791                           fsr2l	equ	0xFD9
  1792                           status	equ	0xFD8
  1793                           
  1794                           	psect	rparam
  1795  0000                     tblptru	equ	0xFF8
  1796                           tblptrh	equ	0xFF7
  1797                           tblptrl	equ	0xFF6
  1798                           tablat	equ	0xFF5
  1799                           postinc0	equ	0xFEE
  1800                           wreg	equ	0xFE8
  1801                           indf1	equ	0xFE7
  1802                           postdec1	equ	0xFE5
  1803                           fsr1h	equ	0xFE2
  1804                           fsr1l	equ	0xFE1
  1805                           indf2	equ	0xFDF
  1806                           fsr2h	equ	0xFDA
  1807                           fsr2l	equ	0xFD9
  1808                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        15
    BSS         66
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     18      67
    BANK0           160      0      32
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    nrfSetRXAddr@addr	PTR unsigned char  size(2) Largest target is 4
		 -> RX_ADDRESS(COMRAM[4]), 

    nrfSetTXAddr@addr	PTR unsigned char  size(2) Largest target is 4
		 -> TX_ADDRESS(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->_spiTransfer
    _nrfTXData->_setCSN
    _nrfGetStatus->_setCSN
    _nrfConfig->_spiTransfer
    _spiTransfer->_setCSN
    _nrfSetTXAddr->_setCSN
    _nrfSetRXAddr->_setCSN
    _nrfConfigReg->_setCSN

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    7467
                                             16 COMRAM     2     2      0
                          _delay10ms
                          _nrfConfig
                       _nrfGetStatus
                          _nrfTXData
                         _portConfig
                        _spiConfig_1
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiConfig_1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _portConfig                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _nrfTXData                                           10     8      2     869
                                              2 COMRAM    10     8      2
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (1) _nrfGetStatus                                         0     0      0     680
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (1) _nrfConfig                                            0     0      0    4599
                       _nrfConfigReg
                       _nrfSetRXAddr
                       _nrfSetTXAddr
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiTransfer                                         14    11      3    1136
                                              2 COMRAM    14    11      3
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfSetTXAddr                                        10     6      4     898
                                              2 COMRAM    10     6      4
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfSetRXAddr                                        11     7      4     920
                                              2 COMRAM    11     7      4
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfConfigReg                                         3     1      2    1645
                                              2 COMRAM     3     1      2
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _spiTransferByte                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setCSN                                               2     0      2     658
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _delay10ms                                            5     3      2     159
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay10ms
   _nrfConfig
     _nrfConfigReg
       _setCSN
       _spiTransferByte
     _nrfSetRXAddr
       _setCSN
       _spiTransferByte
     _nrfSetTXAddr
       _setCSN
       _spiTransferByte
     _spiTransfer
       _setCSN
       _spiTransferByte
   _nrfGetStatus
     _setCSN
     _spiTransferByte
   _nrfTXData
     _setCSN
     _spiTransferByte
   _portConfig
   _spiConfig_1
   _spiTransfer
     _setCSN
     _spiTransferByte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       6        0.0%
BANK2              100      0       0       7        0.0%
BITBANK1           100      0       0       9        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      20       4       20.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     12      43       1       70.5%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      63       8        0.0%
DATA                 0      0      63      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Fri Sep 26 11:07:03 2014

__size_of_spiTransferByte 0012                        l90 3B54                _RX_ADDRESS 003C  
             __CFG_LVP$ON 000000                       l143 3BD2                       l137 3F20  
                     l930 3F66                       l836 3BBE                       l942 3FDE  
                     l934 3F74                       l926 3F56                       l944 3FF2  
                     l954 3C4C                       l938 3F86                       l972 3DAE  
                     l958 3C62                       l974 3DC2                       l990 3CD6  
                     l968 3D80                       l984 3C94                       l988 3CC2  
                     u347 3EF4                       u357 3F02                       u367 3F18  
                     u377 3B36                       u387 3B4A                       u397 3BC4  
                     wreg 000FE8                _TX_ADDRESS 0040                      l1012 3ED0  
                    l1014 3EE4                      l1008 3EA2                      l1026 3F16  
                    l1044 3D04                      l1064 3D4A                      _LATA 000F89  
                    _LATB 000F8A                      _LATC 000F8B        spiTransfer@command 0025  
                    _main 3CE4                      indf1 000FE7                      fsr1l 000FE1  
                    indf2 000FDF                      fsr2l 000FD9             __CFG_BORV$190 000000  
                    start 0000             __CFG_IESO$OFF 000000            nrfConfigReg@wr 0027  
                   ?_main 0023                     _TRISA 000F92                     _TRISB 000F93  
                   _TRISC 000F94            __CFG_FCMEN$OFF 000000        __CFG_MCLRE$EXTMCLR 000000  
                   tablat 000FF5                     status 000FD8            __CFG_HFOFST$ON 000000  
          __CFG_FOSC$HSHP 000000           __initialization 3BE8              __end_of_main 3D58  
     spiTransferByte@data 0023                    ??_main 0033             __activetblptr 000000  
       ??_spiTransferByte 0023            __CFG_PLLCFG$ON 000000             nrfSetRXAddr@i 002E  
           nrfSetTXAddr@i 002D            __CFG_WDTEN$OFF 000000              ?_spiConfig_1 0023  
          __CFG_PWRTEN$ON 000000            __CFG_XINST$OFF 000000            __CFG_STVREN$ON 000000  
                  _setCSN 3B40                    clear_0 3BEE                    clear_1 3BFA  
             setCSN@level 0023             ?_nrfGetStatus 0023             ?_nrfConfigReg 0025  
            __pdataCOMRAM 0035              ?_spiTransfer 0025                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8                __accesstop 0060  
 __end_of__initialization 3C20           __CFG_PBADEN$OFF 000000             ?_nrfSetRXAddr 0025  
           ?_nrfSetTXAddr 0025            __pcstackCOMRAM 0023        __size_of_delay10ms 003C  
          ??_nrfGetStatus 0025            _EN_RXADDR_CURR 0036            ??_nrfConfigReg 0027  
        nrfConfigReg@data 0026                _dataBufOut 0001                __pbssBANK0 0060  
          ??_nrfSetRXAddr 0029            ??_nrfSetTXAddr 0029        __size_of_nrfTXData 00B8  
      __size_of_nrfConfig 00AE       nrfConfigReg@command 0025        __CFG_CCP2MX$PORTC1 000000  
      __CFG_CCP3MX$PORTB5 000000                   ?_setCSN 0023                   _SSP1ADD 000FC8  
                 _SSP1BUF 000FC9         __end_of_delay10ms 3BE8          nrfSetRXAddr@addr 0025  
        nrfSetRXAddr@pipe 002D                   __Hparam 0000                   __Lparam 0000  
    __size_of_spiConfig_1 0018           _spiTransferByte 3B2E                delay10ms@i 0026  
           _RX_PW_P0_CURR 0039                   __pcinit 3BE8           __size_of_setCSN 0018  
        nrfSetTXAddr@addr 0025                   __ramtop 0300                   __ptext0 3CE4  
                 __ptext1 3B58                   __ptext2 3B70                   __ptext3 3E7E  
                 __ptext4 3B8A                   __ptext5 3DD0                   __ptext6 3F36  
                 __ptext7 3C70                   __ptext8 3D58                   __ptext9 3C26  
       __end_of_nrfTXData 3F36         __end_of_nrfConfig 3E7E      __size_of_spiTransfer 00CA  
    end_of_initialization 3C20      __end_of_nrfGetStatus 3BAC      __end_of_nrfConfigReg 3C70  
                 postdec1 000FE5                   postinc0 000FEE              nrfTXData@len 0025  
              _portConfig 3B70      __end_of_nrfSetRXAddr 3DD0      __end_of_nrfSetTXAddr 3CE4  
 __end_of_spiTransferByte 3B40             __pidataCOMRAM 3B1F            __end_of_setCSN 3B58  
     start_initialization 3BE8                  ??_setCSN 0025               ?_portConfig 0023  
              nrfTXData@i 002D               __pbssCOMRAM 0001     __size_of_nrfGetStatus 0022  
   __size_of_nrfConfigReg 004A                 _dataBufIn 0060          ?_spiTransferByte 0023  
               _delay10ms 3BAC               _CONFIG_CURR 0035             _SETUP_AW_CURR 003A  
   __size_of_nrfSetRXAddr 0078     __size_of_nrfSetTXAddr 0074           _SETUP_RETR_CURR 003B  
        __CFG_PRICLKEN$ON 000000              _nrfGetStatus 3B8A              _nrfConfigReg 3C26  
         nrfSetRXAddr@len 0027                 _nrfSTATUS 0022                 _nrfTXData 3E7E  
         nrfSetTXAddr@len 0027                 _nrfConfig 3DD0       __size_of_portConfig 001A  
                _LATAbits 000F89                ?_delay10ms 0023             ??_spiConfig_1 0023  
            _nrfSetRXAddr 3D58              _nrfSetTXAddr 3C70          __CFG_WDTPS$32768 000000  
           _RF_SETUP_CURR 0038         delay10ms@ms_multi 0023             ??_spiTransfer 0028  
               main@count 0033                ?_nrfTXData 0025                 copy_data0 3C14  
              ?_nrfConfig 0023                  __Hrparam 0000                  __Lrparam 0000  
      __CFG_BOREN$SBORDIS 000000         __CFG_P2BMX$PORTB5 000000       __end_of_spiConfig_1 3B70  
                __ptext10 3B2E                  __ptext11 3B40                  __ptext12 3BAC  
            _SSP1CON1bits 000FC6       __end_of_spiTransfer 4000             __size_of_main 0074  
             ??_delay10ms 0025                _EN_AA_CURR 0021              _SSP1STATbits 000FC7  
            ??_portConfig 0023            nrfTXData@i_556 002B               ??_nrfTXData 0027  
             ??_nrfConfig 0033        __end_of_portConfig 3B8A               _spiConfig_1 3B58  
          spiTransfer@len 0026            spiTransfer@wrn 0030                _RF_CH_CURR 0037  
             _spiTransfer 3F36         __CFG_T3CMX$PORTC0 000000              spiTransfer@i 0031  
