

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Mon Sep 29 15:23:24 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F24K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    26  0000                     
    27                           	psect	idataCOMRAM
    28  003AD8                     __pidataCOMRAM:
    29                           	opt stack 0
    30                           
    31                           ;initializer for _CONFIG_CURR
    32  003AD8  4A                 	db	74
    33                           
    34                           ;initializer for _EN_AA_CURR
    35  003AD9  03                 	db	3
    36                           
    37                           ;initializer for _EN_RXADDR_CURR
    38  003ADA  03                 	db	3
    39                           
    40                           ;initializer for _RF_CH_CURR
    41  003ADB  69                 	db	105
    42                           
    43                           ;initializer for _RF_SETUP_CURR
    44  003ADC  06                 	db	6
    45                           
    46                           ;initializer for _RX_PW_P0_CURR
    47  003ADD  01                 	db	1
    48                           
    49                           ;initializer for _SETUP_AW_CURR
    50  003ADE  02                 	db	2
    51                           
    52                           ;initializer for _SETUP_RETR_CURR
    53  003ADF  35                 	db	53
    54                           
    55                           ;initializer for _RX_ADDRESS
    56  003AE0  E7                 	db	231
    57  003AE1  E7                 	db	231
    58  003AE2  E7                 	db	231
    59  003AE3  E7                 	db	231
    60                           
    61                           ;initializer for _TX_ADDRESS
    62  003AE4  C7                 	db	199
    63  003AE5  C7                 	db	199
    64  003AE6  C7                 	db	199
    65  003AE7  C7                 	db	199
    66  0000                     _LATA	set	3977
    67  0000                     _LATAbits	set	3977
    68  0000                     _LATB	set	3978
    69  0000                     _LATC	set	3979
    70  0000                     _SSP1ADD	set	4040
    71  0000                     _SSP1BUF	set	4041
    72  0000                     _SSP1CON1bits	set	4038
    73  0000                     _SSP1STATbits	set	4039
    74  0000                     _TRISA	set	3986
    75  0000                     _TRISB	set	3987
    76  0000                     _TRISC	set	3988
    77                           
    78                           ; #config settings
    79  0000                     
    80                           	psect	cinit
    81  003BA2                     __pcinit:
    82                           	opt stack 0
    83  003BA2                     start_initialization:
    84                           	opt stack 0
    85  003BA2                     __initialization:
    86                           	opt stack 0
    87                           
    88                           ; Clear objects allocated to BANK0 (32 bytes)
    89  003BA2  EE00  F060         	lfsr	0,__pbssBANK0
    90  003BA6  0E20               	movlw	32
    91  003BA8                     clear_0:
    92  003BA8  6AEE               	clrf	postinc0,c
    93  003BAA  06E8               	decf	wreg,f,c
    94  003BAC  E1FD               	bnz	clear_0
    95                           
    96                           ; Clear objects allocated to COMRAM (33 bytes)
    97  003BAE  EE00  F001         	lfsr	0,__pbssCOMRAM
    98  003BB2  0E21               	movlw	33
    99  003BB4                     clear_1:
   100  003BB4  6AEE               	clrf	postinc0,c
   101  003BB6  06E8               	decf	wreg,f,c
   102  003BB8  E1FD               	bnz	clear_1
   103                           
   104                           ; Initialize objects allocated to COMRAM (16 bytes)
   105                           ; load TBLPTR registers with __pidataCOMRAM
   106  003BBA  0ED8               	movlw	low __pidataCOMRAM
   107  003BBC  6EF6               	movwf	tblptrl,c
   108  003BBE  0E3A               	movlw	high __pidataCOMRAM
   109  003BC0  6EF7               	movwf	tblptrh,c
   110  003BC2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   111  003BC4  6EF8               	movwf	tblptru,c
   112  003BC6  EE00  F036         	lfsr	0,__pdataCOMRAM
   113  003BCA  EE10 F010          	lfsr	1,16
   114  003BCE                     copy_data0:
   115  003BCE  0009               	tblrd		*+
   116  003BD0  CFF5 FFEE          	movff	tablat,postinc0
   117  003BD4  50E5               	movf	postdec1,w,c
   118  003BD6  50E1               	movf	fsr1l,w,c
   119  003BD8  E1FA               	bnz	copy_data0
   120  003BDA                     end_of_initialization:
   121                           	opt stack 0
   122  003BDA                     __end_of__initialization:
   123                           	opt stack 0
   124  003BDA  0100               	movlb	0
   125  003BDC  EF30  F01F         	goto	_main	;jump to C main() function
   126                           tblptru	equ	0xFF8
   127                           tblptrh	equ	0xFF7
   128                           tblptrl	equ	0xFF6
   129                           tablat	equ	0xFF5
   130                           postinc0	equ	0xFEE
   131                           wreg	equ	0xFE8
   132                           postdec1	equ	0xFE5
   133                           fsr1l	equ	0xFE1
   134                           
   135                           	psect	bssCOMRAM
   136  000001                     __pbssCOMRAM:
   137                           	opt stack 0
   138  000001                     _dataBufOut:
   139                           	opt stack 0
   140  000001                     	ds	32
   141  000021                     _nrfSTATUS:
   142                           	opt stack 0
   143  000021                     	ds	1
   144                           tblptru	equ	0xFF8
   145                           tblptrh	equ	0xFF7
   146                           tblptrl	equ	0xFF6
   147                           tablat	equ	0xFF5
   148                           postinc0	equ	0xFEE
   149                           wreg	equ	0xFE8
   150                           postdec1	equ	0xFE5
   151                           fsr1l	equ	0xFE1
   152                           
   153                           	psect	dataCOMRAM
   154  000036                     __pdataCOMRAM:
   155                           	opt stack 0
   156  000036                     _CONFIG_CURR:
   157                           	opt stack 0
   158  000036                     	ds	1
   159  000037                     _EN_AA_CURR:
   160                           	opt stack 0
   161  000037                     	ds	1
   162  000038                     _EN_RXADDR_CURR:
   163                           	opt stack 0
   164  000038                     	ds	1
   165  000039                     _RF_CH_CURR:
   166                           	opt stack 0
   167  000039                     	ds	1
   168  00003A                     _RF_SETUP_CURR:
   169                           	opt stack 0
   170  00003A                     	ds	1
   171  00003B                     _RX_PW_P0_CURR:
   172                           	opt stack 0
   173  00003B                     	ds	1
   174  00003C                     _SETUP_AW_CURR:
   175                           	opt stack 0
   176  00003C                     	ds	1
   177  00003D                     _SETUP_RETR_CURR:
   178                           	opt stack 0
   179  00003D                     	ds	1
   180  00003E                     _RX_ADDRESS:
   181                           	opt stack 0
   182  00003E                     	ds	4
   183  000042                     _TX_ADDRESS:
   184                           	opt stack 0
   185  000042                     	ds	4
   186                           tblptru	equ	0xFF8
   187                           tblptrh	equ	0xFF7
   188                           tblptrl	equ	0xFF6
   189                           tablat	equ	0xFF5
   190                           postinc0	equ	0xFEE
   191                           wreg	equ	0xFE8
   192                           postdec1	equ	0xFE5
   193                           fsr1l	equ	0xFE1
   194                           
   195                           	psect	bssBANK0
   196  000060                     __pbssBANK0:
   197                           	opt stack 0
   198  000060                     _dataBufIn:
   199                           	opt stack 0
   200  000060                     	ds	32
   201                           tblptru	equ	0xFF8
   202                           tblptrh	equ	0xFF7
   203                           tblptrl	equ	0xFF6
   204                           tablat	equ	0xFF5
   205                           postinc0	equ	0xFEE
   206                           wreg	equ	0xFE8
   207                           postdec1	equ	0xFE5
   208                           fsr1l	equ	0xFE1
   209                           
   210                           	psect	cstackCOMRAM
   211  000022                     __pcstackCOMRAM:
   212                           	opt stack 0
   213  000022                     spiTransferByte@data:
   214                           	opt stack 0
   215  000022                     setCSN@level:
   216                           	opt stack 0
   217  000022                     delay10ms@ms_multi:
   218                           	opt stack 0
   219                           
   220                           ; 2 bytes @ 0x0
   221  000022                     	ds	2
   222  000024                     ??_delay10ms:
   223  000024                     nrfConfigReg@command:
   224                           	opt stack 0
   225  000024                     spiTransfer@command:
   226                           	opt stack 0
   227  000024                     nrfSetTXAddr@addr:
   228                           	opt stack 0
   229  000024                     nrfSetRXAddr@addr:
   230                           	opt stack 0
   231  000024                     nrfTXData@len:
   232                           	opt stack 0
   233                           
   234                           ; 2 bytes @ 0x2
   235  000024                     	ds	1
   236  000025                     nrfConfigReg@data:
   237                           	opt stack 0
   238  000025                     spiTransfer@len:
   239                           	opt stack 0
   240  000025                     delay10ms@i:
   241                           	opt stack 0
   242                           
   243                           ; 2 bytes @ 0x3
   244  000025                     	ds	1
   245  000026                     ??_nrfTXData:
   246  000026                     nrfConfigReg@wr:
   247                           	opt stack 0
   248  000026                     nrfSetTXAddr@len:
   249                           	opt stack 0
   250  000026                     nrfSetRXAddr@len:
   251                           	opt stack 0
   252                           
   253                           ; 2 bytes @ 0x4
   254  000026                     	ds	1
   255  000027                     ??_spiTransfer:
   256                           
   257                           ; 0 bytes @ 0x5
   258  000027                     	ds	1
   259  000028                     ??_nrfSetRXAddr:
   260  000028                     ??_nrfSetTXAddr:
   261                           
   262                           ; 0 bytes @ 0x6
   263  000028                     	ds	2
   264  00002A                     nrfTXData@i:
   265                           	opt stack 0
   266                           
   267                           ; 2 bytes @ 0x8
   268  00002A                     	ds	2
   269  00002C                     nrfSetRXAddr@pipe:
   270                           	opt stack 0
   271  00002C                     nrfSetTXAddr@i:
   272                           	opt stack 0
   273                           
   274                           ; 2 bytes @ 0xA
   275  00002C                     	ds	1
   276  00002D                     nrfSetRXAddr@i:
   277                           	opt stack 0
   278                           
   279                           ; 2 bytes @ 0xB
   280  00002D                     	ds	2
   281  00002F                     spiTransfer@wrn:
   282                           	opt stack 0
   283                           
   284                           ; 1 bytes @ 0xD
   285  00002F                     	ds	1
   286  000030                     spiTransfer@i:
   287                           	opt stack 0
   288                           
   289                           ; 2 bytes @ 0xE
   290  000030                     	ds	2
   291  000032                     main@count:
   292                           	opt stack 0
   293                           
   294                           ; 2 bytes @ 0x10
   295  000032                     	ds	2
   296  000034                     main@maxRTFlag:
   297                           	opt stack 0
   298                           
   299                           ; 1 bytes @ 0x12
   300  000034                     	ds	1
   301  000035                     main@txDSFlag:
   302                           	opt stack 0
   303                           
   304                           ; 1 bytes @ 0x13
   305  000035                     	ds	1
   306                           tblptru	equ	0xFF8
   307                           tblptrh	equ	0xFF7
   308                           tblptrl	equ	0xFF6
   309                           tablat	equ	0xFF5
   310                           postinc0	equ	0xFEE
   311                           wreg	equ	0xFE8
   312                           postdec1	equ	0xFE5
   313                           fsr1l	equ	0xFE1
   314                           
   315 ;;
   316 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   317 ;;
   318 ;; *************** function _main *****************
   319 ;; Defined at:
   320 ;;		line 189 in file "main.c"
   321 ;; Parameters:    Size  Location     Type
   322 ;;		None
   323 ;; Auto vars:     Size  Location     Type
   324 ;;  txDSFlag        1   19[COMRAM] unsigned char 
   325 ;;  maxRTFlag       1   18[COMRAM] unsigned char 
   326 ;;  count           2   16[COMRAM] int 
   327 ;; Return value:  Size  Location     Type
   328 ;;		None               void
   329 ;; Registers used:
   330 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   331 ;; Tracked objects:
   332 ;;		On entry : 0/0
   333 ;;		On exit  : 0/0
   334 ;;		Unchanged: 0/0
   335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   336 ;;      Params:         0       0       0       0
   337 ;;      Locals:         4       0       0       0
   338 ;;      Temps:          0       0       0       0
   339 ;;      Totals:         4       0       0       0
   340 ;;Total ram usage:        4 bytes
   341 ;; Hardware stack levels required when called:    3
   342 ;; This function calls:
   343 ;;		_delay10ms
   344 ;;		_nrfConfig
   345 ;;		_nrfGetStatus
   346 ;;		_nrfTXData
   347 ;;		_portConfig
   348 ;;		_spiConfig_1
   349 ;;		_spiTransfer
   350 ;; This function is called by:
   351 ;;		Startup code after reset
   352 ;; This function uses a non-reentrant model
   353 ;;
   354                           
   355                           	psect	text0
   356  003E60                     __ptext0:
   357                           	opt stack 0
   358  003E60                     _main:
   359                           	opt stack 28
   360                           
   361                           ;main.c: 192: portConfig();
   362                           
   363                           ;incstack = 0
   364  003E60  EC95  F01D         	call	_portConfig	;wreg free
   365                           
   366                           ;main.c: 193: spiConfig_1();
   367  003E64  EC89  F01D         	call	_spiConfig_1	;wreg free
   368                           
   369                           ;main.c: 194: nrfConfig();
   370  003E68  EC97  F01F         	call	_nrfConfig	;wreg free
   371                           
   372                           ;main.c: 196: delay10ms(1);
   373  003E6C  0E00               	movlw	0
   374  003E6E  6E23               	movwf	delay10ms@ms_multi+1,c
   375  003E70  0E01               	movlw	1
   376  003E72  6E22               	movwf	delay10ms@ms_multi,c
   377  003E74  ECB3  F01D         	call	_delay10ms	;wreg free
   378                           
   379                           ;main.c: 199: int count = 1;
   380  003E78  0E00               	movlw	0
   381  003E7A  6E33               	movwf	main@count+1,c
   382  003E7C  0E01               	movlw	1
   383  003E7E  6E32               	movwf	main@count,c
   384  003E80                     l1057:
   385                           
   386                           ;main.c: 202: dataBufOut[0] = count;
   387  003E80  C032  F001         	movff	main@count,_dataBufOut
   388                           
   389                           ;main.c: 203: nrfTXData(1);
   390  003E84  0E00               	movlw	0
   391  003E86  6E25               	movwf	nrfTXData@len+1,c
   392  003E88  0E01               	movlw	1
   393  003E8A  6E24               	movwf	nrfTXData@len,c
   394  003E8C  EC8B  F01E         	call	_nrfTXData	;wreg free
   395                           
   396                           ;main.c: 204: count++;
   397  003E90  4A32               	infsnz	main@count,f,c
   398  003E92  2A33               	incf	main@count+1,f,c
   399                           
   400                           ;main.c: 206: delay10ms(2);
   401  003E94  0E00               	movlw	0
   402  003E96  6E23               	movwf	delay10ms@ms_multi+1,c
   403  003E98  0E02               	movlw	2
   404  003E9A  6E22               	movwf	delay10ms@ms_multi,c
   405  003E9C  ECB3  F01D         	call	_delay10ms	;wreg free
   406                           
   407                           ;main.c: 208: nrfGetStatus();
   408  003EA0  ECA2  F01D         	call	_nrfGetStatus	;wreg free
   409                           
   410                           ;main.c: 211: while (nrfSTATUS != 0x0E) {
   411  003EA4  D030               	goto	l1089
   412  003EA6                     l1067:
   413                           
   414                           ;main.c: 214: unsigned char maxRTFlag = nrfSTATUS&0b00010000;
   415  003EA6  5021               	movf	_nrfSTATUS,w,c
   416  003EA8  0B10               	andlw	16
   417  003EAA  6E34               	movwf	main@maxRTFlag,c
   418                           
   419                           ;main.c: 215: if (maxRTFlag == 0x10) {
   420  003EAC  5034               	movf	main@maxRTFlag,w,c
   421  003EAE  0A10               	xorlw	16
   422  003EB0  A4D8               	btfss	status,2,c
   423  003EB2  D014               	goto	l1079
   424                           
   425                           ;main.c: 216: LATAbits.LATA0 = 1;
   426  003EB4  8089               	bsf	3977,0,c	;volatile
   427                           
   428                           ;main.c: 217: delay10ms(10);
   429  003EB6  0E00               	movlw	0
   430  003EB8  6E23               	movwf	delay10ms@ms_multi+1,c
   431  003EBA  0E0A               	movlw	10
   432  003EBC  6E22               	movwf	delay10ms@ms_multi,c
   433  003EBE  ECB3  F01D         	call	_delay10ms	;wreg free
   434                           
   435                           ;main.c: 218: LATAbits.LATA0 = 0;
   436  003EC2  9089               	bcf	3977,0,c	;volatile
   437                           
   438                           ;main.c: 220: dataBufOut[0] = nrfSTATUS|0b00010000;
   439  003EC4  5021               	movf	_nrfSTATUS,w,c
   440  003EC6  0910               	iorlw	16
   441  003EC8  6E01               	movwf	_dataBufOut,c
   442                           
   443                           ;main.c: 221: spiTransfer('w',0x07,1);
   444  003ECA  0E07               	movlw	7
   445  003ECC  6E24               	movwf	spiTransfer@command,c
   446  003ECE  0E00               	movlw	0
   447  003ED0  6E26               	movwf	spiTransfer@len+1,c
   448  003ED2  0E01               	movlw	1
   449  003ED4  6E25               	movwf	spiTransfer@len,c
   450  003ED6  0E77               	movlw	119
   451  003ED8  ECCB  F01E         	call	_spiTransfer
   452  003EDC                     l1079:
   453                           
   454                           ;main.c: 222: }
   455                           ;main.c: 225: unsigned char txDSFlag = nrfSTATUS&0b00100000;
   456  003EDC  5021               	movf	_nrfSTATUS,w,c
   457  003EDE  0B20               	andlw	32
   458  003EE0  6E35               	movwf	main@txDSFlag,c
   459                           
   460                           ;main.c: 226: if (txDSFlag == 0x10) {
   461  003EE2  5035               	movf	main@txDSFlag,w,c
   462  003EE4  0A10               	xorlw	16
   463  003EE6  A4D8               	btfss	status,2,c
   464  003EE8  D00C               	goto	l1087
   465                           
   466                           ;main.c: 228: dataBufOut[0] = nrfSTATUS|0b00100000;
   467  003EEA  5021               	movf	_nrfSTATUS,w,c
   468  003EEC  0920               	iorlw	32
   469  003EEE  6E01               	movwf	_dataBufOut,c
   470                           
   471                           ;main.c: 229: spiTransfer('w',0x07,1);
   472  003EF0  0E07               	movlw	7
   473  003EF2  6E24               	movwf	spiTransfer@command,c
   474  003EF4  0E00               	movlw	0
   475  003EF6  6E26               	movwf	spiTransfer@len+1,c
   476  003EF8  0E01               	movlw	1
   477  003EFA  6E25               	movwf	spiTransfer@len,c
   478  003EFC  0E77               	movlw	119
   479  003EFE  ECCB  F01E         	call	_spiTransfer
   480  003F02                     l1087:
   481                           
   482                           ;main.c: 230: }
   483                           ;main.c: 232: nrfGetStatus();
   484  003F02  ECA2  F01D         	call	_nrfGetStatus	;wreg free
   485  003F06                     l1089:
   486  003F06  5021               	movf	_nrfSTATUS,w,c
   487  003F08  0A0E               	xorlw	14
   488  003F0A  A4D8               	btfss	status,2,c
   489  003F0C  D7CC               	goto	l1067
   490                           
   491                           ;main.c: 233: }
   492                           ;main.c: 235: spiTransfer('n',0xE1,0);
   493  003F0E  0EE1               	movlw	225
   494  003F10  6E24               	movwf	spiTransfer@command,c
   495  003F12  0E00               	movlw	0
   496  003F14  6E26               	movwf	spiTransfer@len+1,c
   497  003F16  0E00               	movlw	0
   498  003F18  6E25               	movwf	spiTransfer@len,c
   499  003F1A  0E6E               	movlw	110
   500  003F1C  ECCB  F01E         	call	_spiTransfer
   501                           
   502                           ;main.c: 237: delay10ms(100);
   503  003F20  0E00               	movlw	0
   504  003F22  6E23               	movwf	delay10ms@ms_multi+1,c
   505  003F24  0E64               	movlw	100
   506  003F26  6E22               	movwf	delay10ms@ms_multi,c
   507  003F28  ECB3  F01D         	call	_delay10ms	;wreg free
   508                           
   509                           ;main.c: 238: }
   510  003F2C  D7A9               	goto	l1057
   511  003F2E                     __end_of_main:
   512                           	opt stack 0
   513                           tblptru	equ	0xFF8
   514                           tblptrh	equ	0xFF7
   515                           tblptrl	equ	0xFF6
   516                           tablat	equ	0xFF5
   517                           postinc0	equ	0xFEE
   518                           wreg	equ	0xFE8
   519                           postdec1	equ	0xFE5
   520                           fsr1l	equ	0xFE1
   521                           status	equ	0xFD8
   522                           
   523 ;; *************** function _spiConfig_1 *****************
   524 ;; Defined at:
   525 ;;		line 258 in file "main.c"
   526 ;; Parameters:    Size  Location     Type
   527 ;;		None
   528 ;; Auto vars:     Size  Location     Type
   529 ;;		None
   530 ;; Return value:  Size  Location     Type
   531 ;;		None               void
   532 ;; Registers used:
   533 ;;		wreg, status,2
   534 ;; Tracked objects:
   535 ;;		On entry : 0/0
   536 ;;		On exit  : 0/0
   537 ;;		Unchanged: 0/0
   538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   539 ;;      Params:         0       0       0       0
   540 ;;      Locals:         0       0       0       0
   541 ;;      Temps:          0       0       0       0
   542 ;;      Totals:         0       0       0       0
   543 ;;Total ram usage:        0 bytes
   544 ;; Hardware stack levels used:    1
   545 ;; This function calls:
   546 ;;		Nothing
   547 ;; This function is called by:
   548 ;;		_main
   549 ;; This function uses a non-reentrant model
   550 ;;
   551                           
   552                           	psect	text1
   553  003B12                     __ptext1:
   554                           	opt stack 0
   555  003B12                     _spiConfig_1:
   556                           	opt stack 30
   557                           
   558                           ;main.c: 259: SSP1CON1bits.CKP = 0;
   559                           
   560                           ;incstack = 0
   561  003B12  98C6               	bcf	4038,4,c	;volatile
   562                           
   563                           ;main.c: 260: SSP1STATbits.CKE = 1;
   564  003B14  8CC7               	bsf	4039,6,c	;volatile
   565                           
   566                           ;main.c: 261: SSP1STATbits.SMP = 1;
   567  003B16  8EC7               	bsf	4039,7,c	;volatile
   568                           
   569                           ;main.c: 262: SSP1ADD = 0b00001111;
   570  003B18  0E0F               	movlw	15
   571  003B1A  6EC8               	movwf	4040,c	;volatile
   572                           
   573                           ;main.c: 263: SSP1CON1bits.SSPM = 0b1010;
   574  003B1C  50C6               	movf	4038,w,c	;volatile
   575  003B1E  0BF0               	andlw	-16
   576  003B20  090A               	iorlw	10
   577  003B22  6EC6               	movwf	4038,c	;volatile
   578                           
   579                           ;main.c: 265: SSP1CON1bits.SSPEN = 1;
   580  003B24  8AC6               	bsf	4038,5,c	;volatile
   581                           
   582                           ;main.c: 266: LATAbits.LATA2 = 1;
   583  003B26  8489               	bsf	3977,2,c	;volatile
   584  003B28  0012               	return	
   585  003B2A                     __end_of_spiConfig_1:
   586                           	opt stack 0
   587                           tblptru	equ	0xFF8
   588                           tblptrh	equ	0xFF7
   589                           tblptrl	equ	0xFF6
   590                           tablat	equ	0xFF5
   591                           postinc0	equ	0xFEE
   592                           wreg	equ	0xFE8
   593                           postdec1	equ	0xFE5
   594                           fsr1l	equ	0xFE1
   595                           status	equ	0xFD8
   596                           
   597 ;; *************** function _portConfig *****************
   598 ;; Defined at:
   599 ;;		line 244 in file "main.c"
   600 ;; Parameters:    Size  Location     Type
   601 ;;		None
   602 ;; Auto vars:     Size  Location     Type
   603 ;;		None
   604 ;; Return value:  Size  Location     Type
   605 ;;		None               void
   606 ;; Registers used:
   607 ;;		wreg, status,2
   608 ;; Tracked objects:
   609 ;;		On entry : 0/0
   610 ;;		On exit  : 0/0
   611 ;;		Unchanged: 0/0
   612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   613 ;;      Params:         0       0       0       0
   614 ;;      Locals:         0       0       0       0
   615 ;;      Temps:          0       0       0       0
   616 ;;      Totals:         0       0       0       0
   617 ;;Total ram usage:        0 bytes
   618 ;; Hardware stack levels used:    1
   619 ;; This function calls:
   620 ;;		Nothing
   621 ;; This function is called by:
   622 ;;		_main
   623 ;; This function uses a non-reentrant model
   624 ;;
   625                           
   626                           	psect	text2
   627  003B2A                     __ptext2:
   628                           	opt stack 0
   629  003B2A                     _portConfig:
   630                           	opt stack 30
   631                           
   632                           ;main.c: 245: TRISA = 0b00001000;
   633                           
   634                           ;incstack = 0
   635  003B2A  0E08               	movlw	8
   636  003B2C  6E92               	movwf	3986,c	;volatile
   637                           
   638                           ;main.c: 246: TRISB = 0b00000000;
   639  003B2E  0E00               	movlw	0
   640  003B30  6E93               	movwf	3987,c	;volatile
   641                           
   642                           ;main.c: 247: TRISC = 0b00010000;
   643  003B32  0E10               	movlw	16
   644  003B34  6E94               	movwf	3988,c	;volatile
   645                           
   646                           ;main.c: 249: LATA = 0b00000100;
   647  003B36  0E04               	movlw	4
   648  003B38  6E89               	movwf	3977,c	;volatile
   649                           
   650                           ;main.c: 250: LATB = 0x00;
   651  003B3A  0E00               	movlw	0
   652  003B3C  6E8A               	movwf	3978,c	;volatile
   653                           
   654                           ;main.c: 251: LATC = 0x00;
   655  003B3E  0E00               	movlw	0
   656  003B40  6E8B               	movwf	3979,c	;volatile
   657  003B42  0012               	return	
   658  003B44                     __end_of_portConfig:
   659                           	opt stack 0
   660                           tblptru	equ	0xFF8
   661                           tblptrh	equ	0xFF7
   662                           tblptrl	equ	0xFF6
   663                           tablat	equ	0xFF5
   664                           postinc0	equ	0xFEE
   665                           wreg	equ	0xFE8
   666                           postdec1	equ	0xFE5
   667                           fsr1l	equ	0xFE1
   668                           status	equ	0xFD8
   669                           
   670 ;; *************** function _nrfTXData *****************
   671 ;; Defined at:
   672 ;;		line 436 in file "main.c"
   673 ;; Parameters:    Size  Location     Type
   674 ;;  len             2    2[COMRAM] int 
   675 ;; Auto vars:     Size  Location     Type
   676 ;;  i               2    8[COMRAM] int 
   677 ;; Return value:  Size  Location     Type
   678 ;;		None               void
   679 ;; Registers used:
   680 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   681 ;; Tracked objects:
   682 ;;		On entry : 0/0
   683 ;;		On exit  : 0/0
   684 ;;		Unchanged: 0/0
   685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   686 ;;      Params:         2       0       0       0
   687 ;;      Locals:         2       0       0       0
   688 ;;      Temps:          4       0       0       0
   689 ;;      Totals:         8       0       0       0
   690 ;;Total ram usage:        8 bytes
   691 ;; Hardware stack levels used:    1
   692 ;; Hardware stack levels required when called:    1
   693 ;; This function calls:
   694 ;;		_setCSN
   695 ;;		_spiTransferByte
   696 ;; This function is called by:
   697 ;;		_main
   698 ;; This function uses a non-reentrant model
   699 ;;
   700                           
   701                           	psect	text3
   702  003D16                     __ptext3:
   703                           	opt stack 0
   704  003D16                     _nrfTXData:
   705                           	opt stack 29
   706                           
   707                           ;main.c: 438: setCSN(0);
   708                           
   709                           ;incstack = 0
   710  003D16  0E00               	movlw	0
   711  003D18  6E23               	movwf	setCSN@level+1,c
   712  003D1A  0E00               	movlw	0
   713  003D1C  6E22               	movwf	setCSN@level,c
   714  003D1E  EC7D  F01D         	call	_setCSN	;wreg free
   715                           
   716                           ;main.c: 440: spiTransferByte(0xA0);
   717  003D22  0EA0               	movlw	160
   718  003D24  EC74  F01D         	call	_spiTransferByte
   719                           
   720                           ;main.c: 442: if (len != 0) {
   721  003D28  5025               	movf	nrfTXData@len+1,w,c
   722  003D2A  1024               	iorwf	nrfTXData@len,w,c
   723  003D2C  B4D8               	btfsc	status,2,c
   724  003D2E  D026               	goto	l1035
   725                           
   726                           ;main.c: 443: for (int i=1;i<=len;i++) {
   727  003D30  0E00               	movlw	0
   728  003D32  6E2B               	movwf	nrfTXData@i+1,c
   729  003D34  0E01               	movlw	1
   730  003D36  6E2A               	movwf	nrfTXData@i,c
   731  003D38  D017               	goto	l1033
   732  003D3A                     l1029:
   733                           
   734                           ;main.c: 444: spiTransferByte(dataBufOut[i-1]);
   735  003D3A  0EFF               	movlw	255
   736  003D3C  6E26               	movwf	??_nrfTXData& (0+255),c
   737  003D3E  0EFF               	movlw	255
   738  003D40  6E27               	movwf	(??_nrfTXData+1)& (0+255),c
   739  003D42  C02A  F028         	movff	nrfTXData@i,??_nrfTXData+2
   740  003D46  C02B  F029         	movff	nrfTXData@i+1,??_nrfTXData+3
   741  003D4A  5026               	movf	??_nrfTXData,w,c
   742  003D4C  2628               	addwf	??_nrfTXData+2,f,c
   743  003D4E  5027               	movf	??_nrfTXData+1,w,c
   744  003D50  2229               	addwfc	??_nrfTXData+3,f,c
   745  003D52  0E01               	movlw	low _dataBufOut
   746  003D54  2428               	addwf	??_nrfTXData+2,w,c
   747  003D56  6ED9               	movwf	fsr2l,c
   748  003D58  0E00               	movlw	high _dataBufOut
   749  003D5A  2029               	addwfc	??_nrfTXData+3,w,c
   750  003D5C  6EDA               	movwf	fsr2h,c
   751  003D5E  50DF               	movf	indf2,w,c
   752  003D60  EC74  F01D         	call	_spiTransferByte
   753  003D64  4A2A               	infsnz	nrfTXData@i,f,c
   754  003D66  2A2B               	incf	nrfTXData@i+1,f,c
   755  003D68                     l1033:
   756  003D68  5025               	movf	nrfTXData@len+1,w,c
   757  003D6A  0A80               	xorlw	128
   758  003D6C  6E26               	movwf	??_nrfTXData& (0+255),c
   759  003D6E  502A               	movf	nrfTXData@i,w,c
   760  003D70  5C24               	subwf	nrfTXData@len,w,c
   761  003D72  502B               	movf	nrfTXData@i+1,w,c
   762  003D74  0A80               	xorlw	128
   763  003D76  5826               	subwfb	??_nrfTXData& (0+255),w,c
   764  003D78  B0D8               	btfsc	status,0,c
   765  003D7A  D7DF               	goto	l1029
   766  003D7C                     l1035:
   767                           
   768                           ;main.c: 445: }
   769                           ;main.c: 446: }
   770                           ;main.c: 448: setCSN(1);
   771  003D7C  0E00               	movlw	0
   772  003D7E  6E23               	movwf	setCSN@level+1,c
   773  003D80  0E01               	movlw	1
   774  003D82  6E22               	movwf	setCSN@level,c
   775  003D84  EC7D  F01D         	call	_setCSN	;wreg free
   776                           
   777                           ;main.c: 451: LATAbits.LATA1 = 1;
   778  003D88  8289               	bsf	3977,1,c	;volatile
   779                           
   780                           ;main.c: 452: _delay((unsigned long)((11)*(64000000/4000000.0)));
   781  003D8A  0E3A               	movlw	58
   782  003D8C                     u367:
   783  003D8C  2EE8               	decfsz	wreg,f,c
   784  003D8E  D7FE               	goto	u367
   785  003D90  D000               	nop2		;nop
   786                           
   787                           ;main.c: 453: LATAbits.LATA1 = 0;
   788  003D92  9289               	bcf	3977,1,c	;volatile
   789  003D94  0012               	return	
   790  003D96                     __end_of_nrfTXData:
   791                           	opt stack 0
   792                           tblptru	equ	0xFF8
   793                           tblptrh	equ	0xFF7
   794                           tblptrl	equ	0xFF6
   795                           tablat	equ	0xFF5
   796                           postinc0	equ	0xFEE
   797                           wreg	equ	0xFE8
   798                           postdec1	equ	0xFE5
   799                           fsr1l	equ	0xFE1
   800                           indf2	equ	0xFDF
   801                           fsr2h	equ	0xFDA
   802                           fsr2l	equ	0xFD9
   803                           status	equ	0xFD8
   804                           
   805 ;; *************** function _nrfGetStatus *****************
   806 ;; Defined at:
   807 ;;		line 319 in file "main.c"
   808 ;; Parameters:    Size  Location     Type
   809 ;;		None
   810 ;; Auto vars:     Size  Location     Type
   811 ;;		None
   812 ;; Return value:  Size  Location     Type
   813 ;;		None               void
   814 ;; Registers used:
   815 ;;		wreg, status,2, status,0, cstack
   816 ;; Tracked objects:
   817 ;;		On entry : 0/0
   818 ;;		On exit  : 0/0
   819 ;;		Unchanged: 0/0
   820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   821 ;;      Params:         0       0       0       0
   822 ;;      Locals:         0       0       0       0
   823 ;;      Temps:          0       0       0       0
   824 ;;      Totals:         0       0       0       0
   825 ;;Total ram usage:        0 bytes
   826 ;; Hardware stack levels used:    1
   827 ;; Hardware stack levels required when called:    1
   828 ;; This function calls:
   829 ;;		_setCSN
   830 ;;		_spiTransferByte
   831 ;; This function is called by:
   832 ;;		_main
   833 ;; This function uses a non-reentrant model
   834 ;;
   835                           
   836                           	psect	text4
   837  003B44                     __ptext4:
   838                           	opt stack 0
   839  003B44                     _nrfGetStatus:
   840                           	opt stack 29
   841                           
   842                           ;main.c: 321: setCSN(0);
   843                           
   844                           ;incstack = 0
   845  003B44  0E00               	movlw	0
   846  003B46  6E23               	movwf	setCSN@level+1,c
   847  003B48  0E00               	movlw	0
   848  003B4A  6E22               	movwf	setCSN@level,c
   849  003B4C  EC7D  F01D         	call	_setCSN	;wreg free
   850                           
   851                           ;main.c: 323: nrfSTATUS = spiTransferByte(0xFF);
   852  003B50  0EFF               	movlw	255
   853  003B52  EC74  F01D         	call	_spiTransferByte
   854  003B56  6E21               	movwf	_nrfSTATUS,c
   855                           
   856                           ;main.c: 325: setCSN(1);
   857  003B58  0E00               	movlw	0
   858  003B5A  6E23               	movwf	setCSN@level+1,c
   859  003B5C  0E01               	movlw	1
   860  003B5E  6E22               	movwf	setCSN@level,c
   861  003B60  EC7D  F01D         	call	_setCSN	;wreg free
   862  003B64  0012               	return	
   863  003B66                     __end_of_nrfGetStatus:
   864                           	opt stack 0
   865                           tblptru	equ	0xFF8
   866                           tblptrh	equ	0xFF7
   867                           tblptrl	equ	0xFF6
   868                           tablat	equ	0xFF5
   869                           postinc0	equ	0xFEE
   870                           wreg	equ	0xFE8
   871                           postdec1	equ	0xFE5
   872                           fsr1l	equ	0xFE1
   873                           indf2	equ	0xFDF
   874                           fsr2h	equ	0xFDA
   875                           fsr2l	equ	0xFD9
   876                           status	equ	0xFD8
   877                           
   878 ;; *************** function _nrfConfig *****************
   879 ;; Defined at:
   880 ;;		line 272 in file "main.c"
   881 ;; Parameters:    Size  Location     Type
   882 ;;		None
   883 ;; Auto vars:     Size  Location     Type
   884 ;;		None
   885 ;; Return value:  Size  Location     Type
   886 ;;		None               void
   887 ;; Registers used:
   888 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   889 ;; Tracked objects:
   890 ;;		On entry : 0/0
   891 ;;		On exit  : 0/0
   892 ;;		Unchanged: 0/0
   893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   894 ;;      Params:         0       0       0       0
   895 ;;      Locals:         0       0       0       0
   896 ;;      Temps:          0       0       0       0
   897 ;;      Totals:         0       0       0       0
   898 ;;Total ram usage:        0 bytes
   899 ;; Hardware stack levels used:    1
   900 ;; Hardware stack levels required when called:    2
   901 ;; This function calls:
   902 ;;		_nrfConfigReg
   903 ;;		_nrfSetRXAddr
   904 ;;		_nrfSetTXAddr
   905 ;;		_spiTransfer
   906 ;; This function is called by:
   907 ;;		_main
   908 ;; This function uses a non-reentrant model
   909 ;;
   910                           
   911                           	psect	text5
   912  003F2E                     __ptext5:
   913                           	opt stack 0
   914  003F2E                     _nrfConfig:
   915                           	opt stack 28
   916                           
   917                           ;main.c: 275: nrfConfigReg('w',0x00,CONFIG_CURR);
   918                           
   919                           ;incstack = 0
   920  003F2E  0E00               	movlw	0
   921  003F30  6E24               	movwf	nrfConfigReg@command,c
   922  003F32  C036  F025         	movff	_CONFIG_CURR,nrfConfigReg@data
   923  003F36  0E77               	movlw	119
   924  003F38  ECF0  F01D         	call	_nrfConfigReg
   925                           
   926                           ;main.c: 277: nrfConfigReg('w',0x01,EN_AA_CURR);
   927  003F3C  0E01               	movlw	1
   928  003F3E  6E24               	movwf	nrfConfigReg@command,c
   929  003F40  C037  F025         	movff	_EN_AA_CURR,nrfConfigReg@data
   930  003F44  0E77               	movlw	119
   931  003F46  ECF0  F01D         	call	_nrfConfigReg
   932                           
   933                           ;main.c: 279: nrfConfigReg('w',0x02,EN_RXADDR_CURR);
   934  003F4A  0E02               	movlw	2
   935  003F4C  6E24               	movwf	nrfConfigReg@command,c
   936  003F4E  C038  F025         	movff	_EN_RXADDR_CURR,nrfConfigReg@data
   937  003F52  0E77               	movlw	119
   938  003F54  ECF0  F01D         	call	_nrfConfigReg
   939                           
   940                           ;main.c: 281: nrfConfigReg('w',0x03,SETUP_AW_CURR);
   941  003F58  0E03               	movlw	3
   942  003F5A  6E24               	movwf	nrfConfigReg@command,c
   943  003F5C  C03C  F025         	movff	_SETUP_AW_CURR,nrfConfigReg@data
   944  003F60  0E77               	movlw	119
   945  003F62  ECF0  F01D         	call	_nrfConfigReg
   946                           
   947                           ;main.c: 283: nrfConfigReg('w',0x04,SETUP_RETR_CURR);
   948  003F66  0E04               	movlw	4
   949  003F68  6E24               	movwf	nrfConfigReg@command,c
   950  003F6A  C03D  F025         	movff	_SETUP_RETR_CURR,nrfConfigReg@data
   951  003F6E  0E77               	movlw	119
   952  003F70  ECF0  F01D         	call	_nrfConfigReg
   953                           
   954                           ;main.c: 285: nrfConfigReg('w',0x05,RF_CH_CURR);
   955  003F74  0E05               	movlw	5
   956  003F76  6E24               	movwf	nrfConfigReg@command,c
   957  003F78  C039  F025         	movff	_RF_CH_CURR,nrfConfigReg@data
   958  003F7C  0E77               	movlw	119
   959  003F7E  ECF0  F01D         	call	_nrfConfigReg
   960                           
   961                           ;main.c: 287: nrfConfigReg('w',0x06,RF_SETUP_CURR);
   962  003F82  0E06               	movlw	6
   963  003F84  6E24               	movwf	nrfConfigReg@command,c
   964  003F86  C03A  F025         	movff	_RF_SETUP_CURR,nrfConfigReg@data
   965  003F8A  0E77               	movlw	119
   966  003F8C  ECF0  F01D         	call	_nrfConfigReg
   967                           
   968                           ;main.c: 289: nrfSetRXAddr(0x0A,TX_ADDRESS,4);
   969  003F90  0E00               	movlw	high _TX_ADDRESS
   970  003F92  6E25               	movwf	nrfSetRXAddr@addr+1,c
   971  003F94  0E42               	movlw	low _TX_ADDRESS
   972  003F96  6E24               	movwf	nrfSetRXAddr@addr,c
   973  003F98  0E00               	movlw	0
   974  003F9A  6E27               	movwf	nrfSetRXAddr@len+1,c
   975  003F9C  0E04               	movlw	4
   976  003F9E  6E26               	movwf	nrfSetRXAddr@len,c
   977  003FA0  0E0A               	movlw	10
   978  003FA2  EC4F  F01E         	call	_nrfSetRXAddr
   979                           
   980                           ;main.c: 291: nrfSetRXAddr(0x0B,RX_ADDRESS,4);
   981  003FA6  0E00               	movlw	high _RX_ADDRESS
   982  003FA8  6E25               	movwf	nrfSetRXAddr@addr+1,c
   983  003FAA  0E3E               	movlw	low _RX_ADDRESS
   984  003FAC  6E24               	movwf	nrfSetRXAddr@addr,c
   985  003FAE  0E00               	movlw	0
   986  003FB0  6E27               	movwf	nrfSetRXAddr@len+1,c
   987  003FB2  0E04               	movlw	4
   988  003FB4  6E26               	movwf	nrfSetRXAddr@len,c
   989  003FB6  0E0B               	movlw	11
   990  003FB8  EC4F  F01E         	call	_nrfSetRXAddr
   991                           
   992                           ;main.c: 293: nrfSetTXAddr(TX_ADDRESS,4);
   993  003FBC  0E00               	movlw	high _TX_ADDRESS
   994  003FBE  6E25               	movwf	nrfSetTXAddr@addr+1,c
   995  003FC0  0E42               	movlw	low _TX_ADDRESS
   996  003FC2  6E24               	movwf	nrfSetTXAddr@addr,c
   997  003FC4  0E00               	movlw	0
   998  003FC6  6E27               	movwf	nrfSetTXAddr@len+1,c
   999  003FC8  0E04               	movlw	4
  1000  003FCA  6E26               	movwf	nrfSetTXAddr@len,c
  1001  003FCC  EC15  F01E         	call	_nrfSetTXAddr	;wreg free
  1002                           
  1003                           ;main.c: 295: nrfConfigReg('w',0x11,RX_PW_P0_CURR);
  1004  003FD0  0E11               	movlw	17
  1005  003FD2  6E24               	movwf	nrfConfigReg@command,c
  1006  003FD4  C03B  F025         	movff	_RX_PW_P0_CURR,nrfConfigReg@data
  1007  003FD8  0E77               	movlw	119
  1008  003FDA  ECF0  F01D         	call	_nrfConfigReg
  1009                           
  1010                           ;main.c: 297: nrfConfigReg('w',0x12,RX_PW_P0_CURR);
  1011  003FDE  0E12               	movlw	18
  1012  003FE0  6E24               	movwf	nrfConfigReg@command,c
  1013  003FE2  C03B  F025         	movff	_RX_PW_P0_CURR,nrfConfigReg@data
  1014  003FE6  0E77               	movlw	119
  1015  003FE8  ECF0  F01D         	call	_nrfConfigReg
  1016                           
  1017                           ;main.c: 299: spiTransfer('n',0xE1,0);
  1018  003FEC  0EE1               	movlw	225
  1019  003FEE  6E24               	movwf	spiTransfer@command,c
  1020  003FF0  0E00               	movlw	0
  1021  003FF2  6E26               	movwf	spiTransfer@len+1,c
  1022  003FF4  0E00               	movlw	0
  1023  003FF6  6E25               	movwf	spiTransfer@len,c
  1024  003FF8  0E6E               	movlw	110
  1025  003FFA  ECCB  F01E         	call	_spiTransfer
  1026  003FFE  0012               	return	
  1027  004000                     __end_of_nrfConfig:
  1028                           	opt stack 0
  1029                           tblptru	equ	0xFF8
  1030                           tblptrh	equ	0xFF7
  1031                           tblptrl	equ	0xFF6
  1032                           tablat	equ	0xFF5
  1033                           postinc0	equ	0xFEE
  1034                           wreg	equ	0xFE8
  1035                           postdec1	equ	0xFE5
  1036                           fsr1l	equ	0xFE1
  1037                           indf2	equ	0xFDF
  1038                           fsr2h	equ	0xFDA
  1039                           fsr2l	equ	0xFD9
  1040                           status	equ	0xFD8
  1041                           
  1042 ;; *************** function _spiTransfer *****************
  1043 ;; Defined at:
  1044 ;;		line 399 in file "main.c"
  1045 ;; Parameters:    Size  Location     Type
  1046 ;;  wrn             1    wreg     unsigned char 
  1047 ;;  command         1    2[COMRAM] unsigned char 
  1048 ;;  len             2    3[COMRAM] int 
  1049 ;; Auto vars:     Size  Location     Type
  1050 ;;  wrn             1   13[COMRAM] unsigned char 
  1051 ;;  i               2   14[COMRAM] int 
  1052 ;; Return value:  Size  Location     Type
  1053 ;;		None               void
  1054 ;; Registers used:
  1055 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1056 ;; Tracked objects:
  1057 ;;		On entry : 0/0
  1058 ;;		On exit  : 0/0
  1059 ;;		Unchanged: 0/0
  1060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1061 ;;      Params:         3       0       0       0
  1062 ;;      Locals:         3       0       0       0
  1063 ;;      Temps:          8       0       0       0
  1064 ;;      Totals:        14       0       0       0
  1065 ;;Total ram usage:       14 bytes
  1066 ;; Hardware stack levels used:    1
  1067 ;; Hardware stack levels required when called:    1
  1068 ;; This function calls:
  1069 ;;		_setCSN
  1070 ;;		_spiTransferByte
  1071 ;; This function is called by:
  1072 ;;		_main
  1073 ;;		_nrfConfig
  1074 ;; This function uses a non-reentrant model
  1075 ;;
  1076                           
  1077                           	psect	text6
  1078  003D96                     __ptext6:
  1079                           	opt stack 0
  1080  003D96                     _spiTransfer:
  1081                           	opt stack 29
  1082                           
  1083                           ;incstack = 0
  1084                           ;spiTransfer@wrn stored from wreg
  1085  003D96  6E2F               	movwf	spiTransfer@wrn,c
  1086                           
  1087                           ;main.c: 401: setCSN(0);
  1088  003D98  0E00               	movlw	0
  1089  003D9A  6E23               	movwf	setCSN@level+1,c
  1090  003D9C  0E00               	movlw	0
  1091  003D9E  6E22               	movwf	setCSN@level,c
  1092  003DA0  EC7D  F01D         	call	_setCSN	;wreg free
  1093                           
  1094                           ;main.c: 403: if (wrn == 'w') {
  1095  003DA4  502F               	movf	spiTransfer@wrn,w,c
  1096  003DA6  0A77               	xorlw	119
  1097  003DA8  A4D8               	btfss	status,2,c
  1098  003DAA  D005               	goto	l941
  1099                           
  1100                           ;main.c: 404: spiTransferByte(0x20|command);
  1101  003DAC  5024               	movf	spiTransfer@command,w,c
  1102  003DAE  0920               	iorlw	32
  1103  003DB0  EC74  F01D         	call	_spiTransferByte
  1104                           
  1105                           ;main.c: 405: } else if (wrn == 'r') {
  1106  003DB4  D00F               	goto	l949
  1107  003DB6                     l941:
  1108  003DB6  502F               	movf	spiTransfer@wrn,w,c
  1109  003DB8  0A72               	xorlw	114
  1110  003DBA  A4D8               	btfss	status,2,c
  1111  003DBC  D004               	goto	l945
  1112                           
  1113                           ;main.c: 406: spiTransferByte(0x00|command);
  1114  003DBE  5024               	movf	spiTransfer@command,w,c
  1115  003DC0  EC74  F01D         	call	_spiTransferByte
  1116                           
  1117                           ;main.c: 407: } else if(wrn == 'n') {
  1118  003DC4  D007               	goto	l949
  1119  003DC6                     l945:
  1120  003DC6  502F               	movf	spiTransfer@wrn,w,c
  1121  003DC8  0A6E               	xorlw	110
  1122  003DCA  A4D8               	btfss	status,2,c
  1123  003DCC  D003               	goto	l949
  1124                           
  1125                           ;main.c: 408: spiTransferByte(command);
  1126  003DCE  5024               	movf	spiTransfer@command,w,c
  1127  003DD0  EC74  F01D         	call	_spiTransferByte
  1128  003DD4                     l949:
  1129                           
  1130                           ;main.c: 409: }
  1131                           ;main.c: 411: if (len != 0) {
  1132  003DD4  5026               	movf	spiTransfer@len+1,w,c
  1133  003DD6  1025               	iorwf	spiTransfer@len,w,c
  1134  003DD8  B4D8               	btfsc	status,2,c
  1135  003DDA  D03B               	goto	l959
  1136                           
  1137                           ;main.c: 412: for (int i=1;i<=len;i++) {
  1138  003DDC  0E00               	movlw	0
  1139  003DDE  6E31               	movwf	spiTransfer@i+1,c
  1140  003DE0  0E01               	movlw	1
  1141  003DE2  6E30               	movwf	spiTransfer@i,c
  1142  003DE4  D02C               	goto	l957
  1143  003DE6                     l953:
  1144                           
  1145                           ;main.c: 413: dataBufIn[i-1] = spiTransferByte(dataBufOut[i-1]);
  1146  003DE6  0EFF               	movlw	255
  1147  003DE8  6E27               	movwf	??_spiTransfer& (0+255),c
  1148  003DEA  0EFF               	movlw	255
  1149  003DEC  6E28               	movwf	(??_spiTransfer+1)& (0+255),c
  1150  003DEE  C030  F029         	movff	spiTransfer@i,??_spiTransfer+2
  1151  003DF2  C031  F02A         	movff	spiTransfer@i+1,??_spiTransfer+3
  1152  003DF6  5027               	movf	??_spiTransfer,w,c
  1153  003DF8  2629               	addwf	??_spiTransfer+2,f,c
  1154  003DFA  5028               	movf	??_spiTransfer+1,w,c
  1155  003DFC  222A               	addwfc	??_spiTransfer+3,f,c
  1156  003DFE  0100               	movlb	0	; () banked
  1157  003E00  0E60               	movlw	low _dataBufIn
  1158  003E02  2429               	addwf	??_spiTransfer+2,w,c
  1159  003E04  6ED9               	movwf	fsr2l,c
  1160  003E06  0100               	movlb	0	; () banked
  1161  003E08  0E00               	movlw	high _dataBufIn
  1162  003E0A  202A               	addwfc	??_spiTransfer+3,w,c
  1163  003E0C  6EDA               	movwf	fsr2h,c
  1164  003E0E  0EFF               	movlw	255
  1165  003E10  6E2B               	movwf	(??_spiTransfer+4)& (0+255),c
  1166  003E12  0EFF               	movlw	255
  1167  003E14  6E2C               	movwf	(??_spiTransfer+5)& (0+255),c
  1168  003E16  C030  F02D         	movff	spiTransfer@i,??_spiTransfer+6
  1169  003E1A  C031  F02E         	movff	spiTransfer@i+1,??_spiTransfer+7
  1170  003E1E  502B               	movf	??_spiTransfer+4,w,c
  1171  003E20  262D               	addwf	??_spiTransfer+6,f,c
  1172  003E22  502C               	movf	??_spiTransfer+5,w,c
  1173  003E24  222E               	addwfc	??_spiTransfer+7,f,c
  1174  003E26  0E01               	movlw	low _dataBufOut
  1175  003E28  242D               	addwf	??_spiTransfer+6,w,c
  1176  003E2A  6EE1               	movwf	fsr1l,c
  1177  003E2C  0E00               	movlw	high _dataBufOut
  1178  003E2E  202E               	addwfc	??_spiTransfer+7,w,c
  1179  003E30  6EE2               	movwf	fsr1h,c
  1180  003E32  50E7               	movf	indf1,w,c
  1181  003E34  EC74  F01D         	call	_spiTransferByte
  1182  003E38  6EDF               	movwf	indf2,c
  1183  003E3A  4A30               	infsnz	spiTransfer@i,f,c
  1184  003E3C  2A31               	incf	spiTransfer@i+1,f,c
  1185  003E3E                     l957:
  1186  003E3E  5026               	movf	spiTransfer@len+1,w,c
  1187  003E40  0A80               	xorlw	128
  1188  003E42  6E27               	movwf	??_spiTransfer& (0+255),c
  1189  003E44  5030               	movf	spiTransfer@i,w,c
  1190  003E46  5C25               	subwf	spiTransfer@len,w,c
  1191  003E48  5031               	movf	spiTransfer@i+1,w,c
  1192  003E4A  0A80               	xorlw	128
  1193  003E4C  5827               	subwfb	??_spiTransfer& (0+255),w,c
  1194  003E4E  B0D8               	btfsc	status,0,c
  1195  003E50  D7CA               	goto	l953
  1196  003E52                     l959:
  1197                           
  1198                           ;main.c: 414: }
  1199                           ;main.c: 415: }
  1200                           ;main.c: 417: setCSN(1);
  1201  003E52  0E00               	movlw	0
  1202  003E54  6E23               	movwf	setCSN@level+1,c
  1203  003E56  0E01               	movlw	1
  1204  003E58  6E22               	movwf	setCSN@level,c
  1205  003E5A  EC7D  F01D         	call	_setCSN	;wreg free
  1206  003E5E  0012               	return	
  1207  003E60                     __end_of_spiTransfer:
  1208                           	opt stack 0
  1209                           tblptru	equ	0xFF8
  1210                           tblptrh	equ	0xFF7
  1211                           tblptrl	equ	0xFF6
  1212                           tablat	equ	0xFF5
  1213                           postinc0	equ	0xFEE
  1214                           wreg	equ	0xFE8
  1215                           indf1	equ	0xFE7
  1216                           postdec1	equ	0xFE5
  1217                           fsr1h	equ	0xFE2
  1218                           fsr1l	equ	0xFE1
  1219                           indf2	equ	0xFDF
  1220                           fsr2h	equ	0xFDA
  1221                           fsr2l	equ	0xFD9
  1222                           status	equ	0xFD8
  1223                           
  1224 ;; *************** function _nrfSetTXAddr *****************
  1225 ;; Defined at:
  1226 ;;		line 353 in file "main.c"
  1227 ;; Parameters:    Size  Location     Type
  1228 ;;  addr            2    2[COMRAM] PTR unsigned char 
  1229 ;;		 -> TX_ADDRESS(4), 
  1230 ;;  len             2    4[COMRAM] int 
  1231 ;; Auto vars:     Size  Location     Type
  1232 ;;  i               2   10[COMRAM] int 
  1233 ;; Return value:  Size  Location     Type
  1234 ;;		None               void
  1235 ;; Registers used:
  1236 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1237 ;; Tracked objects:
  1238 ;;		On entry : 0/0
  1239 ;;		On exit  : 0/0
  1240 ;;		Unchanged: 0/0
  1241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1242 ;;      Params:         4       0       0       0
  1243 ;;      Locals:         2       0       0       0
  1244 ;;      Temps:          4       0       0       0
  1245 ;;      Totals:        10       0       0       0
  1246 ;;Total ram usage:       10 bytes
  1247 ;; Hardware stack levels used:    1
  1248 ;; Hardware stack levels required when called:    1
  1249 ;; This function calls:
  1250 ;;		_setCSN
  1251 ;;		_spiTransferByte
  1252 ;; This function is called by:
  1253 ;;		_nrfConfig
  1254 ;; This function uses a non-reentrant model
  1255 ;;
  1256                           
  1257                           	psect	text7
  1258  003C2A                     __ptext7:
  1259                           	opt stack 0
  1260  003C2A                     _nrfSetTXAddr:
  1261                           	opt stack 28
  1262                           
  1263                           ;main.c: 355: setCSN(0);
  1264                           
  1265                           ;incstack = 0
  1266  003C2A  0E00               	movlw	0
  1267  003C2C  6E23               	movwf	setCSN@level+1,c
  1268  003C2E  0E00               	movlw	0
  1269  003C30  6E22               	movwf	setCSN@level,c
  1270  003C32  EC7D  F01D         	call	_setCSN	;wreg free
  1271                           
  1272                           ;main.c: 357: spiTransferByte(0x20|0x10);
  1273  003C36  0E30               	movlw	48
  1274  003C38  EC74  F01D         	call	_spiTransferByte
  1275                           
  1276                           ;main.c: 359: if (len != 0) {
  1277  003C3C  5027               	movf	nrfSetTXAddr@len+1,w,c
  1278  003C3E  1026               	iorwf	nrfSetTXAddr@len,w,c
  1279  003C40  B4D8               	btfsc	status,2,c
  1280  003C42  D026               	goto	l1005
  1281                           
  1282                           ;main.c: 361: for (int i=1;i<=len;i++) {
  1283  003C44  0E00               	movlw	0
  1284  003C46  6E2D               	movwf	nrfSetTXAddr@i+1,c
  1285  003C48  0E01               	movlw	1
  1286  003C4A  6E2C               	movwf	nrfSetTXAddr@i,c
  1287  003C4C  D017               	goto	l1003
  1288  003C4E                     l999:
  1289                           
  1290                           ;main.c: 362: spiTransferByte(addr[i-1]);
  1291  003C4E  0EFF               	movlw	255
  1292  003C50  6E28               	movwf	??_nrfSetTXAddr& (0+255),c
  1293  003C52  0EFF               	movlw	255
  1294  003C54  6E29               	movwf	(??_nrfSetTXAddr+1)& (0+255),c
  1295  003C56  C02C  F02A         	movff	nrfSetTXAddr@i,??_nrfSetTXAddr+2
  1296  003C5A  C02D  F02B         	movff	nrfSetTXAddr@i+1,??_nrfSetTXAddr+3
  1297  003C5E  5028               	movf	??_nrfSetTXAddr,w,c
  1298  003C60  262A               	addwf	??_nrfSetTXAddr+2,f,c
  1299  003C62  5029               	movf	??_nrfSetTXAddr+1,w,c
  1300  003C64  222B               	addwfc	??_nrfSetTXAddr+3,f,c
  1301  003C66  502A               	movf	??_nrfSetTXAddr+2,w,c
  1302  003C68  2424               	addwf	nrfSetTXAddr@addr,w,c
  1303  003C6A  6ED9               	movwf	fsr2l,c
  1304  003C6C  502B               	movf	??_nrfSetTXAddr+3,w,c
  1305  003C6E  2025               	addwfc	nrfSetTXAddr@addr+1,w,c
  1306  003C70  6EDA               	movwf	fsr2h,c
  1307  003C72  50DF               	movf	indf2,w,c
  1308  003C74  EC74  F01D         	call	_spiTransferByte
  1309  003C78  4A2C               	infsnz	nrfSetTXAddr@i,f,c
  1310  003C7A  2A2D               	incf	nrfSetTXAddr@i+1,f,c
  1311  003C7C                     l1003:
  1312  003C7C  5027               	movf	nrfSetTXAddr@len+1,w,c
  1313  003C7E  0A80               	xorlw	128
  1314  003C80  6E28               	movwf	??_nrfSetTXAddr& (0+255),c
  1315  003C82  502C               	movf	nrfSetTXAddr@i,w,c
  1316  003C84  5C26               	subwf	nrfSetTXAddr@len,w,c
  1317  003C86  502D               	movf	nrfSetTXAddr@i+1,w,c
  1318  003C88  0A80               	xorlw	128
  1319  003C8A  5828               	subwfb	??_nrfSetTXAddr& (0+255),w,c
  1320  003C8C  B0D8               	btfsc	status,0,c
  1321  003C8E  D7DF               	goto	l999
  1322  003C90                     l1005:
  1323                           
  1324                           ;main.c: 363: }
  1325                           ;main.c: 364: }
  1326                           ;main.c: 366: setCSN(1);
  1327  003C90  0E00               	movlw	0
  1328  003C92  6E23               	movwf	setCSN@level+1,c
  1329  003C94  0E01               	movlw	1
  1330  003C96  6E22               	movwf	setCSN@level,c
  1331  003C98  EC7D  F01D         	call	_setCSN	;wreg free
  1332  003C9C  0012               	return	
  1333  003C9E                     __end_of_nrfSetTXAddr:
  1334                           	opt stack 0
  1335                           tblptru	equ	0xFF8
  1336                           tblptrh	equ	0xFF7
  1337                           tblptrl	equ	0xFF6
  1338                           tablat	equ	0xFF5
  1339                           postinc0	equ	0xFEE
  1340                           wreg	equ	0xFE8
  1341                           indf1	equ	0xFE7
  1342                           postdec1	equ	0xFE5
  1343                           fsr1h	equ	0xFE2
  1344                           fsr1l	equ	0xFE1
  1345                           indf2	equ	0xFDF
  1346                           fsr2h	equ	0xFDA
  1347                           fsr2l	equ	0xFD9
  1348                           status	equ	0xFD8
  1349                           
  1350 ;; *************** function _nrfSetRXAddr *****************
  1351 ;; Defined at:
  1352 ;;		line 375 in file "main.c"
  1353 ;; Parameters:    Size  Location     Type
  1354 ;;  pipe            1    wreg     unsigned char 
  1355 ;;  addr            2    2[COMRAM] PTR unsigned char 
  1356 ;;		 -> RX_ADDRESS(4), TX_ADDRESS(4), 
  1357 ;;  len             2    4[COMRAM] int 
  1358 ;; Auto vars:     Size  Location     Type
  1359 ;;  pipe            1   10[COMRAM] unsigned char 
  1360 ;;  i               2   11[COMRAM] int 
  1361 ;; Return value:  Size  Location     Type
  1362 ;;		None               void
  1363 ;; Registers used:
  1364 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1365 ;; Tracked objects:
  1366 ;;		On entry : 0/0
  1367 ;;		On exit  : 0/0
  1368 ;;		Unchanged: 0/0
  1369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1370 ;;      Params:         4       0       0       0
  1371 ;;      Locals:         3       0       0       0
  1372 ;;      Temps:          4       0       0       0
  1373 ;;      Totals:        11       0       0       0
  1374 ;;Total ram usage:       11 bytes
  1375 ;; Hardware stack levels used:    1
  1376 ;; Hardware stack levels required when called:    1
  1377 ;; This function calls:
  1378 ;;		_setCSN
  1379 ;;		_spiTransferByte
  1380 ;; This function is called by:
  1381 ;;		_nrfConfig
  1382 ;; This function uses a non-reentrant model
  1383 ;;
  1384                           
  1385                           	psect	text8
  1386  003C9E                     __ptext8:
  1387                           	opt stack 0
  1388  003C9E                     _nrfSetRXAddr:
  1389                           	opt stack 28
  1390                           
  1391                           ;incstack = 0
  1392                           ;nrfSetRXAddr@pipe stored from wreg
  1393  003C9E  6E2C               	movwf	nrfSetRXAddr@pipe,c
  1394                           
  1395                           ;main.c: 377: setCSN(0);
  1396  003CA0  0E00               	movlw	0
  1397  003CA2  6E23               	movwf	setCSN@level+1,c
  1398  003CA4  0E00               	movlw	0
  1399  003CA6  6E22               	movwf	setCSN@level,c
  1400  003CA8  EC7D  F01D         	call	_setCSN	;wreg free
  1401                           
  1402                           ;main.c: 379: spiTransferByte(0x20|pipe);
  1403  003CAC  502C               	movf	nrfSetRXAddr@pipe,w,c
  1404  003CAE  0920               	iorlw	32
  1405  003CB0  EC74  F01D         	call	_spiTransferByte
  1406                           
  1407                           ;main.c: 381: if (len != 0) {
  1408  003CB4  5027               	movf	nrfSetRXAddr@len+1,w,c
  1409  003CB6  1026               	iorwf	nrfSetRXAddr@len,w,c
  1410  003CB8  B4D8               	btfsc	status,2,c
  1411  003CBA  D026               	goto	l989
  1412                           
  1413                           ;main.c: 383: for (int i=1;i<=len;i++) {
  1414  003CBC  0E00               	movlw	0
  1415  003CBE  6E2E               	movwf	nrfSetRXAddr@i+1,c
  1416  003CC0  0E01               	movlw	1
  1417  003CC2  6E2D               	movwf	nrfSetRXAddr@i,c
  1418  003CC4  D017               	goto	l987
  1419  003CC6                     l983:
  1420                           
  1421                           ;main.c: 384: spiTransferByte(addr[i-1]);
  1422  003CC6  0EFF               	movlw	255
  1423  003CC8  6E28               	movwf	??_nrfSetRXAddr& (0+255),c
  1424  003CCA  0EFF               	movlw	255
  1425  003CCC  6E29               	movwf	(??_nrfSetRXAddr+1)& (0+255),c
  1426  003CCE  C02D  F02A         	movff	nrfSetRXAddr@i,??_nrfSetRXAddr+2
  1427  003CD2  C02E  F02B         	movff	nrfSetRXAddr@i+1,??_nrfSetRXAddr+3
  1428  003CD6  5028               	movf	??_nrfSetRXAddr,w,c
  1429  003CD8  262A               	addwf	??_nrfSetRXAddr+2,f,c
  1430  003CDA  5029               	movf	??_nrfSetRXAddr+1,w,c
  1431  003CDC  222B               	addwfc	??_nrfSetRXAddr+3,f,c
  1432  003CDE  502A               	movf	??_nrfSetRXAddr+2,w,c
  1433  003CE0  2424               	addwf	nrfSetRXAddr@addr,w,c
  1434  003CE2  6ED9               	movwf	fsr2l,c
  1435  003CE4  502B               	movf	??_nrfSetRXAddr+3,w,c
  1436  003CE6  2025               	addwfc	nrfSetRXAddr@addr+1,w,c
  1437  003CE8  6EDA               	movwf	fsr2h,c
  1438  003CEA  50DF               	movf	indf2,w,c
  1439  003CEC  EC74  F01D         	call	_spiTransferByte
  1440  003CF0  4A2D               	infsnz	nrfSetRXAddr@i,f,c
  1441  003CF2  2A2E               	incf	nrfSetRXAddr@i+1,f,c
  1442  003CF4                     l987:
  1443  003CF4  5027               	movf	nrfSetRXAddr@len+1,w,c
  1444  003CF6  0A80               	xorlw	128
  1445  003CF8  6E28               	movwf	??_nrfSetRXAddr& (0+255),c
  1446  003CFA  502D               	movf	nrfSetRXAddr@i,w,c
  1447  003CFC  5C26               	subwf	nrfSetRXAddr@len,w,c
  1448  003CFE  502E               	movf	nrfSetRXAddr@i+1,w,c
  1449  003D00  0A80               	xorlw	128
  1450  003D02  5828               	subwfb	??_nrfSetRXAddr& (0+255),w,c
  1451  003D04  B0D8               	btfsc	status,0,c
  1452  003D06  D7DF               	goto	l983
  1453  003D08                     l989:
  1454                           
  1455                           ;main.c: 385: }
  1456                           ;main.c: 386: }
  1457                           ;main.c: 388: setCSN(1);
  1458  003D08  0E00               	movlw	0
  1459  003D0A  6E23               	movwf	setCSN@level+1,c
  1460  003D0C  0E01               	movlw	1
  1461  003D0E  6E22               	movwf	setCSN@level,c
  1462  003D10  EC7D  F01D         	call	_setCSN	;wreg free
  1463  003D14  0012               	return	
  1464  003D16                     __end_of_nrfSetRXAddr:
  1465                           	opt stack 0
  1466                           tblptru	equ	0xFF8
  1467                           tblptrh	equ	0xFF7
  1468                           tblptrl	equ	0xFF6
  1469                           tablat	equ	0xFF5
  1470                           postinc0	equ	0xFEE
  1471                           wreg	equ	0xFE8
  1472                           indf1	equ	0xFE7
  1473                           postdec1	equ	0xFE5
  1474                           fsr1h	equ	0xFE2
  1475                           fsr1l	equ	0xFE1
  1476                           indf2	equ	0xFDF
  1477                           fsr2h	equ	0xFDA
  1478                           fsr2l	equ	0xFD9
  1479                           status	equ	0xFD8
  1480                           
  1481 ;; *************** function _nrfConfigReg *****************
  1482 ;; Defined at:
  1483 ;;		line 331 in file "main.c"
  1484 ;; Parameters:    Size  Location     Type
  1485 ;;  wr              1    wreg     unsigned char 
  1486 ;;  command         1    2[COMRAM] unsigned char 
  1487 ;;  data            1    3[COMRAM] unsigned char 
  1488 ;; Auto vars:     Size  Location     Type
  1489 ;;  wr              1    4[COMRAM] unsigned char 
  1490 ;; Return value:  Size  Location     Type
  1491 ;;                  1    wreg      unsigned char 
  1492 ;; Registers used:
  1493 ;;		wreg, status,2, status,0, cstack
  1494 ;; Tracked objects:
  1495 ;;		On entry : 0/0
  1496 ;;		On exit  : 0/0
  1497 ;;		Unchanged: 0/0
  1498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1499 ;;      Params:         2       0       0       0
  1500 ;;      Locals:         1       0       0       0
  1501 ;;      Temps:          0       0       0       0
  1502 ;;      Totals:         3       0       0       0
  1503 ;;Total ram usage:        3 bytes
  1504 ;; Hardware stack levels used:    1
  1505 ;; Hardware stack levels required when called:    1
  1506 ;; This function calls:
  1507 ;;		_setCSN
  1508 ;;		_spiTransferByte
  1509 ;; This function is called by:
  1510 ;;		_nrfConfig
  1511 ;; This function uses a non-reentrant model
  1512 ;;
  1513                           
  1514                           	psect	text9
  1515  003BE0                     __ptext9:
  1516                           	opt stack 0
  1517  003BE0                     _nrfConfigReg:
  1518                           	opt stack 28
  1519                           
  1520                           ;incstack = 0
  1521                           ;nrfConfigReg@wr stored from wreg
  1522  003BE0  6E26               	movwf	nrfConfigReg@wr,c
  1523                           
  1524                           ;main.c: 333: setCSN(0);
  1525  003BE2  0E00               	movlw	0
  1526  003BE4  6E23               	movwf	setCSN@level+1,c
  1527  003BE6  0E00               	movlw	0
  1528  003BE8  6E22               	movwf	setCSN@level,c
  1529  003BEA  EC7D  F01D         	call	_setCSN	;wreg free
  1530                           
  1531                           ;main.c: 335: if (wr == 'w') {
  1532  003BEE  5026               	movf	nrfConfigReg@wr,w,c
  1533  003BF0  0A77               	xorlw	119
  1534  003BF2  A4D8               	btfss	status,2,c
  1535  003BF4  D008               	goto	l969
  1536                           
  1537                           ;main.c: 336: spiTransferByte(0x20|command);
  1538  003BF6  5024               	movf	nrfConfigReg@command,w,c
  1539  003BF8  0920               	iorlw	32
  1540  003BFA  EC74  F01D         	call	_spiTransferByte
  1541                           
  1542                           ;main.c: 337: spiTransferByte(data);
  1543  003BFE  5025               	movf	nrfConfigReg@data,w,c
  1544  003C00  EC74  F01D         	call	_spiTransferByte
  1545                           
  1546                           ;main.c: 338: } else if (wr == 'r') {
  1547  003C04  D00B               	goto	l973
  1548  003C06                     l969:
  1549  003C06  5026               	movf	nrfConfigReg@wr,w,c
  1550  003C08  0A72               	xorlw	114
  1551  003C0A  A4D8               	btfss	status,2,c
  1552  003C0C  D007               	goto	l973
  1553                           
  1554                           ;main.c: 339: spiTransferByte(0x00|command);
  1555  003C0E  5024               	movf	nrfConfigReg@command,w,c
  1556  003C10  EC74  F01D         	call	_spiTransferByte
  1557                           
  1558                           ;main.c: 340: data = spiTransferByte(0xFF);
  1559  003C14  0EFF               	movlw	255
  1560  003C16  EC74  F01D         	call	_spiTransferByte
  1561  003C1A  6E25               	movwf	nrfConfigReg@data,c
  1562  003C1C                     l973:
  1563                           
  1564                           ;main.c: 341: }
  1565                           ;main.c: 343: setCSN(1);
  1566  003C1C  0E00               	movlw	0
  1567  003C1E  6E23               	movwf	setCSN@level+1,c
  1568  003C20  0E01               	movlw	1
  1569  003C22  6E22               	movwf	setCSN@level,c
  1570  003C24  EC7D  F01D         	call	_setCSN	;wreg free
  1571  003C28  0012               	return	
  1572  003C2A                     __end_of_nrfConfigReg:
  1573                           	opt stack 0
  1574                           tblptru	equ	0xFF8
  1575                           tblptrh	equ	0xFF7
  1576                           tblptrl	equ	0xFF6
  1577                           tablat	equ	0xFF5
  1578                           postinc0	equ	0xFEE
  1579                           wreg	equ	0xFE8
  1580                           indf1	equ	0xFE7
  1581                           postdec1	equ	0xFE5
  1582                           fsr1h	equ	0xFE2
  1583                           fsr1l	equ	0xFE1
  1584                           indf2	equ	0xFDF
  1585                           fsr2h	equ	0xFDA
  1586                           fsr2l	equ	0xFD9
  1587                           status	equ	0xFD8
  1588                           
  1589 ;; *************** function _spiTransferByte *****************
  1590 ;; Defined at:
  1591 ;;		line 423 in file "main.c"
  1592 ;; Parameters:    Size  Location     Type
  1593 ;;  data            1    wreg     unsigned char 
  1594 ;; Auto vars:     Size  Location     Type
  1595 ;;  data            1    0[COMRAM] unsigned char 
  1596 ;; Return value:  Size  Location     Type
  1597 ;;                  1    wreg      unsigned char 
  1598 ;; Registers used:
  1599 ;;		wreg, status,2, cstack
  1600 ;; Tracked objects:
  1601 ;;		On entry : 0/0
  1602 ;;		On exit  : 0/0
  1603 ;;		Unchanged: 0/0
  1604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1605 ;;      Params:         0       0       0       0
  1606 ;;      Locals:         1       0       0       0
  1607 ;;      Temps:          0       0       0       0
  1608 ;;      Totals:         1       0       0       0
  1609 ;;Total ram usage:        1 bytes
  1610 ;; Hardware stack levels used:    1
  1611 ;; This function calls:
  1612 ;;		Nothing
  1613 ;; This function is called by:
  1614 ;;		_nrfGetStatus
  1615 ;;		_nrfConfigReg
  1616 ;;		_nrfSetTXAddr
  1617 ;;		_nrfSetRXAddr
  1618 ;;		_spiTransfer
  1619 ;;		_nrfTXData
  1620 ;; This function uses a non-reentrant model
  1621 ;;
  1622                           
  1623                           	psect	text10
  1624  003AE8                     __ptext10:
  1625                           	opt stack 0
  1626  003AE8                     _spiTransferByte:
  1627                           	opt stack 29
  1628                           
  1629                           ;incstack = 0
  1630                           ;spiTransferByte@data stored from wreg
  1631  003AE8  6E22               	movwf	spiTransferByte@data,c
  1632                           
  1633                           ;main.c: 425: SSP1BUF = data;
  1634  003AEA  C022  FFC9         	movff	spiTransferByte@data,4041	;volatile
  1635                           
  1636                           ;main.c: 427: _delay((unsigned long)((8)*(64000000/4000000.0)));
  1637  003AEE  0E2A               	movlw	42
  1638  003AF0                     u377:
  1639  003AF0  2EE8               	decfsz	wreg,f,c
  1640  003AF2  D7FE               	goto	u377
  1641  003AF4  D000               	nop2		;nop
  1642                           
  1643                           ;main.c: 429: return SSP1BUF;
  1644  003AF6  50C9               	movf	4041,w,c	;volatile
  1645  003AF8  0012               	return	
  1646  003AFA                     __end_of_spiTransferByte:
  1647                           	opt stack 0
  1648                           tblptru	equ	0xFF8
  1649                           tblptrh	equ	0xFF7
  1650                           tblptrl	equ	0xFF6
  1651                           tablat	equ	0xFF5
  1652                           postinc0	equ	0xFEE
  1653                           wreg	equ	0xFE8
  1654                           indf1	equ	0xFE7
  1655                           postdec1	equ	0xFE5
  1656                           fsr1h	equ	0xFE2
  1657                           fsr1l	equ	0xFE1
  1658                           indf2	equ	0xFDF
  1659                           fsr2h	equ	0xFDA
  1660                           fsr2l	equ	0xFD9
  1661                           status	equ	0xFD8
  1662                           
  1663 ;; *************** function _setCSN *****************
  1664 ;; Defined at:
  1665 ;;		line 305 in file "main.c"
  1666 ;; Parameters:    Size  Location     Type
  1667 ;;  level           2    0[COMRAM] int 
  1668 ;; Auto vars:     Size  Location     Type
  1669 ;;		None
  1670 ;; Return value:  Size  Location     Type
  1671 ;;		None               void
  1672 ;; Registers used:
  1673 ;;		wreg, status,2, status,0
  1674 ;; Tracked objects:
  1675 ;;		On entry : 0/0
  1676 ;;		On exit  : 0/0
  1677 ;;		Unchanged: 0/0
  1678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1679 ;;      Params:         2       0       0       0
  1680 ;;      Locals:         0       0       0       0
  1681 ;;      Temps:          0       0       0       0
  1682 ;;      Totals:         2       0       0       0
  1683 ;;Total ram usage:        2 bytes
  1684 ;; Hardware stack levels used:    1
  1685 ;; This function calls:
  1686 ;;		Nothing
  1687 ;; This function is called by:
  1688 ;;		_nrfGetStatus
  1689 ;;		_nrfConfigReg
  1690 ;;		_nrfSetTXAddr
  1691 ;;		_nrfSetRXAddr
  1692 ;;		_spiTransfer
  1693 ;;		_nrfTXData
  1694 ;; This function uses a non-reentrant model
  1695 ;;
  1696                           
  1697                           	psect	text11
  1698  003AFA                     __ptext11:
  1699                           	opt stack 0
  1700  003AFA                     _setCSN:
  1701                           	opt stack 29
  1702                           
  1703                           ;main.c: 307: if (level == 1) {
  1704                           
  1705                           ;incstack = 0
  1706  003AFA  0422               	decf	setCSN@level,w,c
  1707  003AFC  1023               	iorwf	setCSN@level+1,w,c
  1708  003AFE  A4D8               	btfss	status,2,c
  1709  003B00  D006               	goto	l94
  1710                           
  1711                           ;main.c: 308: _delay((unsigned long)((1)*(64000000/4000000.0)));
  1712  003B02  0E05               	movlw	5
  1713  003B04                     u387:
  1714  003B04  2EE8               	decfsz	wreg,f,c
  1715  003B06  D7FE               	goto	u387
  1716  003B08  F000               	nop	
  1717                           
  1718                           ;main.c: 309: LATAbits.LATA2 = 1;
  1719  003B0A  8489               	bsf	3977,2,c	;volatile
  1720                           
  1721                           ;main.c: 310: } else {
  1722  003B0C  0012               	return	
  1723  003B0E                     l94:
  1724                           
  1725                           ;main.c: 311: LATAbits.LATA2 = 0;
  1726  003B0E  9489               	bcf	3977,2,c	;volatile
  1727  003B10  0012               	return	
  1728  003B12                     __end_of_setCSN:
  1729                           	opt stack 0
  1730                           tblptru	equ	0xFF8
  1731                           tblptrh	equ	0xFF7
  1732                           tblptrl	equ	0xFF6
  1733                           tablat	equ	0xFF5
  1734                           postinc0	equ	0xFEE
  1735                           wreg	equ	0xFE8
  1736                           indf1	equ	0xFE7
  1737                           postdec1	equ	0xFE5
  1738                           fsr1h	equ	0xFE2
  1739                           fsr1l	equ	0xFE1
  1740                           indf2	equ	0xFDF
  1741                           fsr2h	equ	0xFDA
  1742                           fsr2l	equ	0xFD9
  1743                           status	equ	0xFD8
  1744                           
  1745 ;; *************** function _delay10ms *****************
  1746 ;; Defined at:
  1747 ;;		line 463 in file "main.c"
  1748 ;; Parameters:    Size  Location     Type
  1749 ;;  ms_multi        2    0[COMRAM] int 
  1750 ;; Auto vars:     Size  Location     Type
  1751 ;;  i               2    3[COMRAM] int 
  1752 ;; Return value:  Size  Location     Type
  1753 ;;		None               void
  1754 ;; Registers used:
  1755 ;;		wreg, status,2, status,0
  1756 ;; Tracked objects:
  1757 ;;		On entry : 0/0
  1758 ;;		On exit  : 0/0
  1759 ;;		Unchanged: 0/0
  1760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1761 ;;      Params:         2       0       0       0
  1762 ;;      Locals:         2       0       0       0
  1763 ;;      Temps:          1       0       0       0
  1764 ;;      Totals:         5       0       0       0
  1765 ;;Total ram usage:        5 bytes
  1766 ;; Hardware stack levels used:    1
  1767 ;; This function calls:
  1768 ;;		Nothing
  1769 ;; This function is called by:
  1770 ;;		_main
  1771 ;; This function uses a non-reentrant model
  1772 ;;
  1773                           
  1774                           	psect	text12
  1775  003B66                     __ptext12:
  1776                           	opt stack 0
  1777  003B66                     _delay10ms:
  1778                           	opt stack 30
  1779                           
  1780                           ;main.c: 464: int i = 0;
  1781                           
  1782                           ;incstack = 0
  1783  003B66  0E00               	movlw	0
  1784  003B68  6E26               	movwf	delay10ms@i+1,c
  1785  003B6A  0E00               	movlw	0
  1786  003B6C  6E25               	movwf	delay10ms@i,c
  1787                           
  1788                           ;main.c: 465: for (i=0;i<ms_multi;i++) {
  1789  003B6E  0E00               	movlw	0
  1790  003B70  6E26               	movwf	delay10ms@i+1,c
  1791  003B72  0E00               	movlw	0
  1792  003B74  6E25               	movwf	delay10ms@i,c
  1793  003B76  D00A               	goto	l144
  1794  003B78                     l843:
  1795                           
  1796                           ;main.c: 466: _delay((unsigned long)((11)*(64000000/4000.0)));
  1797  003B78  0EE5               	movlw	229
  1798  003B7A  6E24               	movwf	??_delay10ms& (0+255),c
  1799  003B7C  0E91               	movlw	145
  1800  003B7E                     u397:
  1801  003B7E  2EE8               	decfsz	wreg,f,c
  1802  003B80  D7FE               	goto	u397
  1803  003B82  2E24               	decfsz	??_delay10ms& (0+255),f,c
  1804  003B84  D7FC               	goto	u397
  1805  003B86  F000               	nop	
  1806  003B88  4A25               	infsnz	delay10ms@i,f,c
  1807  003B8A  2A26               	incf	delay10ms@i+1,f,c
  1808  003B8C                     l144:
  1809  003B8C  5026               	movf	delay10ms@i+1,w,c
  1810  003B8E  0A80               	xorlw	128
  1811  003B90  6E24               	movwf	??_delay10ms& (0+255),c
  1812  003B92  5022               	movf	delay10ms@ms_multi,w,c
  1813  003B94  5C25               	subwf	delay10ms@i,w,c
  1814  003B96  5023               	movf	delay10ms@ms_multi+1,w,c
  1815  003B98  0A80               	xorlw	128
  1816  003B9A  5824               	subwfb	??_delay10ms& (0+255),w,c
  1817  003B9C  B0D8               	btfsc	status,0,c
  1818  003B9E  0012               	return	
  1819  003BA0  D7EB               	goto	l843
  1820  003BA2                     __end_of_delay10ms:
  1821                           	opt stack 0
  1822  0000                     tblptru	equ	0xFF8
  1823                           tblptrh	equ	0xFF7
  1824                           tblptrl	equ	0xFF6
  1825                           tablat	equ	0xFF5
  1826                           postinc0	equ	0xFEE
  1827                           wreg	equ	0xFE8
  1828                           indf1	equ	0xFE7
  1829                           postdec1	equ	0xFE5
  1830                           fsr1h	equ	0xFE2
  1831                           fsr1l	equ	0xFE1
  1832                           indf2	equ	0xFDF
  1833                           fsr2h	equ	0xFDA
  1834                           fsr2l	equ	0xFD9
  1835                           status	equ	0xFD8
  1836                           tblptru	equ	0xFF8
  1837                           tblptrh	equ	0xFF7
  1838                           tblptrl	equ	0xFF6
  1839                           tablat	equ	0xFF5
  1840                           postinc0	equ	0xFEE
  1841                           wreg	equ	0xFE8
  1842                           indf1	equ	0xFE7
  1843                           postdec1	equ	0xFE5
  1844                           fsr1h	equ	0xFE2
  1845                           fsr1l	equ	0xFE1
  1846                           indf2	equ	0xFDF
  1847                           fsr2h	equ	0xFDA
  1848                           fsr2l	equ	0xFD9
  1849                           status	equ	0xFD8
  1850                           
  1851                           	psect	rparam
  1852  0000                     tblptru	equ	0xFF8
  1853                           tblptrh	equ	0xFF7
  1854                           tblptrl	equ	0xFF6
  1855                           tablat	equ	0xFF5
  1856                           postinc0	equ	0xFEE
  1857                           wreg	equ	0xFE8
  1858                           indf1	equ	0xFE7
  1859                           postdec1	equ	0xFE5
  1860                           fsr1h	equ	0xFE2
  1861                           fsr1l	equ	0xFE1
  1862                           indf2	equ	0xFDF
  1863                           fsr2h	equ	0xFDA
  1864                           fsr2l	equ	0xFD9
  1865                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        16
    BSS         65
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     20      69
    BANK0           160      0      32
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    nrfSetRXAddr@addr	PTR unsigned char  size(2) Largest target is 4
		 -> RX_ADDRESS(COMRAM[4]), TX_ADDRESS(COMRAM[4]), 

    nrfSetTXAddr@addr	PTR unsigned char  size(2) Largest target is 4
		 -> TX_ADDRESS(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->_spiTransfer
    _nrfTXData->_setCSN
    _nrfGetStatus->_setCSN
    _nrfConfig->_spiTransfer
    _spiTransfer->_setCSN
    _nrfSetTXAddr->_setCSN
    _nrfSetRXAddr->_setCSN
    _nrfConfigReg->_setCSN

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    8146
                                             16 COMRAM     4     4      0
                          _delay10ms
                          _nrfConfig
                       _nrfGetStatus
                          _nrfTXData
                         _portConfig
                        _spiConfig_1
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiConfig_1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _portConfig                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _nrfTXData                                            8     6      2     823
                                              2 COMRAM     8     6      2
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (1) _nrfGetStatus                                         0     0      0     680
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (1) _nrfConfig                                            0     0      0    5023
                       _nrfConfigReg
                       _nrfSetRXAddr
                       _nrfSetTXAddr
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiTransfer                                         14    11      3    1348
                                              2 COMRAM    14    11      3
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfSetTXAddr                                        10     6      4     898
                                              2 COMRAM    10     6      4
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfSetRXAddr                                        11     7      4    1026
                                              2 COMRAM    11     7      4
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfConfigReg                                         3     1      2    1751
                                              2 COMRAM     3     1      2
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _spiTransferByte                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setCSN                                               2     0      2     658
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _delay10ms                                            5     3      2     202
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay10ms
   _nrfConfig
     _nrfConfigReg
       _setCSN
       _spiTransferByte
     _nrfSetRXAddr
       _setCSN
       _spiTransferByte
     _nrfSetTXAddr
       _setCSN
       _spiTransferByte
     _spiTransfer
       _setCSN
       _spiTransferByte
   _nrfGetStatus
     _setCSN
     _spiTransferByte
   _nrfTXData
     _setCSN
     _spiTransferByte
   _portConfig
   _spiConfig_1
   _spiTransfer
     _setCSN
     _spiTransferByte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       6        0.0%
BANK2              100      0       0       7        0.0%
BITBANK1           100      0       0       9        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      20       4       20.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     14      45       1       72.6%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      65       8        0.0%
DATA                 0      0      65      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Mon Sep 29 15:23:24 2014

__size_of_spiTransferByte 0012                        l94 3B0E                _RX_ADDRESS 003E  
             __CFG_LVP$ON 000000                       l144 3B8C                       l843 3B78  
                     l941 3DB6                       l953 3DE6                       l945 3DC6  
                     l973 3C1C                       l957 3E3E                       l949 3DD4  
                     l983 3CC6                       l959 3E52                       l969 3C06  
                     l987 3CF4                       l989 3D08                       l999 3C4E  
                     u367 3D8C                       u377 3AF0                       u387 3B04  
                     u397 3B7E                       wreg 000FE8                _TX_ADDRESS 0042  
                    l1003 3C7C                      l1005 3C90                      l1033 3D68  
                    l1035 3D7C                      l1029 3D3A                      l1057 3E80  
                    l1067 3EA6                      l1087 3F02                      l1079 3EDC  
                    l1089 3F06                      _LATA 000F89                      _LATB 000F8A  
                    _LATC 000F8B        spiTransfer@command 0024                      _main 3E60  
                    indf1 000FE7                      fsr1l 000FE1                      indf2 000FDF  
                    fsr2l 000FD9             __CFG_BORV$190 000000                      start 0000  
           __CFG_IESO$OFF 000000            nrfConfigReg@wr 0026                     ?_main 0022  
                   _TRISA 000F92                     _TRISB 000F93                     _TRISC 000F94  
            main@txDSFlag 0035            __CFG_FCMEN$OFF 000000        __CFG_MCLRE$EXTMCLR 000000  
                   tablat 000FF5                     status 000FD8            __CFG_HFOFST$ON 000000  
          __CFG_FOSC$HSHP 000000           __initialization 3BA2              __end_of_main 3F2E  
     spiTransferByte@data 0022                    ??_main 0032             __activetblptr 000000  
       ??_spiTransferByte 0022            __CFG_PLLCFG$ON 000000             main@maxRTFlag 0034  
           nrfSetRXAddr@i 002D             nrfSetTXAddr@i 002C            __CFG_WDTEN$OFF 000000  
            ?_spiConfig_1 0022            __CFG_PWRTEN$ON 000000            __CFG_XINST$OFF 000000  
          __CFG_STVREN$ON 000000                    _setCSN 3AFA                    clear_0 3BA8  
                  clear_1 3BB4               setCSN@level 0022             ?_nrfGetStatus 0022  
           ?_nrfConfigReg 0024              __pdataCOMRAM 0036              ?_spiTransfer 0024  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
              __accesstop 0060   __end_of__initialization 3BDA           __CFG_PBADEN$OFF 000000  
           ?_nrfSetRXAddr 0024             ?_nrfSetTXAddr 0024            __pcstackCOMRAM 0022  
      __size_of_delay10ms 003C            ??_nrfGetStatus 0024            _EN_RXADDR_CURR 0038  
          ??_nrfConfigReg 0026          nrfConfigReg@data 0025                _dataBufOut 0001  
              __pbssBANK0 0060            ??_nrfSetRXAddr 0028            ??_nrfSetTXAddr 0028  
      __size_of_nrfTXData 0080        __size_of_nrfConfig 00D2       nrfConfigReg@command 0024  
      __CFG_CCP2MX$PORTC1 000000        __CFG_CCP3MX$PORTB5 000000                   ?_setCSN 0022  
                 _SSP1ADD 000FC8                   _SSP1BUF 000FC9         __end_of_delay10ms 3BA2  
        nrfSetRXAddr@addr 0024          nrfSetRXAddr@pipe 002C                   __Hparam 0000  
                 __Lparam 0000      __size_of_spiConfig_1 0018           _spiTransferByte 3AE8  
              delay10ms@i 0025             _RX_PW_P0_CURR 003B                   __pcinit 3BA2  
         __size_of_setCSN 0018          nrfSetTXAddr@addr 0024                   __ramtop 0300  
                 __ptext0 3E60                   __ptext1 3B12                   __ptext2 3B2A  
                 __ptext3 3D16                   __ptext4 3B44                   __ptext5 3F2E  
                 __ptext6 3D96                   __ptext7 3C2A                   __ptext8 3C9E  
                 __ptext9 3BE0         __end_of_nrfTXData 3D96         __end_of_nrfConfig 4000  
    __size_of_spiTransfer 00CA      end_of_initialization 3BDA      __end_of_nrfGetStatus 3B66  
    __end_of_nrfConfigReg 3C2A                   postdec1 000FE5                   postinc0 000FEE  
            nrfTXData@len 0024                _portConfig 3B2A      __end_of_nrfSetRXAddr 3D16  
    __end_of_nrfSetTXAddr 3C9E   __end_of_spiTransferByte 3AFA             __pidataCOMRAM 3AD8  
          __end_of_setCSN 3B12       start_initialization 3BA2                  ??_setCSN 0024  
             ?_portConfig 0022                nrfTXData@i 002A               __pbssCOMRAM 0001  
   __size_of_nrfGetStatus 0022     __size_of_nrfConfigReg 004A                 _dataBufIn 0060  
        ?_spiTransferByte 0022                 _delay10ms 3B66               _CONFIG_CURR 0036  
           _SETUP_AW_CURR 003C     __size_of_nrfSetRXAddr 0078     __size_of_nrfSetTXAddr 0074  
         _SETUP_RETR_CURR 003D          __CFG_PRICLKEN$ON 000000              _nrfGetStatus 3B44  
            _nrfConfigReg 3BE0           nrfSetRXAddr@len 0026                 _nrfSTATUS 0021  
               _nrfTXData 3D16           nrfSetTXAddr@len 0026                 _nrfConfig 3F2E  
     __size_of_portConfig 001A                  _LATAbits 000F89                ?_delay10ms 0022  
           ??_spiConfig_1 0022              _nrfSetRXAddr 3C9E              _nrfSetTXAddr 3C2A  
        __CFG_WDTPS$32768 000000             _RF_SETUP_CURR 003A         delay10ms@ms_multi 0022  
           ??_spiTransfer 0027                 main@count 0032                ?_nrfTXData 0024  
               copy_data0 3BCE                ?_nrfConfig 0022                  __Hrparam 0000  
                __Lrparam 0000        __CFG_BOREN$SBORDIS 000000         __CFG_P2BMX$PORTB5 000000  
     __end_of_spiConfig_1 3B2A                  __ptext10 3AE8                  __ptext11 3AFA  
                __ptext12 3B66              _SSP1CON1bits 000FC6       __end_of_spiTransfer 3E60  
           __size_of_main 00CE               ??_delay10ms 0024                _EN_AA_CURR 0037  
            _SSP1STATbits 000FC7              ??_portConfig 0022               ??_nrfTXData 0026  
             ??_nrfConfig 0032        __end_of_portConfig 3B44               _spiConfig_1 3B12  
          spiTransfer@len 0025            spiTransfer@wrn 002F                _RF_CH_CURR 0039  
             _spiTransfer 3D96         __CFG_T3CMX$PORTC0 000000              spiTransfer@i 0030  
