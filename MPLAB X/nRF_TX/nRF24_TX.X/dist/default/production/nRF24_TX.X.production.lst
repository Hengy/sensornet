

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Mon Sep 29 20:04:05 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F24K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    26  0000                     
    27                           	psect	idataCOMRAM
    28  003B18                     __pidataCOMRAM:
    29                           	opt stack 0
    30                           
    31                           ;initializer for _CONFIG_CURR
    32  003B18  0A                 	db	10
    33                           
    34                           ;initializer for _EN_AA_CURR
    35  003B19  03                 	db	3
    36                           
    37                           ;initializer for _EN_RXADDR_CURR
    38  003B1A  03                 	db	3
    39                           
    40                           ;initializer for _RF_CH_CURR
    41  003B1B  69                 	db	105
    42                           
    43                           ;initializer for _RF_SETUP_CURR
    44  003B1C  06                 	db	6
    45                           
    46                           ;initializer for _RX_PW_P0_CURR
    47  003B1D  01                 	db	1
    48                           
    49                           ;initializer for _SETUP_AW_CURR
    50  003B1E  02                 	db	2
    51                           
    52                           ;initializer for _SETUP_RETR_CURR
    53  003B1F  35                 	db	53
    54                           
    55                           ;initializer for _RX_ADDRESS
    56  003B20  E7                 	db	231
    57  003B21  E7                 	db	231
    58  003B22  E7                 	db	231
    59  003B23  E7                 	db	231
    60                           
    61                           ;initializer for _TX_ADDRESS
    62  003B24  C7                 	db	199
    63  003B25  C7                 	db	199
    64  003B26  C7                 	db	199
    65  003B27  C7                 	db	199
    66  0000                     _LATA	set	3977
    67  0000                     _LATAbits	set	3977
    68  0000                     _LATB	set	3978
    69  0000                     _LATC	set	3979
    70  0000                     _SSP1ADD	set	4040
    71  0000                     _SSP1BUF	set	4041
    72  0000                     _SSP1CON1bits	set	4038
    73  0000                     _SSP1STATbits	set	4039
    74  0000                     _TRISA	set	3986
    75  0000                     _TRISB	set	3987
    76  0000                     _TRISC	set	3988
    77                           
    78                           ; #config settings
    79  0000                     
    80                           	psect	cinit
    81  003BE2                     __pcinit:
    82                           	opt stack 0
    83  003BE2                     start_initialization:
    84                           	opt stack 0
    85  003BE2                     __initialization:
    86                           	opt stack 0
    87                           
    88                           ; Clear objects allocated to BANK0 (32 bytes)
    89  003BE2  EE00  F060         	lfsr	0,__pbssBANK0
    90  003BE6  0E20               	movlw	32
    91  003BE8                     clear_0:
    92  003BE8  6AEE               	clrf	postinc0,c
    93  003BEA  06E8               	decf	wreg,f,c
    94  003BEC  E1FD               	bnz	clear_0
    95                           
    96                           ; Clear objects allocated to COMRAM (33 bytes)
    97  003BEE  EE00  F001         	lfsr	0,__pbssCOMRAM
    98  003BF2  0E21               	movlw	33
    99  003BF4                     clear_1:
   100  003BF4  6AEE               	clrf	postinc0,c
   101  003BF6  06E8               	decf	wreg,f,c
   102  003BF8  E1FD               	bnz	clear_1
   103                           
   104                           ; Initialize objects allocated to COMRAM (16 bytes)
   105                           ; load TBLPTR registers with __pidataCOMRAM
   106  003BFA  0E18               	movlw	low __pidataCOMRAM
   107  003BFC  6EF6               	movwf	tblptrl,c
   108  003BFE  0E3B               	movlw	high __pidataCOMRAM
   109  003C00  6EF7               	movwf	tblptrh,c
   110  003C02  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   111  003C04  6EF8               	movwf	tblptru,c
   112  003C06  EE00  F034         	lfsr	0,__pdataCOMRAM
   113  003C0A  EE10 F010          	lfsr	1,16
   114  003C0E                     copy_data0:
   115  003C0E  0009               	tblrd		*+
   116  003C10  CFF5 FFEE          	movff	tablat,postinc0
   117  003C14  50E5               	movf	postdec1,w,c
   118  003C16  50E1               	movf	fsr1l,w,c
   119  003C18  E1FA               	bnz	copy_data0
   120  003C1A                     end_of_initialization:
   121                           	opt stack 0
   122  003C1A                     __end_of__initialization:
   123                           	opt stack 0
   124  003C1A  0100               	movlb	0
   125  003C1C  EFEB  F01E         	goto	_main	;jump to C main() function
   126                           tblptru	equ	0xFF8
   127                           tblptrh	equ	0xFF7
   128                           tblptrl	equ	0xFF6
   129                           tablat	equ	0xFF5
   130                           postinc0	equ	0xFEE
   131                           wreg	equ	0xFE8
   132                           postdec1	equ	0xFE5
   133                           fsr1l	equ	0xFE1
   134                           
   135                           	psect	bssCOMRAM
   136  000001                     __pbssCOMRAM:
   137                           	opt stack 0
   138  000001                     _dataBufOut:
   139                           	opt stack 0
   140  000001                     	ds	32
   141  000021                     _nrfSTATUS:
   142                           	opt stack 0
   143  000021                     	ds	1
   144                           tblptru	equ	0xFF8
   145                           tblptrh	equ	0xFF7
   146                           tblptrl	equ	0xFF6
   147                           tablat	equ	0xFF5
   148                           postinc0	equ	0xFEE
   149                           wreg	equ	0xFE8
   150                           postdec1	equ	0xFE5
   151                           fsr1l	equ	0xFE1
   152                           
   153                           	psect	dataCOMRAM
   154  000034                     __pdataCOMRAM:
   155                           	opt stack 0
   156  000034                     _CONFIG_CURR:
   157                           	opt stack 0
   158  000034                     	ds	1
   159  000035                     _EN_AA_CURR:
   160                           	opt stack 0
   161  000035                     	ds	1
   162  000036                     _EN_RXADDR_CURR:
   163                           	opt stack 0
   164  000036                     	ds	1
   165  000037                     _RF_CH_CURR:
   166                           	opt stack 0
   167  000037                     	ds	1
   168  000038                     _RF_SETUP_CURR:
   169                           	opt stack 0
   170  000038                     	ds	1
   171  000039                     _RX_PW_P0_CURR:
   172                           	opt stack 0
   173  000039                     	ds	1
   174  00003A                     _SETUP_AW_CURR:
   175                           	opt stack 0
   176  00003A                     	ds	1
   177  00003B                     _SETUP_RETR_CURR:
   178                           	opt stack 0
   179  00003B                     	ds	1
   180  00003C                     _RX_ADDRESS:
   181                           	opt stack 0
   182  00003C                     	ds	4
   183  000040                     _TX_ADDRESS:
   184                           	opt stack 0
   185  000040                     	ds	4
   186                           tblptru	equ	0xFF8
   187                           tblptrh	equ	0xFF7
   188                           tblptrl	equ	0xFF6
   189                           tablat	equ	0xFF5
   190                           postinc0	equ	0xFEE
   191                           wreg	equ	0xFE8
   192                           postdec1	equ	0xFE5
   193                           fsr1l	equ	0xFE1
   194                           
   195                           	psect	bssBANK0
   196  000060                     __pbssBANK0:
   197                           	opt stack 0
   198  000060                     _dataBufIn:
   199                           	opt stack 0
   200  000060                     	ds	32
   201                           tblptru	equ	0xFF8
   202                           tblptrh	equ	0xFF7
   203                           tblptrl	equ	0xFF6
   204                           tablat	equ	0xFF5
   205                           postinc0	equ	0xFEE
   206                           wreg	equ	0xFE8
   207                           postdec1	equ	0xFE5
   208                           fsr1l	equ	0xFE1
   209                           
   210                           	psect	cstackCOMRAM
   211  000022                     __pcstackCOMRAM:
   212                           	opt stack 0
   213  000022                     spiTransferByte@data:
   214                           	opt stack 0
   215  000022                     setCSN@level:
   216                           	opt stack 0
   217  000022                     delay10ms@ms_multi:
   218                           	opt stack 0
   219                           
   220                           ; 2 bytes @ 0x0
   221  000022                     	ds	2
   222  000024                     ??_delay10ms:
   223  000024                     nrfConfigReg@command:
   224                           	opt stack 0
   225  000024                     spiTransfer@command:
   226                           	opt stack 0
   227  000024                     nrfSetTXAddr@addr:
   228                           	opt stack 0
   229  000024                     nrfSetRXAddr@addr:
   230                           	opt stack 0
   231  000024                     nrfTXData@len:
   232                           	opt stack 0
   233                           
   234                           ; 2 bytes @ 0x2
   235  000024                     	ds	1
   236  000025                     nrfConfigReg@data:
   237                           	opt stack 0
   238  000025                     spiTransfer@len:
   239                           	opt stack 0
   240  000025                     delay10ms@i:
   241                           	opt stack 0
   242                           
   243                           ; 2 bytes @ 0x3
   244  000025                     	ds	1
   245  000026                     ??_nrfTXData:
   246  000026                     nrfConfigReg@wr:
   247                           	opt stack 0
   248  000026                     nrfSetTXAddr@len:
   249                           	opt stack 0
   250  000026                     nrfSetRXAddr@len:
   251                           	opt stack 0
   252                           
   253                           ; 2 bytes @ 0x4
   254  000026                     	ds	1
   255  000027                     ??_spiTransfer:
   256                           
   257                           ; 0 bytes @ 0x5
   258  000027                     	ds	1
   259  000028                     ??_nrfSetRXAddr:
   260  000028                     ??_nrfSetTXAddr:
   261                           
   262                           ; 0 bytes @ 0x6
   263  000028                     	ds	2
   264  00002A                     nrfTXData@i:
   265                           	opt stack 0
   266                           
   267                           ; 2 bytes @ 0x8
   268  00002A                     	ds	2
   269  00002C                     nrfSetRXAddr@pipe:
   270                           	opt stack 0
   271  00002C                     nrfSetTXAddr@i:
   272                           	opt stack 0
   273                           
   274                           ; 2 bytes @ 0xA
   275  00002C                     	ds	1
   276  00002D                     nrfSetRXAddr@i:
   277                           	opt stack 0
   278                           
   279                           ; 2 bytes @ 0xB
   280  00002D                     	ds	2
   281  00002F                     spiTransfer@wrn:
   282                           	opt stack 0
   283                           
   284                           ; 1 bytes @ 0xD
   285  00002F                     	ds	1
   286  000030                     spiTransfer@i:
   287                           	opt stack 0
   288                           
   289                           ; 2 bytes @ 0xE
   290  000030                     	ds	2
   291  000032                     main@count:
   292                           	opt stack 0
   293                           
   294                           ; 2 bytes @ 0x10
   295  000032                     	ds	2
   296                           tblptru	equ	0xFF8
   297                           tblptrh	equ	0xFF7
   298                           tblptrl	equ	0xFF6
   299                           tablat	equ	0xFF5
   300                           postinc0	equ	0xFEE
   301                           wreg	equ	0xFE8
   302                           postdec1	equ	0xFE5
   303                           fsr1l	equ	0xFE1
   304                           
   305 ;;
   306 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   307 ;;
   308 ;; *************** function _main *****************
   309 ;; Defined at:
   310 ;;		line 189 in file "main.c"
   311 ;; Parameters:    Size  Location     Type
   312 ;;		None
   313 ;; Auto vars:     Size  Location     Type
   314 ;;  count           2   16[COMRAM] int 
   315 ;; Return value:  Size  Location     Type
   316 ;;		None               void
   317 ;; Registers used:
   318 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   319 ;; Tracked objects:
   320 ;;		On entry : 0/0
   321 ;;		On exit  : 0/0
   322 ;;		Unchanged: 0/0
   323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   324 ;;      Params:         0       0       0       0
   325 ;;      Locals:         2       0       0       0
   326 ;;      Temps:          0       0       0       0
   327 ;;      Totals:         2       0       0       0
   328 ;;Total ram usage:        2 bytes
   329 ;; Hardware stack levels required when called:    3
   330 ;; This function calls:
   331 ;;		_delay10ms
   332 ;;		_nrfConfig
   333 ;;		_nrfGetStatus
   334 ;;		_nrfTXData
   335 ;;		_portConfig
   336 ;;		_spiConfig_1
   337 ;;		_spiTransfer
   338 ;; This function is called by:
   339 ;;		Startup code after reset
   340 ;; This function uses a non-reentrant model
   341 ;;
   342                           
   343                           	psect	text0
   344  003DD6                     __ptext0:
   345                           	opt stack 0
   346  003DD6                     _main:
   347                           	opt stack 28
   348                           
   349                           ;main.c: 192: portConfig();
   350                           
   351                           ;incstack = 0
   352  003DD6  ECB5  F01D         	call	_portConfig	;wreg free
   353                           
   354                           ;main.c: 193: spiConfig_1();
   355  003DDA  ECA9  F01D         	call	_spiConfig_1	;wreg free
   356                           
   357                           ;main.c: 194: nrfConfig();
   358  003DDE  EC97  F01F         	call	_nrfConfig	;wreg free
   359                           
   360                           ;main.c: 196: delay10ms(1);
   361  003DE2  0E00               	movlw	0
   362  003DE4  6E23               	movwf	delay10ms@ms_multi+1,c
   363  003DE6  0E01               	movlw	1
   364  003DE8  6E22               	movwf	delay10ms@ms_multi,c
   365  003DEA  ECD3  F01D         	call	_delay10ms	;wreg free
   366                           
   367                           ;main.c: 199: int count = 1;
   368  003DEE  0E00               	movlw	0
   369  003DF0  6E33               	movwf	main@count+1,c
   370  003DF2  0E01               	movlw	1
   371  003DF4  6E32               	movwf	main@count,c
   372  003DF6                     l1041:
   373                           
   374                           ;main.c: 202: dataBufOut[0] = count;
   375  003DF6  C032  F001         	movff	main@count,_dataBufOut
   376                           
   377                           ;main.c: 203: nrfTXData(1);
   378  003DFA  0E00               	movlw	0
   379  003DFC  6E25               	movwf	nrfTXData@len+1,c
   380  003DFE  0E01               	movlw	1
   381  003E00  6E24               	movwf	nrfTXData@len,c
   382  003E02  ECAB  F01E         	call	_nrfTXData	;wreg free
   383                           
   384                           ;main.c: 204: count++;
   385  003E06  4A32               	infsnz	main@count,f,c
   386  003E08  2A33               	incf	main@count+1,f,c
   387                           
   388                           ;main.c: 206: delay10ms(2);
   389  003E0A  0E00               	movlw	0
   390  003E0C  6E23               	movwf	delay10ms@ms_multi+1,c
   391  003E0E  0E02               	movlw	2
   392  003E10  6E22               	movwf	delay10ms@ms_multi,c
   393  003E12  ECD3  F01D         	call	_delay10ms	;wreg free
   394                           
   395                           ;main.c: 208: nrfGetStatus();
   396  003E16  ECC2  F01D         	call	_nrfGetStatus	;wreg free
   397                           
   398                           ;main.c: 210: if (((nrfSTATUS) & (1 <<(4))) > 0) {
   399  003E1A  A821               	btfss	_nrfSTATUS,4,c
   400  003E1C  D008               	goto	l1059
   401                           
   402                           ;main.c: 211: LATAbits.LATA0 = 1;
   403  003E1E  8089               	bsf	3977,0,c	;volatile
   404                           
   405                           ;main.c: 212: delay10ms(5);
   406  003E20  0E00               	movlw	0
   407  003E22  6E23               	movwf	delay10ms@ms_multi+1,c
   408  003E24  0E05               	movlw	5
   409  003E26  6E22               	movwf	delay10ms@ms_multi,c
   410  003E28  ECD3  F01D         	call	_delay10ms	;wreg free
   411                           
   412                           ;main.c: 213: LATAbits.LATA0 = 0;
   413  003E2C  9089               	bcf	3977,0,c	;volatile
   414  003E2E                     l1059:
   415                           
   416                           ;main.c: 214: }
   417                           ;main.c: 216: dataBufOut[0] = 0b01110000;
   418  003E2E  0E70               	movlw	112
   419  003E30  6E01               	movwf	_dataBufOut,c
   420                           
   421                           ;main.c: 217: spiTransfer('w',0x07,1);
   422  003E32  0E07               	movlw	7
   423  003E34  6E24               	movwf	spiTransfer@command,c
   424  003E36  0E00               	movlw	0
   425  003E38  6E26               	movwf	spiTransfer@len+1,c
   426  003E3A  0E01               	movlw	1
   427  003E3C  6E25               	movwf	spiTransfer@len,c
   428  003E3E  0E77               	movlw	119
   429  003E40  EC32  F01F         	call	_spiTransfer
   430                           
   431                           ;main.c: 219: spiTransfer('n',0xE1,0);
   432  003E44  0EE1               	movlw	225
   433  003E46  6E24               	movwf	spiTransfer@command,c
   434  003E48  0E00               	movlw	0
   435  003E4A  6E26               	movwf	spiTransfer@len+1,c
   436  003E4C  0E00               	movlw	0
   437  003E4E  6E25               	movwf	spiTransfer@len,c
   438  003E50  0E6E               	movlw	110
   439  003E52  EC32  F01F         	call	_spiTransfer
   440                           
   441                           ;main.c: 221: delay10ms(100);
   442  003E56  0E00               	movlw	0
   443  003E58  6E23               	movwf	delay10ms@ms_multi+1,c
   444  003E5A  0E64               	movlw	100
   445  003E5C  6E22               	movwf	delay10ms@ms_multi,c
   446  003E5E  ECD3  F01D         	call	_delay10ms	;wreg free
   447                           
   448                           ;main.c: 222: }
   449  003E62  D7C9               	goto	l1041
   450  003E64                     __end_of_main:
   451                           	opt stack 0
   452                           tblptru	equ	0xFF8
   453                           tblptrh	equ	0xFF7
   454                           tblptrl	equ	0xFF6
   455                           tablat	equ	0xFF5
   456                           postinc0	equ	0xFEE
   457                           wreg	equ	0xFE8
   458                           postdec1	equ	0xFE5
   459                           fsr1l	equ	0xFE1
   460                           
   461 ;; *************** function _spiConfig_1 *****************
   462 ;; Defined at:
   463 ;;		line 242 in file "main.c"
   464 ;; Parameters:    Size  Location     Type
   465 ;;		None
   466 ;; Auto vars:     Size  Location     Type
   467 ;;		None
   468 ;; Return value:  Size  Location     Type
   469 ;;		None               void
   470 ;; Registers used:
   471 ;;		wreg, status,2
   472 ;; Tracked objects:
   473 ;;		On entry : 0/0
   474 ;;		On exit  : 0/0
   475 ;;		Unchanged: 0/0
   476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   477 ;;      Params:         0       0       0       0
   478 ;;      Locals:         0       0       0       0
   479 ;;      Temps:          0       0       0       0
   480 ;;      Totals:         0       0       0       0
   481 ;;Total ram usage:        0 bytes
   482 ;; Hardware stack levels used:    1
   483 ;; This function calls:
   484 ;;		Nothing
   485 ;; This function is called by:
   486 ;;		_main
   487 ;; This function uses a non-reentrant model
   488 ;;
   489                           
   490                           	psect	text1
   491  003B52                     __ptext1:
   492                           	opt stack 0
   493  003B52                     _spiConfig_1:
   494                           	opt stack 30
   495                           
   496                           ;main.c: 243: SSP1CON1bits.CKP = 0;
   497                           
   498                           ;incstack = 0
   499  003B52  98C6               	bcf	4038,4,c	;volatile
   500                           
   501                           ;main.c: 244: SSP1STATbits.CKE = 1;
   502  003B54  8CC7               	bsf	4039,6,c	;volatile
   503                           
   504                           ;main.c: 245: SSP1STATbits.SMP = 1;
   505  003B56  8EC7               	bsf	4039,7,c	;volatile
   506                           
   507                           ;main.c: 246: SSP1ADD = 0b00001111;
   508  003B58  0E0F               	movlw	15
   509  003B5A  6EC8               	movwf	4040,c	;volatile
   510                           
   511                           ;main.c: 247: SSP1CON1bits.SSPM = 0b1010;
   512  003B5C  50C6               	movf	4038,w,c	;volatile
   513  003B5E  0BF0               	andlw	-16
   514  003B60  090A               	iorlw	10
   515  003B62  6EC6               	movwf	4038,c	;volatile
   516                           
   517                           ;main.c: 249: SSP1CON1bits.SSPEN = 1;
   518  003B64  8AC6               	bsf	4038,5,c	;volatile
   519                           
   520                           ;main.c: 250: LATAbits.LATA2 = 1;
   521  003B66  8489               	bsf	3977,2,c	;volatile
   522  003B68  0012               	return	
   523  003B6A                     __end_of_spiConfig_1:
   524                           	opt stack 0
   525                           tblptru	equ	0xFF8
   526                           tblptrh	equ	0xFF7
   527                           tblptrl	equ	0xFF6
   528                           tablat	equ	0xFF5
   529                           postinc0	equ	0xFEE
   530                           wreg	equ	0xFE8
   531                           postdec1	equ	0xFE5
   532                           fsr1l	equ	0xFE1
   533                           
   534 ;; *************** function _portConfig *****************
   535 ;; Defined at:
   536 ;;		line 228 in file "main.c"
   537 ;; Parameters:    Size  Location     Type
   538 ;;		None
   539 ;; Auto vars:     Size  Location     Type
   540 ;;		None
   541 ;; Return value:  Size  Location     Type
   542 ;;		None               void
   543 ;; Registers used:
   544 ;;		wreg, status,2
   545 ;; Tracked objects:
   546 ;;		On entry : 0/0
   547 ;;		On exit  : 0/0
   548 ;;		Unchanged: 0/0
   549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   550 ;;      Params:         0       0       0       0
   551 ;;      Locals:         0       0       0       0
   552 ;;      Temps:          0       0       0       0
   553 ;;      Totals:         0       0       0       0
   554 ;;Total ram usage:        0 bytes
   555 ;; Hardware stack levels used:    1
   556 ;; This function calls:
   557 ;;		Nothing
   558 ;; This function is called by:
   559 ;;		_main
   560 ;; This function uses a non-reentrant model
   561 ;;
   562                           
   563                           	psect	text2
   564  003B6A                     __ptext2:
   565                           	opt stack 0
   566  003B6A                     _portConfig:
   567                           	opt stack 30
   568                           
   569                           ;main.c: 229: TRISA = 0b00001000;
   570                           
   571                           ;incstack = 0
   572  003B6A  0E08               	movlw	8
   573  003B6C  6E92               	movwf	3986,c	;volatile
   574                           
   575                           ;main.c: 230: TRISB = 0b00000000;
   576  003B6E  0E00               	movlw	0
   577  003B70  6E93               	movwf	3987,c	;volatile
   578                           
   579                           ;main.c: 231: TRISC = 0b00010000;
   580  003B72  0E10               	movlw	16
   581  003B74  6E94               	movwf	3988,c	;volatile
   582                           
   583                           ;main.c: 233: LATA = 0b00000100;
   584  003B76  0E04               	movlw	4
   585  003B78  6E89               	movwf	3977,c	;volatile
   586                           
   587                           ;main.c: 234: LATB = 0x00;
   588  003B7A  0E00               	movlw	0
   589  003B7C  6E8A               	movwf	3978,c	;volatile
   590                           
   591                           ;main.c: 235: LATC = 0x00;
   592  003B7E  0E00               	movlw	0
   593  003B80  6E8B               	movwf	3979,c	;volatile
   594  003B82  0012               	return	
   595  003B84                     __end_of_portConfig:
   596                           	opt stack 0
   597                           tblptru	equ	0xFF8
   598                           tblptrh	equ	0xFF7
   599                           tblptrl	equ	0xFF6
   600                           tablat	equ	0xFF5
   601                           postinc0	equ	0xFEE
   602                           wreg	equ	0xFE8
   603                           postdec1	equ	0xFE5
   604                           fsr1l	equ	0xFE1
   605                           
   606 ;; *************** function _nrfTXData *****************
   607 ;; Defined at:
   608 ;;		line 420 in file "main.c"
   609 ;; Parameters:    Size  Location     Type
   610 ;;  len             2    2[COMRAM] int 
   611 ;; Auto vars:     Size  Location     Type
   612 ;;  i               2    8[COMRAM] int 
   613 ;; Return value:  Size  Location     Type
   614 ;;		None               void
   615 ;; Registers used:
   616 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   617 ;; Tracked objects:
   618 ;;		On entry : 0/0
   619 ;;		On exit  : 0/0
   620 ;;		Unchanged: 0/0
   621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   622 ;;      Params:         2       0       0       0
   623 ;;      Locals:         2       0       0       0
   624 ;;      Temps:          4       0       0       0
   625 ;;      Totals:         8       0       0       0
   626 ;;Total ram usage:        8 bytes
   627 ;; Hardware stack levels used:    1
   628 ;; Hardware stack levels required when called:    1
   629 ;; This function calls:
   630 ;;		_setCSN
   631 ;;		_spiTransferByte
   632 ;; This function is called by:
   633 ;;		_main
   634 ;; This function uses a non-reentrant model
   635 ;;
   636                           
   637                           	psect	text3
   638  003D56                     __ptext3:
   639                           	opt stack 0
   640  003D56                     _nrfTXData:
   641                           	opt stack 29
   642                           
   643                           ;main.c: 422: setCSN(0);
   644                           
   645                           ;incstack = 0
   646  003D56  0E00               	movlw	0
   647  003D58  6E23               	movwf	setCSN@level+1,c
   648  003D5A  0E00               	movlw	0
   649  003D5C  6E22               	movwf	setCSN@level,c
   650  003D5E  EC9D  F01D         	call	_setCSN	;wreg free
   651                           
   652                           ;main.c: 424: spiTransferByte(0xA0);
   653  003D62  0EA0               	movlw	160
   654  003D64  EC94  F01D         	call	_spiTransferByte
   655                           
   656                           ;main.c: 426: if (len != 0) {
   657  003D68  5025               	movf	nrfTXData@len+1,w,c
   658  003D6A  1024               	iorwf	nrfTXData@len,w,c
   659  003D6C  B4D8               	btfsc	status,2,c
   660  003D6E  D026               	goto	l1019
   661                           
   662                           ;main.c: 427: for (int i=1;i<=len;i++) {
   663  003D70  0E00               	movlw	0
   664  003D72  6E2B               	movwf	nrfTXData@i+1,c
   665  003D74  0E01               	movlw	1
   666  003D76  6E2A               	movwf	nrfTXData@i,c
   667  003D78  D017               	goto	l1017
   668  003D7A                     l1013:
   669                           
   670                           ;main.c: 428: spiTransferByte(dataBufOut[i-1]);
   671  003D7A  0EFF               	movlw	255
   672  003D7C  6E26               	movwf	??_nrfTXData& (0+255),c
   673  003D7E  0EFF               	movlw	255
   674  003D80  6E27               	movwf	(??_nrfTXData+1)& (0+255),c
   675  003D82  C02A  F028         	movff	nrfTXData@i,??_nrfTXData+2
   676  003D86  C02B  F029         	movff	nrfTXData@i+1,??_nrfTXData+3
   677  003D8A  5026               	movf	??_nrfTXData,w,c
   678  003D8C  2628               	addwf	??_nrfTXData+2,f,c
   679  003D8E  5027               	movf	??_nrfTXData+1,w,c
   680  003D90  2229               	addwfc	??_nrfTXData+3,f,c
   681  003D92  0E01               	movlw	low _dataBufOut
   682  003D94  2428               	addwf	??_nrfTXData+2,w,c
   683  003D96  6ED9               	movwf	fsr2l,c
   684  003D98  0E00               	movlw	high _dataBufOut
   685  003D9A  2029               	addwfc	??_nrfTXData+3,w,c
   686  003D9C  6EDA               	movwf	fsr2h,c
   687  003D9E  50DF               	movf	indf2,w,c
   688  003DA0  EC94  F01D         	call	_spiTransferByte
   689  003DA4  4A2A               	infsnz	nrfTXData@i,f,c
   690  003DA6  2A2B               	incf	nrfTXData@i+1,f,c
   691  003DA8                     l1017:
   692  003DA8  5025               	movf	nrfTXData@len+1,w,c
   693  003DAA  0A80               	xorlw	128
   694  003DAC  6E26               	movwf	??_nrfTXData& (0+255),c
   695  003DAE  502A               	movf	nrfTXData@i,w,c
   696  003DB0  5C24               	subwf	nrfTXData@len,w,c
   697  003DB2  502B               	movf	nrfTXData@i+1,w,c
   698  003DB4  0A80               	xorlw	128
   699  003DB6  5826               	subwfb	??_nrfTXData& (0+255),w,c
   700  003DB8  B0D8               	btfsc	status,0,c
   701  003DBA  D7DF               	goto	l1013
   702  003DBC                     l1019:
   703                           
   704                           ;main.c: 429: }
   705                           ;main.c: 430: }
   706                           ;main.c: 432: setCSN(1);
   707  003DBC  0E00               	movlw	0
   708  003DBE  6E23               	movwf	setCSN@level+1,c
   709  003DC0  0E01               	movlw	1
   710  003DC2  6E22               	movwf	setCSN@level,c
   711  003DC4  EC9D  F01D         	call	_setCSN	;wreg free
   712                           
   713                           ;main.c: 435: LATAbits.LATA1 = 1;
   714  003DC8  8289               	bsf	3977,1,c	;volatile
   715                           
   716                           ;main.c: 436: _delay((unsigned long)((11)*(64000000/4000000.0)));
   717  003DCA  0E3A               	movlw	58
   718  003DCC                     u327:
   719  003DCC  2EE8               	decfsz	wreg,f,c
   720  003DCE  D7FE               	goto	u327
   721  003DD0  D000               	nop2		;nop
   722                           
   723                           ;main.c: 437: LATAbits.LATA1 = 0;
   724  003DD2  9289               	bcf	3977,1,c	;volatile
   725  003DD4  0012               	return	
   726  003DD6                     __end_of_nrfTXData:
   727                           	opt stack 0
   728                           tblptru	equ	0xFF8
   729                           tblptrh	equ	0xFF7
   730                           tblptrl	equ	0xFF6
   731                           tablat	equ	0xFF5
   732                           postinc0	equ	0xFEE
   733                           wreg	equ	0xFE8
   734                           postdec1	equ	0xFE5
   735                           fsr1l	equ	0xFE1
   736                           indf2	equ	0xFDF
   737                           fsr2h	equ	0xFDA
   738                           fsr2l	equ	0xFD9
   739                           status	equ	0xFD8
   740                           
   741 ;; *************** function _nrfGetStatus *****************
   742 ;; Defined at:
   743 ;;		line 303 in file "main.c"
   744 ;; Parameters:    Size  Location     Type
   745 ;;		None
   746 ;; Auto vars:     Size  Location     Type
   747 ;;		None
   748 ;; Return value:  Size  Location     Type
   749 ;;		None               void
   750 ;; Registers used:
   751 ;;		wreg, status,2, status,0, cstack
   752 ;; Tracked objects:
   753 ;;		On entry : 0/0
   754 ;;		On exit  : 0/0
   755 ;;		Unchanged: 0/0
   756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   757 ;;      Params:         0       0       0       0
   758 ;;      Locals:         0       0       0       0
   759 ;;      Temps:          0       0       0       0
   760 ;;      Totals:         0       0       0       0
   761 ;;Total ram usage:        0 bytes
   762 ;; Hardware stack levels used:    1
   763 ;; Hardware stack levels required when called:    1
   764 ;; This function calls:
   765 ;;		_setCSN
   766 ;;		_spiTransferByte
   767 ;; This function is called by:
   768 ;;		_main
   769 ;; This function uses a non-reentrant model
   770 ;;
   771                           
   772                           	psect	text4
   773  003B84                     __ptext4:
   774                           	opt stack 0
   775  003B84                     _nrfGetStatus:
   776                           	opt stack 29
   777                           
   778                           ;main.c: 305: setCSN(0);
   779                           
   780                           ;incstack = 0
   781  003B84  0E00               	movlw	0
   782  003B86  6E23               	movwf	setCSN@level+1,c
   783  003B88  0E00               	movlw	0
   784  003B8A  6E22               	movwf	setCSN@level,c
   785  003B8C  EC9D  F01D         	call	_setCSN	;wreg free
   786                           
   787                           ;main.c: 307: nrfSTATUS = spiTransferByte(0xFF);
   788  003B90  0EFF               	movlw	255
   789  003B92  EC94  F01D         	call	_spiTransferByte
   790  003B96  6E21               	movwf	_nrfSTATUS,c
   791                           
   792                           ;main.c: 309: setCSN(1);
   793  003B98  0E00               	movlw	0
   794  003B9A  6E23               	movwf	setCSN@level+1,c
   795  003B9C  0E01               	movlw	1
   796  003B9E  6E22               	movwf	setCSN@level,c
   797  003BA0  EC9D  F01D         	call	_setCSN	;wreg free
   798  003BA4  0012               	return	
   799  003BA6                     __end_of_nrfGetStatus:
   800                           	opt stack 0
   801                           tblptru	equ	0xFF8
   802                           tblptrh	equ	0xFF7
   803                           tblptrl	equ	0xFF6
   804                           tablat	equ	0xFF5
   805                           postinc0	equ	0xFEE
   806                           wreg	equ	0xFE8
   807                           postdec1	equ	0xFE5
   808                           fsr1l	equ	0xFE1
   809                           indf2	equ	0xFDF
   810                           fsr2h	equ	0xFDA
   811                           fsr2l	equ	0xFD9
   812                           status	equ	0xFD8
   813                           
   814 ;; *************** function _nrfConfig *****************
   815 ;; Defined at:
   816 ;;		line 256 in file "main.c"
   817 ;; Parameters:    Size  Location     Type
   818 ;;		None
   819 ;; Auto vars:     Size  Location     Type
   820 ;;		None
   821 ;; Return value:  Size  Location     Type
   822 ;;		None               void
   823 ;; Registers used:
   824 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   825 ;; Tracked objects:
   826 ;;		On entry : 0/0
   827 ;;		On exit  : 0/0
   828 ;;		Unchanged: 0/0
   829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   830 ;;      Params:         0       0       0       0
   831 ;;      Locals:         0       0       0       0
   832 ;;      Temps:          0       0       0       0
   833 ;;      Totals:         0       0       0       0
   834 ;;Total ram usage:        0 bytes
   835 ;; Hardware stack levels used:    1
   836 ;; Hardware stack levels required when called:    2
   837 ;; This function calls:
   838 ;;		_nrfConfigReg
   839 ;;		_nrfSetRXAddr
   840 ;;		_nrfSetTXAddr
   841 ;;		_spiTransfer
   842 ;; This function is called by:
   843 ;;		_main
   844 ;; This function uses a non-reentrant model
   845 ;;
   846                           
   847                           	psect	text5
   848  003F2E                     __ptext5:
   849                           	opt stack 0
   850  003F2E                     _nrfConfig:
   851                           	opt stack 28
   852                           
   853                           ;main.c: 259: nrfConfigReg('w',0x00,CONFIG_CURR);
   854                           
   855                           ;incstack = 0
   856  003F2E  0E00               	movlw	0
   857  003F30  6E24               	movwf	nrfConfigReg@command,c
   858  003F32  C034  F025         	movff	_CONFIG_CURR,nrfConfigReg@data
   859  003F36  0E77               	movlw	119
   860  003F38  EC10  F01E         	call	_nrfConfigReg
   861                           
   862                           ;main.c: 261: nrfConfigReg('w',0x01,EN_AA_CURR);
   863  003F3C  0E01               	movlw	1
   864  003F3E  6E24               	movwf	nrfConfigReg@command,c
   865  003F40  C035  F025         	movff	_EN_AA_CURR,nrfConfigReg@data
   866  003F44  0E77               	movlw	119
   867  003F46  EC10  F01E         	call	_nrfConfigReg
   868                           
   869                           ;main.c: 263: nrfConfigReg('w',0x02,EN_RXADDR_CURR);
   870  003F4A  0E02               	movlw	2
   871  003F4C  6E24               	movwf	nrfConfigReg@command,c
   872  003F4E  C036  F025         	movff	_EN_RXADDR_CURR,nrfConfigReg@data
   873  003F52  0E77               	movlw	119
   874  003F54  EC10  F01E         	call	_nrfConfigReg
   875                           
   876                           ;main.c: 265: nrfConfigReg('w',0x03,SETUP_AW_CURR);
   877  003F58  0E03               	movlw	3
   878  003F5A  6E24               	movwf	nrfConfigReg@command,c
   879  003F5C  C03A  F025         	movff	_SETUP_AW_CURR,nrfConfigReg@data
   880  003F60  0E77               	movlw	119
   881  003F62  EC10  F01E         	call	_nrfConfigReg
   882                           
   883                           ;main.c: 267: nrfConfigReg('w',0x04,SETUP_RETR_CURR);
   884  003F66  0E04               	movlw	4
   885  003F68  6E24               	movwf	nrfConfigReg@command,c
   886  003F6A  C03B  F025         	movff	_SETUP_RETR_CURR,nrfConfigReg@data
   887  003F6E  0E77               	movlw	119
   888  003F70  EC10  F01E         	call	_nrfConfigReg
   889                           
   890                           ;main.c: 269: nrfConfigReg('w',0x05,RF_CH_CURR);
   891  003F74  0E05               	movlw	5
   892  003F76  6E24               	movwf	nrfConfigReg@command,c
   893  003F78  C037  F025         	movff	_RF_CH_CURR,nrfConfigReg@data
   894  003F7C  0E77               	movlw	119
   895  003F7E  EC10  F01E         	call	_nrfConfigReg
   896                           
   897                           ;main.c: 271: nrfConfigReg('w',0x06,RF_SETUP_CURR);
   898  003F82  0E06               	movlw	6
   899  003F84  6E24               	movwf	nrfConfigReg@command,c
   900  003F86  C038  F025         	movff	_RF_SETUP_CURR,nrfConfigReg@data
   901  003F8A  0E77               	movlw	119
   902  003F8C  EC10  F01E         	call	_nrfConfigReg
   903                           
   904                           ;main.c: 273: nrfSetRXAddr(0x0A,TX_ADDRESS,4);
   905  003F90  0E00               	movlw	high _TX_ADDRESS
   906  003F92  6E25               	movwf	nrfSetRXAddr@addr+1,c
   907  003F94  0E40               	movlw	low _TX_ADDRESS
   908  003F96  6E24               	movwf	nrfSetRXAddr@addr,c
   909  003F98  0E00               	movlw	0
   910  003F9A  6E27               	movwf	nrfSetRXAddr@len+1,c
   911  003F9C  0E04               	movlw	4
   912  003F9E  6E26               	movwf	nrfSetRXAddr@len,c
   913  003FA0  0E0A               	movlw	10
   914  003FA2  EC6F  F01E         	call	_nrfSetRXAddr
   915                           
   916                           ;main.c: 275: nrfSetRXAddr(0x0B,RX_ADDRESS,4);
   917  003FA6  0E00               	movlw	high _RX_ADDRESS
   918  003FA8  6E25               	movwf	nrfSetRXAddr@addr+1,c
   919  003FAA  0E3C               	movlw	low _RX_ADDRESS
   920  003FAC  6E24               	movwf	nrfSetRXAddr@addr,c
   921  003FAE  0E00               	movlw	0
   922  003FB0  6E27               	movwf	nrfSetRXAddr@len+1,c
   923  003FB2  0E04               	movlw	4
   924  003FB4  6E26               	movwf	nrfSetRXAddr@len,c
   925  003FB6  0E0B               	movlw	11
   926  003FB8  EC6F  F01E         	call	_nrfSetRXAddr
   927                           
   928                           ;main.c: 277: nrfSetTXAddr(TX_ADDRESS,4);
   929  003FBC  0E00               	movlw	high _TX_ADDRESS
   930  003FBE  6E25               	movwf	nrfSetTXAddr@addr+1,c
   931  003FC0  0E40               	movlw	low _TX_ADDRESS
   932  003FC2  6E24               	movwf	nrfSetTXAddr@addr,c
   933  003FC4  0E00               	movlw	0
   934  003FC6  6E27               	movwf	nrfSetTXAddr@len+1,c
   935  003FC8  0E04               	movlw	4
   936  003FCA  6E26               	movwf	nrfSetTXAddr@len,c
   937  003FCC  EC35  F01E         	call	_nrfSetTXAddr	;wreg free
   938                           
   939                           ;main.c: 279: nrfConfigReg('w',0x11,RX_PW_P0_CURR);
   940  003FD0  0E11               	movlw	17
   941  003FD2  6E24               	movwf	nrfConfigReg@command,c
   942  003FD4  C039  F025         	movff	_RX_PW_P0_CURR,nrfConfigReg@data
   943  003FD8  0E77               	movlw	119
   944  003FDA  EC10  F01E         	call	_nrfConfigReg
   945                           
   946                           ;main.c: 281: nrfConfigReg('w',0x12,RX_PW_P0_CURR);
   947  003FDE  0E12               	movlw	18
   948  003FE0  6E24               	movwf	nrfConfigReg@command,c
   949  003FE2  C039  F025         	movff	_RX_PW_P0_CURR,nrfConfigReg@data
   950  003FE6  0E77               	movlw	119
   951  003FE8  EC10  F01E         	call	_nrfConfigReg
   952                           
   953                           ;main.c: 283: spiTransfer('n',0xE1,0);
   954  003FEC  0EE1               	movlw	225
   955  003FEE  6E24               	movwf	spiTransfer@command,c
   956  003FF0  0E00               	movlw	0
   957  003FF2  6E26               	movwf	spiTransfer@len+1,c
   958  003FF4  0E00               	movlw	0
   959  003FF6  6E25               	movwf	spiTransfer@len,c
   960  003FF8  0E6E               	movlw	110
   961  003FFA  EC32  F01F         	call	_spiTransfer
   962  003FFE  0012               	return	
   963  004000                     __end_of_nrfConfig:
   964                           	opt stack 0
   965                           tblptru	equ	0xFF8
   966                           tblptrh	equ	0xFF7
   967                           tblptrl	equ	0xFF6
   968                           tablat	equ	0xFF5
   969                           postinc0	equ	0xFEE
   970                           wreg	equ	0xFE8
   971                           postdec1	equ	0xFE5
   972                           fsr1l	equ	0xFE1
   973                           indf2	equ	0xFDF
   974                           fsr2h	equ	0xFDA
   975                           fsr2l	equ	0xFD9
   976                           status	equ	0xFD8
   977                           
   978 ;; *************** function _spiTransfer *****************
   979 ;; Defined at:
   980 ;;		line 383 in file "main.c"
   981 ;; Parameters:    Size  Location     Type
   982 ;;  wrn             1    wreg     unsigned char 
   983 ;;  command         1    2[COMRAM] unsigned char 
   984 ;;  len             2    3[COMRAM] int 
   985 ;; Auto vars:     Size  Location     Type
   986 ;;  wrn             1   13[COMRAM] unsigned char 
   987 ;;  i               2   14[COMRAM] int 
   988 ;; Return value:  Size  Location     Type
   989 ;;		None               void
   990 ;; Registers used:
   991 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   992 ;; Tracked objects:
   993 ;;		On entry : 0/0
   994 ;;		On exit  : 0/0
   995 ;;		Unchanged: 0/0
   996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   997 ;;      Params:         3       0       0       0
   998 ;;      Locals:         3       0       0       0
   999 ;;      Temps:          8       0       0       0
  1000 ;;      Totals:        14       0       0       0
  1001 ;;Total ram usage:       14 bytes
  1002 ;; Hardware stack levels used:    1
  1003 ;; Hardware stack levels required when called:    1
  1004 ;; This function calls:
  1005 ;;		_setCSN
  1006 ;;		_spiTransferByte
  1007 ;; This function is called by:
  1008 ;;		_main
  1009 ;;		_nrfConfig
  1010 ;; This function uses a non-reentrant model
  1011 ;;
  1012                           
  1013                           	psect	text6
  1014  003E64                     __ptext6:
  1015                           	opt stack 0
  1016  003E64                     _spiTransfer:
  1017                           	opt stack 29
  1018                           
  1019                           ;incstack = 0
  1020                           ;spiTransfer@wrn stored from wreg
  1021  003E64  6E2F               	movwf	spiTransfer@wrn,c
  1022                           
  1023                           ;main.c: 385: setCSN(0);
  1024  003E66  0E00               	movlw	0
  1025  003E68  6E23               	movwf	setCSN@level+1,c
  1026  003E6A  0E00               	movlw	0
  1027  003E6C  6E22               	movwf	setCSN@level,c
  1028  003E6E  EC9D  F01D         	call	_setCSN	;wreg free
  1029                           
  1030                           ;main.c: 387: if (wrn == 'w') {
  1031  003E72  502F               	movf	spiTransfer@wrn,w,c
  1032  003E74  0A77               	xorlw	119
  1033  003E76  A4D8               	btfss	status,2,c
  1034  003E78  D005               	goto	l925
  1035                           
  1036                           ;main.c: 388: spiTransferByte(0x20|command);
  1037  003E7A  5024               	movf	spiTransfer@command,w,c
  1038  003E7C  0920               	iorlw	32
  1039  003E7E  EC94  F01D         	call	_spiTransferByte
  1040                           
  1041                           ;main.c: 389: } else if (wrn == 'r') {
  1042  003E82  D00F               	goto	l933
  1043  003E84                     l925:
  1044  003E84  502F               	movf	spiTransfer@wrn,w,c
  1045  003E86  0A72               	xorlw	114
  1046  003E88  A4D8               	btfss	status,2,c
  1047  003E8A  D004               	goto	l929
  1048                           
  1049                           ;main.c: 390: spiTransferByte(0x00|command);
  1050  003E8C  5024               	movf	spiTransfer@command,w,c
  1051  003E8E  EC94  F01D         	call	_spiTransferByte
  1052                           
  1053                           ;main.c: 391: } else if(wrn == 'n') {
  1054  003E92  D007               	goto	l933
  1055  003E94                     l929:
  1056  003E94  502F               	movf	spiTransfer@wrn,w,c
  1057  003E96  0A6E               	xorlw	110
  1058  003E98  A4D8               	btfss	status,2,c
  1059  003E9A  D003               	goto	l933
  1060                           
  1061                           ;main.c: 392: spiTransferByte(command);
  1062  003E9C  5024               	movf	spiTransfer@command,w,c
  1063  003E9E  EC94  F01D         	call	_spiTransferByte
  1064  003EA2                     l933:
  1065                           
  1066                           ;main.c: 393: }
  1067                           ;main.c: 395: if (len != 0) {
  1068  003EA2  5026               	movf	spiTransfer@len+1,w,c
  1069  003EA4  1025               	iorwf	spiTransfer@len,w,c
  1070  003EA6  B4D8               	btfsc	status,2,c
  1071  003EA8  D03B               	goto	l943
  1072                           
  1073                           ;main.c: 396: for (int i=1;i<=len;i++) {
  1074  003EAA  0E00               	movlw	0
  1075  003EAC  6E31               	movwf	spiTransfer@i+1,c
  1076  003EAE  0E01               	movlw	1
  1077  003EB0  6E30               	movwf	spiTransfer@i,c
  1078  003EB2  D02C               	goto	l941
  1079  003EB4                     l937:
  1080                           
  1081                           ;main.c: 397: dataBufIn[i-1] = spiTransferByte(dataBufOut[i-1]);
  1082  003EB4  0EFF               	movlw	255
  1083  003EB6  6E27               	movwf	??_spiTransfer& (0+255),c
  1084  003EB8  0EFF               	movlw	255
  1085  003EBA  6E28               	movwf	(??_spiTransfer+1)& (0+255),c
  1086  003EBC  C030  F029         	movff	spiTransfer@i,??_spiTransfer+2
  1087  003EC0  C031  F02A         	movff	spiTransfer@i+1,??_spiTransfer+3
  1088  003EC4  5027               	movf	??_spiTransfer,w,c
  1089  003EC6  2629               	addwf	??_spiTransfer+2,f,c
  1090  003EC8  5028               	movf	??_spiTransfer+1,w,c
  1091  003ECA  222A               	addwfc	??_spiTransfer+3,f,c
  1092  003ECC  0100               	movlb	0	; () banked
  1093  003ECE  0E60               	movlw	low _dataBufIn
  1094  003ED0  2429               	addwf	??_spiTransfer+2,w,c
  1095  003ED2  6ED9               	movwf	fsr2l,c
  1096  003ED4  0100               	movlb	0	; () banked
  1097  003ED6  0E00               	movlw	high _dataBufIn
  1098  003ED8  202A               	addwfc	??_spiTransfer+3,w,c
  1099  003EDA  6EDA               	movwf	fsr2h,c
  1100  003EDC  0EFF               	movlw	255
  1101  003EDE  6E2B               	movwf	(??_spiTransfer+4)& (0+255),c
  1102  003EE0  0EFF               	movlw	255
  1103  003EE2  6E2C               	movwf	(??_spiTransfer+5)& (0+255),c
  1104  003EE4  C030  F02D         	movff	spiTransfer@i,??_spiTransfer+6
  1105  003EE8  C031  F02E         	movff	spiTransfer@i+1,??_spiTransfer+7
  1106  003EEC  502B               	movf	??_spiTransfer+4,w,c
  1107  003EEE  262D               	addwf	??_spiTransfer+6,f,c
  1108  003EF0  502C               	movf	??_spiTransfer+5,w,c
  1109  003EF2  222E               	addwfc	??_spiTransfer+7,f,c
  1110  003EF4  0E01               	movlw	low _dataBufOut
  1111  003EF6  242D               	addwf	??_spiTransfer+6,w,c
  1112  003EF8  6EE1               	movwf	fsr1l,c
  1113  003EFA  0E00               	movlw	high _dataBufOut
  1114  003EFC  202E               	addwfc	??_spiTransfer+7,w,c
  1115  003EFE  6EE2               	movwf	fsr1h,c
  1116  003F00  50E7               	movf	indf1,w,c
  1117  003F02  EC94  F01D         	call	_spiTransferByte
  1118  003F06  6EDF               	movwf	indf2,c
  1119  003F08  4A30               	infsnz	spiTransfer@i,f,c
  1120  003F0A  2A31               	incf	spiTransfer@i+1,f,c
  1121  003F0C                     l941:
  1122  003F0C  5026               	movf	spiTransfer@len+1,w,c
  1123  003F0E  0A80               	xorlw	128
  1124  003F10  6E27               	movwf	??_spiTransfer& (0+255),c
  1125  003F12  5030               	movf	spiTransfer@i,w,c
  1126  003F14  5C25               	subwf	spiTransfer@len,w,c
  1127  003F16  5031               	movf	spiTransfer@i+1,w,c
  1128  003F18  0A80               	xorlw	128
  1129  003F1A  5827               	subwfb	??_spiTransfer& (0+255),w,c
  1130  003F1C  B0D8               	btfsc	status,0,c
  1131  003F1E  D7CA               	goto	l937
  1132  003F20                     l943:
  1133                           
  1134                           ;main.c: 398: }
  1135                           ;main.c: 399: }
  1136                           ;main.c: 401: setCSN(1);
  1137  003F20  0E00               	movlw	0
  1138  003F22  6E23               	movwf	setCSN@level+1,c
  1139  003F24  0E01               	movlw	1
  1140  003F26  6E22               	movwf	setCSN@level,c
  1141  003F28  EC9D  F01D         	call	_setCSN	;wreg free
  1142  003F2C  0012               	return	
  1143  003F2E                     __end_of_spiTransfer:
  1144                           	opt stack 0
  1145                           tblptru	equ	0xFF8
  1146                           tblptrh	equ	0xFF7
  1147                           tblptrl	equ	0xFF6
  1148                           tablat	equ	0xFF5
  1149                           postinc0	equ	0xFEE
  1150                           wreg	equ	0xFE8
  1151                           indf1	equ	0xFE7
  1152                           postdec1	equ	0xFE5
  1153                           fsr1h	equ	0xFE2
  1154                           fsr1l	equ	0xFE1
  1155                           indf2	equ	0xFDF
  1156                           fsr2h	equ	0xFDA
  1157                           fsr2l	equ	0xFD9
  1158                           status	equ	0xFD8
  1159                           
  1160 ;; *************** function _nrfSetTXAddr *****************
  1161 ;; Defined at:
  1162 ;;		line 337 in file "main.c"
  1163 ;; Parameters:    Size  Location     Type
  1164 ;;  addr            2    2[COMRAM] PTR unsigned char 
  1165 ;;		 -> TX_ADDRESS(4), 
  1166 ;;  len             2    4[COMRAM] int 
  1167 ;; Auto vars:     Size  Location     Type
  1168 ;;  i               2   10[COMRAM] int 
  1169 ;; Return value:  Size  Location     Type
  1170 ;;		None               void
  1171 ;; Registers used:
  1172 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1173 ;; Tracked objects:
  1174 ;;		On entry : 0/0
  1175 ;;		On exit  : 0/0
  1176 ;;		Unchanged: 0/0
  1177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1178 ;;      Params:         4       0       0       0
  1179 ;;      Locals:         2       0       0       0
  1180 ;;      Temps:          4       0       0       0
  1181 ;;      Totals:        10       0       0       0
  1182 ;;Total ram usage:       10 bytes
  1183 ;; Hardware stack levels used:    1
  1184 ;; Hardware stack levels required when called:    1
  1185 ;; This function calls:
  1186 ;;		_setCSN
  1187 ;;		_spiTransferByte
  1188 ;; This function is called by:
  1189 ;;		_nrfConfig
  1190 ;; This function uses a non-reentrant model
  1191 ;;
  1192                           
  1193                           	psect	text7
  1194  003C6A                     __ptext7:
  1195                           	opt stack 0
  1196  003C6A                     _nrfSetTXAddr:
  1197                           	opt stack 28
  1198                           
  1199                           ;main.c: 339: setCSN(0);
  1200                           
  1201                           ;incstack = 0
  1202  003C6A  0E00               	movlw	0
  1203  003C6C  6E23               	movwf	setCSN@level+1,c
  1204  003C6E  0E00               	movlw	0
  1205  003C70  6E22               	movwf	setCSN@level,c
  1206  003C72  EC9D  F01D         	call	_setCSN	;wreg free
  1207                           
  1208                           ;main.c: 341: spiTransferByte(0x20|0x10);
  1209  003C76  0E30               	movlw	48
  1210  003C78  EC94  F01D         	call	_spiTransferByte
  1211                           
  1212                           ;main.c: 343: if (len != 0) {
  1213  003C7C  5027               	movf	nrfSetTXAddr@len+1,w,c
  1214  003C7E  1026               	iorwf	nrfSetTXAddr@len,w,c
  1215  003C80  B4D8               	btfsc	status,2,c
  1216  003C82  D026               	goto	l989
  1217                           
  1218                           ;main.c: 345: for (int i=1;i<=len;i++) {
  1219  003C84  0E00               	movlw	0
  1220  003C86  6E2D               	movwf	nrfSetTXAddr@i+1,c
  1221  003C88  0E01               	movlw	1
  1222  003C8A  6E2C               	movwf	nrfSetTXAddr@i,c
  1223  003C8C  D017               	goto	l987
  1224  003C8E                     l983:
  1225                           
  1226                           ;main.c: 346: spiTransferByte(addr[i-1]);
  1227  003C8E  0EFF               	movlw	255
  1228  003C90  6E28               	movwf	??_nrfSetTXAddr& (0+255),c
  1229  003C92  0EFF               	movlw	255
  1230  003C94  6E29               	movwf	(??_nrfSetTXAddr+1)& (0+255),c
  1231  003C96  C02C  F02A         	movff	nrfSetTXAddr@i,??_nrfSetTXAddr+2
  1232  003C9A  C02D  F02B         	movff	nrfSetTXAddr@i+1,??_nrfSetTXAddr+3
  1233  003C9E  5028               	movf	??_nrfSetTXAddr,w,c
  1234  003CA0  262A               	addwf	??_nrfSetTXAddr+2,f,c
  1235  003CA2  5029               	movf	??_nrfSetTXAddr+1,w,c
  1236  003CA4  222B               	addwfc	??_nrfSetTXAddr+3,f,c
  1237  003CA6  502A               	movf	??_nrfSetTXAddr+2,w,c
  1238  003CA8  2424               	addwf	nrfSetTXAddr@addr,w,c
  1239  003CAA  6ED9               	movwf	fsr2l,c
  1240  003CAC  502B               	movf	??_nrfSetTXAddr+3,w,c
  1241  003CAE  2025               	addwfc	nrfSetTXAddr@addr+1,w,c
  1242  003CB0  6EDA               	movwf	fsr2h,c
  1243  003CB2  50DF               	movf	indf2,w,c
  1244  003CB4  EC94  F01D         	call	_spiTransferByte
  1245  003CB8  4A2C               	infsnz	nrfSetTXAddr@i,f,c
  1246  003CBA  2A2D               	incf	nrfSetTXAddr@i+1,f,c
  1247  003CBC                     l987:
  1248  003CBC  5027               	movf	nrfSetTXAddr@len+1,w,c
  1249  003CBE  0A80               	xorlw	128
  1250  003CC0  6E28               	movwf	??_nrfSetTXAddr& (0+255),c
  1251  003CC2  502C               	movf	nrfSetTXAddr@i,w,c
  1252  003CC4  5C26               	subwf	nrfSetTXAddr@len,w,c
  1253  003CC6  502D               	movf	nrfSetTXAddr@i+1,w,c
  1254  003CC8  0A80               	xorlw	128
  1255  003CCA  5828               	subwfb	??_nrfSetTXAddr& (0+255),w,c
  1256  003CCC  B0D8               	btfsc	status,0,c
  1257  003CCE  D7DF               	goto	l983
  1258  003CD0                     l989:
  1259                           
  1260                           ;main.c: 347: }
  1261                           ;main.c: 348: }
  1262                           ;main.c: 350: setCSN(1);
  1263  003CD0  0E00               	movlw	0
  1264  003CD2  6E23               	movwf	setCSN@level+1,c
  1265  003CD4  0E01               	movlw	1
  1266  003CD6  6E22               	movwf	setCSN@level,c
  1267  003CD8  EC9D  F01D         	call	_setCSN	;wreg free
  1268  003CDC  0012               	return	
  1269  003CDE                     __end_of_nrfSetTXAddr:
  1270                           	opt stack 0
  1271                           tblptru	equ	0xFF8
  1272                           tblptrh	equ	0xFF7
  1273                           tblptrl	equ	0xFF6
  1274                           tablat	equ	0xFF5
  1275                           postinc0	equ	0xFEE
  1276                           wreg	equ	0xFE8
  1277                           indf1	equ	0xFE7
  1278                           postdec1	equ	0xFE5
  1279                           fsr1h	equ	0xFE2
  1280                           fsr1l	equ	0xFE1
  1281                           indf2	equ	0xFDF
  1282                           fsr2h	equ	0xFDA
  1283                           fsr2l	equ	0xFD9
  1284                           status	equ	0xFD8
  1285                           
  1286 ;; *************** function _nrfSetRXAddr *****************
  1287 ;; Defined at:
  1288 ;;		line 359 in file "main.c"
  1289 ;; Parameters:    Size  Location     Type
  1290 ;;  pipe            1    wreg     unsigned char 
  1291 ;;  addr            2    2[COMRAM] PTR unsigned char 
  1292 ;;		 -> RX_ADDRESS(4), TX_ADDRESS(4), 
  1293 ;;  len             2    4[COMRAM] int 
  1294 ;; Auto vars:     Size  Location     Type
  1295 ;;  pipe            1   10[COMRAM] unsigned char 
  1296 ;;  i               2   11[COMRAM] int 
  1297 ;; Return value:  Size  Location     Type
  1298 ;;		None               void
  1299 ;; Registers used:
  1300 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1301 ;; Tracked objects:
  1302 ;;		On entry : 0/0
  1303 ;;		On exit  : 0/0
  1304 ;;		Unchanged: 0/0
  1305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1306 ;;      Params:         4       0       0       0
  1307 ;;      Locals:         3       0       0       0
  1308 ;;      Temps:          4       0       0       0
  1309 ;;      Totals:        11       0       0       0
  1310 ;;Total ram usage:       11 bytes
  1311 ;; Hardware stack levels used:    1
  1312 ;; Hardware stack levels required when called:    1
  1313 ;; This function calls:
  1314 ;;		_setCSN
  1315 ;;		_spiTransferByte
  1316 ;; This function is called by:
  1317 ;;		_nrfConfig
  1318 ;; This function uses a non-reentrant model
  1319 ;;
  1320                           
  1321                           	psect	text8
  1322  003CDE                     __ptext8:
  1323                           	opt stack 0
  1324  003CDE                     _nrfSetRXAddr:
  1325                           	opt stack 28
  1326                           
  1327                           ;incstack = 0
  1328                           ;nrfSetRXAddr@pipe stored from wreg
  1329  003CDE  6E2C               	movwf	nrfSetRXAddr@pipe,c
  1330                           
  1331                           ;main.c: 361: setCSN(0);
  1332  003CE0  0E00               	movlw	0
  1333  003CE2  6E23               	movwf	setCSN@level+1,c
  1334  003CE4  0E00               	movlw	0
  1335  003CE6  6E22               	movwf	setCSN@level,c
  1336  003CE8  EC9D  F01D         	call	_setCSN	;wreg free
  1337                           
  1338                           ;main.c: 363: spiTransferByte(0x20|pipe);
  1339  003CEC  502C               	movf	nrfSetRXAddr@pipe,w,c
  1340  003CEE  0920               	iorlw	32
  1341  003CF0  EC94  F01D         	call	_spiTransferByte
  1342                           
  1343                           ;main.c: 365: if (len != 0) {
  1344  003CF4  5027               	movf	nrfSetRXAddr@len+1,w,c
  1345  003CF6  1026               	iorwf	nrfSetRXAddr@len,w,c
  1346  003CF8  B4D8               	btfsc	status,2,c
  1347  003CFA  D026               	goto	l973
  1348                           
  1349                           ;main.c: 367: for (int i=1;i<=len;i++) {
  1350  003CFC  0E00               	movlw	0
  1351  003CFE  6E2E               	movwf	nrfSetRXAddr@i+1,c
  1352  003D00  0E01               	movlw	1
  1353  003D02  6E2D               	movwf	nrfSetRXAddr@i,c
  1354  003D04  D017               	goto	l971
  1355  003D06                     l967:
  1356                           
  1357                           ;main.c: 368: spiTransferByte(addr[i-1]);
  1358  003D06  0EFF               	movlw	255
  1359  003D08  6E28               	movwf	??_nrfSetRXAddr& (0+255),c
  1360  003D0A  0EFF               	movlw	255
  1361  003D0C  6E29               	movwf	(??_nrfSetRXAddr+1)& (0+255),c
  1362  003D0E  C02D  F02A         	movff	nrfSetRXAddr@i,??_nrfSetRXAddr+2
  1363  003D12  C02E  F02B         	movff	nrfSetRXAddr@i+1,??_nrfSetRXAddr+3
  1364  003D16  5028               	movf	??_nrfSetRXAddr,w,c
  1365  003D18  262A               	addwf	??_nrfSetRXAddr+2,f,c
  1366  003D1A  5029               	movf	??_nrfSetRXAddr+1,w,c
  1367  003D1C  222B               	addwfc	??_nrfSetRXAddr+3,f,c
  1368  003D1E  502A               	movf	??_nrfSetRXAddr+2,w,c
  1369  003D20  2424               	addwf	nrfSetRXAddr@addr,w,c
  1370  003D22  6ED9               	movwf	fsr2l,c
  1371  003D24  502B               	movf	??_nrfSetRXAddr+3,w,c
  1372  003D26  2025               	addwfc	nrfSetRXAddr@addr+1,w,c
  1373  003D28  6EDA               	movwf	fsr2h,c
  1374  003D2A  50DF               	movf	indf2,w,c
  1375  003D2C  EC94  F01D         	call	_spiTransferByte
  1376  003D30  4A2D               	infsnz	nrfSetRXAddr@i,f,c
  1377  003D32  2A2E               	incf	nrfSetRXAddr@i+1,f,c
  1378  003D34                     l971:
  1379  003D34  5027               	movf	nrfSetRXAddr@len+1,w,c
  1380  003D36  0A80               	xorlw	128
  1381  003D38  6E28               	movwf	??_nrfSetRXAddr& (0+255),c
  1382  003D3A  502D               	movf	nrfSetRXAddr@i,w,c
  1383  003D3C  5C26               	subwf	nrfSetRXAddr@len,w,c
  1384  003D3E  502E               	movf	nrfSetRXAddr@i+1,w,c
  1385  003D40  0A80               	xorlw	128
  1386  003D42  5828               	subwfb	??_nrfSetRXAddr& (0+255),w,c
  1387  003D44  B0D8               	btfsc	status,0,c
  1388  003D46  D7DF               	goto	l967
  1389  003D48                     l973:
  1390                           
  1391                           ;main.c: 369: }
  1392                           ;main.c: 370: }
  1393                           ;main.c: 372: setCSN(1);
  1394  003D48  0E00               	movlw	0
  1395  003D4A  6E23               	movwf	setCSN@level+1,c
  1396  003D4C  0E01               	movlw	1
  1397  003D4E  6E22               	movwf	setCSN@level,c
  1398  003D50  EC9D  F01D         	call	_setCSN	;wreg free
  1399  003D54  0012               	return	
  1400  003D56                     __end_of_nrfSetRXAddr:
  1401                           	opt stack 0
  1402                           tblptru	equ	0xFF8
  1403                           tblptrh	equ	0xFF7
  1404                           tblptrl	equ	0xFF6
  1405                           tablat	equ	0xFF5
  1406                           postinc0	equ	0xFEE
  1407                           wreg	equ	0xFE8
  1408                           indf1	equ	0xFE7
  1409                           postdec1	equ	0xFE5
  1410                           fsr1h	equ	0xFE2
  1411                           fsr1l	equ	0xFE1
  1412                           indf2	equ	0xFDF
  1413                           fsr2h	equ	0xFDA
  1414                           fsr2l	equ	0xFD9
  1415                           status	equ	0xFD8
  1416                           
  1417 ;; *************** function _nrfConfigReg *****************
  1418 ;; Defined at:
  1419 ;;		line 315 in file "main.c"
  1420 ;; Parameters:    Size  Location     Type
  1421 ;;  wr              1    wreg     unsigned char 
  1422 ;;  command         1    2[COMRAM] unsigned char 
  1423 ;;  data            1    3[COMRAM] unsigned char 
  1424 ;; Auto vars:     Size  Location     Type
  1425 ;;  wr              1    4[COMRAM] unsigned char 
  1426 ;; Return value:  Size  Location     Type
  1427 ;;                  1    wreg      unsigned char 
  1428 ;; Registers used:
  1429 ;;		wreg, status,2, status,0, cstack
  1430 ;; Tracked objects:
  1431 ;;		On entry : 0/0
  1432 ;;		On exit  : 0/0
  1433 ;;		Unchanged: 0/0
  1434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1435 ;;      Params:         2       0       0       0
  1436 ;;      Locals:         1       0       0       0
  1437 ;;      Temps:          0       0       0       0
  1438 ;;      Totals:         3       0       0       0
  1439 ;;Total ram usage:        3 bytes
  1440 ;; Hardware stack levels used:    1
  1441 ;; Hardware stack levels required when called:    1
  1442 ;; This function calls:
  1443 ;;		_setCSN
  1444 ;;		_spiTransferByte
  1445 ;; This function is called by:
  1446 ;;		_nrfConfig
  1447 ;; This function uses a non-reentrant model
  1448 ;;
  1449                           
  1450                           	psect	text9
  1451  003C20                     __ptext9:
  1452                           	opt stack 0
  1453  003C20                     _nrfConfigReg:
  1454                           	opt stack 28
  1455                           
  1456                           ;incstack = 0
  1457                           ;nrfConfigReg@wr stored from wreg
  1458  003C20  6E26               	movwf	nrfConfigReg@wr,c
  1459                           
  1460                           ;main.c: 317: setCSN(0);
  1461  003C22  0E00               	movlw	0
  1462  003C24  6E23               	movwf	setCSN@level+1,c
  1463  003C26  0E00               	movlw	0
  1464  003C28  6E22               	movwf	setCSN@level,c
  1465  003C2A  EC9D  F01D         	call	_setCSN	;wreg free
  1466                           
  1467                           ;main.c: 319: if (wr == 'w') {
  1468  003C2E  5026               	movf	nrfConfigReg@wr,w,c
  1469  003C30  0A77               	xorlw	119
  1470  003C32  A4D8               	btfss	status,2,c
  1471  003C34  D008               	goto	l953
  1472                           
  1473                           ;main.c: 320: spiTransferByte(0x20|command);
  1474  003C36  5024               	movf	nrfConfigReg@command,w,c
  1475  003C38  0920               	iorlw	32
  1476  003C3A  EC94  F01D         	call	_spiTransferByte
  1477                           
  1478                           ;main.c: 321: spiTransferByte(data);
  1479  003C3E  5025               	movf	nrfConfigReg@data,w,c
  1480  003C40  EC94  F01D         	call	_spiTransferByte
  1481                           
  1482                           ;main.c: 322: } else if (wr == 'r') {
  1483  003C44  D00B               	goto	l957
  1484  003C46                     l953:
  1485  003C46  5026               	movf	nrfConfigReg@wr,w,c
  1486  003C48  0A72               	xorlw	114
  1487  003C4A  A4D8               	btfss	status,2,c
  1488  003C4C  D007               	goto	l957
  1489                           
  1490                           ;main.c: 323: spiTransferByte(0x00|command);
  1491  003C4E  5024               	movf	nrfConfigReg@command,w,c
  1492  003C50  EC94  F01D         	call	_spiTransferByte
  1493                           
  1494                           ;main.c: 324: data = spiTransferByte(0xFF);
  1495  003C54  0EFF               	movlw	255
  1496  003C56  EC94  F01D         	call	_spiTransferByte
  1497  003C5A  6E25               	movwf	nrfConfigReg@data,c
  1498  003C5C                     l957:
  1499                           
  1500                           ;main.c: 325: }
  1501                           ;main.c: 327: setCSN(1);
  1502  003C5C  0E00               	movlw	0
  1503  003C5E  6E23               	movwf	setCSN@level+1,c
  1504  003C60  0E01               	movlw	1
  1505  003C62  6E22               	movwf	setCSN@level,c
  1506  003C64  EC9D  F01D         	call	_setCSN	;wreg free
  1507  003C68  0012               	return	
  1508  003C6A                     __end_of_nrfConfigReg:
  1509                           	opt stack 0
  1510                           tblptru	equ	0xFF8
  1511                           tblptrh	equ	0xFF7
  1512                           tblptrl	equ	0xFF6
  1513                           tablat	equ	0xFF5
  1514                           postinc0	equ	0xFEE
  1515                           wreg	equ	0xFE8
  1516                           indf1	equ	0xFE7
  1517                           postdec1	equ	0xFE5
  1518                           fsr1h	equ	0xFE2
  1519                           fsr1l	equ	0xFE1
  1520                           indf2	equ	0xFDF
  1521                           fsr2h	equ	0xFDA
  1522                           fsr2l	equ	0xFD9
  1523                           status	equ	0xFD8
  1524                           
  1525 ;; *************** function _spiTransferByte *****************
  1526 ;; Defined at:
  1527 ;;		line 407 in file "main.c"
  1528 ;; Parameters:    Size  Location     Type
  1529 ;;  data            1    wreg     unsigned char 
  1530 ;; Auto vars:     Size  Location     Type
  1531 ;;  data            1    0[COMRAM] unsigned char 
  1532 ;; Return value:  Size  Location     Type
  1533 ;;                  1    wreg      unsigned char 
  1534 ;; Registers used:
  1535 ;;		wreg, status,2, cstack
  1536 ;; Tracked objects:
  1537 ;;		On entry : 0/0
  1538 ;;		On exit  : 0/0
  1539 ;;		Unchanged: 0/0
  1540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1541 ;;      Params:         0       0       0       0
  1542 ;;      Locals:         1       0       0       0
  1543 ;;      Temps:          0       0       0       0
  1544 ;;      Totals:         1       0       0       0
  1545 ;;Total ram usage:        1 bytes
  1546 ;; Hardware stack levels used:    1
  1547 ;; This function calls:
  1548 ;;		Nothing
  1549 ;; This function is called by:
  1550 ;;		_nrfGetStatus
  1551 ;;		_nrfConfigReg
  1552 ;;		_nrfSetTXAddr
  1553 ;;		_nrfSetRXAddr
  1554 ;;		_spiTransfer
  1555 ;;		_nrfTXData
  1556 ;; This function uses a non-reentrant model
  1557 ;;
  1558                           
  1559                           	psect	text10
  1560  003B28                     __ptext10:
  1561                           	opt stack 0
  1562  003B28                     _spiTransferByte:
  1563                           	opt stack 29
  1564                           
  1565                           ;incstack = 0
  1566                           ;spiTransferByte@data stored from wreg
  1567  003B28  6E22               	movwf	spiTransferByte@data,c
  1568                           
  1569                           ;main.c: 409: SSP1BUF = data;
  1570  003B2A  C022  FFC9         	movff	spiTransferByte@data,4041	;volatile
  1571                           
  1572                           ;main.c: 411: _delay((unsigned long)((8)*(64000000/4000000.0)));
  1573  003B2E  0E2A               	movlw	42
  1574  003B30                     u337:
  1575  003B30  2EE8               	decfsz	wreg,f,c
  1576  003B32  D7FE               	goto	u337
  1577  003B34  D000               	nop2		;nop
  1578                           
  1579                           ;main.c: 413: return SSP1BUF;
  1580  003B36  50C9               	movf	4041,w,c	;volatile
  1581  003B38  0012               	return	
  1582  003B3A                     __end_of_spiTransferByte:
  1583                           	opt stack 0
  1584                           tblptru	equ	0xFF8
  1585                           tblptrh	equ	0xFF7
  1586                           tblptrl	equ	0xFF6
  1587                           tablat	equ	0xFF5
  1588                           postinc0	equ	0xFEE
  1589                           wreg	equ	0xFE8
  1590                           indf1	equ	0xFE7
  1591                           postdec1	equ	0xFE5
  1592                           fsr1h	equ	0xFE2
  1593                           fsr1l	equ	0xFE1
  1594                           indf2	equ	0xFDF
  1595                           fsr2h	equ	0xFDA
  1596                           fsr2l	equ	0xFD9
  1597                           status	equ	0xFD8
  1598                           
  1599 ;; *************** function _setCSN *****************
  1600 ;; Defined at:
  1601 ;;		line 289 in file "main.c"
  1602 ;; Parameters:    Size  Location     Type
  1603 ;;  level           2    0[COMRAM] int 
  1604 ;; Auto vars:     Size  Location     Type
  1605 ;;		None
  1606 ;; Return value:  Size  Location     Type
  1607 ;;		None               void
  1608 ;; Registers used:
  1609 ;;		wreg, status,2, status,0
  1610 ;; Tracked objects:
  1611 ;;		On entry : 0/0
  1612 ;;		On exit  : 0/0
  1613 ;;		Unchanged: 0/0
  1614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1615 ;;      Params:         2       0       0       0
  1616 ;;      Locals:         0       0       0       0
  1617 ;;      Temps:          0       0       0       0
  1618 ;;      Totals:         2       0       0       0
  1619 ;;Total ram usage:        2 bytes
  1620 ;; Hardware stack levels used:    1
  1621 ;; This function calls:
  1622 ;;		Nothing
  1623 ;; This function is called by:
  1624 ;;		_nrfGetStatus
  1625 ;;		_nrfConfigReg
  1626 ;;		_nrfSetTXAddr
  1627 ;;		_nrfSetRXAddr
  1628 ;;		_spiTransfer
  1629 ;;		_nrfTXData
  1630 ;; This function uses a non-reentrant model
  1631 ;;
  1632                           
  1633                           	psect	text11
  1634  003B3A                     __ptext11:
  1635                           	opt stack 0
  1636  003B3A                     _setCSN:
  1637                           	opt stack 29
  1638                           
  1639                           ;main.c: 291: if (level == 1) {
  1640                           
  1641                           ;incstack = 0
  1642  003B3A  0422               	decf	setCSN@level,w,c
  1643  003B3C  1023               	iorwf	setCSN@level+1,w,c
  1644  003B3E  A4D8               	btfss	status,2,c
  1645  003B40  D006               	goto	l90
  1646                           
  1647                           ;main.c: 292: _delay((unsigned long)((1)*(64000000/4000000.0)));
  1648  003B42  0E05               	movlw	5
  1649  003B44                     u347:
  1650  003B44  2EE8               	decfsz	wreg,f,c
  1651  003B46  D7FE               	goto	u347
  1652  003B48  F000               	nop	
  1653                           
  1654                           ;main.c: 293: LATAbits.LATA2 = 1;
  1655  003B4A  8489               	bsf	3977,2,c	;volatile
  1656                           
  1657                           ;main.c: 294: } else {
  1658  003B4C  0012               	return	
  1659  003B4E                     l90:
  1660                           
  1661                           ;main.c: 295: LATAbits.LATA2 = 0;
  1662  003B4E  9489               	bcf	3977,2,c	;volatile
  1663  003B50  0012               	return	
  1664  003B52                     __end_of_setCSN:
  1665                           	opt stack 0
  1666                           tblptru	equ	0xFF8
  1667                           tblptrh	equ	0xFF7
  1668                           tblptrl	equ	0xFF6
  1669                           tablat	equ	0xFF5
  1670                           postinc0	equ	0xFEE
  1671                           wreg	equ	0xFE8
  1672                           indf1	equ	0xFE7
  1673                           postdec1	equ	0xFE5
  1674                           fsr1h	equ	0xFE2
  1675                           fsr1l	equ	0xFE1
  1676                           indf2	equ	0xFDF
  1677                           fsr2h	equ	0xFDA
  1678                           fsr2l	equ	0xFD9
  1679                           status	equ	0xFD8
  1680                           
  1681 ;; *************** function _delay10ms *****************
  1682 ;; Defined at:
  1683 ;;		line 447 in file "main.c"
  1684 ;; Parameters:    Size  Location     Type
  1685 ;;  ms_multi        2    0[COMRAM] int 
  1686 ;; Auto vars:     Size  Location     Type
  1687 ;;  i               2    3[COMRAM] int 
  1688 ;; Return value:  Size  Location     Type
  1689 ;;		None               void
  1690 ;; Registers used:
  1691 ;;		wreg, status,2, status,0
  1692 ;; Tracked objects:
  1693 ;;		On entry : 0/0
  1694 ;;		On exit  : 0/0
  1695 ;;		Unchanged: 0/0
  1696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1697 ;;      Params:         2       0       0       0
  1698 ;;      Locals:         2       0       0       0
  1699 ;;      Temps:          1       0       0       0
  1700 ;;      Totals:         5       0       0       0
  1701 ;;Total ram usage:        5 bytes
  1702 ;; Hardware stack levels used:    1
  1703 ;; This function calls:
  1704 ;;		Nothing
  1705 ;; This function is called by:
  1706 ;;		_main
  1707 ;; This function uses a non-reentrant model
  1708 ;;
  1709                           
  1710                           	psect	text12
  1711  003BA6                     __ptext12:
  1712                           	opt stack 0
  1713  003BA6                     _delay10ms:
  1714                           	opt stack 30
  1715                           
  1716                           ;main.c: 448: int i = 0;
  1717                           
  1718                           ;incstack = 0
  1719  003BA6  0E00               	movlw	0
  1720  003BA8  6E26               	movwf	delay10ms@i+1,c
  1721  003BAA  0E00               	movlw	0
  1722  003BAC  6E25               	movwf	delay10ms@i,c
  1723                           
  1724                           ;main.c: 449: for (i=0;i<ms_multi;i++) {
  1725  003BAE  0E00               	movlw	0
  1726  003BB0  6E26               	movwf	delay10ms@i+1,c
  1727  003BB2  0E00               	movlw	0
  1728  003BB4  6E25               	movwf	delay10ms@i,c
  1729  003BB6  D00A               	goto	l140
  1730  003BB8                     l839:
  1731                           
  1732                           ;main.c: 450: _delay((unsigned long)((11)*(64000000/4000.0)));
  1733  003BB8  0EE5               	movlw	229
  1734  003BBA  6E24               	movwf	??_delay10ms& (0+255),c
  1735  003BBC  0E91               	movlw	145
  1736  003BBE                     u357:
  1737  003BBE  2EE8               	decfsz	wreg,f,c
  1738  003BC0  D7FE               	goto	u357
  1739  003BC2  2E24               	decfsz	??_delay10ms& (0+255),f,c
  1740  003BC4  D7FC               	goto	u357
  1741  003BC6  F000               	nop	
  1742  003BC8  4A25               	infsnz	delay10ms@i,f,c
  1743  003BCA  2A26               	incf	delay10ms@i+1,f,c
  1744  003BCC                     l140:
  1745  003BCC  5026               	movf	delay10ms@i+1,w,c
  1746  003BCE  0A80               	xorlw	128
  1747  003BD0  6E24               	movwf	??_delay10ms& (0+255),c
  1748  003BD2  5022               	movf	delay10ms@ms_multi,w,c
  1749  003BD4  5C25               	subwf	delay10ms@i,w,c
  1750  003BD6  5023               	movf	delay10ms@ms_multi+1,w,c
  1751  003BD8  0A80               	xorlw	128
  1752  003BDA  5824               	subwfb	??_delay10ms& (0+255),w,c
  1753  003BDC  B0D8               	btfsc	status,0,c
  1754  003BDE  0012               	return	
  1755  003BE0  D7EB               	goto	l839
  1756  003BE2                     __end_of_delay10ms:
  1757                           	opt stack 0
  1758  0000                     tblptru	equ	0xFF8
  1759                           tblptrh	equ	0xFF7
  1760                           tblptrl	equ	0xFF6
  1761                           tablat	equ	0xFF5
  1762                           postinc0	equ	0xFEE
  1763                           wreg	equ	0xFE8
  1764                           indf1	equ	0xFE7
  1765                           postdec1	equ	0xFE5
  1766                           fsr1h	equ	0xFE2
  1767                           fsr1l	equ	0xFE1
  1768                           indf2	equ	0xFDF
  1769                           fsr2h	equ	0xFDA
  1770                           fsr2l	equ	0xFD9
  1771                           status	equ	0xFD8
  1772                           tblptru	equ	0xFF8
  1773                           tblptrh	equ	0xFF7
  1774                           tblptrl	equ	0xFF6
  1775                           tablat	equ	0xFF5
  1776                           postinc0	equ	0xFEE
  1777                           wreg	equ	0xFE8
  1778                           indf1	equ	0xFE7
  1779                           postdec1	equ	0xFE5
  1780                           fsr1h	equ	0xFE2
  1781                           fsr1l	equ	0xFE1
  1782                           indf2	equ	0xFDF
  1783                           fsr2h	equ	0xFDA
  1784                           fsr2l	equ	0xFD9
  1785                           status	equ	0xFD8
  1786                           
  1787                           	psect	rparam
  1788  0000                     tblptru	equ	0xFF8
  1789                           tblptrh	equ	0xFF7
  1790                           tblptrl	equ	0xFF6
  1791                           tablat	equ	0xFF5
  1792                           postinc0	equ	0xFEE
  1793                           wreg	equ	0xFE8
  1794                           indf1	equ	0xFE7
  1795                           postdec1	equ	0xFE5
  1796                           fsr1h	equ	0xFE2
  1797                           fsr1l	equ	0xFE1
  1798                           indf2	equ	0xFDF
  1799                           fsr2h	equ	0xFDA
  1800                           fsr2l	equ	0xFD9
  1801                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        16
    BSS         65
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     18      67
    BANK0           160      0      32
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    nrfSetRXAddr@addr	PTR unsigned char  size(2) Largest target is 4
		 -> RX_ADDRESS(COMRAM[4]), TX_ADDRESS(COMRAM[4]), 

    nrfSetTXAddr@addr	PTR unsigned char  size(2) Largest target is 4
		 -> TX_ADDRESS(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->_spiTransfer
    _nrfTXData->_setCSN
    _nrfGetStatus->_setCSN
    _nrfConfig->_spiTransfer
    _spiTransfer->_setCSN
    _nrfSetTXAddr->_setCSN
    _nrfSetRXAddr->_setCSN
    _nrfConfigReg->_setCSN

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    7888
                                             16 COMRAM     2     2      0
                          _delay10ms
                          _nrfConfig
                       _nrfGetStatus
                          _nrfTXData
                         _portConfig
                        _spiConfig_1
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiConfig_1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _portConfig                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _nrfTXData                                            8     6      2     823
                                              2 COMRAM     8     6      2
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (1) _nrfGetStatus                                         0     0      0     680
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (1) _nrfConfig                                            0     0      0    4917
                       _nrfConfigReg
                       _nrfSetRXAddr
                       _nrfSetTXAddr
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiTransfer                                         14    11      3    1242
                                              2 COMRAM    14    11      3
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfSetTXAddr                                        10     6      4     898
                                              2 COMRAM    10     6      4
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfSetRXAddr                                        11     7      4    1026
                                              2 COMRAM    11     7      4
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfConfigReg                                         3     1      2    1751
                                              2 COMRAM     3     1      2
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _spiTransferByte                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setCSN                                               2     0      2     658
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _delay10ms                                            5     3      2     202
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay10ms
   _nrfConfig
     _nrfConfigReg
       _setCSN
       _spiTransferByte
     _nrfSetRXAddr
       _setCSN
       _spiTransferByte
     _nrfSetTXAddr
       _setCSN
       _spiTransferByte
     _spiTransfer
       _setCSN
       _spiTransferByte
   _nrfGetStatus
     _setCSN
     _spiTransferByte
   _nrfTXData
     _setCSN
     _spiTransferByte
   _portConfig
   _spiConfig_1
   _spiTransfer
     _setCSN
     _spiTransferByte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       6        0.0%
BANK2              100      0       0       7        0.0%
BITBANK1           100      0       0       9        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      20       4       20.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     12      43       1       70.5%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      63       8        0.0%
DATA                 0      0      63      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Mon Sep 29 20:04:05 2014

__size_of_spiTransferByte 0012                        l90 3B4E                _RX_ADDRESS 003C  
             __CFG_LVP$ON 000000                       l140 3BCC                       l941 3F0C  
                     l933 3EA2                       l925 3E84                       l839 3BB8  
                     l943 3F20                       l953 3C46                       l937 3EB4  
                     l929 3E94                       l971 3D34                       l957 3C5C  
                     l973 3D48                       l967 3D06                       l983 3C8E  
                     l987 3CBC                       l989 3CD0                       u327 3DCC  
                     u337 3B30                       u347 3B44                       u357 3BBE  
                     wreg 000FE8                _TX_ADDRESS 0040                      l1013 3D7A  
                    l1017 3DA8                      l1041 3DF6                      l1019 3DBC  
                    l1059 3E2E                      _LATA 000F89                      _LATB 000F8A  
                    _LATC 000F8B        spiTransfer@command 0024                      _main 3DD6  
                    indf1 000FE7                      fsr1l 000FE1                      indf2 000FDF  
                    fsr2l 000FD9             __CFG_BORV$190 000000                      start 0000  
           __CFG_IESO$OFF 000000            nrfConfigReg@wr 0026                     ?_main 0022  
                   _TRISA 000F92                     _TRISB 000F93                     _TRISC 000F94  
          __CFG_FCMEN$OFF 000000        __CFG_MCLRE$EXTMCLR 000000                     tablat 000FF5  
                   status 000FD8            __CFG_HFOFST$ON 000000            __CFG_FOSC$HSHP 000000  
         __initialization 3BE2              __end_of_main 3E64       spiTransferByte@data 0022  
                  ??_main 0032             __activetblptr 000000         ??_spiTransferByte 0022  
          __CFG_PLLCFG$ON 000000             nrfSetRXAddr@i 002D             nrfSetTXAddr@i 002C  
          __CFG_WDTEN$OFF 000000              ?_spiConfig_1 0022            __CFG_PWRTEN$ON 000000  
          __CFG_XINST$OFF 000000            __CFG_STVREN$ON 000000                    _setCSN 3B3A  
                  clear_0 3BE8                    clear_1 3BF4               setCSN@level 0022  
           ?_nrfGetStatus 0022             ?_nrfConfigReg 0024              __pdataCOMRAM 0034  
            ?_spiTransfer 0024                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8                __accesstop 0060   __end_of__initialization 3C1A  
         __CFG_PBADEN$OFF 000000             ?_nrfSetRXAddr 0024             ?_nrfSetTXAddr 0024  
          __pcstackCOMRAM 0022        __size_of_delay10ms 003C            ??_nrfGetStatus 0024  
          _EN_RXADDR_CURR 0036            ??_nrfConfigReg 0026          nrfConfigReg@data 0025  
              _dataBufOut 0001                __pbssBANK0 0060            ??_nrfSetRXAddr 0028  
          ??_nrfSetTXAddr 0028        __size_of_nrfTXData 0080        __size_of_nrfConfig 00D2  
     nrfConfigReg@command 0024        __CFG_CCP2MX$PORTC1 000000        __CFG_CCP3MX$PORTB5 000000  
                 ?_setCSN 0022                   _SSP1ADD 000FC8                   _SSP1BUF 000FC9  
       __end_of_delay10ms 3BE2          nrfSetRXAddr@addr 0024          nrfSetRXAddr@pipe 002C  
                 __Hparam 0000                   __Lparam 0000      __size_of_spiConfig_1 0018  
         _spiTransferByte 3B28                delay10ms@i 0025             _RX_PW_P0_CURR 0039  
                 __pcinit 3BE2           __size_of_setCSN 0018          nrfSetTXAddr@addr 0024  
                 __ramtop 0300                   __ptext0 3DD6                   __ptext1 3B52  
                 __ptext2 3B6A                   __ptext3 3D56                   __ptext4 3B84  
                 __ptext5 3F2E                   __ptext6 3E64                   __ptext7 3C6A  
                 __ptext8 3CDE                   __ptext9 3C20         __end_of_nrfTXData 3DD6  
       __end_of_nrfConfig 4000      __size_of_spiTransfer 00CA      end_of_initialization 3C1A  
    __end_of_nrfGetStatus 3BA6      __end_of_nrfConfigReg 3C6A                   postdec1 000FE5  
                 postinc0 000FEE              nrfTXData@len 0024                _portConfig 3B6A  
    __end_of_nrfSetRXAddr 3D56      __end_of_nrfSetTXAddr 3CDE   __end_of_spiTransferByte 3B3A  
           __pidataCOMRAM 3B18            __end_of_setCSN 3B52       start_initialization 3BE2  
                ??_setCSN 0024               ?_portConfig 0022                nrfTXData@i 002A  
             __pbssCOMRAM 0001     __size_of_nrfGetStatus 0022     __size_of_nrfConfigReg 004A  
               _dataBufIn 0060          ?_spiTransferByte 0022                 _delay10ms 3BA6  
             _CONFIG_CURR 0034             _SETUP_AW_CURR 003A     __size_of_nrfSetRXAddr 0078  
   __size_of_nrfSetTXAddr 0074           _SETUP_RETR_CURR 003B          __CFG_PRICLKEN$ON 000000  
            _nrfGetStatus 3B84              _nrfConfigReg 3C20           nrfSetRXAddr@len 0026  
               _nrfSTATUS 0021                 _nrfTXData 3D56           nrfSetTXAddr@len 0026  
               _nrfConfig 3F2E       __size_of_portConfig 001A                  _LATAbits 000F89  
              ?_delay10ms 0022             ??_spiConfig_1 0022              _nrfSetRXAddr 3CDE  
            _nrfSetTXAddr 3C6A          __CFG_WDTPS$32768 000000             _RF_SETUP_CURR 0038  
       delay10ms@ms_multi 0022             ??_spiTransfer 0027                 main@count 0032  
              ?_nrfTXData 0024                 copy_data0 3C0E                ?_nrfConfig 0022  
                __Hrparam 0000                  __Lrparam 0000        __CFG_BOREN$SBORDIS 000000  
       __CFG_P2BMX$PORTB5 000000       __end_of_spiConfig_1 3B6A                  __ptext10 3B28  
                __ptext11 3B3A                  __ptext12 3BA6              _SSP1CON1bits 000FC6  
     __end_of_spiTransfer 3F2E             __size_of_main 008E               ??_delay10ms 0024  
              _EN_AA_CURR 0035              _SSP1STATbits 000FC7              ??_portConfig 0022  
             ??_nrfTXData 0026               ??_nrfConfig 0032        __end_of_portConfig 3B84  
             _spiConfig_1 3B52            spiTransfer@len 0025            spiTransfer@wrn 002F  
              _RF_CH_CURR 0037               _spiTransfer 3E64         __CFG_T3CMX$PORTC0 000000  
            spiTransfer@i 0030  
