

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Thu Sep 25 19:11:22 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F24K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    25  0000                     
    26                           	psect	idataCOMRAM
    27  003B91                     __pidataCOMRAM:
    28                           	opt stack 0
    29                           
    30                           ;initializer for _CONFIG_CURR
    31  003B91  2B                 	db	43
    32                           
    33                           ;initializer for _EN_RXADDR_CURR
    34  003B92  01                 	db	1
    35                           
    36                           ;initializer for _RF_CH_CURR
    37  003B93  69                 	db	105
    38                           
    39                           ;initializer for _RF_SETUP_CURR
    40  003B94  06                 	db	6
    41                           
    42                           ;initializer for _RX_PW_P0_CURR
    43  003B95  01                 	db	1
    44                           
    45                           ;initializer for _SETUP_AW_CURR
    46  003B96  02                 	db	2
    47                           
    48                           ;initializer for _SETUP_RETR_CURR
    49  003B97  20                 	db	32
    50                           
    51                           ;initializer for _RX_ADDRESS
    52  003B98  E7                 	db	231
    53  003B99  E7                 	db	231
    54  003B9A  E7                 	db	231
    55  003B9B  E7                 	db	231
    56                           
    57                           ;initializer for _TX_ADDRESS
    58  003B9C  E7                 	db	231
    59  003B9D  E7                 	db	231
    60  003B9E  E7                 	db	231
    61  003B9F  E7                 	db	231
    62  0000                     _LATA	set	3977
    63  0000                     _LATAbits	set	3977
    64  0000                     _LATB	set	3978
    65  0000                     _LATC	set	3979
    66  0000                     _SSP1ADD	set	4040
    67  0000                     _SSP1BUF	set	4041
    68  0000                     _SSP1CON1bits	set	4038
    69  0000                     _SSP1STATbits	set	4039
    70  0000                     _TRISA	set	3986
    71  0000                     _TRISB	set	3987
    72  0000                     _TRISC	set	3988
    73                           
    74                           ; #config settings
    75  0000                     
    76                           	psect	cinit
    77  003C58                     __pcinit:
    78                           	opt stack 0
    79  003C58                     start_initialization:
    80                           	opt stack 0
    81  003C58                     __initialization:
    82                           	opt stack 0
    83                           
    84                           ; Clear objects allocated to BANK0 (32 bytes)
    85  003C58  EE00  F060         	lfsr	0,__pbssBANK0
    86  003C5C  0E20               	movlw	32
    87  003C5E                     clear_0:
    88  003C5E  6AEE               	clrf	postinc0,c
    89  003C60  06E8               	decf	wreg,f,c
    90  003C62  E1FD               	bnz	clear_0
    91                           
    92                           ; Clear objects allocated to COMRAM (34 bytes)
    93  003C64  EE00  F001         	lfsr	0,__pbssCOMRAM
    94  003C68  0E22               	movlw	34
    95  003C6A                     clear_1:
    96  003C6A  6AEE               	clrf	postinc0,c
    97  003C6C  06E8               	decf	wreg,f,c
    98  003C6E  E1FD               	bnz	clear_1
    99                           
   100                           ; Initialize objects allocated to COMRAM (15 bytes)
   101                           ; load TBLPTR registers with __pidataCOMRAM
   102  003C70  0E91               	movlw	low __pidataCOMRAM
   103  003C72  6EF6               	movwf	tblptrl,c
   104  003C74  0E3B               	movlw	high __pidataCOMRAM
   105  003C76  6EF7               	movwf	tblptrh,c
   106  003C78  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   107  003C7A  6EF8               	movwf	tblptru,c
   108  003C7C  EE00  F033         	lfsr	0,__pdataCOMRAM
   109  003C80  EE10 F00F          	lfsr	1,15
   110  003C84                     copy_data0:
   111  003C84  0009               	tblrd		*+
   112  003C86  CFF5 FFEE          	movff	tablat,postinc0
   113  003C8A  50E5               	movf	postdec1,w,c
   114  003C8C  50E1               	movf	fsr1l,w,c
   115  003C8E  E1FA               	bnz	copy_data0
   116  003C90                     end_of_initialization:
   117                           	opt stack 0
   118  003C90                     __end_of__initialization:
   119                           	opt stack 0
   120  003C90  0100               	movlb	0
   121  003C92  EFF8  F01E         	goto	_main	;jump to C main() function
   122                           tblptru	equ	0xFF8
   123                           tblptrh	equ	0xFF7
   124                           tblptrl	equ	0xFF6
   125                           tablat	equ	0xFF5
   126                           postinc0	equ	0xFEE
   127                           wreg	equ	0xFE8
   128                           postdec1	equ	0xFE5
   129                           fsr1l	equ	0xFE1
   130                           
   131                           	psect	bssCOMRAM
   132  000001                     __pbssCOMRAM:
   133                           	opt stack 0
   134  000001                     _dataBufIn:
   135                           	opt stack 0
   136  000001                     	ds	32
   137  000021                     _EN_AA_CURR:
   138                           	opt stack 0
   139  000021                     	ds	1
   140  000022                     _nrfSTATUS:
   141                           	opt stack 0
   142  000022                     	ds	1
   143                           tblptru	equ	0xFF8
   144                           tblptrh	equ	0xFF7
   145                           tblptrl	equ	0xFF6
   146                           tablat	equ	0xFF5
   147                           postinc0	equ	0xFEE
   148                           wreg	equ	0xFE8
   149                           postdec1	equ	0xFE5
   150                           fsr1l	equ	0xFE1
   151                           
   152                           	psect	dataCOMRAM
   153  000033                     __pdataCOMRAM:
   154                           	opt stack 0
   155  000033                     _CONFIG_CURR:
   156                           	opt stack 0
   157  000033                     	ds	1
   158  000034                     _EN_RXADDR_CURR:
   159                           	opt stack 0
   160  000034                     	ds	1
   161  000035                     _RF_CH_CURR:
   162                           	opt stack 0
   163  000035                     	ds	1
   164  000036                     _RF_SETUP_CURR:
   165                           	opt stack 0
   166  000036                     	ds	1
   167  000037                     _RX_PW_P0_CURR:
   168                           	opt stack 0
   169  000037                     	ds	1
   170  000038                     _SETUP_AW_CURR:
   171                           	opt stack 0
   172  000038                     	ds	1
   173  000039                     _SETUP_RETR_CURR:
   174                           	opt stack 0
   175  000039                     	ds	1
   176  00003A                     _RX_ADDRESS:
   177                           	opt stack 0
   178  00003A                     	ds	4
   179  00003E                     _TX_ADDRESS:
   180                           	opt stack 0
   181  00003E                     	ds	4
   182                           tblptru	equ	0xFF8
   183                           tblptrh	equ	0xFF7
   184                           tblptrl	equ	0xFF6
   185                           tablat	equ	0xFF5
   186                           postinc0	equ	0xFEE
   187                           wreg	equ	0xFE8
   188                           postdec1	equ	0xFE5
   189                           fsr1l	equ	0xFE1
   190                           
   191                           	psect	bssBANK0
   192  000060                     __pbssBANK0:
   193                           	opt stack 0
   194  000060                     _dataBufOut:
   195                           	opt stack 0
   196  000060                     	ds	32
   197                           tblptru	equ	0xFF8
   198                           tblptrh	equ	0xFF7
   199                           tblptrl	equ	0xFF6
   200                           tablat	equ	0xFF5
   201                           postinc0	equ	0xFEE
   202                           wreg	equ	0xFE8
   203                           postdec1	equ	0xFE5
   204                           fsr1l	equ	0xFE1
   205                           
   206                           	psect	cstackCOMRAM
   207  000023                     __pcstackCOMRAM:
   208                           	opt stack 0
   209  000023                     spiTransferByte@data:
   210                           	opt stack 0
   211  000023                     setCSN@level:
   212                           	opt stack 0
   213  000023                     delay10ms@ms_multi:
   214                           	opt stack 0
   215                           
   216                           ; 2 bytes @ 0x0
   217  000023                     	ds	2
   218  000025                     ??_delay10ms:
   219  000025                     nrfConfigReg@command:
   220                           	opt stack 0
   221  000025                     spiTransfer@command:
   222                           	opt stack 0
   223  000025                     nrfSetTXAddr@addr:
   224                           	opt stack 0
   225  000025                     nrfSetRXAddr@addr:
   226                           	opt stack 0
   227                           
   228                           ; 2 bytes @ 0x2
   229  000025                     	ds	1
   230  000026                     nrfConfigReg@data:
   231                           	opt stack 0
   232  000026                     spiTransfer@len:
   233                           	opt stack 0
   234  000026                     delay10ms@i:
   235                           	opt stack 0
   236                           
   237                           ; 2 bytes @ 0x3
   238  000026                     	ds	1
   239  000027                     nrfConfigReg@wr:
   240                           	opt stack 0
   241  000027                     nrfSetTXAddr@len:
   242                           	opt stack 0
   243  000027                     nrfSetRXAddr@len:
   244                           	opt stack 0
   245                           
   246                           ; 2 bytes @ 0x4
   247  000027                     	ds	1
   248  000028                     ??_spiTransfer:
   249                           
   250                           ; 0 bytes @ 0x5
   251  000028                     	ds	1
   252  000029                     ??_nrfSetRXAddr:
   253  000029                     ??_nrfSetTXAddr:
   254                           
   255                           ; 0 bytes @ 0x6
   256  000029                     	ds	4
   257  00002D                     nrfSetRXAddr@pipe:
   258                           	opt stack 0
   259  00002D                     nrfSetTXAddr@i:
   260                           	opt stack 0
   261                           
   262                           ; 2 bytes @ 0xA
   263  00002D                     	ds	1
   264  00002E                     nrfSetRXAddr@i:
   265                           	opt stack 0
   266                           
   267                           ; 2 bytes @ 0xB
   268  00002E                     	ds	2
   269  000030                     spiTransfer@wrn:
   270                           	opt stack 0
   271                           
   272                           ; 1 bytes @ 0xD
   273  000030                     	ds	1
   274  000031                     spiTransfer@i:
   275                           	opt stack 0
   276                           
   277                           ; 2 bytes @ 0xE
   278  000031                     	ds	2
   279  000033                     tblptru	equ	0xFF8
   280                           tblptrh	equ	0xFF7
   281                           tblptrl	equ	0xFF6
   282                           tablat	equ	0xFF5
   283                           postinc0	equ	0xFEE
   284                           wreg	equ	0xFE8
   285                           postdec1	equ	0xFE5
   286                           fsr1l	equ	0xFE1
   287                           
   288                           ; 0 bytes @ 0x10
   289 ;;
   290 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   291 ;;
   292 ;; *************** function _main *****************
   293 ;; Defined at:
   294 ;;		line 186 in file "main.c"
   295 ;; Parameters:    Size  Location     Type
   296 ;;		None
   297 ;; Auto vars:     Size  Location     Type
   298 ;;		None
   299 ;; Return value:  Size  Location     Type
   300 ;;		None               void
   301 ;; Registers used:
   302 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   303 ;; Tracked objects:
   304 ;;		On entry : 0/0
   305 ;;		On exit  : 0/0
   306 ;;		Unchanged: 0/0
   307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   308 ;;      Params:         0       0       0       0
   309 ;;      Locals:         0       0       0       0
   310 ;;      Temps:          0       0       0       0
   311 ;;      Totals:         0       0       0       0
   312 ;;Total ram usage:        0 bytes
   313 ;; Hardware stack levels required when called:    3
   314 ;; This function calls:
   315 ;;		_delay10ms
   316 ;;		_nrfConfig
   317 ;;		_nrfGetStatus
   318 ;;		_portConfig
   319 ;;		_spiConfig_1
   320 ;;		_spiTransfer
   321 ;; This function is called by:
   322 ;;		Startup code after reset
   323 ;; This function uses a non-reentrant model
   324 ;;
   325                           
   326                           	psect	text0
   327  003DF0                     __ptext0:
   328                           	opt stack 0
   329  003DF0                     _main:
   330                           	opt stack 28
   331                           
   332                           ;main.c: 189: portConfig();
   333                           
   334                           ;incstack = 0
   335  003DF0  ECF0  F01D         	call	_portConfig	;wreg free
   336                           
   337                           ;main.c: 190: spiConfig_1();
   338  003DF4  ECE4  F01D         	call	_spiConfig_1	;wreg free
   339                           
   340                           ;main.c: 191: nrfConfig();
   341  003DF8  EC3E  F01F         	call	_nrfConfig	;wreg free
   342                           
   343                           ;main.c: 193: LATAbits.LATA1 = 1;
   344  003DFC  8289               	bsf	3977,1,c	;volatile
   345                           
   346                           ;main.c: 195: delay10ms(1);
   347  003DFE  0E00               	movlw	0
   348  003E00  6E24               	movwf	delay10ms@ms_multi+1,c
   349  003E02  0E01               	movlw	1
   350  003E04  6E23               	movwf	delay10ms@ms_multi,c
   351  003E06  EC0E  F01E         	call	_delay10ms	;wreg free
   352  003E0A                     l1026:
   353                           
   354                           ;main.c: 199: LATAbits.LATA1 = 1;
   355  003E0A  8289               	bsf	3977,1,c	;volatile
   356                           
   357                           ;main.c: 201: _delay((unsigned long)((20)*(64000000/4000000.0)));
   358  003E0C  0E6A               	movlw	106
   359  003E0E                     u297:
   360  003E0E  2EE8               	decfsz	wreg,f,c
   361  003E10  D7FE               	goto	u297
   362  003E12  D000               	nop2		;nop
   363                           
   364                           ;main.c: 203: nrfGetStatus();
   365  003E14  ECFD  F01D         	call	_nrfGetStatus	;wreg free
   366                           
   367                           ;main.c: 205: if (nrfSTATUS != 0x0E) {
   368  003E18  5022               	movf	_nrfSTATUS,w,c
   369  003E1A  0A0E               	xorlw	14
   370  003E1C  B4D8               	btfsc	status,2,c
   371  003E1E  D027               	goto	l1048
   372                           
   373                           ;main.c: 206: LATAbits.LATA1 = 0;
   374  003E20  9289               	bcf	3977,1,c	;volatile
   375                           
   376                           ;main.c: 208: LATAbits.LATA0 = 1;
   377  003E22  8089               	bsf	3977,0,c	;volatile
   378                           
   379                           ;main.c: 210: spiTransfer('r',0x61,1);
   380  003E24  0E61               	movlw	97
   381  003E26  6E25               	movwf	spiTransfer@command,c
   382  003E28  0E00               	movlw	0
   383  003E2A  6E27               	movwf	spiTransfer@len+1,c
   384  003E2C  0E01               	movlw	1
   385  003E2E  6E26               	movwf	spiTransfer@len,c
   386  003E30  0E72               	movlw	114
   387  003E32  EC95  F01F         	call	_spiTransfer
   388                           
   389                           ;main.c: 213: dataBufOut[0] = 0b01110000;
   390  003E36  0E70               	movlw	112
   391  003E38  0100               	movlb	0	; () banked
   392  003E3A  6F60               	movwf	_dataBufOut& (0+255),b
   393                           
   394                           ; BSR set to: 0
   395                           ;main.c: 214: spiTransfer('w',0x07,1);
   396  003E3C  0E07               	movlw	7
   397  003E3E  6E25               	movwf	spiTransfer@command,c
   398  003E40  0E00               	movlw	0
   399  003E42  6E27               	movwf	spiTransfer@len+1,c
   400  003E44  0E01               	movlw	1
   401  003E46  6E26               	movwf	spiTransfer@len,c
   402  003E48  0E77               	movlw	119
   403  003E4A  EC95  F01F         	call	_spiTransfer
   404                           
   405                           ;main.c: 216: delay10ms(80);
   406  003E4E  0E00               	movlw	0
   407  003E50  6E24               	movwf	delay10ms@ms_multi+1,c
   408  003E52  0E50               	movlw	80
   409  003E54  6E23               	movwf	delay10ms@ms_multi,c
   410  003E56  EC0E  F01E         	call	_delay10ms	;wreg free
   411                           
   412                           ;main.c: 218: spiTransfer('n',0xE2,0);
   413  003E5A  0EE2               	movlw	226
   414  003E5C  6E25               	movwf	spiTransfer@command,c
   415  003E5E  0E00               	movlw	0
   416  003E60  6E27               	movwf	spiTransfer@len+1,c
   417  003E62  0E00               	movlw	0
   418  003E64  6E26               	movwf	spiTransfer@len,c
   419  003E66  0E6E               	movlw	110
   420  003E68  EC95  F01F         	call	_spiTransfer
   421                           
   422                           ;main.c: 220: LATAbits.LATA0 = 0;
   423  003E6C  9089               	bcf	3977,0,c	;volatile
   424  003E6E                     l1048:
   425                           
   426                           ;main.c: 221: }
   427                           ;main.c: 223: delay10ms(20);
   428  003E6E  0E00               	movlw	0
   429  003E70  6E24               	movwf	delay10ms@ms_multi+1,c
   430  003E72  0E14               	movlw	20
   431  003E74  6E23               	movwf	delay10ms@ms_multi,c
   432  003E76  EC0E  F01E         	call	_delay10ms	;wreg free
   433                           
   434                           ;main.c: 224: }
   435  003E7A  D7C7               	goto	l1026
   436  003E7C                     __end_of_main:
   437                           	opt stack 0
   438                           tblptru	equ	0xFF8
   439                           tblptrh	equ	0xFF7
   440                           tblptrl	equ	0xFF6
   441                           tablat	equ	0xFF5
   442                           postinc0	equ	0xFEE
   443                           wreg	equ	0xFE8
   444                           postdec1	equ	0xFE5
   445                           fsr1l	equ	0xFE1
   446                           status	equ	0xFD8
   447                           
   448 ;; *************** function _spiConfig_1 *****************
   449 ;; Defined at:
   450 ;;		line 244 in file "main.c"
   451 ;; Parameters:    Size  Location     Type
   452 ;;		None
   453 ;; Auto vars:     Size  Location     Type
   454 ;;		None
   455 ;; Return value:  Size  Location     Type
   456 ;;		None               void
   457 ;; Registers used:
   458 ;;		wreg, status,2
   459 ;; Tracked objects:
   460 ;;		On entry : 0/0
   461 ;;		On exit  : 0/0
   462 ;;		Unchanged: 0/0
   463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   464 ;;      Params:         0       0       0       0
   465 ;;      Locals:         0       0       0       0
   466 ;;      Temps:          0       0       0       0
   467 ;;      Totals:         0       0       0       0
   468 ;;Total ram usage:        0 bytes
   469 ;; Hardware stack levels used:    1
   470 ;; This function calls:
   471 ;;		Nothing
   472 ;; This function is called by:
   473 ;;		_main
   474 ;; This function uses a non-reentrant model
   475 ;;
   476                           
   477                           	psect	text1
   478  003BC8                     __ptext1:
   479                           	opt stack 0
   480  003BC8                     _spiConfig_1:
   481                           	opt stack 30
   482                           
   483                           ;main.c: 245: SSP1CON1bits.CKP = 0;
   484                           
   485                           ;incstack = 0
   486  003BC8  98C6               	bcf	4038,4,c	;volatile
   487                           
   488                           ;main.c: 246: SSP1STATbits.CKE = 1;
   489  003BCA  8CC7               	bsf	4039,6,c	;volatile
   490                           
   491                           ;main.c: 247: SSP1STATbits.SMP = 1;
   492  003BCC  8EC7               	bsf	4039,7,c	;volatile
   493                           
   494                           ;main.c: 248: SSP1ADD = 0b00111111;
   495  003BCE  0E3F               	movlw	63
   496  003BD0  6EC8               	movwf	4040,c	;volatile
   497                           
   498                           ;main.c: 249: SSP1CON1bits.SSPM = 0b1010;
   499  003BD2  50C6               	movf	4038,w,c	;volatile
   500  003BD4  0BF0               	andlw	-16
   501  003BD6  090A               	iorlw	10
   502  003BD8  6EC6               	movwf	4038,c	;volatile
   503                           
   504                           ;main.c: 251: SSP1CON1bits.SSPEN = 1;
   505  003BDA  8AC6               	bsf	4038,5,c	;volatile
   506                           
   507                           ;main.c: 252: LATAbits.LATA2 = 1;
   508  003BDC  8489               	bsf	3977,2,c	;volatile
   509  003BDE  0012               	return	
   510  003BE0                     __end_of_spiConfig_1:
   511                           	opt stack 0
   512                           tblptru	equ	0xFF8
   513                           tblptrh	equ	0xFF7
   514                           tblptrl	equ	0xFF6
   515                           tablat	equ	0xFF5
   516                           postinc0	equ	0xFEE
   517                           wreg	equ	0xFE8
   518                           postdec1	equ	0xFE5
   519                           fsr1l	equ	0xFE1
   520                           status	equ	0xFD8
   521                           
   522 ;; *************** function _portConfig *****************
   523 ;; Defined at:
   524 ;;		line 230 in file "main.c"
   525 ;; Parameters:    Size  Location     Type
   526 ;;		None
   527 ;; Auto vars:     Size  Location     Type
   528 ;;		None
   529 ;; Return value:  Size  Location     Type
   530 ;;		None               void
   531 ;; Registers used:
   532 ;;		wreg, status,2
   533 ;; Tracked objects:
   534 ;;		On entry : 0/0
   535 ;;		On exit  : 0/0
   536 ;;		Unchanged: 0/0
   537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   538 ;;      Params:         0       0       0       0
   539 ;;      Locals:         0       0       0       0
   540 ;;      Temps:          0       0       0       0
   541 ;;      Totals:         0       0       0       0
   542 ;;Total ram usage:        0 bytes
   543 ;; Hardware stack levels used:    1
   544 ;; This function calls:
   545 ;;		Nothing
   546 ;; This function is called by:
   547 ;;		_main
   548 ;; This function uses a non-reentrant model
   549 ;;
   550                           
   551                           	psect	text2
   552  003BE0                     __ptext2:
   553                           	opt stack 0
   554  003BE0                     _portConfig:
   555                           	opt stack 30
   556                           
   557                           ;main.c: 231: TRISA = 0b00001000;
   558                           
   559                           ;incstack = 0
   560  003BE0  0E08               	movlw	8
   561  003BE2  6E92               	movwf	3986,c	;volatile
   562                           
   563                           ;main.c: 232: TRISB = 0b00000000;
   564  003BE4  0E00               	movlw	0
   565  003BE6  6E93               	movwf	3987,c	;volatile
   566                           
   567                           ;main.c: 233: TRISC = 0b00010000;
   568  003BE8  0E10               	movlw	16
   569  003BEA  6E94               	movwf	3988,c	;volatile
   570                           
   571                           ;main.c: 235: LATA = 0b00000110;
   572  003BEC  0E06               	movlw	6
   573  003BEE  6E89               	movwf	3977,c	;volatile
   574                           
   575                           ;main.c: 236: LATB = 0x00;
   576  003BF0  0E00               	movlw	0
   577  003BF2  6E8A               	movwf	3978,c	;volatile
   578                           
   579                           ;main.c: 237: LATC = 0x00;
   580  003BF4  0E00               	movlw	0
   581  003BF6  6E8B               	movwf	3979,c	;volatile
   582  003BF8  0012               	return	
   583  003BFA                     __end_of_portConfig:
   584                           	opt stack 0
   585                           tblptru	equ	0xFF8
   586                           tblptrh	equ	0xFF7
   587                           tblptrl	equ	0xFF6
   588                           tablat	equ	0xFF5
   589                           postinc0	equ	0xFEE
   590                           wreg	equ	0xFE8
   591                           postdec1	equ	0xFE5
   592                           fsr1l	equ	0xFE1
   593                           status	equ	0xFD8
   594                           
   595 ;; *************** function _nrfGetStatus *****************
   596 ;; Defined at:
   597 ;;		line 301 in file "main.c"
   598 ;; Parameters:    Size  Location     Type
   599 ;;		None
   600 ;; Auto vars:     Size  Location     Type
   601 ;;		None
   602 ;; Return value:  Size  Location     Type
   603 ;;		None               void
   604 ;; Registers used:
   605 ;;		wreg, status,2, status,0, cstack
   606 ;; Tracked objects:
   607 ;;		On entry : 0/0
   608 ;;		On exit  : 0/0
   609 ;;		Unchanged: 0/0
   610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   611 ;;      Params:         0       0       0       0
   612 ;;      Locals:         0       0       0       0
   613 ;;      Temps:          0       0       0       0
   614 ;;      Totals:         0       0       0       0
   615 ;;Total ram usage:        0 bytes
   616 ;; Hardware stack levels used:    1
   617 ;; Hardware stack levels required when called:    1
   618 ;; This function calls:
   619 ;;		_setCSN
   620 ;;		_spiTransferByte
   621 ;; This function is called by:
   622 ;;		_main
   623 ;; This function uses a non-reentrant model
   624 ;;
   625                           
   626                           	psect	text3
   627  003BFA                     __ptext3:
   628                           	opt stack 0
   629  003BFA                     _nrfGetStatus:
   630                           	opt stack 29
   631                           
   632                           ;main.c: 303: setCSN(0);
   633                           
   634                           ;incstack = 0
   635  003BFA  0E00               	movlw	0
   636  003BFC  6E24               	movwf	setCSN@level+1,c
   637  003BFE  0E00               	movlw	0
   638  003C00  6E23               	movwf	setCSN@level,c
   639  003C02  ECD8  F01D         	call	_setCSN	;wreg free
   640                           
   641                           ;main.c: 305: nrfSTATUS = spiTransferByte(0xFF);
   642  003C06  0EFF               	movlw	255
   643  003C08  ECD0  F01D         	call	_spiTransferByte
   644  003C0C  6E22               	movwf	_nrfSTATUS,c
   645                           
   646                           ;main.c: 307: setCSN(1);
   647  003C0E  0E00               	movlw	0
   648  003C10  6E24               	movwf	setCSN@level+1,c
   649  003C12  0E01               	movlw	1
   650  003C14  6E23               	movwf	setCSN@level,c
   651  003C16  ECD8  F01D         	call	_setCSN	;wreg free
   652  003C1A  0012               	return	
   653  003C1C                     __end_of_nrfGetStatus:
   654                           	opt stack 0
   655                           tblptru	equ	0xFF8
   656                           tblptrh	equ	0xFF7
   657                           tblptrl	equ	0xFF6
   658                           tablat	equ	0xFF5
   659                           postinc0	equ	0xFEE
   660                           wreg	equ	0xFE8
   661                           postdec1	equ	0xFE5
   662                           fsr1l	equ	0xFE1
   663                           status	equ	0xFD8
   664                           
   665 ;; *************** function _nrfConfig *****************
   666 ;; Defined at:
   667 ;;		line 258 in file "main.c"
   668 ;; Parameters:    Size  Location     Type
   669 ;;		None
   670 ;; Auto vars:     Size  Location     Type
   671 ;;		None
   672 ;; Return value:  Size  Location     Type
   673 ;;		None               void
   674 ;; Registers used:
   675 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   676 ;; Tracked objects:
   677 ;;		On entry : 0/0
   678 ;;		On exit  : 0/0
   679 ;;		Unchanged: 0/0
   680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   681 ;;      Params:         0       0       0       0
   682 ;;      Locals:         0       0       0       0
   683 ;;      Temps:          0       0       0       0
   684 ;;      Totals:         0       0       0       0
   685 ;;Total ram usage:        0 bytes
   686 ;; Hardware stack levels used:    1
   687 ;; Hardware stack levels required when called:    2
   688 ;; This function calls:
   689 ;;		_nrfConfigReg
   690 ;;		_nrfSetRXAddr
   691 ;;		_nrfSetTXAddr
   692 ;;		_spiTransfer
   693 ;; This function is called by:
   694 ;;		_main
   695 ;; This function uses a non-reentrant model
   696 ;;
   697                           
   698                           	psect	text4
   699  003E7C                     __ptext4:
   700                           	opt stack 0
   701  003E7C                     _nrfConfig:
   702                           	opt stack 28
   703                           
   704                           ;main.c: 261: nrfConfigReg('w',0x00,CONFIG_CURR);
   705                           
   706                           ;incstack = 0
   707  003E7C  0E00               	movlw	0
   708  003E7E  6E25               	movwf	nrfConfigReg@command,c
   709  003E80  C033  F026         	movff	_CONFIG_CURR,nrfConfigReg@data
   710  003E84  0E77               	movlw	119
   711  003E86  EC4B  F01E         	call	_nrfConfigReg
   712                           
   713                           ;main.c: 263: nrfConfigReg('w',0x01,EN_AA_CURR);
   714  003E8A  0E01               	movlw	1
   715  003E8C  6E25               	movwf	nrfConfigReg@command,c
   716  003E8E  C021  F026         	movff	_EN_AA_CURR,nrfConfigReg@data
   717  003E92  0E77               	movlw	119
   718  003E94  EC4B  F01E         	call	_nrfConfigReg
   719                           
   720                           ;main.c: 265: nrfConfigReg('w',0x02,EN_RXADDR_CURR);
   721  003E98  0E02               	movlw	2
   722  003E9A  6E25               	movwf	nrfConfigReg@command,c
   723  003E9C  C034  F026         	movff	_EN_RXADDR_CURR,nrfConfigReg@data
   724  003EA0  0E77               	movlw	119
   725  003EA2  EC4B  F01E         	call	_nrfConfigReg
   726                           
   727                           ;main.c: 267: nrfConfigReg('w',0x03,SETUP_AW_CURR);
   728  003EA6  0E03               	movlw	3
   729  003EA8  6E25               	movwf	nrfConfigReg@command,c
   730  003EAA  C038  F026         	movff	_SETUP_AW_CURR,nrfConfigReg@data
   731  003EAE  0E77               	movlw	119
   732  003EB0  EC4B  F01E         	call	_nrfConfigReg
   733                           
   734                           ;main.c: 269: nrfConfigReg('w',0x04,SETUP_RETR_CURR);
   735  003EB4  0E04               	movlw	4
   736  003EB6  6E25               	movwf	nrfConfigReg@command,c
   737  003EB8  C039  F026         	movff	_SETUP_RETR_CURR,nrfConfigReg@data
   738  003EBC  0E77               	movlw	119
   739  003EBE  EC4B  F01E         	call	_nrfConfigReg
   740                           
   741                           ;main.c: 271: nrfConfigReg('w',0x05,RF_CH_CURR);
   742  003EC2  0E05               	movlw	5
   743  003EC4  6E25               	movwf	nrfConfigReg@command,c
   744  003EC6  C035  F026         	movff	_RF_CH_CURR,nrfConfigReg@data
   745  003ECA  0E77               	movlw	119
   746  003ECC  EC4B  F01E         	call	_nrfConfigReg
   747                           
   748                           ;main.c: 273: nrfConfigReg('w',0x06,RF_SETUP_CURR);
   749  003ED0  0E06               	movlw	6
   750  003ED2  6E25               	movwf	nrfConfigReg@command,c
   751  003ED4  C036  F026         	movff	_RF_SETUP_CURR,nrfConfigReg@data
   752  003ED8  0E77               	movlw	119
   753  003EDA  EC4B  F01E         	call	_nrfConfigReg
   754                           
   755                           ;main.c: 275: nrfSetRXAddr(0x0A,RX_ADDRESS,4);
   756  003EDE  0E00               	movlw	high _RX_ADDRESS
   757  003EE0  6E26               	movwf	nrfSetRXAddr@addr+1,c
   758  003EE2  0E3A               	movlw	low _RX_ADDRESS
   759  003EE4  6E25               	movwf	nrfSetRXAddr@addr,c
   760  003EE6  0E00               	movlw	0
   761  003EE8  6E28               	movwf	nrfSetRXAddr@len+1,c
   762  003EEA  0E04               	movlw	4
   763  003EEC  6E27               	movwf	nrfSetRXAddr@len,c
   764  003EEE  0E0A               	movlw	10
   765  003EF0  ECB6  F01E         	call	_nrfSetRXAddr
   766                           
   767                           ;main.c: 277: nrfSetTXAddr(TX_ADDRESS,4);
   768  003EF4  0E00               	movlw	high _TX_ADDRESS
   769  003EF6  6E26               	movwf	nrfSetTXAddr@addr+1,c
   770  003EF8  0E3E               	movlw	low _TX_ADDRESS
   771  003EFA  6E25               	movwf	nrfSetTXAddr@addr,c
   772  003EFC  0E00               	movlw	0
   773  003EFE  6E28               	movwf	nrfSetTXAddr@len+1,c
   774  003F00  0E04               	movlw	4
   775  003F02  6E27               	movwf	nrfSetTXAddr@len,c
   776  003F04  EC76  F01E         	call	_nrfSetTXAddr	;wreg free
   777                           
   778                           ;main.c: 279: nrfConfigReg('w',0x11,RX_PW_P0_CURR);
   779  003F08  0E11               	movlw	17
   780  003F0A  6E25               	movwf	nrfConfigReg@command,c
   781  003F0C  C037  F026         	movff	_RX_PW_P0_CURR,nrfConfigReg@data
   782  003F10  0E77               	movlw	119
   783  003F12  EC4B  F01E         	call	_nrfConfigReg
   784                           
   785                           ;main.c: 281: spiTransfer('n',0xE1,0);
   786  003F16  0EE1               	movlw	225
   787  003F18  6E25               	movwf	spiTransfer@command,c
   788  003F1A  0E00               	movlw	0
   789  003F1C  6E27               	movwf	spiTransfer@len+1,c
   790  003F1E  0E00               	movlw	0
   791  003F20  6E26               	movwf	spiTransfer@len,c
   792  003F22  0E6E               	movlw	110
   793  003F24  EC95  F01F         	call	_spiTransfer
   794  003F28  0012               	return	
   795  003F2A                     __end_of_nrfConfig:
   796                           	opt stack 0
   797                           tblptru	equ	0xFF8
   798                           tblptrh	equ	0xFF7
   799                           tblptrl	equ	0xFF6
   800                           tablat	equ	0xFF5
   801                           postinc0	equ	0xFEE
   802                           wreg	equ	0xFE8
   803                           postdec1	equ	0xFE5
   804                           fsr1l	equ	0xFE1
   805                           status	equ	0xFD8
   806                           
   807 ;; *************** function _spiTransfer *****************
   808 ;; Defined at:
   809 ;;		line 389 in file "main.c"
   810 ;; Parameters:    Size  Location     Type
   811 ;;  wrn             1    wreg     unsigned char 
   812 ;;  command         1    2[COMRAM] unsigned char 
   813 ;;  len             2    3[COMRAM] int 
   814 ;; Auto vars:     Size  Location     Type
   815 ;;  wrn             1   13[COMRAM] unsigned char 
   816 ;;  i               2   14[COMRAM] int 
   817 ;; Return value:  Size  Location     Type
   818 ;;		None               void
   819 ;; Registers used:
   820 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   821 ;; Tracked objects:
   822 ;;		On entry : 0/0
   823 ;;		On exit  : 0/0
   824 ;;		Unchanged: 0/0
   825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   826 ;;      Params:         3       0       0       0
   827 ;;      Locals:         3       0       0       0
   828 ;;      Temps:          8       0       0       0
   829 ;;      Totals:        14       0       0       0
   830 ;;Total ram usage:       14 bytes
   831 ;; Hardware stack levels used:    1
   832 ;; Hardware stack levels required when called:    1
   833 ;; This function calls:
   834 ;;		_setCSN
   835 ;;		_spiTransferByte
   836 ;; This function is called by:
   837 ;;		_main
   838 ;;		_nrfConfig
   839 ;; This function uses a non-reentrant model
   840 ;;
   841                           
   842                           	psect	text5
   843  003F2A                     __ptext5:
   844                           	opt stack 0
   845  003F2A                     _spiTransfer:
   846                           	opt stack 29
   847                           
   848                           ;incstack = 0
   849                           ;spiTransfer@wrn stored from wreg
   850  003F2A  6E30               	movwf	spiTransfer@wrn,c
   851                           
   852                           ;main.c: 391: setCSN(0);
   853  003F2C  0E00               	movlw	0
   854  003F2E  6E24               	movwf	setCSN@level+1,c
   855  003F30  0E00               	movlw	0
   856  003F32  6E23               	movwf	setCSN@level,c
   857  003F34  ECD8  F01D         	call	_setCSN	;wreg free
   858                           
   859                           ;main.c: 393: if (wrn == 'w') {
   860  003F38  5030               	movf	spiTransfer@wrn,w,c
   861  003F3A  0A77               	xorlw	119
   862  003F3C  A4D8               	btfss	status,2,c
   863  003F3E  D005               	goto	l904
   864                           
   865                           ;main.c: 394: spiTransferByte(0x20|command);
   866  003F40  5025               	movf	spiTransfer@command,w,c
   867  003F42  0920               	iorlw	32
   868  003F44  ECD0  F01D         	call	_spiTransferByte
   869                           
   870                           ;main.c: 395: } else if (wrn == 'r') {
   871  003F48  D00F               	goto	l912
   872  003F4A                     l904:
   873  003F4A  5030               	movf	spiTransfer@wrn,w,c
   874  003F4C  0A72               	xorlw	114
   875  003F4E  A4D8               	btfss	status,2,c
   876  003F50  D004               	goto	l908
   877                           
   878                           ;main.c: 396: spiTransferByte(0x00|command);
   879  003F52  5025               	movf	spiTransfer@command,w,c
   880  003F54  ECD0  F01D         	call	_spiTransferByte
   881                           
   882                           ;main.c: 397: } else if(wrn == 'n') {
   883  003F58  D007               	goto	l912
   884  003F5A                     l908:
   885  003F5A  5030               	movf	spiTransfer@wrn,w,c
   886  003F5C  0A6E               	xorlw	110
   887  003F5E  A4D8               	btfss	status,2,c
   888  003F60  D003               	goto	l912
   889                           
   890                           ;main.c: 398: spiTransferByte(command);
   891  003F62  5025               	movf	spiTransfer@command,w,c
   892  003F64  ECD0  F01D         	call	_spiTransferByte
   893  003F68                     l912:
   894                           
   895                           ;main.c: 399: }
   896                           ;main.c: 400: _delay((unsigned long)((3)*(64000000/4000000.0)));
   897  003F68  0E10               	movlw	16
   898  003F6A                     u307:
   899  003F6A  2EE8               	decfsz	wreg,f,c
   900  003F6C  D7FE               	goto	u307
   901                           
   902                           ;main.c: 402: if (len != 0) {
   903  003F6E  5027               	movf	spiTransfer@len+1,w,c
   904  003F70  1026               	iorwf	spiTransfer@len,w,c
   905  003F72  B4D8               	btfsc	status,2,c
   906  003F74  D03E               	goto	l926
   907                           
   908                           ;main.c: 403: for (int i=1;i<=len;i++) {
   909  003F76  0E00               	movlw	0
   910  003F78  6E32               	movwf	spiTransfer@i+1,c
   911  003F7A  0E01               	movlw	1
   912  003F7C  6E31               	movwf	spiTransfer@i,c
   913  003F7E  D02F               	goto	l924
   914  003F80                     l918:
   915                           
   916                           ;main.c: 404: dataBufIn[i-1] = spiTransferByte(dataBufOut[i-1]);
   917  003F80  0EFF               	movlw	255
   918  003F82  6E28               	movwf	??_spiTransfer& (0+255),c
   919  003F84  0EFF               	movlw	255
   920  003F86  6E29               	movwf	(??_spiTransfer+1)& (0+255),c
   921  003F88  C031  F02A         	movff	spiTransfer@i,??_spiTransfer+2
   922  003F8C  C032  F02B         	movff	spiTransfer@i+1,??_spiTransfer+3
   923  003F90  5028               	movf	??_spiTransfer,w,c
   924  003F92  262A               	addwf	??_spiTransfer+2,f,c
   925  003F94  5029               	movf	??_spiTransfer+1,w,c
   926  003F96  222B               	addwfc	??_spiTransfer+3,f,c
   927  003F98  0E01               	movlw	low _dataBufIn
   928  003F9A  242A               	addwf	??_spiTransfer+2,w,c
   929  003F9C  6ED9               	movwf	fsr2l,c
   930  003F9E  0E00               	movlw	high _dataBufIn
   931  003FA0  202B               	addwfc	??_spiTransfer+3,w,c
   932  003FA2  6EDA               	movwf	fsr2h,c
   933  003FA4  0EFF               	movlw	255
   934  003FA6  6E2C               	movwf	(??_spiTransfer+4)& (0+255),c
   935  003FA8  0EFF               	movlw	255
   936  003FAA  6E2D               	movwf	(??_spiTransfer+5)& (0+255),c
   937  003FAC  C031  F02E         	movff	spiTransfer@i,??_spiTransfer+6
   938  003FB0  C032  F02F         	movff	spiTransfer@i+1,??_spiTransfer+7
   939  003FB4  502C               	movf	??_spiTransfer+4,w,c
   940  003FB6  262E               	addwf	??_spiTransfer+6,f,c
   941  003FB8  502D               	movf	??_spiTransfer+5,w,c
   942  003FBA  222F               	addwfc	??_spiTransfer+7,f,c
   943  003FBC  0100               	movlb	0	; () banked
   944  003FBE  0E60               	movlw	low _dataBufOut
   945  003FC0  242E               	addwf	??_spiTransfer+6,w,c
   946  003FC2  6EE1               	movwf	fsr1l,c
   947  003FC4  0100               	movlb	0	; () banked
   948  003FC6  0E00               	movlw	high _dataBufOut
   949  003FC8  202F               	addwfc	??_spiTransfer+7,w,c
   950  003FCA  6EE2               	movwf	fsr1h,c
   951  003FCC  50E7               	movf	indf1,w,c
   952  003FCE  ECD0  F01D         	call	_spiTransferByte
   953  003FD2  6EDF               	movwf	indf2,c
   954                           
   955                           ;main.c: 405: _delay((unsigned long)((3)*(64000000/4000000.0)));
   956  003FD4  0E10               	movlw	16
   957  003FD6                     u317:
   958  003FD6  2EE8               	decfsz	wreg,f,c
   959  003FD8  D7FE               	goto	u317
   960  003FDA  4A31               	infsnz	spiTransfer@i,f,c
   961  003FDC  2A32               	incf	spiTransfer@i+1,f,c
   962  003FDE                     l924:
   963  003FDE  5027               	movf	spiTransfer@len+1,w,c
   964  003FE0  0A80               	xorlw	128
   965  003FE2  6E28               	movwf	??_spiTransfer& (0+255),c
   966  003FE4  5031               	movf	spiTransfer@i,w,c
   967  003FE6  5C26               	subwf	spiTransfer@len,w,c
   968  003FE8  5032               	movf	spiTransfer@i+1,w,c
   969  003FEA  0A80               	xorlw	128
   970  003FEC  5828               	subwfb	??_spiTransfer& (0+255),w,c
   971  003FEE  B0D8               	btfsc	status,0,c
   972  003FF0  D7C7               	goto	l918
   973  003FF2                     l926:
   974                           
   975                           ;main.c: 406: }
   976                           ;main.c: 407: }
   977                           ;main.c: 409: setCSN(1);
   978  003FF2  0E00               	movlw	0
   979  003FF4  6E24               	movwf	setCSN@level+1,c
   980  003FF6  0E01               	movlw	1
   981  003FF8  6E23               	movwf	setCSN@level,c
   982  003FFA  ECD8  F01D         	call	_setCSN	;wreg free
   983  003FFE  0012               	return	
   984  004000                     __end_of_spiTransfer:
   985                           	opt stack 0
   986                           tblptru	equ	0xFF8
   987                           tblptrh	equ	0xFF7
   988                           tblptrl	equ	0xFF6
   989                           tablat	equ	0xFF5
   990                           postinc0	equ	0xFEE
   991                           wreg	equ	0xFE8
   992                           indf1	equ	0xFE7
   993                           postdec1	equ	0xFE5
   994                           fsr1h	equ	0xFE2
   995                           fsr1l	equ	0xFE1
   996                           indf2	equ	0xFDF
   997                           fsr2h	equ	0xFDA
   998                           fsr2l	equ	0xFD9
   999                           status	equ	0xFD8
  1000                           
  1001 ;; *************** function _nrfSetTXAddr *****************
  1002 ;; Defined at:
  1003 ;;		line 337 in file "main.c"
  1004 ;; Parameters:    Size  Location     Type
  1005 ;;  addr            2    2[COMRAM] PTR unsigned char 
  1006 ;;		 -> TX_ADDRESS(4), 
  1007 ;;  len             2    4[COMRAM] int 
  1008 ;; Auto vars:     Size  Location     Type
  1009 ;;  i               2   10[COMRAM] int 
  1010 ;; Return value:  Size  Location     Type
  1011 ;;		None               void
  1012 ;; Registers used:
  1013 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1014 ;; Tracked objects:
  1015 ;;		On entry : 0/0
  1016 ;;		On exit  : 0/0
  1017 ;;		Unchanged: 0/0
  1018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1019 ;;      Params:         4       0       0       0
  1020 ;;      Locals:         2       0       0       0
  1021 ;;      Temps:          4       0       0       0
  1022 ;;      Totals:        10       0       0       0
  1023 ;;Total ram usage:       10 bytes
  1024 ;; Hardware stack levels used:    1
  1025 ;; Hardware stack levels required when called:    1
  1026 ;; This function calls:
  1027 ;;		_setCSN
  1028 ;;		_spiTransferByte
  1029 ;; This function is called by:
  1030 ;;		_nrfConfig
  1031 ;; This function uses a non-reentrant model
  1032 ;;
  1033                           
  1034                           	psect	text6
  1035  003CEC                     __ptext6:
  1036                           	opt stack 0
  1037  003CEC                     _nrfSetTXAddr:
  1038                           	opt stack 28
  1039                           
  1040                           ;main.c: 339: setCSN(0);
  1041                           
  1042                           ;incstack = 0
  1043  003CEC  0E00               	movlw	0
  1044  003CEE  6E24               	movwf	setCSN@level+1,c
  1045  003CF0  0E00               	movlw	0
  1046  003CF2  6E23               	movwf	setCSN@level,c
  1047  003CF4  ECD8  F01D         	call	_setCSN	;wreg free
  1048                           
  1049                           ;main.c: 341: spiTransferByte(0x20|0x10);
  1050  003CF8  0E30               	movlw	48
  1051  003CFA  ECD0  F01D         	call	_spiTransferByte
  1052                           
  1053                           ;main.c: 343: _delay((unsigned long)((3)*(64000000/4000000.0)));
  1054  003CFE  0E10               	movlw	16
  1055  003D00                     u327:
  1056  003D00  2EE8               	decfsz	wreg,f,c
  1057  003D02  D7FE               	goto	u327
  1058                           
  1059                           ;main.c: 345: if (len != 0) {
  1060  003D04  5028               	movf	nrfSetTXAddr@len+1,w,c
  1061  003D06  1027               	iorwf	nrfSetTXAddr@len,w,c
  1062  003D08  B4D8               	btfsc	status,2,c
  1063  003D0A  D029               	goto	l986
  1064                           
  1065                           ;main.c: 347: for (int i=1;i<=len;i++) {
  1066  003D0C  0E00               	movlw	0
  1067  003D0E  6E2E               	movwf	nrfSetTXAddr@i+1,c
  1068  003D10  0E01               	movlw	1
  1069  003D12  6E2D               	movwf	nrfSetTXAddr@i,c
  1070  003D14  D01A               	goto	l984
  1071  003D16                     l978:
  1072                           
  1073                           ;main.c: 348: spiTransferByte(addr[i-1]);
  1074  003D16  0EFF               	movlw	255
  1075  003D18  6E29               	movwf	??_nrfSetTXAddr& (0+255),c
  1076  003D1A  0EFF               	movlw	255
  1077  003D1C  6E2A               	movwf	(??_nrfSetTXAddr+1)& (0+255),c
  1078  003D1E  C02D  F02B         	movff	nrfSetTXAddr@i,??_nrfSetTXAddr+2
  1079  003D22  C02E  F02C         	movff	nrfSetTXAddr@i+1,??_nrfSetTXAddr+3
  1080  003D26  5029               	movf	??_nrfSetTXAddr,w,c
  1081  003D28  262B               	addwf	??_nrfSetTXAddr+2,f,c
  1082  003D2A  502A               	movf	??_nrfSetTXAddr+1,w,c
  1083  003D2C  222C               	addwfc	??_nrfSetTXAddr+3,f,c
  1084  003D2E  502B               	movf	??_nrfSetTXAddr+2,w,c
  1085  003D30  2425               	addwf	nrfSetTXAddr@addr,w,c
  1086  003D32  6ED9               	movwf	fsr2l,c
  1087  003D34  502C               	movf	??_nrfSetTXAddr+3,w,c
  1088  003D36  2026               	addwfc	nrfSetTXAddr@addr+1,w,c
  1089  003D38  6EDA               	movwf	fsr2h,c
  1090  003D3A  50DF               	movf	indf2,w,c
  1091  003D3C  ECD0  F01D         	call	_spiTransferByte
  1092                           
  1093                           ;main.c: 349: _delay((unsigned long)((3)*(64000000/4000000.0)));
  1094  003D40  0E10               	movlw	16
  1095  003D42                     u337:
  1096  003D42  2EE8               	decfsz	wreg,f,c
  1097  003D44  D7FE               	goto	u337
  1098  003D46  4A2D               	infsnz	nrfSetTXAddr@i,f,c
  1099  003D48  2A2E               	incf	nrfSetTXAddr@i+1,f,c
  1100  003D4A                     l984:
  1101  003D4A  5028               	movf	nrfSetTXAddr@len+1,w,c
  1102  003D4C  0A80               	xorlw	128
  1103  003D4E  6E29               	movwf	??_nrfSetTXAddr& (0+255),c
  1104  003D50  502D               	movf	nrfSetTXAddr@i,w,c
  1105  003D52  5C27               	subwf	nrfSetTXAddr@len,w,c
  1106  003D54  502E               	movf	nrfSetTXAddr@i+1,w,c
  1107  003D56  0A80               	xorlw	128
  1108  003D58  5829               	subwfb	??_nrfSetTXAddr& (0+255),w,c
  1109  003D5A  B0D8               	btfsc	status,0,c
  1110  003D5C  D7DC               	goto	l978
  1111  003D5E                     l986:
  1112                           
  1113                           ;main.c: 350: }
  1114                           ;main.c: 351: }
  1115                           ;main.c: 353: setCSN(1);
  1116  003D5E  0E00               	movlw	0
  1117  003D60  6E24               	movwf	setCSN@level+1,c
  1118  003D62  0E01               	movlw	1
  1119  003D64  6E23               	movwf	setCSN@level,c
  1120  003D66  ECD8  F01D         	call	_setCSN	;wreg free
  1121  003D6A  0012               	return	
  1122  003D6C                     __end_of_nrfSetTXAddr:
  1123                           	opt stack 0
  1124                           tblptru	equ	0xFF8
  1125                           tblptrh	equ	0xFF7
  1126                           tblptrl	equ	0xFF6
  1127                           tablat	equ	0xFF5
  1128                           postinc0	equ	0xFEE
  1129                           wreg	equ	0xFE8
  1130                           indf1	equ	0xFE7
  1131                           postdec1	equ	0xFE5
  1132                           fsr1h	equ	0xFE2
  1133                           fsr1l	equ	0xFE1
  1134                           indf2	equ	0xFDF
  1135                           fsr2h	equ	0xFDA
  1136                           fsr2l	equ	0xFD9
  1137                           status	equ	0xFD8
  1138                           
  1139 ;; *************** function _nrfSetRXAddr *****************
  1140 ;; Defined at:
  1141 ;;		line 362 in file "main.c"
  1142 ;; Parameters:    Size  Location     Type
  1143 ;;  pipe            1    wreg     unsigned char 
  1144 ;;  addr            2    2[COMRAM] PTR unsigned char 
  1145 ;;		 -> RX_ADDRESS(4), 
  1146 ;;  len             2    4[COMRAM] int 
  1147 ;; Auto vars:     Size  Location     Type
  1148 ;;  pipe            1   10[COMRAM] unsigned char 
  1149 ;;  i               2   11[COMRAM] int 
  1150 ;; Return value:  Size  Location     Type
  1151 ;;		None               void
  1152 ;; Registers used:
  1153 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1154 ;; Tracked objects:
  1155 ;;		On entry : 0/0
  1156 ;;		On exit  : 0/0
  1157 ;;		Unchanged: 0/0
  1158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1159 ;;      Params:         4       0       0       0
  1160 ;;      Locals:         3       0       0       0
  1161 ;;      Temps:          4       0       0       0
  1162 ;;      Totals:        11       0       0       0
  1163 ;;Total ram usage:       11 bytes
  1164 ;; Hardware stack levels used:    1
  1165 ;; Hardware stack levels required when called:    1
  1166 ;; This function calls:
  1167 ;;		_setCSN
  1168 ;;		_spiTransferByte
  1169 ;; This function is called by:
  1170 ;;		_nrfConfig
  1171 ;; This function uses a non-reentrant model
  1172 ;;
  1173                           
  1174                           	psect	text7
  1175  003D6C                     __ptext7:
  1176                           	opt stack 0
  1177  003D6C                     _nrfSetRXAddr:
  1178                           	opt stack 28
  1179                           
  1180                           ;incstack = 0
  1181                           ;nrfSetRXAddr@pipe stored from wreg
  1182  003D6C  6E2D               	movwf	nrfSetRXAddr@pipe,c
  1183                           
  1184                           ;main.c: 364: setCSN(0);
  1185  003D6E  0E00               	movlw	0
  1186  003D70  6E24               	movwf	setCSN@level+1,c
  1187  003D72  0E00               	movlw	0
  1188  003D74  6E23               	movwf	setCSN@level,c
  1189  003D76  ECD8  F01D         	call	_setCSN	;wreg free
  1190                           
  1191                           ;main.c: 366: spiTransferByte(0x20|pipe);
  1192  003D7A  502D               	movf	nrfSetRXAddr@pipe,w,c
  1193  003D7C  0920               	iorlw	32
  1194  003D7E  ECD0  F01D         	call	_spiTransferByte
  1195                           
  1196                           ;main.c: 368: _delay((unsigned long)((3)*(64000000/4000000.0)));
  1197  003D82  0E10               	movlw	16
  1198  003D84                     u347:
  1199  003D84  2EE8               	decfsz	wreg,f,c
  1200  003D86  D7FE               	goto	u347
  1201                           
  1202                           ;main.c: 370: if (len != 0) {
  1203  003D88  5028               	movf	nrfSetRXAddr@len+1,w,c
  1204  003D8A  1027               	iorwf	nrfSetRXAddr@len,w,c
  1205  003D8C  B4D8               	btfsc	status,2,c
  1206  003D8E  D029               	goto	l966
  1207                           
  1208                           ;main.c: 372: for (int i=1;i<=len;i++) {
  1209  003D90  0E00               	movlw	0
  1210  003D92  6E2F               	movwf	nrfSetRXAddr@i+1,c
  1211  003D94  0E01               	movlw	1
  1212  003D96  6E2E               	movwf	nrfSetRXAddr@i,c
  1213  003D98  D01A               	goto	l964
  1214  003D9A                     l958:
  1215                           
  1216                           ;main.c: 373: spiTransferByte(addr[i-1]);
  1217  003D9A  0EFF               	movlw	255
  1218  003D9C  6E29               	movwf	??_nrfSetRXAddr& (0+255),c
  1219  003D9E  0EFF               	movlw	255
  1220  003DA0  6E2A               	movwf	(??_nrfSetRXAddr+1)& (0+255),c
  1221  003DA2  C02E  F02B         	movff	nrfSetRXAddr@i,??_nrfSetRXAddr+2
  1222  003DA6  C02F  F02C         	movff	nrfSetRXAddr@i+1,??_nrfSetRXAddr+3
  1223  003DAA  5029               	movf	??_nrfSetRXAddr,w,c
  1224  003DAC  262B               	addwf	??_nrfSetRXAddr+2,f,c
  1225  003DAE  502A               	movf	??_nrfSetRXAddr+1,w,c
  1226  003DB0  222C               	addwfc	??_nrfSetRXAddr+3,f,c
  1227  003DB2  502B               	movf	??_nrfSetRXAddr+2,w,c
  1228  003DB4  2425               	addwf	nrfSetRXAddr@addr,w,c
  1229  003DB6  6ED9               	movwf	fsr2l,c
  1230  003DB8  502C               	movf	??_nrfSetRXAddr+3,w,c
  1231  003DBA  2026               	addwfc	nrfSetRXAddr@addr+1,w,c
  1232  003DBC  6EDA               	movwf	fsr2h,c
  1233  003DBE  50DF               	movf	indf2,w,c
  1234  003DC0  ECD0  F01D         	call	_spiTransferByte
  1235                           
  1236                           ;main.c: 374: _delay((unsigned long)((3)*(64000000/4000000.0)));
  1237  003DC4  0E10               	movlw	16
  1238  003DC6                     u357:
  1239  003DC6  2EE8               	decfsz	wreg,f,c
  1240  003DC8  D7FE               	goto	u357
  1241  003DCA  4A2E               	infsnz	nrfSetRXAddr@i,f,c
  1242  003DCC  2A2F               	incf	nrfSetRXAddr@i+1,f,c
  1243  003DCE                     l964:
  1244  003DCE  5028               	movf	nrfSetRXAddr@len+1,w,c
  1245  003DD0  0A80               	xorlw	128
  1246  003DD2  6E29               	movwf	??_nrfSetRXAddr& (0+255),c
  1247  003DD4  502E               	movf	nrfSetRXAddr@i,w,c
  1248  003DD6  5C27               	subwf	nrfSetRXAddr@len,w,c
  1249  003DD8  502F               	movf	nrfSetRXAddr@i+1,w,c
  1250  003DDA  0A80               	xorlw	128
  1251  003DDC  5829               	subwfb	??_nrfSetRXAddr& (0+255),w,c
  1252  003DDE  B0D8               	btfsc	status,0,c
  1253  003DE0  D7DC               	goto	l958
  1254  003DE2                     l966:
  1255                           
  1256                           ;main.c: 375: }
  1257                           ;main.c: 376: }
  1258                           ;main.c: 378: setCSN(1);
  1259  003DE2  0E00               	movlw	0
  1260  003DE4  6E24               	movwf	setCSN@level+1,c
  1261  003DE6  0E01               	movlw	1
  1262  003DE8  6E23               	movwf	setCSN@level,c
  1263  003DEA  ECD8  F01D         	call	_setCSN	;wreg free
  1264  003DEE  0012               	return	
  1265  003DF0                     __end_of_nrfSetRXAddr:
  1266                           	opt stack 0
  1267                           tblptru	equ	0xFF8
  1268                           tblptrh	equ	0xFF7
  1269                           tblptrl	equ	0xFF6
  1270                           tablat	equ	0xFF5
  1271                           postinc0	equ	0xFEE
  1272                           wreg	equ	0xFE8
  1273                           indf1	equ	0xFE7
  1274                           postdec1	equ	0xFE5
  1275                           fsr1h	equ	0xFE2
  1276                           fsr1l	equ	0xFE1
  1277                           indf2	equ	0xFDF
  1278                           fsr2h	equ	0xFDA
  1279                           fsr2l	equ	0xFD9
  1280                           status	equ	0xFD8
  1281                           
  1282 ;; *************** function _nrfConfigReg *****************
  1283 ;; Defined at:
  1284 ;;		line 313 in file "main.c"
  1285 ;; Parameters:    Size  Location     Type
  1286 ;;  wr              1    wreg     unsigned char 
  1287 ;;  command         1    2[COMRAM] unsigned char 
  1288 ;;  data            1    3[COMRAM] unsigned char 
  1289 ;; Auto vars:     Size  Location     Type
  1290 ;;  wr              1    4[COMRAM] unsigned char 
  1291 ;; Return value:  Size  Location     Type
  1292 ;;                  1    wreg      unsigned char 
  1293 ;; Registers used:
  1294 ;;		wreg, status,2, status,0, cstack
  1295 ;; Tracked objects:
  1296 ;;		On entry : 0/0
  1297 ;;		On exit  : 0/0
  1298 ;;		Unchanged: 0/0
  1299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1300 ;;      Params:         2       0       0       0
  1301 ;;      Locals:         1       0       0       0
  1302 ;;      Temps:          0       0       0       0
  1303 ;;      Totals:         3       0       0       0
  1304 ;;Total ram usage:        3 bytes
  1305 ;; Hardware stack levels used:    1
  1306 ;; Hardware stack levels required when called:    1
  1307 ;; This function calls:
  1308 ;;		_setCSN
  1309 ;;		_spiTransferByte
  1310 ;; This function is called by:
  1311 ;;		_nrfConfig
  1312 ;; This function uses a non-reentrant model
  1313 ;;
  1314                           
  1315                           	psect	text8
  1316  003C96                     __ptext8:
  1317                           	opt stack 0
  1318  003C96                     _nrfConfigReg:
  1319                           	opt stack 28
  1320                           
  1321                           ;incstack = 0
  1322                           ;nrfConfigReg@wr stored from wreg
  1323  003C96  6E27               	movwf	nrfConfigReg@wr,c
  1324                           
  1325                           ;main.c: 315: setCSN(0);
  1326  003C98  0E00               	movlw	0
  1327  003C9A  6E24               	movwf	setCSN@level+1,c
  1328  003C9C  0E00               	movlw	0
  1329  003C9E  6E23               	movwf	setCSN@level,c
  1330  003CA0  ECD8  F01D         	call	_setCSN	;wreg free
  1331                           
  1332                           ;main.c: 317: if (wr == 'w') {
  1333  003CA4  5027               	movf	nrfConfigReg@wr,w,c
  1334  003CA6  0A77               	xorlw	119
  1335  003CA8  A4D8               	btfss	status,2,c
  1336  003CAA  D00B               	goto	l938
  1337                           
  1338                           ;main.c: 318: spiTransferByte(0x20|command);
  1339  003CAC  5025               	movf	nrfConfigReg@command,w,c
  1340  003CAE  0920               	iorlw	32
  1341  003CB0  ECD0  F01D         	call	_spiTransferByte
  1342                           
  1343                           ;main.c: 319: _delay((unsigned long)((3)*(64000000/4000000.0)));
  1344  003CB4  0E10               	movlw	16
  1345  003CB6                     u367:
  1346  003CB6  2EE8               	decfsz	wreg,f,c
  1347  003CB8  D7FE               	goto	u367
  1348                           
  1349                           ;main.c: 320: spiTransferByte(data);
  1350  003CBA  5026               	movf	nrfConfigReg@data,w,c
  1351  003CBC  ECD0  F01D         	call	_spiTransferByte
  1352                           
  1353                           ;main.c: 321: } else if (wr == 'r') {
  1354  003CC0  D00E               	goto	l946
  1355  003CC2                     l938:
  1356  003CC2  5027               	movf	nrfConfigReg@wr,w,c
  1357  003CC4  0A72               	xorlw	114
  1358  003CC6  A4D8               	btfss	status,2,c
  1359  003CC8  D00A               	goto	l946
  1360                           
  1361                           ;main.c: 322: spiTransferByte(0x00|command);
  1362  003CCA  5025               	movf	nrfConfigReg@command,w,c
  1363  003CCC  ECD0  F01D         	call	_spiTransferByte
  1364                           
  1365                           ;main.c: 323: _delay((unsigned long)((3)*(64000000/4000000.0)));
  1366  003CD0  0E10               	movlw	16
  1367  003CD2                     u377:
  1368  003CD2  2EE8               	decfsz	wreg,f,c
  1369  003CD4  D7FE               	goto	u377
  1370                           
  1371                           ;main.c: 324: data = spiTransferByte(0xFF);
  1372  003CD6  0EFF               	movlw	255
  1373  003CD8  ECD0  F01D         	call	_spiTransferByte
  1374  003CDC  6E26               	movwf	nrfConfigReg@data,c
  1375  003CDE                     l946:
  1376                           
  1377                           ;main.c: 325: }
  1378                           ;main.c: 327: setCSN(1);
  1379  003CDE  0E00               	movlw	0
  1380  003CE0  6E24               	movwf	setCSN@level+1,c
  1381  003CE2  0E01               	movlw	1
  1382  003CE4  6E23               	movwf	setCSN@level,c
  1383  003CE6  ECD8  F01D         	call	_setCSN	;wreg free
  1384  003CEA  0012               	return	
  1385  003CEC                     __end_of_nrfConfigReg:
  1386                           	opt stack 0
  1387                           tblptru	equ	0xFF8
  1388                           tblptrh	equ	0xFF7
  1389                           tblptrl	equ	0xFF6
  1390                           tablat	equ	0xFF5
  1391                           postinc0	equ	0xFEE
  1392                           wreg	equ	0xFE8
  1393                           indf1	equ	0xFE7
  1394                           postdec1	equ	0xFE5
  1395                           fsr1h	equ	0xFE2
  1396                           fsr1l	equ	0xFE1
  1397                           indf2	equ	0xFDF
  1398                           fsr2h	equ	0xFDA
  1399                           fsr2l	equ	0xFD9
  1400                           status	equ	0xFD8
  1401                           
  1402 ;; *************** function _spiTransferByte *****************
  1403 ;; Defined at:
  1404 ;;		line 415 in file "main.c"
  1405 ;; Parameters:    Size  Location     Type
  1406 ;;  data            1    wreg     unsigned char 
  1407 ;; Auto vars:     Size  Location     Type
  1408 ;;  data            1    0[COMRAM] unsigned char 
  1409 ;; Return value:  Size  Location     Type
  1410 ;;                  1    wreg      unsigned char 
  1411 ;; Registers used:
  1412 ;;		wreg, status,2, cstack
  1413 ;; Tracked objects:
  1414 ;;		On entry : 0/0
  1415 ;;		On exit  : 0/0
  1416 ;;		Unchanged: 0/0
  1417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1418 ;;      Params:         0       0       0       0
  1419 ;;      Locals:         1       0       0       0
  1420 ;;      Temps:          0       0       0       0
  1421 ;;      Totals:         1       0       0       0
  1422 ;;Total ram usage:        1 bytes
  1423 ;; Hardware stack levels used:    1
  1424 ;; This function calls:
  1425 ;;		Nothing
  1426 ;; This function is called by:
  1427 ;;		_nrfGetStatus
  1428 ;;		_nrfConfigReg
  1429 ;;		_nrfSetTXAddr
  1430 ;;		_nrfSetRXAddr
  1431 ;;		_spiTransfer
  1432 ;; This function uses a non-reentrant model
  1433 ;;
  1434                           
  1435                           	psect	text9
  1436  003BA0                     __ptext9:
  1437                           	opt stack 0
  1438  003BA0                     _spiTransferByte:
  1439                           	opt stack 29
  1440                           
  1441                           ;incstack = 0
  1442                           ;spiTransferByte@data stored from wreg
  1443  003BA0  6E23               	movwf	spiTransferByte@data,c
  1444                           
  1445                           ;main.c: 417: SSP1BUF = data;
  1446  003BA2  C023  FFC9         	movff	spiTransferByte@data,4041	;volatile
  1447                           
  1448                           ;main.c: 419: _delay((unsigned long)((30)*(64000000/4000000.0)));
  1449  003BA6  0EA0               	movlw	160
  1450  003BA8                     u387:
  1451  003BA8  2EE8               	decfsz	wreg,f,c
  1452  003BAA  D7FE               	goto	u387
  1453                           
  1454                           ;main.c: 421: return SSP1BUF;
  1455  003BAC  50C9               	movf	4041,w,c	;volatile
  1456  003BAE  0012               	return	
  1457  003BB0                     __end_of_spiTransferByte:
  1458                           	opt stack 0
  1459                           tblptru	equ	0xFF8
  1460                           tblptrh	equ	0xFF7
  1461                           tblptrl	equ	0xFF6
  1462                           tablat	equ	0xFF5
  1463                           postinc0	equ	0xFEE
  1464                           wreg	equ	0xFE8
  1465                           indf1	equ	0xFE7
  1466                           postdec1	equ	0xFE5
  1467                           fsr1h	equ	0xFE2
  1468                           fsr1l	equ	0xFE1
  1469                           indf2	equ	0xFDF
  1470                           fsr2h	equ	0xFDA
  1471                           fsr2l	equ	0xFD9
  1472                           status	equ	0xFD8
  1473                           
  1474 ;; *************** function _setCSN *****************
  1475 ;; Defined at:
  1476 ;;		line 287 in file "main.c"
  1477 ;; Parameters:    Size  Location     Type
  1478 ;;  level           2    0[COMRAM] int 
  1479 ;; Auto vars:     Size  Location     Type
  1480 ;;		None
  1481 ;; Return value:  Size  Location     Type
  1482 ;;		None               void
  1483 ;; Registers used:
  1484 ;;		wreg, status,2, status,0
  1485 ;; Tracked objects:
  1486 ;;		On entry : 0/0
  1487 ;;		On exit  : 0/0
  1488 ;;		Unchanged: 0/0
  1489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1490 ;;      Params:         2       0       0       0
  1491 ;;      Locals:         0       0       0       0
  1492 ;;      Temps:          0       0       0       0
  1493 ;;      Totals:         2       0       0       0
  1494 ;;Total ram usage:        2 bytes
  1495 ;; Hardware stack levels used:    1
  1496 ;; This function calls:
  1497 ;;		Nothing
  1498 ;; This function is called by:
  1499 ;;		_nrfGetStatus
  1500 ;;		_nrfConfigReg
  1501 ;;		_nrfSetTXAddr
  1502 ;;		_nrfSetRXAddr
  1503 ;;		_spiTransfer
  1504 ;; This function uses a non-reentrant model
  1505 ;;
  1506                           
  1507                           	psect	text10
  1508  003BB0                     __ptext10:
  1509                           	opt stack 0
  1510  003BB0                     _setCSN:
  1511                           	opt stack 29
  1512                           
  1513                           ;main.c: 289: if (level == 1) {
  1514                           
  1515                           ;incstack = 0
  1516  003BB0  0423               	decf	setCSN@level,w,c
  1517  003BB2  1024               	iorwf	setCSN@level+1,w,c
  1518  003BB4  A4D8               	btfss	status,2,c
  1519  003BB6  D006               	goto	l88
  1520                           
  1521                           ;main.c: 290: _delay((unsigned long)((2)*(64000000/4000000.0)));
  1522  003BB8  0E0A               	movlw	10
  1523  003BBA                     u397:
  1524  003BBA  2EE8               	decfsz	wreg,f,c
  1525  003BBC  D7FE               	goto	u397
  1526  003BBE  D000               	nop2		;nop
  1527                           
  1528                           ;main.c: 291: LATAbits.LATA2 = 1;
  1529  003BC0  8489               	bsf	3977,2,c	;volatile
  1530                           
  1531                           ;main.c: 292: } else {
  1532  003BC2  0012               	return	
  1533  003BC4                     l88:
  1534                           
  1535                           ;main.c: 293: LATAbits.LATA2 = 0;
  1536  003BC4  9489               	bcf	3977,2,c	;volatile
  1537  003BC6  0012               	return	
  1538  003BC8                     __end_of_setCSN:
  1539                           	opt stack 0
  1540                           tblptru	equ	0xFF8
  1541                           tblptrh	equ	0xFF7
  1542                           tblptrl	equ	0xFF6
  1543                           tablat	equ	0xFF5
  1544                           postinc0	equ	0xFEE
  1545                           wreg	equ	0xFE8
  1546                           indf1	equ	0xFE7
  1547                           postdec1	equ	0xFE5
  1548                           fsr1h	equ	0xFE2
  1549                           fsr1l	equ	0xFE1
  1550                           indf2	equ	0xFDF
  1551                           fsr2h	equ	0xFDA
  1552                           fsr2l	equ	0xFD9
  1553                           status	equ	0xFD8
  1554                           
  1555 ;; *************** function _delay10ms *****************
  1556 ;; Defined at:
  1557 ;;		line 427 in file "main.c"
  1558 ;; Parameters:    Size  Location     Type
  1559 ;;  ms_multi        2    0[COMRAM] int 
  1560 ;; Auto vars:     Size  Location     Type
  1561 ;;  i               2    3[COMRAM] int 
  1562 ;; Return value:  Size  Location     Type
  1563 ;;		None               void
  1564 ;; Registers used:
  1565 ;;		wreg, status,2, status,0
  1566 ;; Tracked objects:
  1567 ;;		On entry : 0/0
  1568 ;;		On exit  : 0/0
  1569 ;;		Unchanged: 0/0
  1570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1571 ;;      Params:         2       0       0       0
  1572 ;;      Locals:         2       0       0       0
  1573 ;;      Temps:          1       0       0       0
  1574 ;;      Totals:         5       0       0       0
  1575 ;;Total ram usage:        5 bytes
  1576 ;; Hardware stack levels used:    1
  1577 ;; This function calls:
  1578 ;;		Nothing
  1579 ;; This function is called by:
  1580 ;;		_main
  1581 ;; This function uses a non-reentrant model
  1582 ;;
  1583                           
  1584                           	psect	text11
  1585  003C1C                     __ptext11:
  1586                           	opt stack 0
  1587  003C1C                     _delay10ms:
  1588                           	opt stack 30
  1589                           
  1590                           ;main.c: 428: int i = 0;
  1591                           
  1592                           ;incstack = 0
  1593  003C1C  0E00               	movlw	0
  1594  003C1E  6E27               	movwf	delay10ms@i+1,c
  1595  003C20  0E00               	movlw	0
  1596  003C22  6E26               	movwf	delay10ms@i,c
  1597                           
  1598                           ;main.c: 429: for (i=0;i<ms_multi;i++) {
  1599  003C24  0E00               	movlw	0
  1600  003C26  6E27               	movwf	delay10ms@i+1,c
  1601  003C28  0E00               	movlw	0
  1602  003C2A  6E26               	movwf	delay10ms@i,c
  1603  003C2C  D00A               	goto	l131
  1604  003C2E                     l1008:
  1605                           
  1606                           ;main.c: 430: _delay((unsigned long)((11)*(64000000/4000.0)));
  1607  003C2E  0EE5               	movlw	229
  1608  003C30  6E25               	movwf	??_delay10ms& (0+255),c
  1609  003C32  0E91               	movlw	145
  1610  003C34                     u407:
  1611  003C34  2EE8               	decfsz	wreg,f,c
  1612  003C36  D7FE               	goto	u407
  1613  003C38  2E25               	decfsz	??_delay10ms& (0+255),f,c
  1614  003C3A  D7FC               	goto	u407
  1615  003C3C  F000               	nop	
  1616  003C3E  4A26               	infsnz	delay10ms@i,f,c
  1617  003C40  2A27               	incf	delay10ms@i+1,f,c
  1618  003C42                     l131:
  1619  003C42  5027               	movf	delay10ms@i+1,w,c
  1620  003C44  0A80               	xorlw	128
  1621  003C46  6E25               	movwf	??_delay10ms& (0+255),c
  1622  003C48  5023               	movf	delay10ms@ms_multi,w,c
  1623  003C4A  5C26               	subwf	delay10ms@i,w,c
  1624  003C4C  5024               	movf	delay10ms@ms_multi+1,w,c
  1625  003C4E  0A80               	xorlw	128
  1626  003C50  5825               	subwfb	??_delay10ms& (0+255),w,c
  1627  003C52  B0D8               	btfsc	status,0,c
  1628  003C54  0012               	return	
  1629  003C56  D7EB               	goto	l1008
  1630  003C58                     __end_of_delay10ms:
  1631                           	opt stack 0
  1632  0000                     tblptru	equ	0xFF8
  1633                           tblptrh	equ	0xFF7
  1634                           tblptrl	equ	0xFF6
  1635                           tablat	equ	0xFF5
  1636                           postinc0	equ	0xFEE
  1637                           wreg	equ	0xFE8
  1638                           indf1	equ	0xFE7
  1639                           postdec1	equ	0xFE5
  1640                           fsr1h	equ	0xFE2
  1641                           fsr1l	equ	0xFE1
  1642                           indf2	equ	0xFDF
  1643                           fsr2h	equ	0xFDA
  1644                           fsr2l	equ	0xFD9
  1645                           status	equ	0xFD8
  1646                           tblptru	equ	0xFF8
  1647                           tblptrh	equ	0xFF7
  1648                           tblptrl	equ	0xFF6
  1649                           tablat	equ	0xFF5
  1650                           postinc0	equ	0xFEE
  1651                           wreg	equ	0xFE8
  1652                           indf1	equ	0xFE7
  1653                           postdec1	equ	0xFE5
  1654                           fsr1h	equ	0xFE2
  1655                           fsr1l	equ	0xFE1
  1656                           indf2	equ	0xFDF
  1657                           fsr2h	equ	0xFDA
  1658                           fsr2l	equ	0xFD9
  1659                           status	equ	0xFD8
  1660                           
  1661                           	psect	rparam
  1662  0000                     tblptru	equ	0xFF8
  1663                           tblptrh	equ	0xFF7
  1664                           tblptrl	equ	0xFF6
  1665                           tablat	equ	0xFF5
  1666                           postinc0	equ	0xFEE
  1667                           wreg	equ	0xFE8
  1668                           indf1	equ	0xFE7
  1669                           postdec1	equ	0xFE5
  1670                           fsr1h	equ	0xFE2
  1671                           fsr1l	equ	0xFE1
  1672                           indf2	equ	0xFDF
  1673                           fsr2h	equ	0xFDA
  1674                           fsr2l	equ	0xFD9
  1675                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        15
    BSS         66
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     16      65
    BANK0           160      0      32
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    nrfSetRXAddr@addr	PTR unsigned char  size(2) Largest target is 4
		 -> RX_ADDRESS(COMRAM[4]), 

    nrfSetTXAddr@addr	PTR unsigned char  size(2) Largest target is 4
		 -> TX_ADDRESS(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->_spiTransfer
    _nrfGetStatus->_setCSN
    _nrfConfig->_spiTransfer
    _spiTransfer->_setCSN
    _nrfSetTXAddr->_setCSN
    _nrfSetRXAddr->_setCSN
    _nrfConfigReg->_setCSN

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6409
                          _delay10ms
                          _nrfConfig
                       _nrfGetStatus
                         _portConfig
                        _spiConfig_1
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiConfig_1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _portConfig                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _nrfGetStatus                                         0     0      0     574
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (1) _nrfConfig                                            0     0      0    4387
                       _nrfConfigReg
                       _nrfSetRXAddr
                       _nrfSetTXAddr
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiTransfer                                         14    11      3    1242
                                              2 COMRAM    14    11      3
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfSetTXAddr                                        10     6      4     792
                                              2 COMRAM    10     6      4
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfSetRXAddr                                        11     7      4     814
                                              2 COMRAM    11     7      4
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfConfigReg                                         3     1      2    1539
                                              2 COMRAM     3     1      2
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _spiTransferByte                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setCSN                                               2     0      2     552
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _delay10ms                                            5     3      2     206
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay10ms
   _nrfConfig
     _nrfConfigReg
       _setCSN
       _spiTransferByte
     _nrfSetRXAddr
       _setCSN
       _spiTransferByte
     _nrfSetTXAddr
       _setCSN
       _spiTransferByte
     _spiTransfer
       _setCSN
       _spiTransferByte
   _nrfGetStatus
     _setCSN
     _spiTransferByte
   _portConfig
   _spiConfig_1
   _spiTransfer
     _setCSN
     _spiTransferByte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       6        0.0%
BANK2              100      0       0       7        0.0%
BITBANK1           100      0       0       9        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      20       4       20.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     10      41       1       68.4%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      61       8        0.0%
DATA                 0      0      61      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Thu Sep 25 19:11:22 2014

__size_of_spiTransferByte 0010                        l88 3BC4                _RX_ADDRESS 003A  
             __CFG_LVP$ON 000000                       l131 3C42                       l912 3F68  
                     l904 3F4A                       l924 3FDE                       l908 3F5A  
                     l918 3F80                       l926 3FF2                       l946 3CDE  
                     l938 3CC2                       l964 3DCE                       l958 3D9A  
                     l966 3DE2                       l984 3D4A                       l978 3D16  
                     l986 3D5E                       u307 3F6A                       u317 3FD6  
                     u407 3C34                       u327 3D00                       u337 3D42  
                     u347 3D84                       u357 3DC6                       u367 3CB6  
                     u377 3CD2                       u297 3E0E                       u387 3BA8  
                     u397 3BBA                       wreg 000FE8                _TX_ADDRESS 003E  
                    l1008 3C2E                      l1026 3E0A                      l1048 3E6E  
                    _LATA 000F89                      _LATB 000F8A                      _LATC 000F8B  
      spiTransfer@command 0025                      _main 3DF0                      indf1 000FE7  
                    fsr1l 000FE1                      indf2 000FDF                      fsr2l 000FD9  
           __CFG_BORV$190 000000                      start 0000             __CFG_IESO$OFF 000000  
          nrfConfigReg@wr 0027                     ?_main 0023                     _TRISA 000F92  
                   _TRISB 000F93                     _TRISC 000F94            __CFG_FCMEN$OFF 000000  
      __CFG_MCLRE$EXTMCLR 000000                     tablat 000FF5                     status 000FD8  
          __CFG_HFOFST$ON 000000            __CFG_FOSC$HSHP 000000           __initialization 3C58  
            __end_of_main 3E7C       spiTransferByte@data 0023                    ??_main 0033  
           __activetblptr 000000         ??_spiTransferByte 0023            __CFG_PLLCFG$ON 000000  
           nrfSetRXAddr@i 002E             nrfSetTXAddr@i 002D            __CFG_WDTEN$OFF 000000  
            ?_spiConfig_1 0023            __CFG_PWRTEN$ON 000000            __CFG_XINST$OFF 000000  
          __CFG_STVREN$ON 000000                    _setCSN 3BB0                    clear_0 3C5E  
                  clear_1 3C6A               setCSN@level 0023             ?_nrfGetStatus 0023  
           ?_nrfConfigReg 0025              __pdataCOMRAM 0033              ?_spiTransfer 0025  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
              __accesstop 0060   __end_of__initialization 3C90           __CFG_PBADEN$OFF 000000  
           ?_nrfSetRXAddr 0025             ?_nrfSetTXAddr 0025            __pcstackCOMRAM 0023  
      __size_of_delay10ms 003C            ??_nrfGetStatus 0025            _EN_RXADDR_CURR 0034  
          ??_nrfConfigReg 0027          nrfConfigReg@data 0026                _dataBufOut 0060  
              __pbssBANK0 0060            ??_nrfSetRXAddr 0029            ??_nrfSetTXAddr 0029  
      __size_of_nrfConfig 00AE       nrfConfigReg@command 0025        __CFG_CCP2MX$PORTC1 000000  
      __CFG_CCP3MX$PORTB5 000000                   ?_setCSN 0023                   _SSP1ADD 000FC8  
                 _SSP1BUF 000FC9         __end_of_delay10ms 3C58          nrfSetRXAddr@addr 0025  
        nrfSetRXAddr@pipe 002D                   __Hparam 0000                   __Lparam 0000  
    __size_of_spiConfig_1 0018           _spiTransferByte 3BA0                delay10ms@i 0026  
           _RX_PW_P0_CURR 0037                   __pcinit 3C58           __size_of_setCSN 0018  
        nrfSetTXAddr@addr 0025                   __ramtop 0300                   __ptext0 3DF0  
                 __ptext1 3BC8                   __ptext2 3BE0                   __ptext3 3BFA  
                 __ptext4 3E7C                   __ptext5 3F2A                   __ptext6 3CEC  
                 __ptext7 3D6C                   __ptext8 3C96                   __ptext9 3BA0  
       __end_of_nrfConfig 3F2A      __size_of_spiTransfer 00D6      end_of_initialization 3C90  
    __end_of_nrfGetStatus 3C1C      __end_of_nrfConfigReg 3CEC                   postdec1 000FE5  
                 postinc0 000FEE                _portConfig 3BE0      __end_of_nrfSetRXAddr 3DF0  
    __end_of_nrfSetTXAddr 3D6C   __end_of_spiTransferByte 3BB0             __pidataCOMRAM 3B91  
          __end_of_setCSN 3BC8       start_initialization 3C58                  ??_setCSN 0025  
             ?_portConfig 0023               __pbssCOMRAM 0001     __size_of_nrfGetStatus 0022  
   __size_of_nrfConfigReg 0056                 _dataBufIn 0001          ?_spiTransferByte 0023  
               _delay10ms 3C1C               _CONFIG_CURR 0033             _SETUP_AW_CURR 0038  
   __size_of_nrfSetRXAddr 0084     __size_of_nrfSetTXAddr 0080           _SETUP_RETR_CURR 0039  
        __CFG_PRICLKEN$ON 000000              _nrfGetStatus 3BFA              _nrfConfigReg 3C96  
         nrfSetRXAddr@len 0027                 _nrfSTATUS 0022           nrfSetTXAddr@len 0027  
               _nrfConfig 3E7C       __size_of_portConfig 001A                  _LATAbits 000F89  
              ?_delay10ms 0023             ??_spiConfig_1 0023              _nrfSetRXAddr 3D6C  
            _nrfSetTXAddr 3CEC          __CFG_WDTPS$32768 000000             _RF_SETUP_CURR 0036  
       delay10ms@ms_multi 0023             ??_spiTransfer 0028                 copy_data0 3C84  
              ?_nrfConfig 0023                  __Hrparam 0000                  __Lrparam 0000  
      __CFG_BOREN$SBORDIS 000000         __CFG_P2BMX$PORTB5 000000       __end_of_spiConfig_1 3BE0  
                __ptext10 3BB0                  __ptext11 3C1C              _SSP1CON1bits 000FC6  
     __end_of_spiTransfer 4000             __size_of_main 008C               ??_delay10ms 0025  
              _EN_AA_CURR 0021              _SSP1STATbits 000FC7              ??_portConfig 0023  
             ??_nrfConfig 0033        __end_of_portConfig 3BFA               _spiConfig_1 3BC8  
          spiTransfer@len 0026            spiTransfer@wrn 0030                _RF_CH_CURR 0035  
             _spiTransfer 3F2A         __CFG_T3CMX$PORTC0 000000              spiTransfer@i 0031  
