

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Tue Sep 30 14:41:26 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F24K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    26  0000                     
    27                           	psect	idataCOMRAM
    28  003B29                     __pidataCOMRAM:
    29                           	opt stack 0
    30                           
    31                           ;initializer for _CONFIG_CURR
    32  003B29  4A                 	db	74
    33                           
    34                           ;initializer for _DYNPD_CURR
    35  003B2A  01                 	db	1
    36                           
    37                           ;initializer for _EN_RXADDR_CURR
    38  003B2B  01                 	db	1
    39                           
    40                           ;initializer for _FEATURE_CURR
    41  003B2C  04                 	db	4
    42                           
    43                           ;initializer for _RF_CH_CURR
    44  003B2D  69                 	db	105
    45                           
    46                           ;initializer for _RF_SETUP_CURR
    47  003B2E  06                 	db	6
    48                           
    49                           ;initializer for _RX_PW_P0_CURR
    50  003B2F  01                 	db	1
    51                           
    52                           ;initializer for _SETUP_AW_CURR
    53  003B30  02                 	db	2
    54                           
    55                           ;initializer for _SETUP_RETR_CURR
    56  003B31  20                 	db	32
    57                           
    58                           ;initializer for _RX_ADDRESS
    59  003B32  E7                 	db	231
    60  003B33  E7                 	db	231
    61  003B34  E7                 	db	231
    62  003B35  E7                 	db	231
    63                           
    64                           ;initializer for _TX_ADDRESS
    65  003B36  E7                 	db	231
    66  003B37  E7                 	db	231
    67  003B38  E7                 	db	231
    68  003B39  E7                 	db	231
    69  0000                     _LATA	set	3977
    70  0000                     _LATAbits	set	3977
    71  0000                     _LATB	set	3978
    72  0000                     _LATC	set	3979
    73  0000                     _SSP1ADD	set	4040
    74  0000                     _SSP1BUF	set	4041
    75  0000                     _SSP1CON1bits	set	4038
    76  0000                     _SSP1STATbits	set	4039
    77  0000                     _TRISA	set	3986
    78  0000                     _TRISB	set	3987
    79  0000                     _TRISC	set	3988
    80                           
    81                           ; #config settings
    82  0000                     
    83                           	psect	cinit
    84  003BDC                     __pcinit:
    85                           	opt stack 0
    86  003BDC                     start_initialization:
    87                           	opt stack 0
    88  003BDC                     __initialization:
    89                           	opt stack 0
    90                           
    91                           ; Clear objects allocated to BANK0 (32 bytes)
    92  003BDC  EE00  F060         	lfsr	0,__pbssBANK0
    93  003BE0  0E20               	movlw	32
    94  003BE2                     clear_0:
    95  003BE2  6AEE               	clrf	postinc0,c
    96  003BE4  06E8               	decf	wreg,f,c
    97  003BE6  E1FD               	bnz	clear_0
    98                           
    99                           ; Clear objects allocated to COMRAM (34 bytes)
   100  003BE8  EE00  F001         	lfsr	0,__pbssCOMRAM
   101  003BEC  0E22               	movlw	34
   102  003BEE                     clear_1:
   103  003BEE  6AEE               	clrf	postinc0,c
   104  003BF0  06E8               	decf	wreg,f,c
   105  003BF2  E1FD               	bnz	clear_1
   106                           
   107                           ; Initialize objects allocated to COMRAM (17 bytes)
   108                           ; load TBLPTR registers with __pidataCOMRAM
   109  003BF4  0E29               	movlw	low __pidataCOMRAM
   110  003BF6  6EF6               	movwf	tblptrl,c
   111  003BF8  0E3B               	movlw	high __pidataCOMRAM
   112  003BFA  6EF7               	movwf	tblptrh,c
   113  003BFC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   114  003BFE  6EF8               	movwf	tblptru,c
   115  003C00  EE00  F035         	lfsr	0,__pdataCOMRAM
   116  003C04  EE10 F011          	lfsr	1,17
   117  003C08                     copy_data0:
   118  003C08  0009               	tblrd		*+
   119  003C0A  CFF5 FFEE          	movff	tablat,postinc0
   120  003C0E  50E5               	movf	postdec1,w,c
   121  003C10  50E1               	movf	fsr1l,w,c
   122  003C12  E1FA               	bnz	copy_data0
   123  003C14                     end_of_initialization:
   124                           	opt stack 0
   125  003C14                     __end_of__initialization:
   126                           	opt stack 0
   127  003C14  0100               	movlb	0
   128  003C16  EFE7  F01E         	goto	_main	;jump to C main() function
   129                           tblptru	equ	0xFF8
   130                           tblptrh	equ	0xFF7
   131                           tblptrl	equ	0xFF6
   132                           tablat	equ	0xFF5
   133                           postinc0	equ	0xFEE
   134                           wreg	equ	0xFE8
   135                           postdec1	equ	0xFE5
   136                           fsr1l	equ	0xFE1
   137                           
   138                           	psect	bssCOMRAM
   139  000001                     __pbssCOMRAM:
   140                           	opt stack 0
   141  000001                     _dataBufOut:
   142                           	opt stack 0
   143  000001                     	ds	32
   144  000021                     _EN_AA_CURR:
   145                           	opt stack 0
   146  000021                     	ds	1
   147  000022                     _nrfSTATUS:
   148                           	opt stack 0
   149  000022                     	ds	1
   150                           tblptru	equ	0xFF8
   151                           tblptrh	equ	0xFF7
   152                           tblptrl	equ	0xFF6
   153                           tablat	equ	0xFF5
   154                           postinc0	equ	0xFEE
   155                           wreg	equ	0xFE8
   156                           postdec1	equ	0xFE5
   157                           fsr1l	equ	0xFE1
   158                           
   159                           	psect	dataCOMRAM
   160  000035                     __pdataCOMRAM:
   161                           	opt stack 0
   162  000035                     _CONFIG_CURR:
   163                           	opt stack 0
   164  000035                     	ds	1
   165  000036                     _DYNPD_CURR:
   166                           	opt stack 0
   167  000036                     	ds	1
   168  000037                     _EN_RXADDR_CURR:
   169                           	opt stack 0
   170  000037                     	ds	1
   171  000038                     _FEATURE_CURR:
   172                           	opt stack 0
   173  000038                     	ds	1
   174  000039                     _RF_CH_CURR:
   175                           	opt stack 0
   176  000039                     	ds	1
   177  00003A                     _RF_SETUP_CURR:
   178                           	opt stack 0
   179  00003A                     	ds	1
   180  00003B                     _RX_PW_P0_CURR:
   181                           	opt stack 0
   182  00003B                     	ds	1
   183  00003C                     _SETUP_AW_CURR:
   184                           	opt stack 0
   185  00003C                     	ds	1
   186  00003D                     _SETUP_RETR_CURR:
   187                           	opt stack 0
   188  00003D                     	ds	1
   189  00003E                     _RX_ADDRESS:
   190                           	opt stack 0
   191  00003E                     	ds	4
   192  000042                     _TX_ADDRESS:
   193                           	opt stack 0
   194  000042                     	ds	4
   195                           tblptru	equ	0xFF8
   196                           tblptrh	equ	0xFF7
   197                           tblptrl	equ	0xFF6
   198                           tablat	equ	0xFF5
   199                           postinc0	equ	0xFEE
   200                           wreg	equ	0xFE8
   201                           postdec1	equ	0xFE5
   202                           fsr1l	equ	0xFE1
   203                           
   204                           	psect	bssBANK0
   205  000060                     __pbssBANK0:
   206                           	opt stack 0
   207  000060                     _dataBufIn:
   208                           	opt stack 0
   209  000060                     	ds	32
   210                           tblptru	equ	0xFF8
   211                           tblptrh	equ	0xFF7
   212                           tblptrl	equ	0xFF6
   213                           tablat	equ	0xFF5
   214                           postinc0	equ	0xFEE
   215                           wreg	equ	0xFE8
   216                           postdec1	equ	0xFE5
   217                           fsr1l	equ	0xFE1
   218                           
   219                           	psect	cstackCOMRAM
   220  000023                     __pcstackCOMRAM:
   221                           	opt stack 0
   222  000023                     spiTransferByte@data:
   223                           	opt stack 0
   224  000023                     setCSN@level:
   225                           	opt stack 0
   226  000023                     delay10ms@ms_multi:
   227                           	opt stack 0
   228                           
   229                           ; 2 bytes @ 0x0
   230  000023                     	ds	2
   231  000025                     ??_delay10ms:
   232  000025                     nrfConfigReg@command:
   233                           	opt stack 0
   234  000025                     spiTransfer@command:
   235                           	opt stack 0
   236  000025                     nrfSetTXAddr@addr:
   237                           	opt stack 0
   238  000025                     nrfSetRXAddr@addr:
   239                           	opt stack 0
   240  000025                     nrfTXData@len:
   241                           	opt stack 0
   242                           
   243                           ; 2 bytes @ 0x2
   244  000025                     	ds	1
   245  000026                     nrfConfigReg@data:
   246                           	opt stack 0
   247  000026                     spiTransfer@len:
   248                           	opt stack 0
   249  000026                     delay10ms@i:
   250                           	opt stack 0
   251                           
   252                           ; 2 bytes @ 0x3
   253  000026                     	ds	1
   254  000027                     ??_nrfTXData:
   255  000027                     nrfConfigReg@wr:
   256                           	opt stack 0
   257  000027                     nrfSetTXAddr@len:
   258                           	opt stack 0
   259  000027                     nrfSetRXAddr@len:
   260                           	opt stack 0
   261                           
   262                           ; 2 bytes @ 0x4
   263  000027                     	ds	1
   264  000028                     ??_spiTransfer:
   265                           
   266                           ; 0 bytes @ 0x5
   267  000028                     	ds	1
   268  000029                     ??_nrfSetRXAddr:
   269  000029                     ??_nrfSetTXAddr:
   270                           
   271                           ; 0 bytes @ 0x6
   272  000029                     	ds	2
   273  00002B                     nrfTXData@i:
   274                           	opt stack 0
   275                           
   276                           ; 2 bytes @ 0x8
   277  00002B                     	ds	2
   278  00002D                     nrfSetRXAddr@pipe:
   279                           	opt stack 0
   280  00002D                     nrfSetTXAddr@i:
   281                           	opt stack 0
   282                           
   283                           ; 2 bytes @ 0xA
   284  00002D                     	ds	1
   285  00002E                     nrfSetRXAddr@i:
   286                           	opt stack 0
   287                           
   288                           ; 2 bytes @ 0xB
   289  00002E                     	ds	2
   290  000030                     spiTransfer@wrn:
   291                           	opt stack 0
   292                           
   293                           ; 1 bytes @ 0xD
   294  000030                     	ds	1
   295  000031                     spiTransfer@i:
   296                           	opt stack 0
   297                           
   298                           ; 2 bytes @ 0xE
   299  000031                     	ds	2
   300  000033                     main@count:
   301                           	opt stack 0
   302                           
   303                           ; 2 bytes @ 0x10
   304  000033                     	ds	2
   305                           tblptru	equ	0xFF8
   306                           tblptrh	equ	0xFF7
   307                           tblptrl	equ	0xFF6
   308                           tablat	equ	0xFF5
   309                           postinc0	equ	0xFEE
   310                           wreg	equ	0xFE8
   311                           postdec1	equ	0xFE5
   312                           fsr1l	equ	0xFE1
   313                           
   314 ;;
   315 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   316 ;;
   317 ;; *************** function _main *****************
   318 ;; Defined at:
   319 ;;		line 192 in file "main.c"
   320 ;; Parameters:    Size  Location     Type
   321 ;;		None
   322 ;; Auto vars:     Size  Location     Type
   323 ;;  count           2   16[COMRAM] int 
   324 ;; Return value:  Size  Location     Type
   325 ;;		None               void
   326 ;; Registers used:
   327 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   328 ;; Tracked objects:
   329 ;;		On entry : 0/0
   330 ;;		On exit  : 0/0
   331 ;;		Unchanged: 0/0
   332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   333 ;;      Params:         0       0       0       0
   334 ;;      Locals:         2       0       0       0
   335 ;;      Temps:          0       0       0       0
   336 ;;      Totals:         2       0       0       0
   337 ;;Total ram usage:        2 bytes
   338 ;; Hardware stack levels required when called:    3
   339 ;; This function calls:
   340 ;;		_delay10ms
   341 ;;		_nrfConfig
   342 ;;		_nrfGetStatus
   343 ;;		_nrfTXData
   344 ;;		_portConfig
   345 ;;		_spiConfig_1
   346 ;;		_spiTransfer
   347 ;; This function is called by:
   348 ;;		Startup code after reset
   349 ;; This function uses a non-reentrant model
   350 ;;
   351                           
   352                           	psect	text0
   353  003DCE                     __ptext0:
   354                           	opt stack 0
   355  003DCE                     _main:
   356                           	opt stack 28
   357                           
   358                           ;main.c: 195: portConfig();
   359                           
   360                           ;incstack = 0
   361  003DCE  ECB2  F01D         	call	_portConfig	;wreg free
   362                           
   363                           ;main.c: 196: spiConfig_1();
   364  003DD2  ECA6  F01D         	call	_spiConfig_1	;wreg free
   365                           
   366                           ;main.c: 197: nrfConfig();
   367  003DD6  EC92  F01F         	call	_nrfConfig	;wreg free
   368                           
   369                           ;main.c: 199: delay10ms(1);
   370  003DDA  0E00               	movlw	0
   371  003DDC  6E24               	movwf	delay10ms@ms_multi+1,c
   372  003DDE  0E01               	movlw	1
   373  003DE0  6E23               	movwf	delay10ms@ms_multi,c
   374  003DE2  ECD0  F01D         	call	_delay10ms	;wreg free
   375                           
   376                           ;main.c: 202: int count = 1;
   377  003DE6  0E00               	movlw	0
   378  003DE8  6E34               	movwf	main@count+1,c
   379  003DEA  0E01               	movlw	1
   380  003DEC  6E33               	movwf	main@count,c
   381  003DEE                     l1037:
   382                           
   383                           ;main.c: 205: dataBufOut[0] = count;
   384  003DEE  C033  F001         	movff	main@count,_dataBufOut
   385                           
   386                           ;main.c: 206: dataBufOut[1] = 0b01101010;
   387  003DF2  0E6A               	movlw	106
   388  003DF4  6E02               	movwf	_dataBufOut+1,c
   389                           
   390                           ;main.c: 207: dataBufOut[2] = 0x3F;
   391  003DF6  0E3F               	movlw	63
   392  003DF8  6E03               	movwf	_dataBufOut+2,c
   393                           
   394                           ;main.c: 208: dataBufOut[3] = 182;
   395  003DFA  0EB6               	movlw	182
   396  003DFC  6E04               	movwf	_dataBufOut+3,c
   397                           
   398                           ;main.c: 209: nrfTXData(4);
   399  003DFE  0E00               	movlw	0
   400  003E00  6E26               	movwf	nrfTXData@len+1,c
   401  003E02  0E04               	movlw	4
   402  003E04  6E25               	movwf	nrfTXData@len,c
   403  003E06  ECA8  F01E         	call	_nrfTXData	;wreg free
   404                           
   405                           ;main.c: 210: count++;
   406  003E0A  4A33               	infsnz	main@count,f,c
   407  003E0C  2A34               	incf	main@count+1,f,c
   408                           
   409                           ;main.c: 212: delay10ms(2);
   410  003E0E  0E00               	movlw	0
   411  003E10  6E24               	movwf	delay10ms@ms_multi+1,c
   412  003E12  0E02               	movlw	2
   413  003E14  6E23               	movwf	delay10ms@ms_multi,c
   414  003E16  ECD0  F01D         	call	_delay10ms	;wreg free
   415                           
   416                           ;main.c: 214: nrfGetStatus();
   417  003E1A  ECBF  F01D         	call	_nrfGetStatus	;wreg free
   418                           
   419                           ;main.c: 216: if (nrfSTATUS != 0x0E) {
   420  003E1E  5022               	movf	_nrfSTATUS,w,c
   421  003E20  0A0E               	xorlw	14
   422  003E22  B4D8               	btfsc	status,2,c
   423  003E24  D013               	goto	l1065
   424                           
   425                           ;main.c: 218: LATAbits.LATA0 = 1;
   426  003E26  8089               	bsf	3977,0,c	;volatile
   427                           
   428                           ;main.c: 221: dataBufOut[0] = 0b01110000;
   429  003E28  0E70               	movlw	112
   430  003E2A  6E01               	movwf	_dataBufOut,c
   431                           
   432                           ;main.c: 222: spiTransfer('w',0x07,1);
   433  003E2C  0E07               	movlw	7
   434  003E2E  6E25               	movwf	spiTransfer@command,c
   435  003E30  0E00               	movlw	0
   436  003E32  6E27               	movwf	spiTransfer@len+1,c
   437  003E34  0E01               	movlw	1
   438  003E36  6E26               	movwf	spiTransfer@len,c
   439  003E38  0E77               	movlw	119
   440  003E3A  EC2D  F01F         	call	_spiTransfer
   441                           
   442                           ;main.c: 224: delay10ms(10);
   443  003E3E  0E00               	movlw	0
   444  003E40  6E24               	movwf	delay10ms@ms_multi+1,c
   445  003E42  0E0A               	movlw	10
   446  003E44  6E23               	movwf	delay10ms@ms_multi,c
   447  003E46  ECD0  F01D         	call	_delay10ms	;wreg free
   448                           
   449                           ;main.c: 226: LATAbits.LATA0 = 0;
   450  003E4A  9089               	bcf	3977,0,c	;volatile
   451  003E4C                     l1065:
   452                           
   453                           ;main.c: 227: }
   454                           ;main.c: 229: delay10ms(80);
   455  003E4C  0E00               	movlw	0
   456  003E4E  6E24               	movwf	delay10ms@ms_multi+1,c
   457  003E50  0E50               	movlw	80
   458  003E52  6E23               	movwf	delay10ms@ms_multi,c
   459  003E54  ECD0  F01D         	call	_delay10ms	;wreg free
   460                           
   461                           ;main.c: 230: }
   462  003E58  D7CA               	goto	l1037
   463  003E5A                     __end_of_main:
   464                           	opt stack 0
   465                           tblptru	equ	0xFF8
   466                           tblptrh	equ	0xFF7
   467                           tblptrl	equ	0xFF6
   468                           tablat	equ	0xFF5
   469                           postinc0	equ	0xFEE
   470                           wreg	equ	0xFE8
   471                           postdec1	equ	0xFE5
   472                           fsr1l	equ	0xFE1
   473                           status	equ	0xFD8
   474                           
   475 ;; *************** function _spiConfig_1 *****************
   476 ;; Defined at:
   477 ;;		line 250 in file "main.c"
   478 ;; Parameters:    Size  Location     Type
   479 ;;		None
   480 ;; Auto vars:     Size  Location     Type
   481 ;;		None
   482 ;; Return value:  Size  Location     Type
   483 ;;		None               void
   484 ;; Registers used:
   485 ;;		wreg, status,2
   486 ;; Tracked objects:
   487 ;;		On entry : 0/0
   488 ;;		On exit  : 0/0
   489 ;;		Unchanged: 0/0
   490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   491 ;;      Params:         0       0       0       0
   492 ;;      Locals:         0       0       0       0
   493 ;;      Temps:          0       0       0       0
   494 ;;      Totals:         0       0       0       0
   495 ;;Total ram usage:        0 bytes
   496 ;; Hardware stack levels used:    1
   497 ;; This function calls:
   498 ;;		Nothing
   499 ;; This function is called by:
   500 ;;		_main
   501 ;; This function uses a non-reentrant model
   502 ;;
   503                           
   504                           	psect	text1
   505  003B4C                     __ptext1:
   506                           	opt stack 0
   507  003B4C                     _spiConfig_1:
   508                           	opt stack 30
   509                           
   510                           ;main.c: 251: SSP1CON1bits.CKP = 0;
   511                           
   512                           ;incstack = 0
   513  003B4C  98C6               	bcf	4038,4,c	;volatile
   514                           
   515                           ;main.c: 252: SSP1STATbits.CKE = 1;
   516  003B4E  8CC7               	bsf	4039,6,c	;volatile
   517                           
   518                           ;main.c: 253: SSP1STATbits.SMP = 1;
   519  003B50  8EC7               	bsf	4039,7,c	;volatile
   520                           
   521                           ;main.c: 254: SSP1ADD = 0b00001111;
   522  003B52  0E0F               	movlw	15
   523  003B54  6EC8               	movwf	4040,c	;volatile
   524                           
   525                           ;main.c: 255: SSP1CON1bits.SSPM = 0b1010;
   526  003B56  50C6               	movf	4038,w,c	;volatile
   527  003B58  0BF0               	andlw	-16
   528  003B5A  090A               	iorlw	10
   529  003B5C  6EC6               	movwf	4038,c	;volatile
   530                           
   531                           ;main.c: 257: SSP1CON1bits.SSPEN = 1;
   532  003B5E  8AC6               	bsf	4038,5,c	;volatile
   533                           
   534                           ;main.c: 258: LATAbits.LATA2 = 1;
   535  003B60  8489               	bsf	3977,2,c	;volatile
   536  003B62  0012               	return	
   537  003B64                     __end_of_spiConfig_1:
   538                           	opt stack 0
   539                           tblptru	equ	0xFF8
   540                           tblptrh	equ	0xFF7
   541                           tblptrl	equ	0xFF6
   542                           tablat	equ	0xFF5
   543                           postinc0	equ	0xFEE
   544                           wreg	equ	0xFE8
   545                           postdec1	equ	0xFE5
   546                           fsr1l	equ	0xFE1
   547                           status	equ	0xFD8
   548                           
   549 ;; *************** function _portConfig *****************
   550 ;; Defined at:
   551 ;;		line 236 in file "main.c"
   552 ;; Parameters:    Size  Location     Type
   553 ;;		None
   554 ;; Auto vars:     Size  Location     Type
   555 ;;		None
   556 ;; Return value:  Size  Location     Type
   557 ;;		None               void
   558 ;; Registers used:
   559 ;;		wreg, status,2
   560 ;; Tracked objects:
   561 ;;		On entry : 0/0
   562 ;;		On exit  : 0/0
   563 ;;		Unchanged: 0/0
   564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   565 ;;      Params:         0       0       0       0
   566 ;;      Locals:         0       0       0       0
   567 ;;      Temps:          0       0       0       0
   568 ;;      Totals:         0       0       0       0
   569 ;;Total ram usage:        0 bytes
   570 ;; Hardware stack levels used:    1
   571 ;; This function calls:
   572 ;;		Nothing
   573 ;; This function is called by:
   574 ;;		_main
   575 ;; This function uses a non-reentrant model
   576 ;;
   577                           
   578                           	psect	text2
   579  003B64                     __ptext2:
   580                           	opt stack 0
   581  003B64                     _portConfig:
   582                           	opt stack 30
   583                           
   584                           ;main.c: 237: TRISA = 0b00001000;
   585                           
   586                           ;incstack = 0
   587  003B64  0E08               	movlw	8
   588  003B66  6E92               	movwf	3986,c	;volatile
   589                           
   590                           ;main.c: 238: TRISB = 0b00000000;
   591  003B68  0E00               	movlw	0
   592  003B6A  6E93               	movwf	3987,c	;volatile
   593                           
   594                           ;main.c: 239: TRISC = 0b00010000;
   595  003B6C  0E10               	movlw	16
   596  003B6E  6E94               	movwf	3988,c	;volatile
   597                           
   598                           ;main.c: 241: LATA = 0b00000100;
   599  003B70  0E04               	movlw	4
   600  003B72  6E89               	movwf	3977,c	;volatile
   601                           
   602                           ;main.c: 242: LATB = 0x00;
   603  003B74  0E00               	movlw	0
   604  003B76  6E8A               	movwf	3978,c	;volatile
   605                           
   606                           ;main.c: 243: LATC = 0x00;
   607  003B78  0E00               	movlw	0
   608  003B7A  6E8B               	movwf	3979,c	;volatile
   609  003B7C  0012               	return	
   610  003B7E                     __end_of_portConfig:
   611                           	opt stack 0
   612                           tblptru	equ	0xFF8
   613                           tblptrh	equ	0xFF7
   614                           tblptrl	equ	0xFF6
   615                           tablat	equ	0xFF5
   616                           postinc0	equ	0xFEE
   617                           wreg	equ	0xFE8
   618                           postdec1	equ	0xFE5
   619                           fsr1l	equ	0xFE1
   620                           status	equ	0xFD8
   621                           
   622 ;; *************** function _nrfTXData *****************
   623 ;; Defined at:
   624 ;;		line 429 in file "main.c"
   625 ;; Parameters:    Size  Location     Type
   626 ;;  len             2    2[COMRAM] int 
   627 ;; Auto vars:     Size  Location     Type
   628 ;;  i               2    8[COMRAM] int 
   629 ;; Return value:  Size  Location     Type
   630 ;;		None               void
   631 ;; Registers used:
   632 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   633 ;; Tracked objects:
   634 ;;		On entry : 0/0
   635 ;;		On exit  : 0/0
   636 ;;		Unchanged: 0/0
   637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   638 ;;      Params:         2       0       0       0
   639 ;;      Locals:         2       0       0       0
   640 ;;      Temps:          4       0       0       0
   641 ;;      Totals:         8       0       0       0
   642 ;;Total ram usage:        8 bytes
   643 ;; Hardware stack levels used:    1
   644 ;; Hardware stack levels required when called:    1
   645 ;; This function calls:
   646 ;;		_setCSN
   647 ;;		_spiTransferByte
   648 ;; This function is called by:
   649 ;;		_main
   650 ;; This function uses a non-reentrant model
   651 ;;
   652                           
   653                           	psect	text3
   654  003D50                     __ptext3:
   655                           	opt stack 0
   656  003D50                     _nrfTXData:
   657                           	opt stack 29
   658                           
   659                           ;main.c: 431: setCSN(0);
   660                           
   661                           ;incstack = 0
   662  003D50  0E00               	movlw	0
   663  003D52  6E24               	movwf	setCSN@level+1,c
   664  003D54  0E00               	movlw	0
   665  003D56  6E23               	movwf	setCSN@level,c
   666  003D58  EC8C  F01D         	call	_setCSN	;wreg free
   667                           
   668                           ;main.c: 433: spiTransferByte(0xA0);
   669  003D5C  0EA0               	movlw	160
   670  003D5E  EC9D  F01D         	call	_spiTransferByte
   671                           
   672                           ;main.c: 435: if (len != 0) {
   673  003D62  5026               	movf	nrfTXData@len+1,w,c
   674  003D64  1025               	iorwf	nrfTXData@len,w,c
   675  003D66  B4D8               	btfsc	status,2,c
   676  003D68  D026               	goto	l1015
   677                           
   678                           ;main.c: 436: for (int i=1;i<=len;i++) {
   679  003D6A  0E00               	movlw	0
   680  003D6C  6E2C               	movwf	nrfTXData@i+1,c
   681  003D6E  0E01               	movlw	1
   682  003D70  6E2B               	movwf	nrfTXData@i,c
   683  003D72  D017               	goto	l1013
   684  003D74                     l1009:
   685                           
   686                           ;main.c: 437: spiTransferByte(dataBufOut[i-1]);
   687  003D74  0EFF               	movlw	255
   688  003D76  6E27               	movwf	??_nrfTXData& (0+255),c
   689  003D78  0EFF               	movlw	255
   690  003D7A  6E28               	movwf	(??_nrfTXData+1)& (0+255),c
   691  003D7C  C02B  F029         	movff	nrfTXData@i,??_nrfTXData+2
   692  003D80  C02C  F02A         	movff	nrfTXData@i+1,??_nrfTXData+3
   693  003D84  5027               	movf	??_nrfTXData,w,c
   694  003D86  2629               	addwf	??_nrfTXData+2,f,c
   695  003D88  5028               	movf	??_nrfTXData+1,w,c
   696  003D8A  222A               	addwfc	??_nrfTXData+3,f,c
   697  003D8C  0E01               	movlw	low _dataBufOut
   698  003D8E  2429               	addwf	??_nrfTXData+2,w,c
   699  003D90  6ED9               	movwf	fsr2l,c
   700  003D92  0E00               	movlw	high _dataBufOut
   701  003D94  202A               	addwfc	??_nrfTXData+3,w,c
   702  003D96  6EDA               	movwf	fsr2h,c
   703  003D98  50DF               	movf	indf2,w,c
   704  003D9A  EC9D  F01D         	call	_spiTransferByte
   705  003D9E  4A2B               	infsnz	nrfTXData@i,f,c
   706  003DA0  2A2C               	incf	nrfTXData@i+1,f,c
   707  003DA2                     l1013:
   708  003DA2  5026               	movf	nrfTXData@len+1,w,c
   709  003DA4  0A80               	xorlw	128
   710  003DA6  6E27               	movwf	??_nrfTXData& (0+255),c
   711  003DA8  502B               	movf	nrfTXData@i,w,c
   712  003DAA  5C25               	subwf	nrfTXData@len,w,c
   713  003DAC  502C               	movf	nrfTXData@i+1,w,c
   714  003DAE  0A80               	xorlw	128
   715  003DB0  5827               	subwfb	??_nrfTXData& (0+255),w,c
   716  003DB2  B0D8               	btfsc	status,0,c
   717  003DB4  D7DF               	goto	l1009
   718  003DB6                     l1015:
   719                           
   720                           ;main.c: 438: }
   721                           ;main.c: 439: }
   722                           ;main.c: 441: setCSN(1);
   723  003DB6  0E00               	movlw	0
   724  003DB8  6E24               	movwf	setCSN@level+1,c
   725  003DBA  0E01               	movlw	1
   726  003DBC  6E23               	movwf	setCSN@level,c
   727  003DBE  EC8C  F01D         	call	_setCSN	;wreg free
   728                           
   729                           ;main.c: 444: LATAbits.LATA1 = 1;
   730  003DC2  8289               	bsf	3977,1,c	;volatile
   731                           
   732                           ;main.c: 445: _delay((unsigned long)((12)*(64000000/4000000.0)));
   733  003DC4  0E40               	movlw	64
   734  003DC6                     u327:
   735  003DC6  2EE8               	decfsz	wreg,f,c
   736  003DC8  D7FE               	goto	u327
   737                           
   738                           ;main.c: 446: LATAbits.LATA1 = 0;
   739  003DCA  9289               	bcf	3977,1,c	;volatile
   740  003DCC  0012               	return	
   741  003DCE                     __end_of_nrfTXData:
   742                           	opt stack 0
   743                           tblptru	equ	0xFF8
   744                           tblptrh	equ	0xFF7
   745                           tblptrl	equ	0xFF6
   746                           tablat	equ	0xFF5
   747                           postinc0	equ	0xFEE
   748                           wreg	equ	0xFE8
   749                           postdec1	equ	0xFE5
   750                           fsr1l	equ	0xFE1
   751                           indf2	equ	0xFDF
   752                           fsr2h	equ	0xFDA
   753                           fsr2l	equ	0xFD9
   754                           status	equ	0xFD8
   755                           
   756 ;; *************** function _nrfGetStatus *****************
   757 ;; Defined at:
   758 ;;		line 312 in file "main.c"
   759 ;; Parameters:    Size  Location     Type
   760 ;;		None
   761 ;; Auto vars:     Size  Location     Type
   762 ;;		None
   763 ;; Return value:  Size  Location     Type
   764 ;;		None               void
   765 ;; Registers used:
   766 ;;		wreg, status,2, status,0, cstack
   767 ;; Tracked objects:
   768 ;;		On entry : 0/0
   769 ;;		On exit  : 0/0
   770 ;;		Unchanged: 0/0
   771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   772 ;;      Params:         0       0       0       0
   773 ;;      Locals:         0       0       0       0
   774 ;;      Temps:          0       0       0       0
   775 ;;      Totals:         0       0       0       0
   776 ;;Total ram usage:        0 bytes
   777 ;; Hardware stack levels used:    1
   778 ;; Hardware stack levels required when called:    1
   779 ;; This function calls:
   780 ;;		_setCSN
   781 ;;		_spiTransferByte
   782 ;; This function is called by:
   783 ;;		_main
   784 ;; This function uses a non-reentrant model
   785 ;;
   786                           
   787                           	psect	text4
   788  003B7E                     __ptext4:
   789                           	opt stack 0
   790  003B7E                     _nrfGetStatus:
   791                           	opt stack 29
   792                           
   793                           ;main.c: 314: setCSN(0);
   794                           
   795                           ;incstack = 0
   796  003B7E  0E00               	movlw	0
   797  003B80  6E24               	movwf	setCSN@level+1,c
   798  003B82  0E00               	movlw	0
   799  003B84  6E23               	movwf	setCSN@level,c
   800  003B86  EC8C  F01D         	call	_setCSN	;wreg free
   801                           
   802                           ;main.c: 316: nrfSTATUS = spiTransferByte(0xFF);
   803  003B8A  0EFF               	movlw	255
   804  003B8C  EC9D  F01D         	call	_spiTransferByte
   805  003B90  6E22               	movwf	_nrfSTATUS,c
   806                           
   807                           ;main.c: 318: setCSN(1);
   808  003B92  0E00               	movlw	0
   809  003B94  6E24               	movwf	setCSN@level+1,c
   810  003B96  0E01               	movlw	1
   811  003B98  6E23               	movwf	setCSN@level,c
   812  003B9A  EC8C  F01D         	call	_setCSN	;wreg free
   813  003B9E  0012               	return	
   814  003BA0                     __end_of_nrfGetStatus:
   815                           	opt stack 0
   816                           tblptru	equ	0xFF8
   817                           tblptrh	equ	0xFF7
   818                           tblptrl	equ	0xFF6
   819                           tablat	equ	0xFF5
   820                           postinc0	equ	0xFEE
   821                           wreg	equ	0xFE8
   822                           postdec1	equ	0xFE5
   823                           fsr1l	equ	0xFE1
   824                           indf2	equ	0xFDF
   825                           fsr2h	equ	0xFDA
   826                           fsr2l	equ	0xFD9
   827                           status	equ	0xFD8
   828                           
   829 ;; *************** function _nrfConfig *****************
   830 ;; Defined at:
   831 ;;		line 264 in file "main.c"
   832 ;; Parameters:    Size  Location     Type
   833 ;;		None
   834 ;; Auto vars:     Size  Location     Type
   835 ;;		None
   836 ;; Return value:  Size  Location     Type
   837 ;;		None               void
   838 ;; Registers used:
   839 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   840 ;; Tracked objects:
   841 ;;		On entry : 0/0
   842 ;;		On exit  : 0/0
   843 ;;		Unchanged: 0/0
   844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   845 ;;      Params:         0       0       0       0
   846 ;;      Locals:         0       0       0       0
   847 ;;      Temps:          0       0       0       0
   848 ;;      Totals:         0       0       0       0
   849 ;;Total ram usage:        0 bytes
   850 ;; Hardware stack levels used:    1
   851 ;; Hardware stack levels required when called:    2
   852 ;; This function calls:
   853 ;;		_nrfConfigReg
   854 ;;		_nrfSetRXAddr
   855 ;;		_nrfSetTXAddr
   856 ;;		_spiTransfer
   857 ;; This function is called by:
   858 ;;		_main
   859 ;; This function uses a non-reentrant model
   860 ;;
   861                           
   862                           	psect	text5
   863  003F24                     __ptext5:
   864                           	opt stack 0
   865  003F24                     _nrfConfig:
   866                           	opt stack 28
   867                           
   868                           ;main.c: 267: nrfConfigReg('w',0x00,CONFIG_CURR);
   869                           
   870                           ;incstack = 0
   871  003F24  0E00               	movlw	0
   872  003F26  6E25               	movwf	nrfConfigReg@command,c
   873  003F28  C035  F026         	movff	_CONFIG_CURR,nrfConfigReg@data
   874  003F2C  0E77               	movlw	119
   875  003F2E  EC0D  F01E         	call	_nrfConfigReg
   876                           
   877                           ;main.c: 269: nrfConfigReg('w',0x01,EN_AA_CURR);
   878  003F32  0E01               	movlw	1
   879  003F34  6E25               	movwf	nrfConfigReg@command,c
   880  003F36  C021  F026         	movff	_EN_AA_CURR,nrfConfigReg@data
   881  003F3A  0E77               	movlw	119
   882  003F3C  EC0D  F01E         	call	_nrfConfigReg
   883                           
   884                           ;main.c: 271: nrfConfigReg('w',0x02,EN_RXADDR_CURR);
   885  003F40  0E02               	movlw	2
   886  003F42  6E25               	movwf	nrfConfigReg@command,c
   887  003F44  C037  F026         	movff	_EN_RXADDR_CURR,nrfConfigReg@data
   888  003F48  0E77               	movlw	119
   889  003F4A  EC0D  F01E         	call	_nrfConfigReg
   890                           
   891                           ;main.c: 273: nrfConfigReg('w',0x03,SETUP_AW_CURR);
   892  003F4E  0E03               	movlw	3
   893  003F50  6E25               	movwf	nrfConfigReg@command,c
   894  003F52  C03C  F026         	movff	_SETUP_AW_CURR,nrfConfigReg@data
   895  003F56  0E77               	movlw	119
   896  003F58  EC0D  F01E         	call	_nrfConfigReg
   897                           
   898                           ;main.c: 275: nrfConfigReg('w',0x04,SETUP_RETR_CURR);
   899  003F5C  0E04               	movlw	4
   900  003F5E  6E25               	movwf	nrfConfigReg@command,c
   901  003F60  C03D  F026         	movff	_SETUP_RETR_CURR,nrfConfigReg@data
   902  003F64  0E77               	movlw	119
   903  003F66  EC0D  F01E         	call	_nrfConfigReg
   904                           
   905                           ;main.c: 277: nrfConfigReg('w',0x05,RF_CH_CURR);
   906  003F6A  0E05               	movlw	5
   907  003F6C  6E25               	movwf	nrfConfigReg@command,c
   908  003F6E  C039  F026         	movff	_RF_CH_CURR,nrfConfigReg@data
   909  003F72  0E77               	movlw	119
   910  003F74  EC0D  F01E         	call	_nrfConfigReg
   911                           
   912                           ;main.c: 279: nrfConfigReg('w',0x06,RF_SETUP_CURR);
   913  003F78  0E06               	movlw	6
   914  003F7A  6E25               	movwf	nrfConfigReg@command,c
   915  003F7C  C03A  F026         	movff	_RF_SETUP_CURR,nrfConfigReg@data
   916  003F80  0E77               	movlw	119
   917  003F82  EC0D  F01E         	call	_nrfConfigReg
   918                           
   919                           ;main.c: 281: nrfSetRXAddr(0x0A,RX_ADDRESS,4);
   920  003F86  0E00               	movlw	high _RX_ADDRESS
   921  003F88  6E26               	movwf	nrfSetRXAddr@addr+1,c
   922  003F8A  0E3E               	movlw	low _RX_ADDRESS
   923  003F8C  6E25               	movwf	nrfSetRXAddr@addr,c
   924  003F8E  0E00               	movlw	0
   925  003F90  6E28               	movwf	nrfSetRXAddr@len+1,c
   926  003F92  0E04               	movlw	4
   927  003F94  6E27               	movwf	nrfSetRXAddr@len,c
   928  003F96  0E0A               	movlw	10
   929  003F98  EC6C  F01E         	call	_nrfSetRXAddr
   930                           
   931                           ;main.c: 283: nrfSetTXAddr(TX_ADDRESS,4);
   932  003F9C  0E00               	movlw	high _TX_ADDRESS
   933  003F9E  6E26               	movwf	nrfSetTXAddr@addr+1,c
   934  003FA0  0E42               	movlw	low _TX_ADDRESS
   935  003FA2  6E25               	movwf	nrfSetTXAddr@addr,c
   936  003FA4  0E00               	movlw	0
   937  003FA6  6E28               	movwf	nrfSetTXAddr@len+1,c
   938  003FA8  0E04               	movlw	4
   939  003FAA  6E27               	movwf	nrfSetTXAddr@len,c
   940  003FAC  EC32  F01E         	call	_nrfSetTXAddr	;wreg free
   941                           
   942                           ;main.c: 285: nrfConfigReg('w',0x11,RX_PW_P0_CURR);
   943  003FB0  0E11               	movlw	17
   944  003FB2  6E25               	movwf	nrfConfigReg@command,c
   945  003FB4  C03B  F026         	movff	_RX_PW_P0_CURR,nrfConfigReg@data
   946  003FB8  0E77               	movlw	119
   947  003FBA  EC0D  F01E         	call	_nrfConfigReg
   948                           
   949                           ;main.c: 287: nrfConfigReg('w',0x1C,DYNPD_CURR);
   950  003FBE  0E1C               	movlw	28
   951  003FC0  6E25               	movwf	nrfConfigReg@command,c
   952  003FC2  C036  F026         	movff	_DYNPD_CURR,nrfConfigReg@data
   953  003FC6  0E77               	movlw	119
   954  003FC8  EC0D  F01E         	call	_nrfConfigReg
   955                           
   956                           ;main.c: 289: nrfConfigReg('w',0x1D,FEATURE_CURR);
   957  003FCC  0E1D               	movlw	29
   958  003FCE  6E25               	movwf	nrfConfigReg@command,c
   959  003FD0  C038  F026         	movff	_FEATURE_CURR,nrfConfigReg@data
   960  003FD4  0E77               	movlw	119
   961  003FD6  EC0D  F01E         	call	_nrfConfigReg
   962                           
   963                           ;main.c: 291: spiTransfer('n',0xE1,0);
   964  003FDA  0EE1               	movlw	225
   965  003FDC  6E25               	movwf	spiTransfer@command,c
   966  003FDE  0E00               	movlw	0
   967  003FE0  6E27               	movwf	spiTransfer@len+1,c
   968  003FE2  0E00               	movlw	0
   969  003FE4  6E26               	movwf	spiTransfer@len,c
   970  003FE6  0E6E               	movlw	110
   971  003FE8  EC2D  F01F         	call	_spiTransfer
   972                           
   973                           ;main.c: 293: spiTransfer('n',0xE2,0);
   974  003FEC  0EE2               	movlw	226
   975  003FEE  6E25               	movwf	spiTransfer@command,c
   976  003FF0  0E00               	movlw	0
   977  003FF2  6E27               	movwf	spiTransfer@len+1,c
   978  003FF4  0E00               	movlw	0
   979  003FF6  6E26               	movwf	spiTransfer@len,c
   980  003FF8  0E6E               	movlw	110
   981  003FFA  EC2D  F01F         	call	_spiTransfer
   982  003FFE  0012               	return	
   983  004000                     __end_of_nrfConfig:
   984                           	opt stack 0
   985                           tblptru	equ	0xFF8
   986                           tblptrh	equ	0xFF7
   987                           tblptrl	equ	0xFF6
   988                           tablat	equ	0xFF5
   989                           postinc0	equ	0xFEE
   990                           wreg	equ	0xFE8
   991                           postdec1	equ	0xFE5
   992                           fsr1l	equ	0xFE1
   993                           indf2	equ	0xFDF
   994                           fsr2h	equ	0xFDA
   995                           fsr2l	equ	0xFD9
   996                           status	equ	0xFD8
   997                           
   998 ;; *************** function _spiTransfer *****************
   999 ;; Defined at:
  1000 ;;		line 392 in file "main.c"
  1001 ;; Parameters:    Size  Location     Type
  1002 ;;  wrn             1    wreg     unsigned char 
  1003 ;;  command         1    2[COMRAM] unsigned char 
  1004 ;;  len             2    3[COMRAM] int 
  1005 ;; Auto vars:     Size  Location     Type
  1006 ;;  wrn             1   13[COMRAM] unsigned char 
  1007 ;;  i               2   14[COMRAM] int 
  1008 ;; Return value:  Size  Location     Type
  1009 ;;		None               void
  1010 ;; Registers used:
  1011 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1012 ;; Tracked objects:
  1013 ;;		On entry : 0/0
  1014 ;;		On exit  : 0/0
  1015 ;;		Unchanged: 0/0
  1016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1017 ;;      Params:         3       0       0       0
  1018 ;;      Locals:         3       0       0       0
  1019 ;;      Temps:          8       0       0       0
  1020 ;;      Totals:        14       0       0       0
  1021 ;;Total ram usage:       14 bytes
  1022 ;; Hardware stack levels used:    1
  1023 ;; Hardware stack levels required when called:    1
  1024 ;; This function calls:
  1025 ;;		_setCSN
  1026 ;;		_spiTransferByte
  1027 ;; This function is called by:
  1028 ;;		_main
  1029 ;;		_nrfConfig
  1030 ;; This function uses a non-reentrant model
  1031 ;;
  1032                           
  1033                           	psect	text6
  1034  003E5A                     __ptext6:
  1035                           	opt stack 0
  1036  003E5A                     _spiTransfer:
  1037                           	opt stack 29
  1038                           
  1039                           ;incstack = 0
  1040                           ;spiTransfer@wrn stored from wreg
  1041  003E5A  6E30               	movwf	spiTransfer@wrn,c
  1042                           
  1043                           ;main.c: 394: setCSN(0);
  1044  003E5C  0E00               	movlw	0
  1045  003E5E  6E24               	movwf	setCSN@level+1,c
  1046  003E60  0E00               	movlw	0
  1047  003E62  6E23               	movwf	setCSN@level,c
  1048  003E64  EC8C  F01D         	call	_setCSN	;wreg free
  1049                           
  1050                           ;main.c: 396: if (wrn == 'w') {
  1051  003E68  5030               	movf	spiTransfer@wrn,w,c
  1052  003E6A  0A77               	xorlw	119
  1053  003E6C  A4D8               	btfss	status,2,c
  1054  003E6E  D005               	goto	l925
  1055                           
  1056                           ;main.c: 397: spiTransferByte(0x20|command);
  1057  003E70  5025               	movf	spiTransfer@command,w,c
  1058  003E72  0920               	iorlw	32
  1059  003E74  EC9D  F01D         	call	_spiTransferByte
  1060                           
  1061                           ;main.c: 398: } else if (wrn == 'r') {
  1062  003E78  D00F               	goto	l933
  1063  003E7A                     l925:
  1064  003E7A  5030               	movf	spiTransfer@wrn,w,c
  1065  003E7C  0A72               	xorlw	114
  1066  003E7E  A4D8               	btfss	status,2,c
  1067  003E80  D004               	goto	l929
  1068                           
  1069                           ;main.c: 399: spiTransferByte(0x00|command);
  1070  003E82  5025               	movf	spiTransfer@command,w,c
  1071  003E84  EC9D  F01D         	call	_spiTransferByte
  1072                           
  1073                           ;main.c: 400: } else if(wrn == 'n') {
  1074  003E88  D007               	goto	l933
  1075  003E8A                     l929:
  1076  003E8A  5030               	movf	spiTransfer@wrn,w,c
  1077  003E8C  0A6E               	xorlw	110
  1078  003E8E  A4D8               	btfss	status,2,c
  1079  003E90  D003               	goto	l933
  1080                           
  1081                           ;main.c: 401: spiTransferByte(command);
  1082  003E92  5025               	movf	spiTransfer@command,w,c
  1083  003E94  EC9D  F01D         	call	_spiTransferByte
  1084  003E98                     l933:
  1085                           
  1086                           ;main.c: 402: }
  1087                           ;main.c: 404: if (len != 0) {
  1088  003E98  5027               	movf	spiTransfer@len+1,w,c
  1089  003E9A  1026               	iorwf	spiTransfer@len,w,c
  1090  003E9C  B4D8               	btfsc	status,2,c
  1091  003E9E  D03B               	goto	l943
  1092                           
  1093                           ;main.c: 405: for (int i=1;i<=len;i++) {
  1094  003EA0  0E00               	movlw	0
  1095  003EA2  6E32               	movwf	spiTransfer@i+1,c
  1096  003EA4  0E01               	movlw	1
  1097  003EA6  6E31               	movwf	spiTransfer@i,c
  1098  003EA8  D02C               	goto	l941
  1099  003EAA                     l937:
  1100                           
  1101                           ;main.c: 406: dataBufIn[i-1] = spiTransferByte(dataBufOut[i-1]);
  1102  003EAA  0EFF               	movlw	255
  1103  003EAC  6E28               	movwf	??_spiTransfer& (0+255),c
  1104  003EAE  0EFF               	movlw	255
  1105  003EB0  6E29               	movwf	(??_spiTransfer+1)& (0+255),c
  1106  003EB2  C031  F02A         	movff	spiTransfer@i,??_spiTransfer+2
  1107  003EB6  C032  F02B         	movff	spiTransfer@i+1,??_spiTransfer+3
  1108  003EBA  5028               	movf	??_spiTransfer,w,c
  1109  003EBC  262A               	addwf	??_spiTransfer+2,f,c
  1110  003EBE  5029               	movf	??_spiTransfer+1,w,c
  1111  003EC0  222B               	addwfc	??_spiTransfer+3,f,c
  1112  003EC2  0100               	movlb	0	; () banked
  1113  003EC4  0E60               	movlw	low _dataBufIn
  1114  003EC6  242A               	addwf	??_spiTransfer+2,w,c
  1115  003EC8  6ED9               	movwf	fsr2l,c
  1116  003ECA  0100               	movlb	0	; () banked
  1117  003ECC  0E00               	movlw	high _dataBufIn
  1118  003ECE  202B               	addwfc	??_spiTransfer+3,w,c
  1119  003ED0  6EDA               	movwf	fsr2h,c
  1120  003ED2  0EFF               	movlw	255
  1121  003ED4  6E2C               	movwf	(??_spiTransfer+4)& (0+255),c
  1122  003ED6  0EFF               	movlw	255
  1123  003ED8  6E2D               	movwf	(??_spiTransfer+5)& (0+255),c
  1124  003EDA  C031  F02E         	movff	spiTransfer@i,??_spiTransfer+6
  1125  003EDE  C032  F02F         	movff	spiTransfer@i+1,??_spiTransfer+7
  1126  003EE2  502C               	movf	??_spiTransfer+4,w,c
  1127  003EE4  262E               	addwf	??_spiTransfer+6,f,c
  1128  003EE6  502D               	movf	??_spiTransfer+5,w,c
  1129  003EE8  222F               	addwfc	??_spiTransfer+7,f,c
  1130  003EEA  0E01               	movlw	low _dataBufOut
  1131  003EEC  242E               	addwf	??_spiTransfer+6,w,c
  1132  003EEE  6EE1               	movwf	fsr1l,c
  1133  003EF0  0E00               	movlw	high _dataBufOut
  1134  003EF2  202F               	addwfc	??_spiTransfer+7,w,c
  1135  003EF4  6EE2               	movwf	fsr1h,c
  1136  003EF6  50E7               	movf	indf1,w,c
  1137  003EF8  EC9D  F01D         	call	_spiTransferByte
  1138  003EFC  6EDF               	movwf	indf2,c
  1139  003EFE  4A31               	infsnz	spiTransfer@i,f,c
  1140  003F00  2A32               	incf	spiTransfer@i+1,f,c
  1141  003F02                     l941:
  1142  003F02  5027               	movf	spiTransfer@len+1,w,c
  1143  003F04  0A80               	xorlw	128
  1144  003F06  6E28               	movwf	??_spiTransfer& (0+255),c
  1145  003F08  5031               	movf	spiTransfer@i,w,c
  1146  003F0A  5C26               	subwf	spiTransfer@len,w,c
  1147  003F0C  5032               	movf	spiTransfer@i+1,w,c
  1148  003F0E  0A80               	xorlw	128
  1149  003F10  5828               	subwfb	??_spiTransfer& (0+255),w,c
  1150  003F12  B0D8               	btfsc	status,0,c
  1151  003F14  D7CA               	goto	l937
  1152  003F16                     l943:
  1153                           
  1154                           ;main.c: 407: }
  1155                           ;main.c: 408: }
  1156                           ;main.c: 410: setCSN(1);
  1157  003F16  0E00               	movlw	0
  1158  003F18  6E24               	movwf	setCSN@level+1,c
  1159  003F1A  0E01               	movlw	1
  1160  003F1C  6E23               	movwf	setCSN@level,c
  1161  003F1E  EC8C  F01D         	call	_setCSN	;wreg free
  1162  003F22  0012               	return	
  1163  003F24                     __end_of_spiTransfer:
  1164                           	opt stack 0
  1165                           tblptru	equ	0xFF8
  1166                           tblptrh	equ	0xFF7
  1167                           tblptrl	equ	0xFF6
  1168                           tablat	equ	0xFF5
  1169                           postinc0	equ	0xFEE
  1170                           wreg	equ	0xFE8
  1171                           indf1	equ	0xFE7
  1172                           postdec1	equ	0xFE5
  1173                           fsr1h	equ	0xFE2
  1174                           fsr1l	equ	0xFE1
  1175                           indf2	equ	0xFDF
  1176                           fsr2h	equ	0xFDA
  1177                           fsr2l	equ	0xFD9
  1178                           status	equ	0xFD8
  1179                           
  1180 ;; *************** function _nrfSetTXAddr *****************
  1181 ;; Defined at:
  1182 ;;		line 346 in file "main.c"
  1183 ;; Parameters:    Size  Location     Type
  1184 ;;  addr            2    2[COMRAM] PTR unsigned char 
  1185 ;;		 -> TX_ADDRESS(4), 
  1186 ;;  len             2    4[COMRAM] int 
  1187 ;; Auto vars:     Size  Location     Type
  1188 ;;  i               2   10[COMRAM] int 
  1189 ;; Return value:  Size  Location     Type
  1190 ;;		None               void
  1191 ;; Registers used:
  1192 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1193 ;; Tracked objects:
  1194 ;;		On entry : 0/0
  1195 ;;		On exit  : 0/0
  1196 ;;		Unchanged: 0/0
  1197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1198 ;;      Params:         4       0       0       0
  1199 ;;      Locals:         2       0       0       0
  1200 ;;      Temps:          4       0       0       0
  1201 ;;      Totals:        10       0       0       0
  1202 ;;Total ram usage:       10 bytes
  1203 ;; Hardware stack levels used:    1
  1204 ;; Hardware stack levels required when called:    1
  1205 ;; This function calls:
  1206 ;;		_setCSN
  1207 ;;		_spiTransferByte
  1208 ;; This function is called by:
  1209 ;;		_nrfConfig
  1210 ;; This function uses a non-reentrant model
  1211 ;;
  1212                           
  1213                           	psect	text7
  1214  003C64                     __ptext7:
  1215                           	opt stack 0
  1216  003C64                     _nrfSetTXAddr:
  1217                           	opt stack 28
  1218                           
  1219                           ;main.c: 348: setCSN(0);
  1220                           
  1221                           ;incstack = 0
  1222  003C64  0E00               	movlw	0
  1223  003C66  6E24               	movwf	setCSN@level+1,c
  1224  003C68  0E00               	movlw	0
  1225  003C6A  6E23               	movwf	setCSN@level,c
  1226  003C6C  EC8C  F01D         	call	_setCSN	;wreg free
  1227                           
  1228                           ;main.c: 350: spiTransferByte(0x20|0x10);
  1229  003C70  0E30               	movlw	48
  1230  003C72  EC9D  F01D         	call	_spiTransferByte
  1231                           
  1232                           ;main.c: 352: if (len != 0) {
  1233  003C76  5028               	movf	nrfSetTXAddr@len+1,w,c
  1234  003C78  1027               	iorwf	nrfSetTXAddr@len,w,c
  1235  003C7A  B4D8               	btfsc	status,2,c
  1236  003C7C  D026               	goto	l989
  1237                           
  1238                           ;main.c: 354: for (int i=1;i<=len;i++) {
  1239  003C7E  0E00               	movlw	0
  1240  003C80  6E2E               	movwf	nrfSetTXAddr@i+1,c
  1241  003C82  0E01               	movlw	1
  1242  003C84  6E2D               	movwf	nrfSetTXAddr@i,c
  1243  003C86  D017               	goto	l987
  1244  003C88                     l983:
  1245                           
  1246                           ;main.c: 355: spiTransferByte(addr[i-1]);
  1247  003C88  0EFF               	movlw	255
  1248  003C8A  6E29               	movwf	??_nrfSetTXAddr& (0+255),c
  1249  003C8C  0EFF               	movlw	255
  1250  003C8E  6E2A               	movwf	(??_nrfSetTXAddr+1)& (0+255),c
  1251  003C90  C02D  F02B         	movff	nrfSetTXAddr@i,??_nrfSetTXAddr+2
  1252  003C94  C02E  F02C         	movff	nrfSetTXAddr@i+1,??_nrfSetTXAddr+3
  1253  003C98  5029               	movf	??_nrfSetTXAddr,w,c
  1254  003C9A  262B               	addwf	??_nrfSetTXAddr+2,f,c
  1255  003C9C  502A               	movf	??_nrfSetTXAddr+1,w,c
  1256  003C9E  222C               	addwfc	??_nrfSetTXAddr+3,f,c
  1257  003CA0  502B               	movf	??_nrfSetTXAddr+2,w,c
  1258  003CA2  2425               	addwf	nrfSetTXAddr@addr,w,c
  1259  003CA4  6ED9               	movwf	fsr2l,c
  1260  003CA6  502C               	movf	??_nrfSetTXAddr+3,w,c
  1261  003CA8  2026               	addwfc	nrfSetTXAddr@addr+1,w,c
  1262  003CAA  6EDA               	movwf	fsr2h,c
  1263  003CAC  50DF               	movf	indf2,w,c
  1264  003CAE  EC9D  F01D         	call	_spiTransferByte
  1265  003CB2  4A2D               	infsnz	nrfSetTXAddr@i,f,c
  1266  003CB4  2A2E               	incf	nrfSetTXAddr@i+1,f,c
  1267  003CB6                     l987:
  1268  003CB6  5028               	movf	nrfSetTXAddr@len+1,w,c
  1269  003CB8  0A80               	xorlw	128
  1270  003CBA  6E29               	movwf	??_nrfSetTXAddr& (0+255),c
  1271  003CBC  502D               	movf	nrfSetTXAddr@i,w,c
  1272  003CBE  5C27               	subwf	nrfSetTXAddr@len,w,c
  1273  003CC0  502E               	movf	nrfSetTXAddr@i+1,w,c
  1274  003CC2  0A80               	xorlw	128
  1275  003CC4  5829               	subwfb	??_nrfSetTXAddr& (0+255),w,c
  1276  003CC6  B0D8               	btfsc	status,0,c
  1277  003CC8  D7DF               	goto	l983
  1278  003CCA                     l989:
  1279                           
  1280                           ;main.c: 356: }
  1281                           ;main.c: 357: }
  1282                           ;main.c: 359: setCSN(1);
  1283  003CCA  0E00               	movlw	0
  1284  003CCC  6E24               	movwf	setCSN@level+1,c
  1285  003CCE  0E01               	movlw	1
  1286  003CD0  6E23               	movwf	setCSN@level,c
  1287  003CD2  EC8C  F01D         	call	_setCSN	;wreg free
  1288  003CD6  0012               	return	
  1289  003CD8                     __end_of_nrfSetTXAddr:
  1290                           	opt stack 0
  1291                           tblptru	equ	0xFF8
  1292                           tblptrh	equ	0xFF7
  1293                           tblptrl	equ	0xFF6
  1294                           tablat	equ	0xFF5
  1295                           postinc0	equ	0xFEE
  1296                           wreg	equ	0xFE8
  1297                           indf1	equ	0xFE7
  1298                           postdec1	equ	0xFE5
  1299                           fsr1h	equ	0xFE2
  1300                           fsr1l	equ	0xFE1
  1301                           indf2	equ	0xFDF
  1302                           fsr2h	equ	0xFDA
  1303                           fsr2l	equ	0xFD9
  1304                           status	equ	0xFD8
  1305                           
  1306 ;; *************** function _nrfSetRXAddr *****************
  1307 ;; Defined at:
  1308 ;;		line 368 in file "main.c"
  1309 ;; Parameters:    Size  Location     Type
  1310 ;;  pipe            1    wreg     unsigned char 
  1311 ;;  addr            2    2[COMRAM] PTR unsigned char 
  1312 ;;		 -> RX_ADDRESS(4), 
  1313 ;;  len             2    4[COMRAM] int 
  1314 ;; Auto vars:     Size  Location     Type
  1315 ;;  pipe            1   10[COMRAM] unsigned char 
  1316 ;;  i               2   11[COMRAM] int 
  1317 ;; Return value:  Size  Location     Type
  1318 ;;		None               void
  1319 ;; Registers used:
  1320 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1321 ;; Tracked objects:
  1322 ;;		On entry : 0/0
  1323 ;;		On exit  : 0/0
  1324 ;;		Unchanged: 0/0
  1325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1326 ;;      Params:         4       0       0       0
  1327 ;;      Locals:         3       0       0       0
  1328 ;;      Temps:          4       0       0       0
  1329 ;;      Totals:        11       0       0       0
  1330 ;;Total ram usage:       11 bytes
  1331 ;; Hardware stack levels used:    1
  1332 ;; Hardware stack levels required when called:    1
  1333 ;; This function calls:
  1334 ;;		_setCSN
  1335 ;;		_spiTransferByte
  1336 ;; This function is called by:
  1337 ;;		_nrfConfig
  1338 ;; This function uses a non-reentrant model
  1339 ;;
  1340                           
  1341                           	psect	text8
  1342  003CD8                     __ptext8:
  1343                           	opt stack 0
  1344  003CD8                     _nrfSetRXAddr:
  1345                           	opt stack 28
  1346                           
  1347                           ;incstack = 0
  1348                           ;nrfSetRXAddr@pipe stored from wreg
  1349  003CD8  6E2D               	movwf	nrfSetRXAddr@pipe,c
  1350                           
  1351                           ;main.c: 370: setCSN(0);
  1352  003CDA  0E00               	movlw	0
  1353  003CDC  6E24               	movwf	setCSN@level+1,c
  1354  003CDE  0E00               	movlw	0
  1355  003CE0  6E23               	movwf	setCSN@level,c
  1356  003CE2  EC8C  F01D         	call	_setCSN	;wreg free
  1357                           
  1358                           ;main.c: 372: spiTransferByte(0x20|pipe);
  1359  003CE6  502D               	movf	nrfSetRXAddr@pipe,w,c
  1360  003CE8  0920               	iorlw	32
  1361  003CEA  EC9D  F01D         	call	_spiTransferByte
  1362                           
  1363                           ;main.c: 374: if (len != 0) {
  1364  003CEE  5028               	movf	nrfSetRXAddr@len+1,w,c
  1365  003CF0  1027               	iorwf	nrfSetRXAddr@len,w,c
  1366  003CF2  B4D8               	btfsc	status,2,c
  1367  003CF4  D026               	goto	l973
  1368                           
  1369                           ;main.c: 376: for (int i=1;i<=len;i++) {
  1370  003CF6  0E00               	movlw	0
  1371  003CF8  6E2F               	movwf	nrfSetRXAddr@i+1,c
  1372  003CFA  0E01               	movlw	1
  1373  003CFC  6E2E               	movwf	nrfSetRXAddr@i,c
  1374  003CFE  D017               	goto	l971
  1375  003D00                     l967:
  1376                           
  1377                           ;main.c: 377: spiTransferByte(addr[i-1]);
  1378  003D00  0EFF               	movlw	255
  1379  003D02  6E29               	movwf	??_nrfSetRXAddr& (0+255),c
  1380  003D04  0EFF               	movlw	255
  1381  003D06  6E2A               	movwf	(??_nrfSetRXAddr+1)& (0+255),c
  1382  003D08  C02E  F02B         	movff	nrfSetRXAddr@i,??_nrfSetRXAddr+2
  1383  003D0C  C02F  F02C         	movff	nrfSetRXAddr@i+1,??_nrfSetRXAddr+3
  1384  003D10  5029               	movf	??_nrfSetRXAddr,w,c
  1385  003D12  262B               	addwf	??_nrfSetRXAddr+2,f,c
  1386  003D14  502A               	movf	??_nrfSetRXAddr+1,w,c
  1387  003D16  222C               	addwfc	??_nrfSetRXAddr+3,f,c
  1388  003D18  502B               	movf	??_nrfSetRXAddr+2,w,c
  1389  003D1A  2425               	addwf	nrfSetRXAddr@addr,w,c
  1390  003D1C  6ED9               	movwf	fsr2l,c
  1391  003D1E  502C               	movf	??_nrfSetRXAddr+3,w,c
  1392  003D20  2026               	addwfc	nrfSetRXAddr@addr+1,w,c
  1393  003D22  6EDA               	movwf	fsr2h,c
  1394  003D24  50DF               	movf	indf2,w,c
  1395  003D26  EC9D  F01D         	call	_spiTransferByte
  1396  003D2A  4A2E               	infsnz	nrfSetRXAddr@i,f,c
  1397  003D2C  2A2F               	incf	nrfSetRXAddr@i+1,f,c
  1398  003D2E                     l971:
  1399  003D2E  5028               	movf	nrfSetRXAddr@len+1,w,c
  1400  003D30  0A80               	xorlw	128
  1401  003D32  6E29               	movwf	??_nrfSetRXAddr& (0+255),c
  1402  003D34  502E               	movf	nrfSetRXAddr@i,w,c
  1403  003D36  5C27               	subwf	nrfSetRXAddr@len,w,c
  1404  003D38  502F               	movf	nrfSetRXAddr@i+1,w,c
  1405  003D3A  0A80               	xorlw	128
  1406  003D3C  5829               	subwfb	??_nrfSetRXAddr& (0+255),w,c
  1407  003D3E  B0D8               	btfsc	status,0,c
  1408  003D40  D7DF               	goto	l967
  1409  003D42                     l973:
  1410                           
  1411                           ;main.c: 378: }
  1412                           ;main.c: 379: }
  1413                           ;main.c: 381: setCSN(1);
  1414  003D42  0E00               	movlw	0
  1415  003D44  6E24               	movwf	setCSN@level+1,c
  1416  003D46  0E01               	movlw	1
  1417  003D48  6E23               	movwf	setCSN@level,c
  1418  003D4A  EC8C  F01D         	call	_setCSN	;wreg free
  1419  003D4E  0012               	return	
  1420  003D50                     __end_of_nrfSetRXAddr:
  1421                           	opt stack 0
  1422                           tblptru	equ	0xFF8
  1423                           tblptrh	equ	0xFF7
  1424                           tblptrl	equ	0xFF6
  1425                           tablat	equ	0xFF5
  1426                           postinc0	equ	0xFEE
  1427                           wreg	equ	0xFE8
  1428                           indf1	equ	0xFE7
  1429                           postdec1	equ	0xFE5
  1430                           fsr1h	equ	0xFE2
  1431                           fsr1l	equ	0xFE1
  1432                           indf2	equ	0xFDF
  1433                           fsr2h	equ	0xFDA
  1434                           fsr2l	equ	0xFD9
  1435                           status	equ	0xFD8
  1436                           
  1437 ;; *************** function _nrfConfigReg *****************
  1438 ;; Defined at:
  1439 ;;		line 324 in file "main.c"
  1440 ;; Parameters:    Size  Location     Type
  1441 ;;  wr              1    wreg     unsigned char 
  1442 ;;  command         1    2[COMRAM] unsigned char 
  1443 ;;  data            1    3[COMRAM] unsigned char 
  1444 ;; Auto vars:     Size  Location     Type
  1445 ;;  wr              1    4[COMRAM] unsigned char 
  1446 ;; Return value:  Size  Location     Type
  1447 ;;                  1    wreg      unsigned char 
  1448 ;; Registers used:
  1449 ;;		wreg, status,2, status,0, cstack
  1450 ;; Tracked objects:
  1451 ;;		On entry : 0/0
  1452 ;;		On exit  : 0/0
  1453 ;;		Unchanged: 0/0
  1454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1455 ;;      Params:         2       0       0       0
  1456 ;;      Locals:         1       0       0       0
  1457 ;;      Temps:          0       0       0       0
  1458 ;;      Totals:         3       0       0       0
  1459 ;;Total ram usage:        3 bytes
  1460 ;; Hardware stack levels used:    1
  1461 ;; Hardware stack levels required when called:    1
  1462 ;; This function calls:
  1463 ;;		_setCSN
  1464 ;;		_spiTransferByte
  1465 ;; This function is called by:
  1466 ;;		_nrfConfig
  1467 ;; This function uses a non-reentrant model
  1468 ;;
  1469                           
  1470                           	psect	text9
  1471  003C1A                     __ptext9:
  1472                           	opt stack 0
  1473  003C1A                     _nrfConfigReg:
  1474                           	opt stack 28
  1475                           
  1476                           ;incstack = 0
  1477                           ;nrfConfigReg@wr stored from wreg
  1478  003C1A  6E27               	movwf	nrfConfigReg@wr,c
  1479                           
  1480                           ;main.c: 326: setCSN(0);
  1481  003C1C  0E00               	movlw	0
  1482  003C1E  6E24               	movwf	setCSN@level+1,c
  1483  003C20  0E00               	movlw	0
  1484  003C22  6E23               	movwf	setCSN@level,c
  1485  003C24  EC8C  F01D         	call	_setCSN	;wreg free
  1486                           
  1487                           ;main.c: 328: if (wr == 'w') {
  1488  003C28  5027               	movf	nrfConfigReg@wr,w,c
  1489  003C2A  0A77               	xorlw	119
  1490  003C2C  A4D8               	btfss	status,2,c
  1491  003C2E  D008               	goto	l953
  1492                           
  1493                           ;main.c: 329: spiTransferByte(0x20|command);
  1494  003C30  5025               	movf	nrfConfigReg@command,w,c
  1495  003C32  0920               	iorlw	32
  1496  003C34  EC9D  F01D         	call	_spiTransferByte
  1497                           
  1498                           ;main.c: 330: spiTransferByte(data);
  1499  003C38  5026               	movf	nrfConfigReg@data,w,c
  1500  003C3A  EC9D  F01D         	call	_spiTransferByte
  1501                           
  1502                           ;main.c: 331: } else if (wr == 'r') {
  1503  003C3E  D00B               	goto	l957
  1504  003C40                     l953:
  1505  003C40  5027               	movf	nrfConfigReg@wr,w,c
  1506  003C42  0A72               	xorlw	114
  1507  003C44  A4D8               	btfss	status,2,c
  1508  003C46  D007               	goto	l957
  1509                           
  1510                           ;main.c: 332: spiTransferByte(0x00|command);
  1511  003C48  5025               	movf	nrfConfigReg@command,w,c
  1512  003C4A  EC9D  F01D         	call	_spiTransferByte
  1513                           
  1514                           ;main.c: 333: data = spiTransferByte(0xFF);
  1515  003C4E  0EFF               	movlw	255
  1516  003C50  EC9D  F01D         	call	_spiTransferByte
  1517  003C54  6E26               	movwf	nrfConfigReg@data,c
  1518  003C56                     l957:
  1519                           
  1520                           ;main.c: 334: }
  1521                           ;main.c: 336: setCSN(1);
  1522  003C56  0E00               	movlw	0
  1523  003C58  6E24               	movwf	setCSN@level+1,c
  1524  003C5A  0E01               	movlw	1
  1525  003C5C  6E23               	movwf	setCSN@level,c
  1526  003C5E  EC8C  F01D         	call	_setCSN	;wreg free
  1527  003C62  0012               	return	
  1528  003C64                     __end_of_nrfConfigReg:
  1529                           	opt stack 0
  1530                           tblptru	equ	0xFF8
  1531                           tblptrh	equ	0xFF7
  1532                           tblptrl	equ	0xFF6
  1533                           tablat	equ	0xFF5
  1534                           postinc0	equ	0xFEE
  1535                           wreg	equ	0xFE8
  1536                           indf1	equ	0xFE7
  1537                           postdec1	equ	0xFE5
  1538                           fsr1h	equ	0xFE2
  1539                           fsr1l	equ	0xFE1
  1540                           indf2	equ	0xFDF
  1541                           fsr2h	equ	0xFDA
  1542                           fsr2l	equ	0xFD9
  1543                           status	equ	0xFD8
  1544                           
  1545 ;; *************** function _spiTransferByte *****************
  1546 ;; Defined at:
  1547 ;;		line 416 in file "main.c"
  1548 ;; Parameters:    Size  Location     Type
  1549 ;;  data            1    wreg     unsigned char 
  1550 ;; Auto vars:     Size  Location     Type
  1551 ;;  data            1    0[COMRAM] unsigned char 
  1552 ;; Return value:  Size  Location     Type
  1553 ;;                  1    wreg      unsigned char 
  1554 ;; Registers used:
  1555 ;;		wreg, status,2, cstack
  1556 ;; Tracked objects:
  1557 ;;		On entry : 0/0
  1558 ;;		On exit  : 0/0
  1559 ;;		Unchanged: 0/0
  1560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1561 ;;      Params:         0       0       0       0
  1562 ;;      Locals:         1       0       0       0
  1563 ;;      Temps:          0       0       0       0
  1564 ;;      Totals:         1       0       0       0
  1565 ;;Total ram usage:        1 bytes
  1566 ;; Hardware stack levels used:    1
  1567 ;; This function calls:
  1568 ;;		Nothing
  1569 ;; This function is called by:
  1570 ;;		_nrfGetStatus
  1571 ;;		_nrfConfigReg
  1572 ;;		_nrfSetTXAddr
  1573 ;;		_nrfSetRXAddr
  1574 ;;		_spiTransfer
  1575 ;;		_nrfTXData
  1576 ;; This function uses a non-reentrant model
  1577 ;;
  1578                           
  1579                           	psect	text10
  1580  003B3A                     __ptext10:
  1581                           	opt stack 0
  1582  003B3A                     _spiTransferByte:
  1583                           	opt stack 29
  1584                           
  1585                           ;incstack = 0
  1586                           ;spiTransferByte@data stored from wreg
  1587  003B3A  6E23               	movwf	spiTransferByte@data,c
  1588                           
  1589                           ;main.c: 418: SSP1BUF = data;
  1590  003B3C  C023  FFC9         	movff	spiTransferByte@data,4041	;volatile
  1591                           
  1592                           ;main.c: 420: _delay((unsigned long)((8)*(64000000/4000000.0)));
  1593  003B40  0E2A               	movlw	42
  1594  003B42                     u337:
  1595  003B42  2EE8               	decfsz	wreg,f,c
  1596  003B44  D7FE               	goto	u337
  1597  003B46  D000               	nop2		;nop
  1598                           
  1599                           ;main.c: 422: return SSP1BUF;
  1600  003B48  50C9               	movf	4041,w,c	;volatile
  1601  003B4A  0012               	return	
  1602  003B4C                     __end_of_spiTransferByte:
  1603                           	opt stack 0
  1604                           tblptru	equ	0xFF8
  1605                           tblptrh	equ	0xFF7
  1606                           tblptrl	equ	0xFF6
  1607                           tablat	equ	0xFF5
  1608                           postinc0	equ	0xFEE
  1609                           wreg	equ	0xFE8
  1610                           indf1	equ	0xFE7
  1611                           postdec1	equ	0xFE5
  1612                           fsr1h	equ	0xFE2
  1613                           fsr1l	equ	0xFE1
  1614                           indf2	equ	0xFDF
  1615                           fsr2h	equ	0xFDA
  1616                           fsr2l	equ	0xFD9
  1617                           status	equ	0xFD8
  1618                           
  1619 ;; *************** function _setCSN *****************
  1620 ;; Defined at:
  1621 ;;		line 299 in file "main.c"
  1622 ;; Parameters:    Size  Location     Type
  1623 ;;  level           2    0[COMRAM] int 
  1624 ;; Auto vars:     Size  Location     Type
  1625 ;;		None
  1626 ;; Return value:  Size  Location     Type
  1627 ;;		None               void
  1628 ;; Registers used:
  1629 ;;		wreg, status,2, status,0
  1630 ;; Tracked objects:
  1631 ;;		On entry : 0/0
  1632 ;;		On exit  : 0/0
  1633 ;;		Unchanged: 0/0
  1634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1635 ;;      Params:         2       0       0       0
  1636 ;;      Locals:         0       0       0       0
  1637 ;;      Temps:          0       0       0       0
  1638 ;;      Totals:         2       0       0       0
  1639 ;;Total ram usage:        2 bytes
  1640 ;; Hardware stack levels used:    1
  1641 ;; This function calls:
  1642 ;;		Nothing
  1643 ;; This function is called by:
  1644 ;;		_nrfGetStatus
  1645 ;;		_nrfConfigReg
  1646 ;;		_nrfSetTXAddr
  1647 ;;		_nrfSetRXAddr
  1648 ;;		_spiTransfer
  1649 ;;		_nrfTXData
  1650 ;; This function uses a non-reentrant model
  1651 ;;
  1652                           
  1653                           	psect	text11
  1654  003B18                     __ptext11:
  1655                           	opt stack 0
  1656  003B18                     _setCSN:
  1657                           	opt stack 29
  1658                           
  1659                           ;main.c: 301: if (level == 1) {
  1660                           
  1661                           ;incstack = 0
  1662  003B18  0423               	decf	setCSN@level,w,c
  1663  003B1A  1024               	iorwf	setCSN@level+1,w,c
  1664  003B1C  A4D8               	btfss	status,2,c
  1665  003B1E  D002               	goto	l94
  1666                           
  1667                           ;main.c: 302: LATAbits.LATA2 = 1;
  1668  003B20  8489               	bsf	3977,2,c	;volatile
  1669                           
  1670                           ;main.c: 303: } else {
  1671  003B22  0012               	return	
  1672  003B24                     l94:
  1673                           
  1674                           ;main.c: 304: LATAbits.LATA2 = 0;
  1675  003B24  9489               	bcf	3977,2,c	;volatile
  1676  003B26  0012               	return	
  1677  003B28                     __end_of_setCSN:
  1678                           	opt stack 0
  1679                           tblptru	equ	0xFF8
  1680                           tblptrh	equ	0xFF7
  1681                           tblptrl	equ	0xFF6
  1682                           tablat	equ	0xFF5
  1683                           postinc0	equ	0xFEE
  1684                           wreg	equ	0xFE8
  1685                           indf1	equ	0xFE7
  1686                           postdec1	equ	0xFE5
  1687                           fsr1h	equ	0xFE2
  1688                           fsr1l	equ	0xFE1
  1689                           indf2	equ	0xFDF
  1690                           fsr2h	equ	0xFDA
  1691                           fsr2l	equ	0xFD9
  1692                           status	equ	0xFD8
  1693                           
  1694 ;; *************** function _delay10ms *****************
  1695 ;; Defined at:
  1696 ;;		line 456 in file "main.c"
  1697 ;; Parameters:    Size  Location     Type
  1698 ;;  ms_multi        2    0[COMRAM] int 
  1699 ;; Auto vars:     Size  Location     Type
  1700 ;;  i               2    3[COMRAM] int 
  1701 ;; Return value:  Size  Location     Type
  1702 ;;		None               void
  1703 ;; Registers used:
  1704 ;;		wreg, status,2, status,0
  1705 ;; Tracked objects:
  1706 ;;		On entry : 0/0
  1707 ;;		On exit  : 0/0
  1708 ;;		Unchanged: 0/0
  1709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1710 ;;      Params:         2       0       0       0
  1711 ;;      Locals:         2       0       0       0
  1712 ;;      Temps:          1       0       0       0
  1713 ;;      Totals:         5       0       0       0
  1714 ;;Total ram usage:        5 bytes
  1715 ;; Hardware stack levels used:    1
  1716 ;; This function calls:
  1717 ;;		Nothing
  1718 ;; This function is called by:
  1719 ;;		_main
  1720 ;; This function uses a non-reentrant model
  1721 ;;
  1722                           
  1723                           	psect	text12
  1724  003BA0                     __ptext12:
  1725                           	opt stack 0
  1726  003BA0                     _delay10ms:
  1727                           	opt stack 30
  1728                           
  1729                           ;main.c: 457: int i = 0;
  1730                           
  1731                           ;incstack = 0
  1732  003BA0  0E00               	movlw	0
  1733  003BA2  6E27               	movwf	delay10ms@i+1,c
  1734  003BA4  0E00               	movlw	0
  1735  003BA6  6E26               	movwf	delay10ms@i,c
  1736                           
  1737                           ;main.c: 458: for (i=0;i<ms_multi;i++) {
  1738  003BA8  0E00               	movlw	0
  1739  003BAA  6E27               	movwf	delay10ms@i+1,c
  1740  003BAC  0E00               	movlw	0
  1741  003BAE  6E26               	movwf	delay10ms@i,c
  1742  003BB0  D00A               	goto	l144
  1743  003BB2                     l837:
  1744                           
  1745                           ;main.c: 459: _delay((unsigned long)((11)*(64000000/4000.0)));
  1746  003BB2  0EE5               	movlw	229
  1747  003BB4  6E25               	movwf	??_delay10ms& (0+255),c
  1748  003BB6  0E91               	movlw	145
  1749  003BB8                     u347:
  1750  003BB8  2EE8               	decfsz	wreg,f,c
  1751  003BBA  D7FE               	goto	u347
  1752  003BBC  2E25               	decfsz	??_delay10ms& (0+255),f,c
  1753  003BBE  D7FC               	goto	u347
  1754  003BC0  F000               	nop	
  1755  003BC2  4A26               	infsnz	delay10ms@i,f,c
  1756  003BC4  2A27               	incf	delay10ms@i+1,f,c
  1757  003BC6                     l144:
  1758  003BC6  5027               	movf	delay10ms@i+1,w,c
  1759  003BC8  0A80               	xorlw	128
  1760  003BCA  6E25               	movwf	??_delay10ms& (0+255),c
  1761  003BCC  5023               	movf	delay10ms@ms_multi,w,c
  1762  003BCE  5C26               	subwf	delay10ms@i,w,c
  1763  003BD0  5024               	movf	delay10ms@ms_multi+1,w,c
  1764  003BD2  0A80               	xorlw	128
  1765  003BD4  5825               	subwfb	??_delay10ms& (0+255),w,c
  1766  003BD6  B0D8               	btfsc	status,0,c
  1767  003BD8  0012               	return	
  1768  003BDA  D7EB               	goto	l837
  1769  003BDC                     __end_of_delay10ms:
  1770                           	opt stack 0
  1771  0000                     tblptru	equ	0xFF8
  1772                           tblptrh	equ	0xFF7
  1773                           tblptrl	equ	0xFF6
  1774                           tablat	equ	0xFF5
  1775                           postinc0	equ	0xFEE
  1776                           wreg	equ	0xFE8
  1777                           indf1	equ	0xFE7
  1778                           postdec1	equ	0xFE5
  1779                           fsr1h	equ	0xFE2
  1780                           fsr1l	equ	0xFE1
  1781                           indf2	equ	0xFDF
  1782                           fsr2h	equ	0xFDA
  1783                           fsr2l	equ	0xFD9
  1784                           status	equ	0xFD8
  1785                           tblptru	equ	0xFF8
  1786                           tblptrh	equ	0xFF7
  1787                           tblptrl	equ	0xFF6
  1788                           tablat	equ	0xFF5
  1789                           postinc0	equ	0xFEE
  1790                           wreg	equ	0xFE8
  1791                           indf1	equ	0xFE7
  1792                           postdec1	equ	0xFE5
  1793                           fsr1h	equ	0xFE2
  1794                           fsr1l	equ	0xFE1
  1795                           indf2	equ	0xFDF
  1796                           fsr2h	equ	0xFDA
  1797                           fsr2l	equ	0xFD9
  1798                           status	equ	0xFD8
  1799                           
  1800                           	psect	rparam
  1801  0000                     tblptru	equ	0xFF8
  1802                           tblptrh	equ	0xFF7
  1803                           tblptrl	equ	0xFF6
  1804                           tablat	equ	0xFF5
  1805                           postinc0	equ	0xFEE
  1806                           wreg	equ	0xFE8
  1807                           indf1	equ	0xFE7
  1808                           postdec1	equ	0xFE5
  1809                           fsr1h	equ	0xFE2
  1810                           fsr1l	equ	0xFE1
  1811                           indf2	equ	0xFDF
  1812                           fsr2h	equ	0xFDA
  1813                           fsr2l	equ	0xFD9
  1814                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        17
    BSS         66
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     18      69
    BANK0           160      0      32
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    nrfSetRXAddr@addr	PTR unsigned char  size(2) Largest target is 4
		 -> RX_ADDRESS(COMRAM[4]), 

    nrfSetTXAddr@addr	PTR unsigned char  size(2) Largest target is 4
		 -> TX_ADDRESS(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->_spiTransfer
    _nrfTXData->_setCSN
    _nrfGetStatus->_setCSN
    _nrfConfig->_spiTransfer
    _spiTransfer->_setCSN
    _nrfSetTXAddr->_setCSN
    _nrfSetRXAddr->_setCSN
    _nrfConfigReg->_setCSN

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    7888
                                             16 COMRAM     2     2      0
                          _delay10ms
                          _nrfConfig
                       _nrfGetStatus
                          _nrfTXData
                         _portConfig
                        _spiConfig_1
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiConfig_1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _portConfig                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _nrfTXData                                            8     6      2     823
                                              2 COMRAM     8     6      2
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (1) _nrfGetStatus                                         0     0      0     680
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (1) _nrfConfig                                            0     0      0    4917
                       _nrfConfigReg
                       _nrfSetRXAddr
                       _nrfSetTXAddr
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiTransfer                                         14    11      3    1242
                                              2 COMRAM    14    11      3
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfSetTXAddr                                        10     6      4     898
                                              2 COMRAM    10     6      4
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfSetRXAddr                                        11     7      4     920
                                              2 COMRAM    11     7      4
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfConfigReg                                         3     1      2    1857
                                              2 COMRAM     3     1      2
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _spiTransferByte                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setCSN                                               2     0      2     658
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _delay10ms                                            5     3      2     202
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay10ms
   _nrfConfig
     _nrfConfigReg
       _setCSN
       _spiTransferByte
     _nrfSetRXAddr
       _setCSN
       _spiTransferByte
     _nrfSetTXAddr
       _setCSN
       _spiTransferByte
     _spiTransfer
       _setCSN
       _spiTransferByte
   _nrfGetStatus
     _setCSN
     _spiTransferByte
   _nrfTXData
     _setCSN
     _spiTransferByte
   _portConfig
   _spiConfig_1
   _spiTransfer
     _setCSN
     _spiTransferByte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       6        0.0%
BANK2              100      0       0       7        0.0%
BITBANK1           100      0       0       9        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      20       4       20.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     12      45       1       72.6%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      65       8        0.0%
DATA                 0      0      65      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Tue Sep 30 14:41:26 2014

__size_of_spiTransferByte 0012                        l94 3B24                _RX_ADDRESS 003E  
             __CFG_LVP$ON 000000                       l144 3BC6                       l837 3BB2  
                     l941 3F02                       l933 3E98                       l925 3E7A  
                     l943 3F16                       l953 3C40                       l937 3EAA  
                     l929 3E8A                       l971 3D2E                       l957 3C56  
                     l973 3D42                       l967 3D00                       l983 3C88  
                     l987 3CB6                       l989 3CCA                       u327 3DC6  
                     u337 3B42                       u347 3BB8                       wreg 000FE8  
              _TX_ADDRESS 0042                      l1013 3DA2                      l1015 3DB6  
                    l1009 3D74                      l1037 3DEE                      l1065 3E4C  
                    _LATA 000F89                      _LATB 000F8A                      _LATC 000F8B  
      spiTransfer@command 0025                      _main 3DCE                      indf1 000FE7  
                    fsr1l 000FE1                      indf2 000FDF                      fsr2l 000FD9  
           __CFG_BORV$190 000000                      start 0000             __CFG_IESO$OFF 000000  
          nrfConfigReg@wr 0027                     ?_main 0023                     _TRISA 000F92  
                   _TRISB 000F93                     _TRISC 000F94            __CFG_FCMEN$OFF 000000  
      __CFG_MCLRE$EXTMCLR 000000                     tablat 000FF5                     status 000FD8  
          __CFG_HFOFST$ON 000000            __CFG_FOSC$HSHP 000000           __initialization 3BDC  
            __end_of_main 3E5A       spiTransferByte@data 0023                    ??_main 0033  
           __activetblptr 000000         ??_spiTransferByte 0023            __CFG_PLLCFG$ON 000000  
           nrfSetRXAddr@i 002E             nrfSetTXAddr@i 002D            __CFG_WDTEN$OFF 000000  
            ?_spiConfig_1 0023            __CFG_PWRTEN$ON 000000            __CFG_XINST$OFF 000000  
          __CFG_STVREN$ON 000000                    _setCSN 3B18                    clear_0 3BE2  
                  clear_1 3BEE               setCSN@level 0023             ?_nrfGetStatus 0023  
           ?_nrfConfigReg 0025              _FEATURE_CURR 0038              __pdataCOMRAM 0035  
            ?_spiTransfer 0025                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8                __accesstop 0060   __end_of__initialization 3C14  
         __CFG_PBADEN$OFF 000000             ?_nrfSetRXAddr 0025             ?_nrfSetTXAddr 0025  
          __pcstackCOMRAM 0023        __size_of_delay10ms 003C            ??_nrfGetStatus 0025  
          _EN_RXADDR_CURR 0037            ??_nrfConfigReg 0027          nrfConfigReg@data 0026  
              _dataBufOut 0001                __pbssBANK0 0060            ??_nrfSetRXAddr 0029  
          ??_nrfSetTXAddr 0029        __size_of_nrfTXData 007E        __size_of_nrfConfig 00DC  
     nrfConfigReg@command 0025        __CFG_CCP2MX$PORTC1 000000        __CFG_CCP3MX$PORTB5 000000  
                 ?_setCSN 0023                   _SSP1ADD 000FC8                   _SSP1BUF 000FC9  
       __end_of_delay10ms 3BDC          nrfSetRXAddr@addr 0025          nrfSetRXAddr@pipe 002D  
                 __Hparam 0000                   __Lparam 0000      __size_of_spiConfig_1 0018  
         _spiTransferByte 3B3A                delay10ms@i 0026             _RX_PW_P0_CURR 003B  
                 __pcinit 3BDC           __size_of_setCSN 0010          nrfSetTXAddr@addr 0025  
                 __ramtop 0300                   __ptext0 3DCE                   __ptext1 3B4C  
                 __ptext2 3B64                   __ptext3 3D50                   __ptext4 3B7E  
                 __ptext5 3F24                   __ptext6 3E5A                   __ptext7 3C64  
                 __ptext8 3CD8                   __ptext9 3C1A         __end_of_nrfTXData 3DCE  
       __end_of_nrfConfig 4000      __size_of_spiTransfer 00CA      end_of_initialization 3C14  
    __end_of_nrfGetStatus 3BA0      __end_of_nrfConfigReg 3C64                   postdec1 000FE5  
                 postinc0 000FEE              nrfTXData@len 0025                _portConfig 3B64  
    __end_of_nrfSetRXAddr 3D50      __end_of_nrfSetTXAddr 3CD8   __end_of_spiTransferByte 3B4C  
           __pidataCOMRAM 3B29            __end_of_setCSN 3B28       start_initialization 3BDC  
                ??_setCSN 0025               ?_portConfig 0023                nrfTXData@i 002B  
             __pbssCOMRAM 0001     __size_of_nrfGetStatus 0022     __size_of_nrfConfigReg 004A  
               _dataBufIn 0060          ?_spiTransferByte 0023                 _delay10ms 3BA0  
             _CONFIG_CURR 0035             _SETUP_AW_CURR 003C     __size_of_nrfSetRXAddr 0078  
   __size_of_nrfSetTXAddr 0074           _SETUP_RETR_CURR 003D          __CFG_PRICLKEN$ON 000000  
            _nrfGetStatus 3B7E              _nrfConfigReg 3C1A           nrfSetRXAddr@len 0027  
               _nrfSTATUS 0022                 _nrfTXData 3D50           nrfSetTXAddr@len 0027  
               _nrfConfig 3F24       __size_of_portConfig 001A                  _LATAbits 000F89  
              ?_delay10ms 0023             ??_spiConfig_1 0023              _nrfSetRXAddr 3CD8  
            _nrfSetTXAddr 3C64          __CFG_WDTPS$32768 000000             _RF_SETUP_CURR 003A  
       delay10ms@ms_multi 0023             ??_spiTransfer 0028                 main@count 0033  
              ?_nrfTXData 0025                 copy_data0 3C08                ?_nrfConfig 0023  
                __Hrparam 0000                  __Lrparam 0000        __CFG_BOREN$SBORDIS 000000  
       __CFG_P2BMX$PORTB5 000000       __end_of_spiConfig_1 3B64                  __ptext10 3B3A  
                __ptext11 3B18                  __ptext12 3BA0              _SSP1CON1bits 000FC6  
     __end_of_spiTransfer 3F24             __size_of_main 008C               ??_delay10ms 0025  
              _EN_AA_CURR 0021              _SSP1STATbits 000FC7              ??_portConfig 0023  
              _DYNPD_CURR 0036               ??_nrfTXData 0027               ??_nrfConfig 0033  
      __end_of_portConfig 3B7E               _spiConfig_1 3B4C            spiTransfer@len 0026  
          spiTransfer@wrn 0030                _RF_CH_CURR 0039               _spiTransfer 3E5A  
       __CFG_T3CMX$PORTC0 000000              spiTransfer@i 0031  
