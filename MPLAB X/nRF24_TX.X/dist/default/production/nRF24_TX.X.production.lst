

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Oct 01 11:52:13 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F24K22
     2                           	fnconf	param0,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    29                           	psect	param0,global,class=BANK0,space=1,delta=1
    30  0000                     
    31                           	psect	idataCOMRAM
    32  00060A                     __pidataCOMRAM:
    33                           	opt stack 0
    34                           
    35                           ;initializer for _CONFIG_CURR
    36  00060A  5A                 	db	90
    37                           
    38                           ;initializer for _DYNPD_CURR
    39  00060B  01                 	db	1
    40                           
    41                           ;initializer for _EN_RXADDR_CURR
    42  00060C  01                 	db	1
    43                           
    44                           ;initializer for _FEATURE_CURR
    45  00060D  04                 	db	4
    46                           
    47                           ;initializer for _RF_CH_CURR
    48  00060E  69                 	db	105
    49                           
    50                           ;initializer for _RF_SETUP_CURR
    51  00060F  06                 	db	6
    52                           
    53                           ;initializer for _RX_PW_P0_CURR
    54  000610  01                 	db	1
    55                           
    56                           ;initializer for _SETUP_AW_CURR
    57  000611  02                 	db	2
    58                           
    59                           ;initializer for _SETUP_RETR_CURR
    60  000612  21                 	db	33
    61                           
    62                           ;initializer for _RX_ADDRESS
    63  000613  E7                 	db	231
    64  000614  E7                 	db	231
    65  000615  E7                 	db	231
    66  000616  E7                 	db	231
    67                           
    68                           ;initializer for _TX_ADDRESS
    69  000617  E7                 	db	231
    70  000618  E7                 	db	231
    71  000619  E7                 	db	231
    72  00061A  E7                 	db	231
    73  0000                     _INTCONbits	set	4082
    74  0000                     _LATA	set	3977
    75  0000                     _LATAbits	set	3977
    76  0000                     _LATB	set	3978
    77  0000                     _LATC	set	3979
    78  0000                     _SSP1ADD	set	4040
    79  0000                     _SSP1BUF	set	4041
    80  0000                     _SSP1CON1bits	set	4038
    81  0000                     _SSP1STATbits	set	4039
    82  0000                     _TRISA	set	3986
    83  0000                     _TRISB	set	3987
    84  0000                     _TRISC	set	3988
    85                           
    86                           ; #config settings
    87  0000                     
    88                           	psect	cinit
    89  00052A                     __pcinit:
    90                           	opt stack 0
    91  00052A                     start_initialization:
    92                           	opt stack 0
    93  00052A                     __initialization:
    94                           	opt stack 0
    95                           
    96                           ; Clear objects allocated to BANK0 (32 bytes)
    97  00052A  EE00  F060         	lfsr	0,__pbssBANK0
    98  00052E  0E20               	movlw	32
    99  000530                     clear_0:
   100  000530  6AEE               	clrf	postinc0,c
   101  000532  06E8               	decf	wreg,f,c
   102  000534  E1FD               	bnz	clear_0
   103                           
   104                           ; Clear objects allocated to COMRAM (34 bytes)
   105  000536  EE00  F001         	lfsr	0,__pbssCOMRAM
   106  00053A  0E22               	movlw	34
   107  00053C                     clear_1:
   108  00053C  6AEE               	clrf	postinc0,c
   109  00053E  06E8               	decf	wreg,f,c
   110  000540  E1FD               	bnz	clear_1
   111                           
   112                           ; Initialize objects allocated to COMRAM (17 bytes)
   113                           ; load TBLPTR registers with __pidataCOMRAM
   114  000542  0E0A               	movlw	low __pidataCOMRAM
   115  000544  6EF6               	movwf	tblptrl,c
   116  000546  0E06               	movlw	high __pidataCOMRAM
   117  000548  6EF7               	movwf	tblptrh,c
   118  00054A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   119  00054C  6EF8               	movwf	tblptru,c
   120  00054E  EE00  F03E         	lfsr	0,__pdataCOMRAM
   121  000552  EE10 F011          	lfsr	1,17
   122  000556                     copy_data0:
   123  000556  0009               	tblrd		*+
   124  000558  CFF5 FFEE          	movff	tablat,postinc0
   125  00055C  50E5               	movf	postdec1,w,c
   126  00055E  50E1               	movf	fsr1l,w,c
   127  000560  E1FA               	bnz	copy_data0
   128  000562                     end_of_initialization:
   129                           	opt stack 0
   130  000562                     __end_of__initialization:
   131                           	opt stack 0
   132  000562  0100               	movlb	0
   133  000564  EF53  F000         	goto	_main	;jump to C main() function
   134                           tblptru	equ	0xFF8
   135                           tblptrh	equ	0xFF7
   136                           tblptrl	equ	0xFF6
   137                           tablat	equ	0xFF5
   138                           postinc0	equ	0xFEE
   139                           wreg	equ	0xFE8
   140                           postdec1	equ	0xFE5
   141                           fsr1l	equ	0xFE1
   142                           
   143                           	psect	bssCOMRAM
   144  000001                     __pbssCOMRAM:
   145                           	opt stack 0
   146  000001                     _dataBufOut:
   147                           	opt stack 0
   148  000001                     	ds	32
   149  000021                     _EN_AA_CURR:
   150                           	opt stack 0
   151  000021                     	ds	1
   152  000022                     _nrfSTATUS:
   153                           	opt stack 0
   154  000022                     	ds	1
   155                           tblptru	equ	0xFF8
   156                           tblptrh	equ	0xFF7
   157                           tblptrl	equ	0xFF6
   158                           tablat	equ	0xFF5
   159                           postinc0	equ	0xFEE
   160                           wreg	equ	0xFE8
   161                           postdec1	equ	0xFE5
   162                           fsr1l	equ	0xFE1
   163                           
   164                           	psect	dataCOMRAM
   165  00003E                     __pdataCOMRAM:
   166                           	opt stack 0
   167  00003E                     _CONFIG_CURR:
   168                           	opt stack 0
   169  00003E                     	ds	1
   170  00003F                     _DYNPD_CURR:
   171                           	opt stack 0
   172  00003F                     	ds	1
   173  000040                     _EN_RXADDR_CURR:
   174                           	opt stack 0
   175  000040                     	ds	1
   176  000041                     _FEATURE_CURR:
   177                           	opt stack 0
   178  000041                     	ds	1
   179  000042                     _RF_CH_CURR:
   180                           	opt stack 0
   181  000042                     	ds	1
   182  000043                     _RF_SETUP_CURR:
   183                           	opt stack 0
   184  000043                     	ds	1
   185  000044                     _RX_PW_P0_CURR:
   186                           	opt stack 0
   187  000044                     	ds	1
   188  000045                     _SETUP_AW_CURR:
   189                           	opt stack 0
   190  000045                     	ds	1
   191  000046                     _SETUP_RETR_CURR:
   192                           	opt stack 0
   193  000046                     	ds	1
   194  000047                     _RX_ADDRESS:
   195                           	opt stack 0
   196  000047                     	ds	4
   197  00004B                     _TX_ADDRESS:
   198                           	opt stack 0
   199  00004B                     	ds	4
   200                           tblptru	equ	0xFF8
   201                           tblptrh	equ	0xFF7
   202                           tblptrl	equ	0xFF6
   203                           tablat	equ	0xFF5
   204                           postinc0	equ	0xFEE
   205                           wreg	equ	0xFE8
   206                           postdec1	equ	0xFE5
   207                           fsr1l	equ	0xFE1
   208                           
   209                           	psect	bssBANK0
   210  000060                     __pbssBANK0:
   211                           	opt stack 0
   212  000060                     _dataBufIn:
   213                           	opt stack 0
   214  000060                     	ds	32
   215                           tblptru	equ	0xFF8
   216                           tblptrh	equ	0xFF7
   217                           tblptrl	equ	0xFF6
   218                           tablat	equ	0xFF5
   219                           postinc0	equ	0xFEE
   220                           wreg	equ	0xFE8
   221                           postdec1	equ	0xFE5
   222                           fsr1l	equ	0xFE1
   223                           
   224                           	psect	cstackBANK0
   225  000080                     __pcstackBANK0:
   226                           	opt stack 0
   227  000080                     ??_highISR:
   228                           
   229                           ; 0 bytes @ 0x0
   230  000080                     	ds	14
   231  00008E                     main@count:
   232                           	opt stack 0
   233                           
   234                           ; 2 bytes @ 0xE
   235  00008E                     	ds	2
   236                           tblptru	equ	0xFF8
   237                           tblptrh	equ	0xFF7
   238                           tblptrl	equ	0xFF6
   239                           tablat	equ	0xFF5
   240                           postinc0	equ	0xFEE
   241                           wreg	equ	0xFE8
   242                           postdec1	equ	0xFE5
   243                           fsr1l	equ	0xFE1
   244                           
   245                           	psect	cstackCOMRAM
   246  000023                     __pcstackCOMRAM:
   247                           	opt stack 0
   248  000023                     ??_lowISR:
   249  000023                     
   250                           ; 1 bytes @ 0x0
   251  000023                     	ds	17
   252  000034                     spiTransferByte@data:
   253                           	opt stack 0
   254  000034                     setCSN@level:
   255                           	opt stack 0
   256  000034                     delay10ms@ms_multi:
   257                           	opt stack 0
   258                           
   259                           ; 2 bytes @ 0x11
   260  000034                     	ds	2
   261  000036                     ??_delay10ms:
   262  000036                     nrfConfigReg@command:
   263                           	opt stack 0
   264  000036                     spiTransfer@command:
   265                           	opt stack 0
   266  000036                     nrfSetTXAddr@addr:
   267                           	opt stack 0
   268  000036                     nrfSetRXAddr@addr:
   269                           	opt stack 0
   270  000036                     nrfTXData@len:
   271                           	opt stack 0
   272                           
   273                           ; 2 bytes @ 0x13
   274  000036                     	ds	1
   275  000037                     nrfConfigReg@data:
   276                           	opt stack 0
   277  000037                     spiTransfer@len:
   278                           	opt stack 0
   279  000037                     delay10ms@i:
   280                           	opt stack 0
   281                           
   282                           ; 2 bytes @ 0x14
   283  000037                     	ds	1
   284  000038                     ??_nrfTXData:
   285  000038                     nrfConfigReg@wr:
   286                           	opt stack 0
   287  000038                     nrfSetTXAddr@len:
   288                           	opt stack 0
   289  000038                     nrfSetRXAddr@len:
   290                           	opt stack 0
   291                           
   292                           ; 2 bytes @ 0x15
   293  000038                     	ds	1
   294  000039                     ??_spiTransfer:
   295  000039                     nrfTXData@i_656:
   296                           	opt stack 0
   297                           
   298                           ; 2 bytes @ 0x16
   299  000039                     	ds	1
   300  00003A                     ??_nrfSetRXAddr:
   301  00003A                     ??_nrfSetTXAddr:
   302  00003A                     spiTransfer@wrn:
   303                           	opt stack 0
   304                           
   305                           ; 1 bytes @ 0x17
   306  00003A                     	ds	1
   307  00003B                     nrfSetRXAddr@pipe:
   308                           	opt stack 0
   309  00003B                     nrfSetTXAddr@i:
   310                           	opt stack 0
   311  00003B                     spiTransfer@i:
   312                           	opt stack 0
   313  00003B                     nrfTXData@i:
   314                           	opt stack 0
   315                           
   316                           ; 2 bytes @ 0x18
   317  00003B                     	ds	1
   318  00003C                     nrfSetRXAddr@i:
   319                           	opt stack 0
   320                           
   321                           ; 2 bytes @ 0x19
   322  00003C                     	ds	2
   323  00003E                     tblptru	equ	0xFF8
   324                           tblptrh	equ	0xFF7
   325                           tblptrl	equ	0xFF6
   326                           tablat	equ	0xFF5
   327                           postinc0	equ	0xFEE
   328                           wreg	equ	0xFE8
   329                           postdec1	equ	0xFE5
   330                           fsr1l	equ	0xFE1
   331                           
   332                           ; 0 bytes @ 0x1B
   333 ;;
   334 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   335 ;;
   336 ;; *************** function _main *****************
   337 ;; Defined at:
   338 ;;		line 196 in file "main.c"
   339 ;; Parameters:    Size  Location     Type
   340 ;;		None
   341 ;; Auto vars:     Size  Location     Type
   342 ;;  count           2   14[BANK0 ] int 
   343 ;; Return value:  Size  Location     Type
   344 ;;		None               void
   345 ;; Registers used:
   346 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   347 ;; Tracked objects:
   348 ;;		On entry : 0/0
   349 ;;		On exit  : 0/0
   350 ;;		Unchanged: 0/0
   351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   352 ;;      Params:         0       0       0       0
   353 ;;      Locals:         0       2       0       0
   354 ;;      Temps:          0       0       0       0
   355 ;;      Totals:         0       2       0       0
   356 ;;Total ram usage:        2 bytes
   357 ;; Hardware stack levels required when called:    5
   358 ;; This function calls:
   359 ;;		_delay10ms
   360 ;;		_nrfConfig
   361 ;;		_nrfGetStatus
   362 ;;		_nrfTXData
   363 ;;		_portConfig
   364 ;;		_spiConfig_1
   365 ;;		_spiTransfer
   366 ;; This function is called by:
   367 ;;		Startup code after reset
   368 ;; This function uses a non-reentrant model
   369 ;;
   370                           
   371                           	psect	text0
   372  0000A6                     __ptext0:
   373                           	opt stack 0
   374  0000A6                     _main:
   375                           	opt stack 26
   376                           
   377                           ;main.c: 199: portConfig();
   378                           
   379                           ;incstack = 0
   380  0000A6  ECE3  F002         	call	_portConfig	;wreg free
   381                           
   382                           ;main.c: 200: spiConfig_1();
   383  0000AA  ECF0  F002         	call	_spiConfig_1	;wreg free
   384                           
   385                           ;main.c: 201: nrfConfig();
   386  0000AE  ECD4  F000         	call	_nrfConfig	;wreg free
   387                           
   388                           ;main.c: 203: delay10ms(1);
   389  0000B2  0E00               	movlw	0
   390  0000B4  6E35               	movwf	delay10ms@ms_multi+1,c
   391  0000B6  0E01               	movlw	1
   392  0000B8  6E34               	movwf	delay10ms@ms_multi,c
   393  0000BA  ECB4  F002         	call	_delay10ms	;wreg free
   394                           
   395                           ;main.c: 205: dataBufOut[1] = 0x48;
   396  0000BE  0E48               	movlw	72
   397  0000C0  6E02               	movwf	_dataBufOut+1,c
   398                           
   399                           ;main.c: 206: dataBufOut[2] = 0x4F;
   400  0000C2  0E4F               	movlw	79
   401  0000C4  6E03               	movwf	_dataBufOut+2,c
   402                           
   403                           ;main.c: 207: dataBufOut[3] = 88;
   404  0000C6  0E58               	movlw	88
   405  0000C8  6E04               	movwf	_dataBufOut+3,c
   406                           
   407                           ;main.c: 208: dataBufOut[4] = 0x49;
   408  0000CA  0E49               	movlw	73
   409  0000CC  6E05               	movwf	_dataBufOut+4,c
   410                           
   411                           ;main.c: 209: dataBufOut[5] = 0x5F;
   412  0000CE  0E5F               	movlw	95
   413  0000D0  6E06               	movwf	_dataBufOut+5,c
   414                           
   415                           ;main.c: 210: dataBufOut[6] = 47;
   416  0000D2  0E2F               	movlw	47
   417  0000D4  6E07               	movwf	_dataBufOut+6,c
   418                           
   419                           ;main.c: 211: dataBufOut[7] = 0x74;
   420  0000D6  0E74               	movlw	116
   421  0000D8  6E08               	movwf	_dataBufOut+7,c
   422                           
   423                           ;main.c: 212: dataBufOut[8] = 0x6F;
   424  0000DA  0E6F               	movlw	111
   425  0000DC  6E09               	movwf	_dataBufOut+8,c
   426                           
   427                           ;main.c: 213: dataBufOut[9] = 58;
   428  0000DE  0E3A               	movlw	58
   429  0000E0  6E0A               	movwf	_dataBufOut+9,c
   430                           
   431                           ;main.c: 214: dataBufOut[10] = 0xA8;
   432  0000E2  0EA8               	movlw	168
   433  0000E4  6E0B               	movwf	_dataBufOut+10,c
   434                           
   435                           ;main.c: 215: dataBufOut[11] = 0x6F;
   436  0000E6  0E6F               	movlw	111
   437  0000E8  6E0C               	movwf	_dataBufOut+11,c
   438                           
   439                           ;main.c: 216: dataBufOut[12] = 99;
   440  0000EA  0E63               	movlw	99
   441  0000EC  6E0D               	movwf	_dataBufOut+12,c
   442                           
   443                           ;main.c: 217: dataBufOut[13] = 0x88;
   444  0000EE  0E88               	movlw	136
   445  0000F0  6E0E               	movwf	_dataBufOut+13,c
   446                           
   447                           ;main.c: 218: dataBufOut[14] = 0x5F;
   448  0000F2  0E5F               	movlw	95
   449  0000F4  6E0F               	movwf	_dataBufOut+14,c
   450                           
   451                           ;main.c: 219: dataBufOut[15] = 72;
   452  0000F6  0E48               	movlw	72
   453  0000F8  6E10               	movwf	_dataBufOut+15,c
   454                           
   455                           ;main.c: 220: dataBufOut[16] = 0x98;
   456  0000FA  0E98               	movlw	152
   457  0000FC  6E11               	movwf	_dataBufOut+16,c
   458                           
   459                           ;main.c: 221: dataBufOut[17] = 0x6F;
   460  0000FE  0E6F               	movlw	111
   461  000100  6E12               	movwf	_dataBufOut+17,c
   462                           
   463                           ;main.c: 222: dataBufOut[18] = 92;
   464  000102  0E5C               	movlw	92
   465  000104  6E13               	movwf	_dataBufOut+18,c
   466                           
   467                           ;main.c: 223: dataBufOut[19] = 0x4A;
   468  000106  0E4A               	movlw	74
   469  000108  6E14               	movwf	_dataBufOut+19,c
   470                           
   471                           ;main.c: 224: dataBufOut[20] = 0x6F;
   472  00010A  0E6F               	movlw	111
   473  00010C  6E15               	movwf	_dataBufOut+20,c
   474                           
   475                           ;main.c: 225: dataBufOut[21] = 62;
   476  00010E  0E3E               	movlw	62
   477  000110  6E16               	movwf	_dataBufOut+21,c
   478                           
   479                           ;main.c: 226: dataBufOut[22] = 0x62;
   480  000112  0E62               	movlw	98
   481  000114  6E17               	movwf	_dataBufOut+22,c
   482                           
   483                           ;main.c: 227: dataBufOut[23] = 0x6F;
   484  000116  0E6F               	movlw	111
   485  000118  6E18               	movwf	_dataBufOut+23,c
   486                           
   487                           ;main.c: 228: dataBufOut[24] = 82;
   488  00011A  0E52               	movlw	82
   489  00011C  6E19               	movwf	_dataBufOut+24,c
   490                           
   491                           ;main.c: 229: dataBufOut[25] = 0x86;
   492  00011E  0E86               	movlw	134
   493  000120  6E1A               	movwf	_dataBufOut+25,c
   494                           
   495                           ;main.c: 230: dataBufOut[26] = 0x7F;
   496  000122  0E7F               	movlw	127
   497  000124  6E1B               	movwf	_dataBufOut+26,c
   498                           
   499                           ;main.c: 231: dataBufOut[27] = 72;
   500  000126  0E48               	movlw	72
   501  000128  6E1C               	movwf	_dataBufOut+27,c
   502                           
   503                           ;main.c: 232: dataBufOut[28] = 102;
   504  00012A  0E66               	movlw	102
   505  00012C  6E1D               	movwf	_dataBufOut+28,c
   506                           
   507                           ;main.c: 233: dataBufOut[29] = 0xC0;
   508  00012E  0EC0               	movlw	192
   509  000130  6E1E               	movwf	_dataBufOut+29,c
   510                           
   511                           ;main.c: 234: dataBufOut[30] = 0x5F;
   512  000132  0E5F               	movlw	95
   513  000134  6E1F               	movwf	_dataBufOut+30,c
   514                           
   515                           ;main.c: 235: dataBufOut[31] = 122;
   516  000136  0E7A               	movlw	122
   517  000138  6E20               	movwf	_dataBufOut+31,c
   518                           
   519                           ;main.c: 238: int count = 1;
   520  00013A  0E00               	movlw	0
   521  00013C  0100               	movlb	0	; () banked
   522  00013E  6F8F               	movwf	(main@count+1)& (0+255),b
   523  000140  0E01               	movlw	1
   524  000142  0100               	movlb	0	; () banked
   525  000144  6F8E               	movwf	main@count& (0+255),b
   526  000146                     l1431:
   527                           
   528                           ;main.c: 241: dataBufOut[0] = count;
   529  000146  C08E  F001         	movff	main@count,_dataBufOut
   530                           
   531                           ;main.c: 242: nrfTXData(5);
   532  00014A  0E00               	movlw	0
   533  00014C  6E37               	movwf	nrfTXData@len+1,c
   534  00014E  0E05               	movlw	5
   535  000150  6E36               	movwf	nrfTXData@len,c
   536  000152  EC42  F001         	call	_nrfTXData	;wreg free
   537                           
   538                           ;main.c: 243: count++;
   539  000156  0100               	movlb	0	; () banked
   540  000158  4B8E               	infsnz	main@count& (0+255),f,b
   541  00015A  2B8F               	incf	(main@count+1)& (0+255),f,b
   542                           
   543                           ; BSR set to: 0
   544                           ;main.c: 245: nrfGetStatus();
   545  00015C  ECD2  F002         	call	_nrfGetStatus	;wreg free
   546                           
   547                           ;main.c: 247: if (nrfSTATUS != 0x0E) {
   548  000160  5022               	movf	_nrfSTATUS,w,c
   549  000162  0A0E               	xorlw	14
   550  000164  B4D8               	btfsc	status,2,c
   551  000166  D019               	goto	l1455
   552                           
   553                           ;main.c: 249: LATAbits.LATA0 = 1;
   554  000168  8089               	bsf	3977,0,c	;volatile
   555                           
   556                           ;main.c: 252: dataBufOut[0] = 0b00100000;
   557  00016A  0E20               	movlw	32
   558  00016C  6E01               	movwf	_dataBufOut,c
   559                           
   560                           ;main.c: 253: spiTransfer('w',0x07,1);
   561  00016E  0E07               	movlw	7
   562  000170  6E36               	movwf	spiTransfer@command,c
   563  000172  0E00               	movlw	0
   564  000174  6E38               	movwf	spiTransfer@len+1,c
   565  000176  0E01               	movlw	1
   566  000178  6E37               	movwf	spiTransfer@len,c
   567  00017A  0E77               	movlw	119
   568  00017C  EC92  F001         	call	_spiTransfer
   569                           
   570                           ;main.c: 255: _delay((unsigned long)((20)*(64000000/4000000.0)));
   571  000180  0E6A               	movlw	106
   572  000182                     u517:
   573  000182  2EE8               	decfsz	wreg,f,c
   574  000184  D7FE               	goto	u517
   575  000186  D000               	nop2		;nop
   576                           
   577                           ;main.c: 256: nrfGetStatus();
   578  000188  ECD2  F002         	call	_nrfGetStatus	;wreg free
   579                           
   580                           ;main.c: 258: delay10ms(10);
   581  00018C  0E00               	movlw	0
   582  00018E  6E35               	movwf	delay10ms@ms_multi+1,c
   583  000190  0E0A               	movlw	10
   584  000192  6E34               	movwf	delay10ms@ms_multi,c
   585  000194  ECB4  F002         	call	_delay10ms	;wreg free
   586                           
   587                           ;main.c: 260: LATAbits.LATA0 = 0;
   588  000198  9089               	bcf	3977,0,c	;volatile
   589  00019A                     l1455:
   590                           
   591                           ;main.c: 261: }
   592                           ;main.c: 263: delay10ms(500);
   593  00019A  0E01               	movlw	1
   594  00019C  6E35               	movwf	delay10ms@ms_multi+1,c
   595  00019E  0EF4               	movlw	244
   596  0001A0  6E34               	movwf	delay10ms@ms_multi,c
   597  0001A2  ECB4  F002         	call	_delay10ms	;wreg free
   598                           
   599                           ;main.c: 264: }
   600  0001A6  D7CF               	goto	l1431
   601  0001A8                     __end_of_main:
   602                           	opt stack 0
   603                           tblptru	equ	0xFF8
   604                           tblptrh	equ	0xFF7
   605                           tblptrl	equ	0xFF6
   606                           tablat	equ	0xFF5
   607                           postinc0	equ	0xFEE
   608                           wreg	equ	0xFE8
   609                           postdec1	equ	0xFE5
   610                           fsr1l	equ	0xFE1
   611                           status	equ	0xFD8
   612                           
   613 ;; *************** function _spiConfig_1 *****************
   614 ;; Defined at:
   615 ;;		line 307 in file "main.c"
   616 ;; Parameters:    Size  Location     Type
   617 ;;		None
   618 ;; Auto vars:     Size  Location     Type
   619 ;;		None
   620 ;; Return value:  Size  Location     Type
   621 ;;		None               void
   622 ;; Registers used:
   623 ;;		wreg, status,2
   624 ;; Tracked objects:
   625 ;;		On entry : 0/0
   626 ;;		On exit  : 0/0
   627 ;;		Unchanged: 0/0
   628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   629 ;;      Params:         0       0       0       0
   630 ;;      Locals:         0       0       0       0
   631 ;;      Temps:          0       0       0       0
   632 ;;      Totals:         0       0       0       0
   633 ;;Total ram usage:        0 bytes
   634 ;; Hardware stack levels used:    1
   635 ;; Hardware stack levels required when called:    2
   636 ;; This function calls:
   637 ;;		Nothing
   638 ;; This function is called by:
   639 ;;		_main
   640 ;; This function uses a non-reentrant model
   641 ;;
   642                           
   643                           	psect	text1
   644  0005E0                     __ptext1:
   645                           	opt stack 0
   646  0005E0                     _spiConfig_1:
   647                           	opt stack 28
   648                           
   649                           ;main.c: 308: SSP1CON1bits.CKP = 0;
   650                           
   651                           ;incstack = 0
   652  0005E0  98C6               	bcf	4038,4,c	;volatile
   653                           
   654                           ;main.c: 309: SSP1STATbits.CKE = 1;
   655  0005E2  8CC7               	bsf	4039,6,c	;volatile
   656                           
   657                           ;main.c: 310: SSP1STATbits.SMP = 1;
   658  0005E4  8EC7               	bsf	4039,7,c	;volatile
   659                           
   660                           ;main.c: 311: SSP1ADD = 0b00000001;
   661  0005E6  0E01               	movlw	1
   662  0005E8  6EC8               	movwf	4040,c	;volatile
   663                           
   664                           ;main.c: 312: SSP1CON1bits.SSPM = 0b1010;
   665  0005EA  50C6               	movf	4038,w,c	;volatile
   666  0005EC  0BF0               	andlw	-16
   667  0005EE  090A               	iorlw	10
   668  0005F0  6EC6               	movwf	4038,c	;volatile
   669                           
   670                           ;main.c: 313: SSP1CON1bits.SSPEN = 1;
   671  0005F2  8AC6               	bsf	4038,5,c	;volatile
   672                           
   673                           ;main.c: 314: LATAbits.LATA2 = 1;
   674  0005F4  8489               	bsf	3977,2,c	;volatile
   675  0005F6  0012               	return	
   676  0005F8                     __end_of_spiConfig_1:
   677                           	opt stack 0
   678                           tblptru	equ	0xFF8
   679                           tblptrh	equ	0xFF7
   680                           tblptrl	equ	0xFF6
   681                           tablat	equ	0xFF5
   682                           postinc0	equ	0xFEE
   683                           wreg	equ	0xFE8
   684                           postdec1	equ	0xFE5
   685                           fsr1l	equ	0xFE1
   686                           status	equ	0xFD8
   687                           
   688 ;; *************** function _portConfig *****************
   689 ;; Defined at:
   690 ;;		line 293 in file "main.c"
   691 ;; Parameters:    Size  Location     Type
   692 ;;		None
   693 ;; Auto vars:     Size  Location     Type
   694 ;;		None
   695 ;; Return value:  Size  Location     Type
   696 ;;		None               void
   697 ;; Registers used:
   698 ;;		wreg, status,2
   699 ;; Tracked objects:
   700 ;;		On entry : 0/0
   701 ;;		On exit  : 0/0
   702 ;;		Unchanged: 0/0
   703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   704 ;;      Params:         0       0       0       0
   705 ;;      Locals:         0       0       0       0
   706 ;;      Temps:          0       0       0       0
   707 ;;      Totals:         0       0       0       0
   708 ;;Total ram usage:        0 bytes
   709 ;; Hardware stack levels used:    1
   710 ;; Hardware stack levels required when called:    2
   711 ;; This function calls:
   712 ;;		Nothing
   713 ;; This function is called by:
   714 ;;		_main
   715 ;; This function uses a non-reentrant model
   716 ;;
   717                           
   718                           	psect	text2
   719  0005C6                     __ptext2:
   720                           	opt stack 0
   721  0005C6                     _portConfig:
   722                           	opt stack 28
   723                           
   724                           ;main.c: 294: TRISA = 0b00001000;
   725                           
   726                           ;incstack = 0
   727  0005C6  0E08               	movlw	8
   728  0005C8  6E92               	movwf	3986,c	;volatile
   729                           
   730                           ;main.c: 295: TRISB = 0b00000000;
   731  0005CA  0E00               	movlw	0
   732  0005CC  6E93               	movwf	3987,c	;volatile
   733                           
   734                           ;main.c: 296: TRISC = 0b00010000;
   735  0005CE  0E10               	movlw	16
   736  0005D0  6E94               	movwf	3988,c	;volatile
   737                           
   738                           ;main.c: 298: LATA = 0b00000100;
   739  0005D2  0E04               	movlw	4
   740  0005D4  6E89               	movwf	3977,c	;volatile
   741                           
   742                           ;main.c: 299: LATB = 0x00;
   743  0005D6  0E00               	movlw	0
   744  0005D8  6E8A               	movwf	3978,c	;volatile
   745                           
   746                           ;main.c: 300: LATC = 0x00;
   747  0005DA  0E00               	movlw	0
   748  0005DC  6E8B               	movwf	3979,c	;volatile
   749  0005DE  0012               	return	
   750  0005E0                     __end_of_portConfig:
   751                           	opt stack 0
   752                           tblptru	equ	0xFF8
   753                           tblptrh	equ	0xFF7
   754                           tblptrl	equ	0xFF6
   755                           tablat	equ	0xFF5
   756                           postinc0	equ	0xFEE
   757                           wreg	equ	0xFE8
   758                           postdec1	equ	0xFE5
   759                           fsr1l	equ	0xFE1
   760                           status	equ	0xFD8
   761                           
   762 ;; *************** function _nrfTXData *****************
   763 ;; Defined at:
   764 ;;		line 485 in file "main.c"
   765 ;; Parameters:    Size  Location     Type
   766 ;;  len             2   19[COMRAM] int 
   767 ;; Auto vars:     Size  Location     Type
   768 ;;  i               2   24[COMRAM] int 
   769 ;;  i               2   22[COMRAM] int 
   770 ;; Return value:  Size  Location     Type
   771 ;;		None               void
   772 ;; Registers used:
   773 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   774 ;; Tracked objects:
   775 ;;		On entry : 0/0
   776 ;;		On exit  : 0/0
   777 ;;		Unchanged: 0/0
   778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   779 ;;      Params:         2       0       0       0
   780 ;;      Locals:         4       0       0       0
   781 ;;      Temps:          1       0       0       0
   782 ;;      Totals:         7       0       0       0
   783 ;;Total ram usage:        7 bytes
   784 ;; Hardware stack levels used:    1
   785 ;; Hardware stack levels required when called:    3
   786 ;; This function calls:
   787 ;;		_setCSN
   788 ;;		_spiTransferByte
   789 ;; This function is called by:
   790 ;;		_main
   791 ;; This function uses a non-reentrant model
   792 ;;
   793                           
   794                           	psect	text3
   795  000284                     __ptext3:
   796                           	opt stack 0
   797  000284                     _nrfTXData:
   798                           	opt stack 27
   799                           
   800                           ;main.c: 487: setCSN(0);
   801                           
   802                           ;incstack = 0
   803  000284  0E00               	movlw	0
   804  000286  6E35               	movwf	setCSN@level+1,c
   805  000288  0E00               	movlw	0
   806  00028A  6E34               	movwf	setCSN@level,c
   807  00028C  EC0E  F003         	call	_setCSN	;wreg free
   808                           
   809                           ;main.c: 489: spiTransferByte(0xA0);
   810  000290  0EA0               	movlw	160
   811  000292  ECFC  F002         	call	_spiTransferByte
   812                           
   813                           ;main.c: 491: if (len != 0) {
   814  000296  5037               	movf	nrfTXData@len+1,w,c
   815  000298  1036               	iorwf	nrfTXData@len,w,c
   816  00029A  B4D8               	btfsc	status,2,c
   817  00029C  D01A               	goto	l1339
   818                           
   819                           ;main.c: 492: for (int i=0;i<len;i++) {
   820  00029E  0E00               	movlw	0
   821  0002A0  6E3C               	movwf	nrfTXData@i+1,c
   822  0002A2  0E00               	movlw	0
   823  0002A4  6E3B               	movwf	nrfTXData@i,c
   824  0002A6  D00B               	goto	l1337
   825  0002A8                     l1333:
   826                           
   827                           ;main.c: 493: spiTransferByte(dataBufOut[i]);
   828  0002A8  0E01               	movlw	low _dataBufOut
   829  0002AA  243B               	addwf	nrfTXData@i,w,c
   830  0002AC  6ED9               	movwf	fsr2l,c
   831  0002AE  0E00               	movlw	high _dataBufOut
   832  0002B0  203C               	addwfc	nrfTXData@i+1,w,c
   833  0002B2  6EDA               	movwf	fsr2h,c
   834  0002B4  50DF               	movf	indf2,w,c
   835  0002B6  ECFC  F002         	call	_spiTransferByte
   836  0002BA  4A3B               	infsnz	nrfTXData@i,f,c
   837  0002BC  2A3C               	incf	nrfTXData@i+1,f,c
   838  0002BE                     l1337:
   839  0002BE  503C               	movf	nrfTXData@i+1,w,c
   840  0002C0  0A80               	xorlw	128
   841  0002C2  6E38               	movwf	??_nrfTXData& (0+255),c
   842  0002C4  5036               	movf	nrfTXData@len,w,c
   843  0002C6  5C3B               	subwf	nrfTXData@i,w,c
   844  0002C8  5037               	movf	nrfTXData@len+1,w,c
   845  0002CA  0A80               	xorlw	128
   846  0002CC  5838               	subwfb	??_nrfTXData& (0+255),w,c
   847  0002CE  A0D8               	btfss	status,0,c
   848  0002D0  D7EB               	goto	l1333
   849  0002D2                     l1339:
   850                           
   851                           ;main.c: 494: }
   852                           ;main.c: 495: }
   853                           ;main.c: 497: setCSN(1);
   854  0002D2  0E00               	movlw	0
   855  0002D4  6E35               	movwf	setCSN@level+1,c
   856  0002D6  0E01               	movlw	1
   857  0002D8  6E34               	movwf	setCSN@level,c
   858  0002DA  EC0E  F003         	call	_setCSN	;wreg free
   859                           
   860                           ;main.c: 500: LATAbits.LATA1 = 1;
   861  0002DE  8289               	bsf	3977,1,c	;volatile
   862                           
   863                           ;main.c: 501: _delay((unsigned long)((12)*(64000000/4000000.0)));
   864  0002E0  0E40               	movlw	64
   865  0002E2                     u527:
   866  0002E2  2EE8               	decfsz	wreg,f,c
   867  0002E4  D7FE               	goto	u527
   868                           
   869                           ;main.c: 502: LATAbits.LATA1 = 0;
   870  0002E6  9289               	bcf	3977,1,c	;volatile
   871                           
   872                           ;main.c: 503: _delay((unsigned long)((180)*(64000000/4000000.0)));
   873  0002E8  0E04               	movlw	4
   874  0002EA  6E38               	movwf	??_nrfTXData& (0+255),c
   875  0002EC  0EBC               	movlw	188
   876  0002EE                     u537:
   877  0002EE  2EE8               	decfsz	wreg,f,c
   878  0002F0  D7FE               	goto	u537
   879  0002F2  2E38               	decfsz	??_nrfTXData& (0+255),f,c
   880  0002F4  D7FC               	goto	u537
   881  0002F6  D000               	nop2	
   882                           
   883                           ;main.c: 504: for (int i=0;i<len;i++) {
   884  0002F8  0E00               	movlw	0
   885  0002FA  6E3A               	movwf	nrfTXData@i_656+1,c
   886  0002FC  0E00               	movlw	0
   887  0002FE  6E39               	movwf	nrfTXData@i_656,c
   888  000300  D006               	goto	l152
   889  000302                     l1351:
   890                           
   891                           ;main.c: 505: _delay((unsigned long)((8)*(64000000/4000000.0)));
   892  000302  0E2A               	movlw	42
   893  000304                     u547:
   894  000304  2EE8               	decfsz	wreg,f,c
   895  000306  D7FE               	goto	u547
   896  000308  D000               	nop2		;nop
   897  00030A  4A39               	infsnz	nrfTXData@i_656,f,c
   898  00030C  2A3A               	incf	nrfTXData@i_656+1,f,c
   899  00030E                     l152:
   900  00030E  503A               	movf	nrfTXData@i_656+1,w,c
   901  000310  0A80               	xorlw	128
   902  000312  6E38               	movwf	??_nrfTXData& (0+255),c
   903  000314  5036               	movf	nrfTXData@len,w,c
   904  000316  5C39               	subwf	nrfTXData@i_656,w,c
   905  000318  5037               	movf	nrfTXData@len+1,w,c
   906  00031A  0A80               	xorlw	128
   907  00031C  5838               	subwfb	??_nrfTXData& (0+255),w,c
   908  00031E  B0D8               	btfsc	status,0,c
   909  000320  0012               	return	
   910  000322  D7EF               	goto	l1351
   911  000324                     __end_of_nrfTXData:
   912                           	opt stack 0
   913                           tblptru	equ	0xFF8
   914                           tblptrh	equ	0xFF7
   915                           tblptrl	equ	0xFF6
   916                           tablat	equ	0xFF5
   917                           postinc0	equ	0xFEE
   918                           wreg	equ	0xFE8
   919                           postdec1	equ	0xFE5
   920                           fsr1l	equ	0xFE1
   921                           indf2	equ	0xFDF
   922                           fsr2h	equ	0xFDA
   923                           fsr2l	equ	0xFD9
   924                           status	equ	0xFD8
   925                           
   926 ;; *************** function _nrfGetStatus *****************
   927 ;; Defined at:
   928 ;;		line 368 in file "main.c"
   929 ;; Parameters:    Size  Location     Type
   930 ;;		None
   931 ;; Auto vars:     Size  Location     Type
   932 ;;		None
   933 ;; Return value:  Size  Location     Type
   934 ;;		None               void
   935 ;; Registers used:
   936 ;;		wreg, status,2, status,0, cstack
   937 ;; Tracked objects:
   938 ;;		On entry : 0/0
   939 ;;		On exit  : 0/0
   940 ;;		Unchanged: 0/0
   941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   942 ;;      Params:         0       0       0       0
   943 ;;      Locals:         0       0       0       0
   944 ;;      Temps:          0       0       0       0
   945 ;;      Totals:         0       0       0       0
   946 ;;Total ram usage:        0 bytes
   947 ;; Hardware stack levels used:    1
   948 ;; Hardware stack levels required when called:    3
   949 ;; This function calls:
   950 ;;		_setCSN
   951 ;;		_spiTransferByte
   952 ;; This function is called by:
   953 ;;		_main
   954 ;; This function uses a non-reentrant model
   955 ;;
   956                           
   957                           	psect	text4
   958  0005A4                     __ptext4:
   959                           	opt stack 0
   960  0005A4                     _nrfGetStatus:
   961                           	opt stack 27
   962                           
   963                           ;main.c: 370: setCSN(0);
   964                           
   965                           ;incstack = 0
   966  0005A4  0E00               	movlw	0
   967  0005A6  6E35               	movwf	setCSN@level+1,c
   968  0005A8  0E00               	movlw	0
   969  0005AA  6E34               	movwf	setCSN@level,c
   970  0005AC  EC0E  F003         	call	_setCSN	;wreg free
   971                           
   972                           ;main.c: 372: nrfSTATUS = spiTransferByte(0xFF);
   973  0005B0  0EFF               	movlw	255
   974  0005B2  ECFC  F002         	call	_spiTransferByte
   975  0005B6  6E22               	movwf	_nrfSTATUS,c
   976                           
   977                           ;main.c: 374: setCSN(1);
   978  0005B8  0E00               	movlw	0
   979  0005BA  6E35               	movwf	setCSN@level+1,c
   980  0005BC  0E01               	movlw	1
   981  0005BE  6E34               	movwf	setCSN@level,c
   982  0005C0  EC0E  F003         	call	_setCSN	;wreg free
   983  0005C4  0012               	return	
   984  0005C6                     __end_of_nrfGetStatus:
   985                           	opt stack 0
   986                           tblptru	equ	0xFF8
   987                           tblptrh	equ	0xFF7
   988                           tblptrl	equ	0xFF6
   989                           tablat	equ	0xFF5
   990                           postinc0	equ	0xFEE
   991                           wreg	equ	0xFE8
   992                           postdec1	equ	0xFE5
   993                           fsr1l	equ	0xFE1
   994                           indf2	equ	0xFDF
   995                           fsr2h	equ	0xFDA
   996                           fsr2l	equ	0xFD9
   997                           status	equ	0xFD8
   998                           
   999 ;; *************** function _nrfConfig *****************
  1000 ;; Defined at:
  1001 ;;		line 320 in file "main.c"
  1002 ;; Parameters:    Size  Location     Type
  1003 ;;		None
  1004 ;; Auto vars:     Size  Location     Type
  1005 ;;		None
  1006 ;; Return value:  Size  Location     Type
  1007 ;;		None               void
  1008 ;; Registers used:
  1009 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1010 ;; Tracked objects:
  1011 ;;		On entry : 0/0
  1012 ;;		On exit  : 0/0
  1013 ;;		Unchanged: 0/0
  1014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1015 ;;      Params:         0       0       0       0
  1016 ;;      Locals:         0       0       0       0
  1017 ;;      Temps:          0       0       0       0
  1018 ;;      Totals:         0       0       0       0
  1019 ;;Total ram usage:        0 bytes
  1020 ;; Hardware stack levels used:    1
  1021 ;; Hardware stack levels required when called:    4
  1022 ;; This function calls:
  1023 ;;		_nrfConfigReg
  1024 ;;		_nrfSetRXAddr
  1025 ;;		_nrfSetTXAddr
  1026 ;;		_spiTransfer
  1027 ;; This function is called by:
  1028 ;;		_main
  1029 ;; This function uses a non-reentrant model
  1030 ;;
  1031                           
  1032                           	psect	text5
  1033  0001A8                     __ptext5:
  1034                           	opt stack 0
  1035  0001A8                     _nrfConfig:
  1036                           	opt stack 26
  1037                           
  1038                           ;main.c: 323: nrfConfigReg('w',0x00,CONFIG_CURR);
  1039                           
  1040                           ;incstack = 0
  1041  0001A8  0E00               	movlw	0
  1042  0001AA  6E36               	movwf	nrfConfigReg@command,c
  1043  0001AC  C03E  F037         	movff	_CONFIG_CURR,nrfConfigReg@data
  1044  0001B0  0E77               	movlw	119
  1045  0001B2  EC70  F002         	call	_nrfConfigReg
  1046                           
  1047                           ;main.c: 325: nrfConfigReg('w',0x01,EN_AA_CURR);
  1048  0001B6  0E01               	movlw	1
  1049  0001B8  6E36               	movwf	nrfConfigReg@command,c
  1050  0001BA  C021  F037         	movff	_EN_AA_CURR,nrfConfigReg@data
  1051  0001BE  0E77               	movlw	119
  1052  0001C0  EC70  F002         	call	_nrfConfigReg
  1053                           
  1054                           ;main.c: 327: nrfConfigReg('w',0x02,EN_RXADDR_CURR);
  1055  0001C4  0E02               	movlw	2
  1056  0001C6  6E36               	movwf	nrfConfigReg@command,c
  1057  0001C8  C040  F037         	movff	_EN_RXADDR_CURR,nrfConfigReg@data
  1058  0001CC  0E77               	movlw	119
  1059  0001CE  EC70  F002         	call	_nrfConfigReg
  1060                           
  1061                           ;main.c: 329: nrfConfigReg('w',0x03,SETUP_AW_CURR);
  1062  0001D2  0E03               	movlw	3
  1063  0001D4  6E36               	movwf	nrfConfigReg@command,c
  1064  0001D6  C045  F037         	movff	_SETUP_AW_CURR,nrfConfigReg@data
  1065  0001DA  0E77               	movlw	119
  1066  0001DC  EC70  F002         	call	_nrfConfigReg
  1067                           
  1068                           ;main.c: 331: nrfConfigReg('w',0x04,SETUP_RETR_CURR);
  1069  0001E0  0E04               	movlw	4
  1070  0001E2  6E36               	movwf	nrfConfigReg@command,c
  1071  0001E4  C046  F037         	movff	_SETUP_RETR_CURR,nrfConfigReg@data
  1072  0001E8  0E77               	movlw	119
  1073  0001EA  EC70  F002         	call	_nrfConfigReg
  1074                           
  1075                           ;main.c: 333: nrfConfigReg('w',0x05,RF_CH_CURR);
  1076  0001EE  0E05               	movlw	5
  1077  0001F0  6E36               	movwf	nrfConfigReg@command,c
  1078  0001F2  C042  F037         	movff	_RF_CH_CURR,nrfConfigReg@data
  1079  0001F6  0E77               	movlw	119
  1080  0001F8  EC70  F002         	call	_nrfConfigReg
  1081                           
  1082                           ;main.c: 335: nrfConfigReg('w',0x06,RF_SETUP_CURR);
  1083  0001FC  0E06               	movlw	6
  1084  0001FE  6E36               	movwf	nrfConfigReg@command,c
  1085  000200  C043  F037         	movff	_RF_SETUP_CURR,nrfConfigReg@data
  1086  000204  0E77               	movlw	119
  1087  000206  EC70  F002         	call	_nrfConfigReg
  1088                           
  1089                           ;main.c: 337: nrfSetRXAddr(0x0A,RX_ADDRESS,4);
  1090  00020A  0E00               	movlw	high _RX_ADDRESS
  1091  00020C  6E37               	movwf	nrfSetRXAddr@addr+1,c
  1092  00020E  0E47               	movlw	low _RX_ADDRESS
  1093  000210  6E36               	movwf	nrfSetRXAddr@addr,c
  1094  000212  0E00               	movlw	0
  1095  000214  6E39               	movwf	nrfSetRXAddr@len+1,c
  1096  000216  0E04               	movlw	4
  1097  000218  6E38               	movwf	nrfSetRXAddr@len,c
  1098  00021A  0E0A               	movlw	10
  1099  00021C  EC12  F002         	call	_nrfSetRXAddr
  1100                           
  1101                           ;main.c: 339: nrfSetTXAddr(TX_ADDRESS,4);
  1102  000220  0E00               	movlw	high _TX_ADDRESS
  1103  000222  6E37               	movwf	nrfSetTXAddr@addr+1,c
  1104  000224  0E4B               	movlw	low _TX_ADDRESS
  1105  000226  6E36               	movwf	nrfSetTXAddr@addr,c
  1106  000228  0E00               	movlw	0
  1107  00022A  6E39               	movwf	nrfSetTXAddr@len+1,c
  1108  00022C  0E04               	movlw	4
  1109  00022E  6E38               	movwf	nrfSetTXAddr@len,c
  1110  000230  EC42  F002         	call	_nrfSetTXAddr	;wreg free
  1111                           
  1112                           ;main.c: 341: nrfConfigReg('w',0x11,RX_PW_P0_CURR);
  1113  000234  0E11               	movlw	17
  1114  000236  6E36               	movwf	nrfConfigReg@command,c
  1115  000238  C044  F037         	movff	_RX_PW_P0_CURR,nrfConfigReg@data
  1116  00023C  0E77               	movlw	119
  1117  00023E  EC70  F002         	call	_nrfConfigReg
  1118                           
  1119                           ;main.c: 343: nrfConfigReg('w',0x1C,DYNPD_CURR);
  1120  000242  0E1C               	movlw	28
  1121  000244  6E36               	movwf	nrfConfigReg@command,c
  1122  000246  C03F  F037         	movff	_DYNPD_CURR,nrfConfigReg@data
  1123  00024A  0E77               	movlw	119
  1124  00024C  EC70  F002         	call	_nrfConfigReg
  1125                           
  1126                           ;main.c: 345: nrfConfigReg('w',0x1D,FEATURE_CURR);
  1127  000250  0E1D               	movlw	29
  1128  000252  6E36               	movwf	nrfConfigReg@command,c
  1129  000254  C041  F037         	movff	_FEATURE_CURR,nrfConfigReg@data
  1130  000258  0E77               	movlw	119
  1131  00025A  EC70  F002         	call	_nrfConfigReg
  1132                           
  1133                           ;main.c: 347: spiTransfer('n',0xE1,0);
  1134  00025E  0EE1               	movlw	225
  1135  000260  6E36               	movwf	spiTransfer@command,c
  1136  000262  0E00               	movlw	0
  1137  000264  6E38               	movwf	spiTransfer@len+1,c
  1138  000266  0E00               	movlw	0
  1139  000268  6E37               	movwf	spiTransfer@len,c
  1140  00026A  0E6E               	movlw	110
  1141  00026C  EC92  F001         	call	_spiTransfer
  1142                           
  1143                           ;main.c: 349: spiTransfer('n',0xE2,0);
  1144  000270  0EE2               	movlw	226
  1145  000272  6E36               	movwf	spiTransfer@command,c
  1146  000274  0E00               	movlw	0
  1147  000276  6E38               	movwf	spiTransfer@len+1,c
  1148  000278  0E00               	movlw	0
  1149  00027A  6E37               	movwf	spiTransfer@len,c
  1150  00027C  0E6E               	movlw	110
  1151  00027E  EC92  F001         	call	_spiTransfer
  1152  000282  0012               	return	
  1153  000284                     __end_of_nrfConfig:
  1154                           	opt stack 0
  1155                           tblptru	equ	0xFF8
  1156                           tblptrh	equ	0xFF7
  1157                           tblptrl	equ	0xFF6
  1158                           tablat	equ	0xFF5
  1159                           postinc0	equ	0xFEE
  1160                           wreg	equ	0xFE8
  1161                           postdec1	equ	0xFE5
  1162                           fsr1l	equ	0xFE1
  1163                           indf2	equ	0xFDF
  1164                           fsr2h	equ	0xFDA
  1165                           fsr2l	equ	0xFD9
  1166                           status	equ	0xFD8
  1167                           
  1168 ;; *************** function _spiTransfer *****************
  1169 ;; Defined at:
  1170 ;;		line 448 in file "main.c"
  1171 ;; Parameters:    Size  Location     Type
  1172 ;;  wrn             1    wreg     unsigned char 
  1173 ;;  command         1   19[COMRAM] unsigned char 
  1174 ;;  len             2   20[COMRAM] int 
  1175 ;; Auto vars:     Size  Location     Type
  1176 ;;  wrn             1   23[COMRAM] unsigned char 
  1177 ;;  i               2   24[COMRAM] int 
  1178 ;; Return value:  Size  Location     Type
  1179 ;;		None               void
  1180 ;; Registers used:
  1181 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1182 ;; Tracked objects:
  1183 ;;		On entry : 0/0
  1184 ;;		On exit  : 0/0
  1185 ;;		Unchanged: 0/0
  1186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1187 ;;      Params:         3       0       0       0
  1188 ;;      Locals:         3       0       0       0
  1189 ;;      Temps:          1       0       0       0
  1190 ;;      Totals:         7       0       0       0
  1191 ;;Total ram usage:        7 bytes
  1192 ;; Hardware stack levels used:    1
  1193 ;; Hardware stack levels required when called:    3
  1194 ;; This function calls:
  1195 ;;		_setCSN
  1196 ;;		_spiTransferByte
  1197 ;; This function is called by:
  1198 ;;		_main
  1199 ;;		_nrfConfig
  1200 ;; This function uses a non-reentrant model
  1201 ;;
  1202                           
  1203                           	psect	text6
  1204  000324                     __ptext6:
  1205                           	opt stack 0
  1206  000324                     _spiTransfer:
  1207                           	opt stack 27
  1208                           
  1209                           ;incstack = 0
  1210                           ;spiTransfer@wrn stored from wreg
  1211  000324  6E3A               	movwf	spiTransfer@wrn,c
  1212                           
  1213                           ;main.c: 450: setCSN(0);
  1214  000326  0E00               	movlw	0
  1215  000328  6E35               	movwf	setCSN@level+1,c
  1216  00032A  0E00               	movlw	0
  1217  00032C  6E34               	movwf	setCSN@level,c
  1218  00032E  EC0E  F003         	call	_setCSN	;wreg free
  1219                           
  1220                           ;main.c: 452: if (wrn == 'w') {
  1221  000332  503A               	movf	spiTransfer@wrn,w,c
  1222  000334  0A77               	xorlw	119
  1223  000336  A4D8               	btfss	status,2,c
  1224  000338  D005               	goto	l1233
  1225                           
  1226                           ;main.c: 453: spiTransferByte(0x20|command);
  1227  00033A  5036               	movf	spiTransfer@command,w,c
  1228  00033C  0920               	iorlw	32
  1229  00033E  ECFC  F002         	call	_spiTransferByte
  1230                           
  1231                           ;main.c: 454: } else if (wrn == 'r') {
  1232  000342  D00F               	goto	l1241
  1233  000344                     l1233:
  1234  000344  503A               	movf	spiTransfer@wrn,w,c
  1235  000346  0A72               	xorlw	114
  1236  000348  A4D8               	btfss	status,2,c
  1237  00034A  D004               	goto	l1237
  1238                           
  1239                           ;main.c: 455: spiTransferByte(0x00|command);
  1240  00034C  5036               	movf	spiTransfer@command,w,c
  1241  00034E  ECFC  F002         	call	_spiTransferByte
  1242                           
  1243                           ;main.c: 456: } else if(wrn == 'n') {
  1244  000352  D007               	goto	l1241
  1245  000354                     l1237:
  1246  000354  503A               	movf	spiTransfer@wrn,w,c
  1247  000356  0A6E               	xorlw	110
  1248  000358  A4D8               	btfss	status,2,c
  1249  00035A  D003               	goto	l1241
  1250                           
  1251                           ;main.c: 457: spiTransferByte(command);
  1252  00035C  5036               	movf	spiTransfer@command,w,c
  1253  00035E  ECFC  F002         	call	_spiTransferByte
  1254  000362                     l1241:
  1255                           
  1256                           ;main.c: 458: }
  1257                           ;main.c: 460: if (len != 0) {
  1258  000362  5038               	movf	spiTransfer@len+1,w,c
  1259  000364  1037               	iorwf	spiTransfer@len,w,c
  1260  000366  B4D8               	btfsc	status,2,c
  1261  000368  D023               	goto	l1251
  1262                           
  1263                           ;main.c: 461: for (int i=0;i<len;i++) {
  1264  00036A  0E00               	movlw	0
  1265  00036C  6E3C               	movwf	spiTransfer@i+1,c
  1266  00036E  0E00               	movlw	0
  1267  000370  6E3B               	movwf	spiTransfer@i,c
  1268  000372  D014               	goto	l1249
  1269  000374                     l1245:
  1270                           
  1271                           ;main.c: 462: dataBufIn[i] = spiTransferByte(dataBufOut[i]);
  1272  000374  0100               	movlb	0	; () banked
  1273  000376  0E60               	movlw	low _dataBufIn
  1274  000378  243B               	addwf	spiTransfer@i,w,c
  1275  00037A  6ED9               	movwf	fsr2l,c
  1276  00037C  0100               	movlb	0	; () banked
  1277  00037E  0E00               	movlw	high _dataBufIn
  1278  000380  203C               	addwfc	spiTransfer@i+1,w,c
  1279  000382  6EDA               	movwf	fsr2h,c
  1280  000384  0E01               	movlw	low _dataBufOut
  1281  000386  243B               	addwf	spiTransfer@i,w,c
  1282  000388  6EE1               	movwf	fsr1l,c
  1283  00038A  0E00               	movlw	high _dataBufOut
  1284  00038C  203C               	addwfc	spiTransfer@i+1,w,c
  1285  00038E  6EE2               	movwf	fsr1h,c
  1286  000390  50E7               	movf	indf1,w,c
  1287  000392  ECFC  F002         	call	_spiTransferByte
  1288  000396  6EDF               	movwf	indf2,c
  1289  000398  4A3B               	infsnz	spiTransfer@i,f,c
  1290  00039A  2A3C               	incf	spiTransfer@i+1,f,c
  1291  00039C                     l1249:
  1292  00039C  503C               	movf	spiTransfer@i+1,w,c
  1293  00039E  0A80               	xorlw	128
  1294  0003A0  6E39               	movwf	??_spiTransfer& (0+255),c
  1295  0003A2  5037               	movf	spiTransfer@len,w,c
  1296  0003A4  5C3B               	subwf	spiTransfer@i,w,c
  1297  0003A6  5038               	movf	spiTransfer@len+1,w,c
  1298  0003A8  0A80               	xorlw	128
  1299  0003AA  5839               	subwfb	??_spiTransfer& (0+255),w,c
  1300  0003AC  A0D8               	btfss	status,0,c
  1301  0003AE  D7E2               	goto	l1245
  1302  0003B0                     l1251:
  1303                           
  1304                           ;main.c: 463: }
  1305                           ;main.c: 464: }
  1306                           ;main.c: 466: setCSN(1);
  1307  0003B0  0E00               	movlw	0
  1308  0003B2  6E35               	movwf	setCSN@level+1,c
  1309  0003B4  0E01               	movlw	1
  1310  0003B6  6E34               	movwf	setCSN@level,c
  1311  0003B8  EC0E  F003         	call	_setCSN	;wreg free
  1312  0003BC  0012               	return	
  1313  0003BE                     __end_of_spiTransfer:
  1314                           	opt stack 0
  1315                           tblptru	equ	0xFF8
  1316                           tblptrh	equ	0xFF7
  1317                           tblptrl	equ	0xFF6
  1318                           tablat	equ	0xFF5
  1319                           postinc0	equ	0xFEE
  1320                           wreg	equ	0xFE8
  1321                           indf1	equ	0xFE7
  1322                           postdec1	equ	0xFE5
  1323                           fsr1h	equ	0xFE2
  1324                           fsr1l	equ	0xFE1
  1325                           indf2	equ	0xFDF
  1326                           fsr2h	equ	0xFDA
  1327                           fsr2l	equ	0xFD9
  1328                           status	equ	0xFD8
  1329                           
  1330 ;; *************** function _nrfSetTXAddr *****************
  1331 ;; Defined at:
  1332 ;;		line 402 in file "main.c"
  1333 ;; Parameters:    Size  Location     Type
  1334 ;;  addr            2   19[COMRAM] PTR unsigned char 
  1335 ;;		 -> TX_ADDRESS(4), 
  1336 ;;  len             2   21[COMRAM] int 
  1337 ;; Auto vars:     Size  Location     Type
  1338 ;;  i               2   24[COMRAM] int 
  1339 ;; Return value:  Size  Location     Type
  1340 ;;		None               void
  1341 ;; Registers used:
  1342 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1343 ;; Tracked objects:
  1344 ;;		On entry : 0/0
  1345 ;;		On exit  : 0/0
  1346 ;;		Unchanged: 0/0
  1347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1348 ;;      Params:         4       0       0       0
  1349 ;;      Locals:         2       0       0       0
  1350 ;;      Temps:          1       0       0       0
  1351 ;;      Totals:         7       0       0       0
  1352 ;;Total ram usage:        7 bytes
  1353 ;; Hardware stack levels used:    1
  1354 ;; Hardware stack levels required when called:    3
  1355 ;; This function calls:
  1356 ;;		_setCSN
  1357 ;;		_spiTransferByte
  1358 ;; This function is called by:
  1359 ;;		_nrfConfig
  1360 ;; This function uses a non-reentrant model
  1361 ;;
  1362                           
  1363                           	psect	text7
  1364  000484                     __ptext7:
  1365                           	opt stack 0
  1366  000484                     _nrfSetTXAddr:
  1367                           	opt stack 26
  1368                           
  1369                           ;main.c: 404: setCSN(0);
  1370                           
  1371                           ;incstack = 0
  1372  000484  0E00               	movlw	0
  1373  000486  6E35               	movwf	setCSN@level+1,c
  1374  000488  0E00               	movlw	0
  1375  00048A  6E34               	movwf	setCSN@level,c
  1376  00048C  EC0E  F003         	call	_setCSN	;wreg free
  1377                           
  1378                           ;main.c: 406: spiTransferByte(0x20|0x10);
  1379  000490  0E30               	movlw	48
  1380  000492  ECFC  F002         	call	_spiTransferByte
  1381                           
  1382                           ;main.c: 408: if (len != 0) {
  1383  000496  5039               	movf	nrfSetTXAddr@len+1,w,c
  1384  000498  1038               	iorwf	nrfSetTXAddr@len,w,c
  1385  00049A  B4D8               	btfsc	status,2,c
  1386  00049C  D01A               	goto	l1297
  1387                           
  1388                           ;main.c: 410: for (int i=0;i<len;i++) {
  1389  00049E  0E00               	movlw	0
  1390  0004A0  6E3C               	movwf	nrfSetTXAddr@i+1,c
  1391  0004A2  0E00               	movlw	0
  1392  0004A4  6E3B               	movwf	nrfSetTXAddr@i,c
  1393  0004A6  D00B               	goto	l1295
  1394  0004A8                     l1291:
  1395                           
  1396                           ;main.c: 411: spiTransferByte(addr[i]);
  1397  0004A8  503B               	movf	nrfSetTXAddr@i,w,c
  1398  0004AA  2436               	addwf	nrfSetTXAddr@addr,w,c
  1399  0004AC  6ED9               	movwf	fsr2l,c
  1400  0004AE  503C               	movf	nrfSetTXAddr@i+1,w,c
  1401  0004B0  2037               	addwfc	nrfSetTXAddr@addr+1,w,c
  1402  0004B2  6EDA               	movwf	fsr2h,c
  1403  0004B4  50DF               	movf	indf2,w,c
  1404  0004B6  ECFC  F002         	call	_spiTransferByte
  1405  0004BA  4A3B               	infsnz	nrfSetTXAddr@i,f,c
  1406  0004BC  2A3C               	incf	nrfSetTXAddr@i+1,f,c
  1407  0004BE                     l1295:
  1408  0004BE  503C               	movf	nrfSetTXAddr@i+1,w,c
  1409  0004C0  0A80               	xorlw	128
  1410  0004C2  6E3A               	movwf	??_nrfSetTXAddr& (0+255),c
  1411  0004C4  5038               	movf	nrfSetTXAddr@len,w,c
  1412  0004C6  5C3B               	subwf	nrfSetTXAddr@i,w,c
  1413  0004C8  5039               	movf	nrfSetTXAddr@len+1,w,c
  1414  0004CA  0A80               	xorlw	128
  1415  0004CC  583A               	subwfb	??_nrfSetTXAddr& (0+255),w,c
  1416  0004CE  A0D8               	btfss	status,0,c
  1417  0004D0  D7EB               	goto	l1291
  1418  0004D2                     l1297:
  1419                           
  1420                           ;main.c: 412: }
  1421                           ;main.c: 413: }
  1422                           ;main.c: 415: setCSN(1);
  1423  0004D2  0E00               	movlw	0
  1424  0004D4  6E35               	movwf	setCSN@level+1,c
  1425  0004D6  0E01               	movlw	1
  1426  0004D8  6E34               	movwf	setCSN@level,c
  1427  0004DA  EC0E  F003         	call	_setCSN	;wreg free
  1428  0004DE  0012               	return	
  1429  0004E0                     __end_of_nrfSetTXAddr:
  1430                           	opt stack 0
  1431                           tblptru	equ	0xFF8
  1432                           tblptrh	equ	0xFF7
  1433                           tblptrl	equ	0xFF6
  1434                           tablat	equ	0xFF5
  1435                           postinc0	equ	0xFEE
  1436                           wreg	equ	0xFE8
  1437                           indf1	equ	0xFE7
  1438                           postdec1	equ	0xFE5
  1439                           fsr1h	equ	0xFE2
  1440                           fsr1l	equ	0xFE1
  1441                           indf2	equ	0xFDF
  1442                           fsr2h	equ	0xFDA
  1443                           fsr2l	equ	0xFD9
  1444                           status	equ	0xFD8
  1445                           
  1446 ;; *************** function _nrfSetRXAddr *****************
  1447 ;; Defined at:
  1448 ;;		line 424 in file "main.c"
  1449 ;; Parameters:    Size  Location     Type
  1450 ;;  pipe            1    wreg     unsigned char 
  1451 ;;  addr            2   19[COMRAM] PTR unsigned char 
  1452 ;;		 -> RX_ADDRESS(4), 
  1453 ;;  len             2   21[COMRAM] int 
  1454 ;; Auto vars:     Size  Location     Type
  1455 ;;  pipe            1   24[COMRAM] unsigned char 
  1456 ;;  i               2   25[COMRAM] int 
  1457 ;; Return value:  Size  Location     Type
  1458 ;;		None               void
  1459 ;; Registers used:
  1460 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1461 ;; Tracked objects:
  1462 ;;		On entry : 0/0
  1463 ;;		On exit  : 0/0
  1464 ;;		Unchanged: 0/0
  1465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1466 ;;      Params:         4       0       0       0
  1467 ;;      Locals:         3       0       0       0
  1468 ;;      Temps:          1       0       0       0
  1469 ;;      Totals:         8       0       0       0
  1470 ;;Total ram usage:        8 bytes
  1471 ;; Hardware stack levels used:    1
  1472 ;; Hardware stack levels required when called:    3
  1473 ;; This function calls:
  1474 ;;		_setCSN
  1475 ;;		_spiTransferByte
  1476 ;; This function is called by:
  1477 ;;		_nrfConfig
  1478 ;; This function uses a non-reentrant model
  1479 ;;
  1480                           
  1481                           	psect	text8
  1482  000424                     __ptext8:
  1483                           	opt stack 0
  1484  000424                     _nrfSetRXAddr:
  1485                           	opt stack 26
  1486                           
  1487                           ;incstack = 0
  1488                           ;nrfSetRXAddr@pipe stored from wreg
  1489  000424  6E3B               	movwf	nrfSetRXAddr@pipe,c
  1490                           
  1491                           ;main.c: 426: setCSN(0);
  1492  000426  0E00               	movlw	0
  1493  000428  6E35               	movwf	setCSN@level+1,c
  1494  00042A  0E00               	movlw	0
  1495  00042C  6E34               	movwf	setCSN@level,c
  1496  00042E  EC0E  F003         	call	_setCSN	;wreg free
  1497                           
  1498                           ;main.c: 428: spiTransferByte(0x20|pipe);
  1499  000432  503B               	movf	nrfSetRXAddr@pipe,w,c
  1500  000434  0920               	iorlw	32
  1501  000436  ECFC  F002         	call	_spiTransferByte
  1502                           
  1503                           ;main.c: 430: if (len != 0) {
  1504  00043A  5039               	movf	nrfSetRXAddr@len+1,w,c
  1505  00043C  1038               	iorwf	nrfSetRXAddr@len,w,c
  1506  00043E  B4D8               	btfsc	status,2,c
  1507  000440  D01A               	goto	l1281
  1508                           
  1509                           ;main.c: 432: for (int i=0;i<len;i++) {
  1510  000442  0E00               	movlw	0
  1511  000444  6E3D               	movwf	nrfSetRXAddr@i+1,c
  1512  000446  0E00               	movlw	0
  1513  000448  6E3C               	movwf	nrfSetRXAddr@i,c
  1514  00044A  D00B               	goto	l1279
  1515  00044C                     l1275:
  1516                           
  1517                           ;main.c: 433: spiTransferByte(addr[i]);
  1518  00044C  503C               	movf	nrfSetRXAddr@i,w,c
  1519  00044E  2436               	addwf	nrfSetRXAddr@addr,w,c
  1520  000450  6ED9               	movwf	fsr2l,c
  1521  000452  503D               	movf	nrfSetRXAddr@i+1,w,c
  1522  000454  2037               	addwfc	nrfSetRXAddr@addr+1,w,c
  1523  000456  6EDA               	movwf	fsr2h,c
  1524  000458  50DF               	movf	indf2,w,c
  1525  00045A  ECFC  F002         	call	_spiTransferByte
  1526  00045E  4A3C               	infsnz	nrfSetRXAddr@i,f,c
  1527  000460  2A3D               	incf	nrfSetRXAddr@i+1,f,c
  1528  000462                     l1279:
  1529  000462  503D               	movf	nrfSetRXAddr@i+1,w,c
  1530  000464  0A80               	xorlw	128
  1531  000466  6E3A               	movwf	??_nrfSetRXAddr& (0+255),c
  1532  000468  5038               	movf	nrfSetRXAddr@len,w,c
  1533  00046A  5C3C               	subwf	nrfSetRXAddr@i,w,c
  1534  00046C  5039               	movf	nrfSetRXAddr@len+1,w,c
  1535  00046E  0A80               	xorlw	128
  1536  000470  583A               	subwfb	??_nrfSetRXAddr& (0+255),w,c
  1537  000472  A0D8               	btfss	status,0,c
  1538  000474  D7EB               	goto	l1275
  1539  000476                     l1281:
  1540                           
  1541                           ;main.c: 434: }
  1542                           ;main.c: 435: }
  1543                           ;main.c: 437: setCSN(1);
  1544  000476  0E00               	movlw	0
  1545  000478  6E35               	movwf	setCSN@level+1,c
  1546  00047A  0E01               	movlw	1
  1547  00047C  6E34               	movwf	setCSN@level,c
  1548  00047E  EC0E  F003         	call	_setCSN	;wreg free
  1549  000482  0012               	return	
  1550  000484                     __end_of_nrfSetRXAddr:
  1551                           	opt stack 0
  1552                           tblptru	equ	0xFF8
  1553                           tblptrh	equ	0xFF7
  1554                           tblptrl	equ	0xFF6
  1555                           tablat	equ	0xFF5
  1556                           postinc0	equ	0xFEE
  1557                           wreg	equ	0xFE8
  1558                           indf1	equ	0xFE7
  1559                           postdec1	equ	0xFE5
  1560                           fsr1h	equ	0xFE2
  1561                           fsr1l	equ	0xFE1
  1562                           indf2	equ	0xFDF
  1563                           fsr2h	equ	0xFDA
  1564                           fsr2l	equ	0xFD9
  1565                           status	equ	0xFD8
  1566                           
  1567 ;; *************** function _nrfConfigReg *****************
  1568 ;; Defined at:
  1569 ;;		line 380 in file "main.c"
  1570 ;; Parameters:    Size  Location     Type
  1571 ;;  wr              1    wreg     unsigned char 
  1572 ;;  command         1   19[COMRAM] unsigned char 
  1573 ;;  data            1   20[COMRAM] unsigned char 
  1574 ;; Auto vars:     Size  Location     Type
  1575 ;;  wr              1   21[COMRAM] unsigned char 
  1576 ;; Return value:  Size  Location     Type
  1577 ;;                  1    wreg      unsigned char 
  1578 ;; Registers used:
  1579 ;;		wreg, status,2, status,0, cstack
  1580 ;; Tracked objects:
  1581 ;;		On entry : 0/0
  1582 ;;		On exit  : 0/0
  1583 ;;		Unchanged: 0/0
  1584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1585 ;;      Params:         2       0       0       0
  1586 ;;      Locals:         1       0       0       0
  1587 ;;      Temps:          0       0       0       0
  1588 ;;      Totals:         3       0       0       0
  1589 ;;Total ram usage:        3 bytes
  1590 ;; Hardware stack levels used:    1
  1591 ;; Hardware stack levels required when called:    3
  1592 ;; This function calls:
  1593 ;;		_setCSN
  1594 ;;		_spiTransferByte
  1595 ;; This function is called by:
  1596 ;;		_nrfConfig
  1597 ;; This function uses a non-reentrant model
  1598 ;;
  1599                           
  1600                           	psect	text9
  1601  0004E0                     __ptext9:
  1602                           	opt stack 0
  1603  0004E0                     _nrfConfigReg:
  1604                           	opt stack 26
  1605                           
  1606                           ;incstack = 0
  1607                           ;nrfConfigReg@wr stored from wreg
  1608  0004E0  6E38               	movwf	nrfConfigReg@wr,c
  1609                           
  1610                           ;main.c: 382: setCSN(0);
  1611  0004E2  0E00               	movlw	0
  1612  0004E4  6E35               	movwf	setCSN@level+1,c
  1613  0004E6  0E00               	movlw	0
  1614  0004E8  6E34               	movwf	setCSN@level,c
  1615  0004EA  EC0E  F003         	call	_setCSN	;wreg free
  1616                           
  1617                           ;main.c: 384: if (wr == 'w') {
  1618  0004EE  5038               	movf	nrfConfigReg@wr,w,c
  1619  0004F0  0A77               	xorlw	119
  1620  0004F2  A4D8               	btfss	status,2,c
  1621  0004F4  D008               	goto	l1261
  1622                           
  1623                           ;main.c: 385: spiTransferByte(0x20|command);
  1624  0004F6  5036               	movf	nrfConfigReg@command,w,c
  1625  0004F8  0920               	iorlw	32
  1626  0004FA  ECFC  F002         	call	_spiTransferByte
  1627                           
  1628                           ;main.c: 386: spiTransferByte(data);
  1629  0004FE  5037               	movf	nrfConfigReg@data,w,c
  1630  000500  ECFC  F002         	call	_spiTransferByte
  1631                           
  1632                           ;main.c: 387: } else if (wr == 'r') {
  1633  000504  D00B               	goto	l1265
  1634  000506                     l1261:
  1635  000506  5038               	movf	nrfConfigReg@wr,w,c
  1636  000508  0A72               	xorlw	114
  1637  00050A  A4D8               	btfss	status,2,c
  1638  00050C  D007               	goto	l1265
  1639                           
  1640                           ;main.c: 388: spiTransferByte(0x00|command);
  1641  00050E  5036               	movf	nrfConfigReg@command,w,c
  1642  000510  ECFC  F002         	call	_spiTransferByte
  1643                           
  1644                           ;main.c: 389: data = spiTransferByte(0xFF);
  1645  000514  0EFF               	movlw	255
  1646  000516  ECFC  F002         	call	_spiTransferByte
  1647  00051A  6E37               	movwf	nrfConfigReg@data,c
  1648  00051C                     l1265:
  1649                           
  1650                           ;main.c: 390: }
  1651                           ;main.c: 392: setCSN(1);
  1652  00051C  0E00               	movlw	0
  1653  00051E  6E35               	movwf	setCSN@level+1,c
  1654  000520  0E01               	movlw	1
  1655  000522  6E34               	movwf	setCSN@level,c
  1656  000524  EC0E  F003         	call	_setCSN	;wreg free
  1657  000528  0012               	return	
  1658  00052A                     __end_of_nrfConfigReg:
  1659                           	opt stack 0
  1660                           tblptru	equ	0xFF8
  1661                           tblptrh	equ	0xFF7
  1662                           tblptrl	equ	0xFF6
  1663                           tablat	equ	0xFF5
  1664                           postinc0	equ	0xFEE
  1665                           wreg	equ	0xFE8
  1666                           indf1	equ	0xFE7
  1667                           postdec1	equ	0xFE5
  1668                           fsr1h	equ	0xFE2
  1669                           fsr1l	equ	0xFE1
  1670                           indf2	equ	0xFDF
  1671                           fsr2h	equ	0xFDA
  1672                           fsr2l	equ	0xFD9
  1673                           status	equ	0xFD8
  1674                           
  1675 ;; *************** function _spiTransferByte *****************
  1676 ;; Defined at:
  1677 ;;		line 472 in file "main.c"
  1678 ;; Parameters:    Size  Location     Type
  1679 ;;  data            1    wreg     unsigned char 
  1680 ;; Auto vars:     Size  Location     Type
  1681 ;;  data            1   17[COMRAM] unsigned char 
  1682 ;; Return value:  Size  Location     Type
  1683 ;;                  1    wreg      unsigned char 
  1684 ;; Registers used:
  1685 ;;		wreg, status,2, cstack
  1686 ;; Tracked objects:
  1687 ;;		On entry : 0/0
  1688 ;;		On exit  : 0/0
  1689 ;;		Unchanged: 0/0
  1690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1691 ;;      Params:         0       0       0       0
  1692 ;;      Locals:         1       0       0       0
  1693 ;;      Temps:          0       0       0       0
  1694 ;;      Totals:         1       0       0       0
  1695 ;;Total ram usage:        1 bytes
  1696 ;; Hardware stack levels used:    1
  1697 ;; Hardware stack levels required when called:    2
  1698 ;; This function calls:
  1699 ;;		Nothing
  1700 ;; This function is called by:
  1701 ;;		_nrfGetStatus
  1702 ;;		_nrfConfigReg
  1703 ;;		_nrfSetTXAddr
  1704 ;;		_nrfSetRXAddr
  1705 ;;		_spiTransfer
  1706 ;;		_nrfTXData
  1707 ;; This function uses a non-reentrant model
  1708 ;;
  1709                           
  1710                           	psect	text10
  1711  0005F8                     __ptext10:
  1712                           	opt stack 0
  1713  0005F8                     _spiTransferByte:
  1714                           	opt stack 27
  1715                           
  1716                           ;incstack = 0
  1717                           ;spiTransferByte@data stored from wreg
  1718  0005F8  6E34               	movwf	spiTransferByte@data,c
  1719                           
  1720                           ;main.c: 474: SSP1BUF = data;
  1721  0005FA  C034  FFC9         	movff	spiTransferByte@data,4041	;volatile
  1722                           
  1723                           ;main.c: 476: _delay((unsigned long)((2)*(64000000/4000000.0)));
  1724  0005FE  0E0A               	movlw	10
  1725  000600                     u557:
  1726  000600  2EE8               	decfsz	wreg,f,c
  1727  000602  D7FE               	goto	u557
  1728  000604  D000               	nop2		;nop
  1729                           
  1730                           ;main.c: 478: return SSP1BUF;
  1731  000606  50C9               	movf	4041,w,c	;volatile
  1732  000608  0012               	return	
  1733  00060A                     __end_of_spiTransferByte:
  1734                           	opt stack 0
  1735                           tblptru	equ	0xFF8
  1736                           tblptrh	equ	0xFF7
  1737                           tblptrl	equ	0xFF6
  1738                           tablat	equ	0xFF5
  1739                           postinc0	equ	0xFEE
  1740                           wreg	equ	0xFE8
  1741                           indf1	equ	0xFE7
  1742                           postdec1	equ	0xFE5
  1743                           fsr1h	equ	0xFE2
  1744                           fsr1l	equ	0xFE1
  1745                           indf2	equ	0xFDF
  1746                           fsr2h	equ	0xFDA
  1747                           fsr2l	equ	0xFD9
  1748                           status	equ	0xFD8
  1749                           
  1750 ;; *************** function _setCSN *****************
  1751 ;; Defined at:
  1752 ;;		line 355 in file "main.c"
  1753 ;; Parameters:    Size  Location     Type
  1754 ;;  level           2   17[COMRAM] int 
  1755 ;; Auto vars:     Size  Location     Type
  1756 ;;		None
  1757 ;; Return value:  Size  Location     Type
  1758 ;;		None               void
  1759 ;; Registers used:
  1760 ;;		wreg, status,2, status,0
  1761 ;; Tracked objects:
  1762 ;;		On entry : 0/0
  1763 ;;		On exit  : 0/0
  1764 ;;		Unchanged: 0/0
  1765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1766 ;;      Params:         2       0       0       0
  1767 ;;      Locals:         0       0       0       0
  1768 ;;      Temps:          0       0       0       0
  1769 ;;      Totals:         2       0       0       0
  1770 ;;Total ram usage:        2 bytes
  1771 ;; Hardware stack levels used:    1
  1772 ;; Hardware stack levels required when called:    2
  1773 ;; This function calls:
  1774 ;;		Nothing
  1775 ;; This function is called by:
  1776 ;;		_nrfGetStatus
  1777 ;;		_nrfConfigReg
  1778 ;;		_nrfSetTXAddr
  1779 ;;		_nrfSetRXAddr
  1780 ;;		_spiTransfer
  1781 ;;		_nrfTXData
  1782 ;; This function uses a non-reentrant model
  1783 ;;
  1784                           
  1785                           	psect	text11
  1786  00061C                     __ptext11:
  1787                           	opt stack 0
  1788  00061C                     _setCSN:
  1789                           	opt stack 27
  1790                           
  1791                           ;main.c: 357: if (level == 1) {
  1792                           
  1793                           ;incstack = 0
  1794  00061C  0434               	decf	setCSN@level,w,c
  1795  00061E  1035               	iorwf	setCSN@level+1,w,c
  1796  000620  A4D8               	btfss	status,2,c
  1797  000622  D002               	goto	l105
  1798                           
  1799                           ;main.c: 358: LATAbits.LATA2 = 1;
  1800  000624  8489               	bsf	3977,2,c	;volatile
  1801                           
  1802                           ;main.c: 359: } else {
  1803  000626  0012               	return	
  1804  000628                     l105:
  1805                           
  1806                           ;main.c: 360: LATAbits.LATA2 = 0;
  1807  000628  9489               	bcf	3977,2,c	;volatile
  1808  00062A  0012               	return	
  1809  00062C                     __end_of_setCSN:
  1810                           	opt stack 0
  1811                           tblptru	equ	0xFF8
  1812                           tblptrh	equ	0xFF7
  1813                           tblptrl	equ	0xFF6
  1814                           tablat	equ	0xFF5
  1815                           postinc0	equ	0xFEE
  1816                           wreg	equ	0xFE8
  1817                           indf1	equ	0xFE7
  1818                           postdec1	equ	0xFE5
  1819                           fsr1h	equ	0xFE2
  1820                           fsr1l	equ	0xFE1
  1821                           indf2	equ	0xFDF
  1822                           fsr2h	equ	0xFDA
  1823                           fsr2l	equ	0xFD9
  1824                           status	equ	0xFD8
  1825                           
  1826 ;; *************** function _delay10ms *****************
  1827 ;; Defined at:
  1828 ;;		line 512 in file "main.c"
  1829 ;; Parameters:    Size  Location     Type
  1830 ;;  ms_multi        2   17[COMRAM] int 
  1831 ;; Auto vars:     Size  Location     Type
  1832 ;;  i               2   20[COMRAM] int 
  1833 ;; Return value:  Size  Location     Type
  1834 ;;		None               void
  1835 ;; Registers used:
  1836 ;;		wreg, status,2, status,0
  1837 ;; Tracked objects:
  1838 ;;		On entry : 0/0
  1839 ;;		On exit  : 0/0
  1840 ;;		Unchanged: 0/0
  1841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1842 ;;      Params:         2       0       0       0
  1843 ;;      Locals:         2       0       0       0
  1844 ;;      Temps:          1       0       0       0
  1845 ;;      Totals:         5       0       0       0
  1846 ;;Total ram usage:        5 bytes
  1847 ;; Hardware stack levels used:    1
  1848 ;; Hardware stack levels required when called:    2
  1849 ;; This function calls:
  1850 ;;		Nothing
  1851 ;; This function is called by:
  1852 ;;		_main
  1853 ;; This function uses a non-reentrant model
  1854 ;;
  1855                           
  1856                           	psect	text12
  1857  000568                     __ptext12:
  1858                           	opt stack 0
  1859  000568                     _delay10ms:
  1860                           	opt stack 28
  1861                           
  1862                           ;main.c: 513: int i = 0;
  1863                           
  1864                           ;incstack = 0
  1865  000568  0E00               	movlw	0
  1866  00056A  6E38               	movwf	delay10ms@i+1,c
  1867  00056C  0E00               	movlw	0
  1868  00056E  6E37               	movwf	delay10ms@i,c
  1869                           
  1870                           ;main.c: 514: for (i=0;i<ms_multi;i++) {
  1871  000570  0E00               	movlw	0
  1872  000572  6E38               	movwf	delay10ms@i+1,c
  1873  000574  0E00               	movlw	0
  1874  000576  6E37               	movwf	delay10ms@i,c
  1875  000578  D00A               	goto	l158
  1876  00057A                     l1321:
  1877                           
  1878                           ;main.c: 515: _delay((unsigned long)((11)*(64000000/4000.0)));
  1879  00057A  0EE5               	movlw	229
  1880  00057C  6E36               	movwf	??_delay10ms& (0+255),c
  1881  00057E  0E91               	movlw	145
  1882  000580                     u567:
  1883  000580  2EE8               	decfsz	wreg,f,c
  1884  000582  D7FE               	goto	u567
  1885  000584  2E36               	decfsz	??_delay10ms& (0+255),f,c
  1886  000586  D7FC               	goto	u567
  1887  000588  F000               	nop	
  1888  00058A  4A37               	infsnz	delay10ms@i,f,c
  1889  00058C  2A38               	incf	delay10ms@i+1,f,c
  1890  00058E                     l158:
  1891  00058E  5038               	movf	delay10ms@i+1,w,c
  1892  000590  0A80               	xorlw	128
  1893  000592  6E36               	movwf	??_delay10ms& (0+255),c
  1894  000594  5034               	movf	delay10ms@ms_multi,w,c
  1895  000596  5C37               	subwf	delay10ms@i,w,c
  1896  000598  5035               	movf	delay10ms@ms_multi+1,w,c
  1897  00059A  0A80               	xorlw	128
  1898  00059C  5836               	subwfb	??_delay10ms& (0+255),w,c
  1899  00059E  B0D8               	btfsc	status,0,c
  1900  0005A0  0012               	return	
  1901  0005A2  D7EB               	goto	l1321
  1902  0005A4                     __end_of_delay10ms:
  1903                           	opt stack 0
  1904                           tblptru	equ	0xFF8
  1905                           tblptrh	equ	0xFF7
  1906                           tblptrl	equ	0xFF6
  1907                           tablat	equ	0xFF5
  1908                           postinc0	equ	0xFEE
  1909                           wreg	equ	0xFE8
  1910                           indf1	equ	0xFE7
  1911                           postdec1	equ	0xFE5
  1912                           fsr1h	equ	0xFE2
  1913                           fsr1l	equ	0xFE1
  1914                           indf2	equ	0xFDF
  1915                           fsr2h	equ	0xFDA
  1916                           fsr2l	equ	0xFD9
  1917                           status	equ	0xFD8
  1918                           
  1919 ;; *************** function _lowISR *****************
  1920 ;; Defined at:
  1921 ;;		line 277 in file "main.c"
  1922 ;; Parameters:    Size  Location     Type
  1923 ;;		None
  1924 ;; Auto vars:     Size  Location     Type
  1925 ;;		None
  1926 ;; Return value:  Size  Location     Type
  1927 ;;		None               void
  1928 ;; Registers used:
  1929 ;;		None
  1930 ;; Tracked objects:
  1931 ;;		On entry : 0/0
  1932 ;;		On exit  : 0/0
  1933 ;;		Unchanged: 0/0
  1934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1935 ;;      Params:         0       0       0       0
  1936 ;;      Locals:         0       0       0       0
  1937 ;;      Temps:         17       0       0       0
  1938 ;;      Totals:        17       0       0       0
  1939 ;;Total ram usage:       17 bytes
  1940 ;; Hardware stack levels used:    1
  1941 ;; Hardware stack levels required when called:    1
  1942 ;; This function calls:
  1943 ;;		Nothing
  1944 ;; This function is called by:
  1945 ;;		Interrupt level 1
  1946 ;; This function uses a non-reentrant model
  1947 ;;
  1948                           
  1949                           	psect	intcodelo
  1950  000018                     __pintcodelo:
  1951                           	opt stack 0
  1952  000018                     _lowISR:
  1953                           	opt stack 26
  1954                           
  1955                           ;incstack = 0
  1956  000018  CFD8 F023          	movff	status,??_lowISR
  1957  00001C  CFE8 F024          	movff	wreg,??_lowISR+1
  1958  000020  CFE0 F025          	movff	bsr,??_lowISR+2
  1959  000024  CFFA F026          	movff	pclath,??_lowISR+3
  1960  000028  CFFB F027          	movff	pclatu,??_lowISR+4
  1961  00002C  CFE9 F028          	movff	fsr0l,??_lowISR+5
  1962  000030  CFEA F029          	movff	fsr0h,??_lowISR+6
  1963  000034  CFE1 F02A          	movff	fsr1l,??_lowISR+7
  1964  000038  CFE2 F02B          	movff	fsr1h,??_lowISR+8
  1965  00003C  CFD9 F02C          	movff	fsr2l,??_lowISR+9
  1966  000040  CFDA F02D          	movff	fsr2h,??_lowISR+10
  1967  000044  CFF3 F02E          	movff	prodl,??_lowISR+11
  1968  000048  CFF4 F02F          	movff	prodh,??_lowISR+12
  1969  00004C  CFF6 F030          	movff	tblptrl,??_lowISR+13
  1970  000050  CFF7 F031          	movff	tblptrh,??_lowISR+14
  1971  000054  CFF8 F032          	movff	tblptru,??_lowISR+15
  1972  000058  CFF5 F033          	movff	tablat,??_lowISR+16
  1973  00005C  C033  FFF5         	movff	??_lowISR+16,tablat
  1974  000060  C032  FFF8         	movff	??_lowISR+15,tblptru
  1975  000064  C031  FFF7         	movff	??_lowISR+14,tblptrh
  1976  000068  C030  FFF6         	movff	??_lowISR+13,tblptrl
  1977  00006C  C02F  FFF4         	movff	??_lowISR+12,prodh
  1978  000070  C02E  FFF3         	movff	??_lowISR+11,prodl
  1979  000074  C02D  FFDA         	movff	??_lowISR+10,fsr2h
  1980  000078  C02C  FFD9         	movff	??_lowISR+9,fsr2l
  1981  00007C  C02B  FFE2         	movff	??_lowISR+8,fsr1h
  1982  000080  C02A  FFE1         	movff	??_lowISR+7,fsr1l
  1983  000084  C029  FFEA         	movff	??_lowISR+6,fsr0h
  1984  000088  C028  FFE9         	movff	??_lowISR+5,fsr0l
  1985  00008C  C027  FFFB         	movff	??_lowISR+4,pclatu
  1986  000090  C026  FFFA         	movff	??_lowISR+3,pclath
  1987  000094  C025  FFE0         	movff	??_lowISR+2,bsr
  1988  000098  C024  FFE8         	movff	??_lowISR+1,wreg
  1989  00009C  C023  FFD8         	movff	??_lowISR,status
  1990  0000A0  0010               	retfie	
  1991  0000A2                     __end_of_lowISR:
  1992                           	opt stack 0
  1993                           pclatu	equ	0xFFB
  1994                           pclath	equ	0xFFA
  1995                           tblptru	equ	0xFF8
  1996                           tblptrh	equ	0xFF7
  1997                           tblptrl	equ	0xFF6
  1998                           tablat	equ	0xFF5
  1999                           prodh	equ	0xFF4
  2000                           prodl	equ	0xFF3
  2001                           postinc0	equ	0xFEE
  2002                           fsr0h	equ	0xFEA
  2003                           fsr0l	equ	0xFE9
  2004                           wreg	equ	0xFE8
  2005                           indf1	equ	0xFE7
  2006                           postdec1	equ	0xFE5
  2007                           fsr1h	equ	0xFE2
  2008                           fsr1l	equ	0xFE1
  2009                           bsr	equ	0xFE0
  2010                           indf2	equ	0xFDF
  2011                           fsr2h	equ	0xFDA
  2012                           fsr2l	equ	0xFD9
  2013                           status	equ	0xFD8
  2014                           
  2015 ;; *************** function _highISR *****************
  2016 ;; Defined at:
  2017 ;;		line 270 in file "main.c"
  2018 ;; Parameters:    Size  Location     Type
  2019 ;;		None
  2020 ;; Auto vars:     Size  Location     Type
  2021 ;;		None
  2022 ;; Return value:  Size  Location     Type
  2023 ;;		None               void
  2024 ;; Registers used:
  2025 ;;		None
  2026 ;; Tracked objects:
  2027 ;;		On entry : 0/0
  2028 ;;		On exit  : 0/0
  2029 ;;		Unchanged: 0/0
  2030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2031 ;;      Params:         0       0       0       0
  2032 ;;      Locals:         0       0       0       0
  2033 ;;      Temps:          0      14       0       0
  2034 ;;      Totals:         0      14       0       0
  2035 ;;Total ram usage:       14 bytes
  2036 ;; Hardware stack levels used:    1
  2037 ;; This function calls:
  2038 ;;		Nothing
  2039 ;; This function is called by:
  2040 ;;		Interrupt level 2
  2041 ;; This function uses a non-reentrant model
  2042 ;;
  2043                           
  2044                           	psect	intcode
  2045  000008                     __pintcode:
  2046                           	opt stack 0
  2047  000008                     _highISR:
  2048                           	opt stack 26
  2049                           
  2050                           ;incstack = 0
  2051  000008  CFFA F080          	movff	pclath,??_highISR
  2052  00000C  CFFB F081          	movff	pclatu,??_highISR+1
  2053  000010  CFE9 F082          	movff	fsr0l,??_highISR+2
  2054  000014  EFDF  F001         	goto	int_func
  2055                           pclatu	equ	0xFFB
  2056                           pclath	equ	0xFFA
  2057                           tblptru	equ	0xFF8
  2058                           tblptrh	equ	0xFF7
  2059                           tblptrl	equ	0xFF6
  2060                           tablat	equ	0xFF5
  2061                           prodh	equ	0xFF4
  2062                           prodl	equ	0xFF3
  2063                           postinc0	equ	0xFEE
  2064                           fsr0h	equ	0xFEA
  2065                           fsr0l	equ	0xFE9
  2066                           wreg	equ	0xFE8
  2067                           indf1	equ	0xFE7
  2068                           postdec1	equ	0xFE5
  2069                           fsr1h	equ	0xFE2
  2070                           fsr1l	equ	0xFE1
  2071                           bsr	equ	0xFE0
  2072                           indf2	equ	0xFDF
  2073                           fsr2h	equ	0xFDA
  2074                           fsr2l	equ	0xFD9
  2075                           status	equ	0xFD8
  2076                           
  2077                           	psect	intcode_body
  2078  0003BE                     __pintcode_body:
  2079                           	opt stack 26
  2080  0003BE                     int_func:
  2081                           	opt stack 26
  2082  0003BE  CFEA F083          	movff	fsr0h,??_highISR+3
  2083  0003C2  CFE1 F084          	movff	fsr1l,??_highISR+4
  2084  0003C6  CFE2 F085          	movff	fsr1h,??_highISR+5
  2085  0003CA  CFD9 F086          	movff	fsr2l,??_highISR+6
  2086  0003CE  CFDA F087          	movff	fsr2h,??_highISR+7
  2087  0003D2  CFF3 F088          	movff	prodl,??_highISR+8
  2088  0003D6  CFF4 F089          	movff	prodh,??_highISR+9
  2089  0003DA  CFF6 F08A          	movff	tblptrl,??_highISR+10
  2090  0003DE  CFF7 F08B          	movff	tblptrh,??_highISR+11
  2091  0003E2  CFF8 F08C          	movff	tblptru,??_highISR+12
  2092  0003E6  CFF5 F08D          	movff	tablat,??_highISR+13
  2093  0003EA  C08D  FFF5         	movff	??_highISR+13,tablat
  2094  0003EE  C08C  FFF8         	movff	??_highISR+12,tblptru
  2095  0003F2  C08B  FFF7         	movff	??_highISR+11,tblptrh
  2096  0003F6  C08A  FFF6         	movff	??_highISR+10,tblptrl
  2097  0003FA  C089  FFF4         	movff	??_highISR+9,prodh
  2098  0003FE  C088  FFF3         	movff	??_highISR+8,prodl
  2099  000402  C087  FFDA         	movff	??_highISR+7,fsr2h
  2100  000406  C086  FFD9         	movff	??_highISR+6,fsr2l
  2101  00040A  C085  FFE2         	movff	??_highISR+5,fsr1h
  2102  00040E  C084  FFE1         	movff	??_highISR+4,fsr1l
  2103  000412  C083  FFEA         	movff	??_highISR+3,fsr0h
  2104  000416  C082  FFE9         	movff	??_highISR+2,fsr0l
  2105  00041A  C081  FFFB         	movff	??_highISR+1,pclatu
  2106  00041E  C080  FFFA         	movff	??_highISR,pclath
  2107  000422  0011               	retfie		f
  2108  000424                     __end_of_highISR:
  2109                           	opt stack 0
  2110  0000                     pclatu	equ	0xFFB
  2111                           pclath	equ	0xFFA
  2112                           tblptru	equ	0xFF8
  2113                           tblptrh	equ	0xFF7
  2114                           tblptrl	equ	0xFF6
  2115                           tablat	equ	0xFF5
  2116                           prodh	equ	0xFF4
  2117                           prodl	equ	0xFF3
  2118                           postinc0	equ	0xFEE
  2119                           fsr0h	equ	0xFEA
  2120                           fsr0l	equ	0xFE9
  2121                           wreg	equ	0xFE8
  2122                           indf1	equ	0xFE7
  2123                           postdec1	equ	0xFE5
  2124                           fsr1h	equ	0xFE2
  2125                           fsr1l	equ	0xFE1
  2126                           bsr	equ	0xFE0
  2127                           indf2	equ	0xFDF
  2128                           fsr2h	equ	0xFDA
  2129                           fsr2l	equ	0xFD9
  2130                           status	equ	0xFD8
  2131                           pclatu	equ	0xFFB
  2132                           pclath	equ	0xFFA
  2133                           tblptru	equ	0xFF8
  2134                           tblptrh	equ	0xFF7
  2135                           tblptrl	equ	0xFF6
  2136                           tablat	equ	0xFF5
  2137                           prodh	equ	0xFF4
  2138                           prodl	equ	0xFF3
  2139                           postinc0	equ	0xFEE
  2140                           fsr0h	equ	0xFEA
  2141                           fsr0l	equ	0xFE9
  2142                           wreg	equ	0xFE8
  2143                           indf1	equ	0xFE7
  2144                           postdec1	equ	0xFE5
  2145                           fsr1h	equ	0xFE2
  2146                           fsr1l	equ	0xFE1
  2147                           bsr	equ	0xFE0
  2148                           indf2	equ	0xFDF
  2149                           fsr2h	equ	0xFDA
  2150                           fsr2l	equ	0xFD9
  2151                           status	equ	0xFD8
  2152                           
  2153                           	psect	param0
  2154  0000                     pclatu	equ	0xFFB
  2155                           pclath	equ	0xFFA
  2156                           tblptru	equ	0xFF8
  2157                           tblptrh	equ	0xFF7
  2158                           tblptrl	equ	0xFF6
  2159                           tablat	equ	0xFF5
  2160                           prodh	equ	0xFF4
  2161                           prodl	equ	0xFF3
  2162                           postinc0	equ	0xFEE
  2163                           fsr0h	equ	0xFEA
  2164                           fsr0l	equ	0xFE9
  2165                           wreg	equ	0xFE8
  2166                           indf1	equ	0xFE7
  2167                           postdec1	equ	0xFE5
  2168                           fsr1h	equ	0xFE2
  2169                           fsr1l	equ	0xFE1
  2170                           bsr	equ	0xFE0
  2171                           indf2	equ	0xFDF
  2172                           fsr2h	equ	0xFDA
  2173                           fsr2l	equ	0xFD9
  2174                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        17
    BSS         66
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     27      78
    BANK0           160     16      48
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    nrfSetRXAddr@addr	PTR unsigned char  size(2) Largest target is 4
		 -> RX_ADDRESS(COMRAM[4]), 

    nrfSetTXAddr@addr	PTR unsigned char  size(2) Largest target is 4
		 -> TX_ADDRESS(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _nrfTXData->_setCSN
    _nrfGetStatus->_setCSN
    _nrfConfig->_nrfSetRXAddr
    _spiTransfer->_setCSN
    _nrfSetTXAddr->_setCSN
    _nrfSetRXAddr->_setCSN
    _nrfConfigReg->_setCSN

Critical Paths under _highISR in COMRAM

    None.

Critical Paths under _lowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _highISR in BANK0

    None.

Critical Paths under _lowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _highISR in BANK1

    None.

Critical Paths under _lowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _highISR in BANK2

    None.

Critical Paths under _lowISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    9958
                                             14 BANK0      2     2      0
                          _delay10ms
                          _nrfConfig
                       _nrfGetStatus
                          _nrfTXData
                         _portConfig
                        _spiConfig_1
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiConfig_1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _portConfig                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _nrfTXData                                            7     5      2    1105
                                             19 COMRAM     7     5      2
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (1) _nrfGetStatus                                         0     0      0     842
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (1) _nrfConfig                                            0     0      0    6183
                       _nrfConfigReg
                       _nrfSetRXAddr
                       _nrfSetTXAddr
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiTransfer                                          7     4      3    1579
                                             19 COMRAM     7     4      3
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfSetTXAddr                                         7     3      4    1133
                                             19 COMRAM     7     3      4
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfSetRXAddr                                         8     4      4    1164
                                             19 COMRAM     8     4      4
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfConfigReg                                         3     1      2    2307
                                             19 COMRAM     3     1      2
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _spiTransferByte                                      1     1      0      31
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setCSN                                               2     0      2     811
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _delay10ms                                            5     3      2     212
                                             17 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _lowISR                                              17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _highISR                                             14    14      0       0
                                              0 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay10ms
   _nrfConfig
     _nrfConfigReg
       _setCSN
       _spiTransferByte
     _nrfSetRXAddr
       _setCSN
       _spiTransferByte
     _nrfSetTXAddr
       _setCSN
       _spiTransferByte
     _spiTransfer
       _setCSN
       _spiTransferByte
   _nrfGetStatus
     _setCSN
     _spiTransferByte
   _nrfTXData
     _setCSN
     _spiTransferByte
   _portConfig
   _spiConfig_1
   _spiTransfer
     _setCSN
     _spiTransferByte

 _lowISR (ROOT)

 _highISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       6        0.0%
BANK2              100      0       0       7        0.0%
BITBANK1           100      0       0       9        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     10      30       4       30.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     1B      4E       1       82.1%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      7E       8        0.0%
DATA                 0      0      7E      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Oct 01 11:52:13 2014

__size_of_spiTransferByte 0012                        bsr 000FE0                _RX_ADDRESS 0047  
             __CFG_LVP$ON 000000                       l105 0628                       l152 030E  
                     l158 058E                       u517 0182                       u527 02E2  
                     u537 02EE                       u547 0304                       u557 0600  
                     u567 0580                       wreg 000FE8                _TX_ADDRESS 004B  
                    l1321 057A                      l1241 0362                      l1233 0344  
                    l1251 03B0                      l1261 0506                      l1245 0374  
                    l1237 0354                      l1333 02A8                      l1351 0302  
                    l1431 0146                      l1265 051C                      l1281 0476  
                    l1249 039C                      l1337 02BE                      l1275 044C  
                    l1291 04A8                      l1339 02D2                      l1279 0462  
                    l1295 04BE                      l1455 019A                      l1297 04D2  
                    _LATA 000F89                      _LATB 000F8A                      _LATC 000F8B  
      spiTransfer@command 0036                      _main 00A6                      fsr0h 000FEA  
                    fsr1h 000FE2                      fsr0l 000FE9                      fsr2h 000FDA  
                    indf1 000FE7                      fsr1l 000FE1                      indf2 000FDF  
                    fsr2l 000FD9             __CFG_BORV$190 000000                      pclat 000FFA  
                    prodh 000FF4                      prodl 000FF3                      start 00A2  
           __CFG_IESO$OFF 000000            nrfConfigReg@wr 0038                     ?_main 0023  
                   _TRISA 000F92                     _TRISB 000F93                     _TRISC 000F94  
         __end_of_highISR 0424            __CFG_FCMEN$OFF 000000        __CFG_MCLRE$EXTMCLR 000000  
                   tablat 000FF5                     status 000FD8            __CFG_HFOFST$ON 000000  
          __CFG_FOSC$HSHP 000000           __initialization 052A              __end_of_main 01A8  
     spiTransferByte@data 0034                    ??_main 003E             __activetblptr 000000  
       ??_spiTransferByte 0034            __CFG_PLLCFG$ON 000000             nrfSetRXAddr@i 003C  
           nrfSetTXAddr@i 003B            __CFG_WDTEN$OFF 000000              ?_spiConfig_1 0023  
          __CFG_PWRTEN$ON 000000            __CFG_XINST$OFF 000000            __CFG_STVREN$ON 000000  
                  _lowISR 0018                    _setCSN 061C                    clear_0 0530  
                  clear_1 053C               setCSN@level 0034                 ??_highISR 0080  
           ?_nrfGetStatus 0023             ?_nrfConfigReg 0036              _FEATURE_CURR 0041  
            __pdataCOMRAM 003E              ?_spiTransfer 0036                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8                __accesstop 0060  
 __end_of__initialization 0562           __CFG_PBADEN$OFF 000000             ?_nrfSetRXAddr 0036  
           ?_nrfSetTXAddr 0036            __pcstackCOMRAM 0023        __size_of_delay10ms 003C  
          ??_nrfGetStatus 0036            _EN_RXADDR_CURR 0040            ??_nrfConfigReg 0038  
        nrfConfigReg@data 0037                _dataBufOut 0001                __pbssBANK0 0060  
          ??_nrfSetRXAddr 003A            ??_nrfSetTXAddr 003A        __size_of_nrfTXData 00A0  
      __size_of_nrfConfig 00DC       nrfConfigReg@command 0036        __CFG_CCP2MX$PORTC1 000000  
      __CFG_CCP3MX$PORTB5 000000                   ?_lowISR 0023                   ?_setCSN 0034  
                 _SSP1ADD 000FC8                   _SSP1BUF 000FC9         __end_of_delay10ms 05A4  
        nrfSetRXAddr@addr 0036          nrfSetRXAddr@pipe 003B                   __Hparam 0000  
                 __Lparam 0000      __size_of_spiConfig_1 0018           _spiTransferByte 05F8  
              delay10ms@i 0037             _RX_PW_P0_CURR 0044                   __pcinit 052A  
         __size_of_lowISR 008A           __size_of_setCSN 0010          nrfSetTXAddr@addr 0036  
                 __ramtop 0300                   _highISR 0008                   __ptext0 00A6  
                 __ptext1 05E0                   __ptext2 05C6                   __ptext3 0284  
                 __ptext4 05A4                   __ptext5 01A8                   __ptext6 0324  
                 __ptext7 0484                   __ptext8 0424                   __ptext9 04E0  
       __end_of_nrfTXData 0324         __end_of_nrfConfig 0284      __size_of_spiTransfer 009A  
          __pintcode_body 03BE      end_of_initialization 0562                   int_func 03BE  
    __end_of_nrfGetStatus 05C6      __end_of_nrfConfigReg 052A                   postdec1 000FE5  
                 postinc0 000FEE              nrfTXData@len 0036                _portConfig 05C6  
    __end_of_nrfSetRXAddr 0484      __end_of_nrfSetTXAddr 04E0   __end_of_spiTransferByte 060A  
           __pidataCOMRAM 060A            __end_of_lowISR 00A2            __end_of_setCSN 062C  
     start_initialization 052A                  ??_lowISR 0023                  ??_setCSN 0036  
             ?_portConfig 0023                nrfTXData@i 003B               __pbssCOMRAM 0001  
           __pcstackBANK0 0080     __size_of_nrfGetStatus 0022     __size_of_nrfConfigReg 004A  
               _dataBufIn 0060          ?_spiTransferByte 0023                 _delay10ms 0568  
             _CONFIG_CURR 003E             _SETUP_AW_CURR 0045                 __pintcode 0008  
   __size_of_nrfSetRXAddr 0060     __size_of_nrfSetTXAddr 005C           _SETUP_RETR_CURR 0046  
             __pintcodelo 0018          __CFG_PRICLKEN$ON 000000                  ?_highISR 0023  
            _nrfGetStatus 05A4              _nrfConfigReg 04E0           nrfSetRXAddr@len 0038  
               _nrfSTATUS 0022                 _nrfTXData 0284           nrfSetTXAddr@len 0038  
               _nrfConfig 01A8       __size_of_portConfig 001A                  _LATAbits 000F89  
              ?_delay10ms 0034             ??_spiConfig_1 0034              _nrfSetRXAddr 0424  
            _nrfSetTXAddr 0484          __CFG_WDTPS$32768 000000             _RF_SETUP_CURR 0043  
       delay10ms@ms_multi 0034             ??_spiTransfer 0039                 main@count 008E  
              ?_nrfTXData 0036                 copy_data0 0556                ?_nrfConfig 0023  
                __Hparam0 0000                  __Lparam0 0000        __CFG_BOREN$SBORDIS 000000  
       __CFG_P2BMX$PORTB5 000000       __end_of_spiConfig_1 05F8          __size_of_highISR 041C  
                __ptext10 05F8                  __ptext11 061C                  __ptext12 0568  
            _SSP1CON1bits 000FC6       __end_of_spiTransfer 03BE             __size_of_main 0102  
             ??_delay10ms 0036                _EN_AA_CURR 0021              _SSP1STATbits 000FC7  
            ??_portConfig 0034            nrfTXData@i_656 0039                _DYNPD_CURR 003F  
              _INTCONbits 000FF2               ??_nrfTXData 0038               ??_nrfConfig 003E  
                intlevel1 0000                  intlevel2 0000        __end_of_portConfig 05E0  
             _spiConfig_1 05E0            spiTransfer@len 0037            spiTransfer@wrn 003A  
              _RF_CH_CURR 0042               _spiTransfer 0324         __CFG_T3CMX$PORTC0 000000  
            spiTransfer@i 003B  
