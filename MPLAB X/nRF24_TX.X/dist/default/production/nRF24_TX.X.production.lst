

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Fri Oct 03 11:09:23 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F24K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    30                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    36  0000                     
    37                           	psect	idataCOMRAM
    38  0008F6                     __pidataCOMRAM:
    39                           	opt stack 0
    40                           
    41                           ;initializer for _CONFIG_CURR
    42  0008F6  4A                 	db	74
    43                           
    44                           ;initializer for _DYNPD_CURR
    45  0008F7  01                 	db	1
    46                           
    47                           ;initializer for _EN_AA_CURR
    48  0008F8  03                 	db	3
    49                           
    50                           ;initializer for _EN_RXADDR_CURR
    51  0008F9  03                 	db	3
    52                           
    53                           ;initializer for _FEATURE_CURR
    54  0008FA  04                 	db	4
    55                           
    56                           ;initializer for _RF_CH_CURR
    57  0008FB  69                 	db	105
    58                           
    59                           ;initializer for _RF_SETUP_CURR
    60  0008FC  06                 	db	6
    61                           
    62                           ;initializer for _RX_PW_P0_CURR
    63  0008FD  01                 	db	1
    64                           
    65                           ;initializer for _SETUP_AW_CURR
    66  0008FE  02                 	db	2
    67                           
    68                           ;initializer for _SETUP_RETR_CURR
    69  0008FF  35                 	db	53
    70                           
    71                           ;initializer for _RX_ADDRESS
    72  000900  E7                 	db	231
    73  000901  E7                 	db	231
    74  000902  E7                 	db	231
    75  000903  E7                 	db	231
    76                           
    77                           ;initializer for _TX_ADDRESS
    78  000904  C7                 	db	199
    79  000905  C7                 	db	199
    80  000906  C7                 	db	199
    81  000907  C7                 	db	199
    82  0000                     _INTCON2bits	set	4081
    83  0000                     _INTCONbits	set	4082
    84  0000                     _IOCBbits	set	3938
    85  0000                     _LATA	set	3977
    86  0000                     _LATAbits	set	3977
    87  0000                     _LATB	set	3978
    88  0000                     _LATC	set	3979
    89  0000                     _PIR1bits	set	3998
    90  0000                     _PORTBbits	set	3969
    91  0000                     _RCONbits	set	4048
    92  0000                     _SSP1ADD	set	4040
    93  0000                     _SSP1BUF	set	4041
    94  0000                     _SSP1CON1bits	set	4038
    95  0000                     _SSP1STATbits	set	4039
    96  0000                     _TRISA	set	3986
    97  0000                     _TRISB	set	3987
    98  0000                     _TRISC	set	3988
    99                           
   100                           ; #config settings
   101  0000                     
   102                           	psect	cinit
   103  000862                     __pcinit:
   104                           	opt stack 0
   105  000862                     start_initialization:
   106                           	opt stack 0
   107  000862                     __initialization:
   108                           	opt stack 0
   109                           
   110                           ; Clear objects allocated to BANK0 (68 bytes)
   111  000862  EE00  F060         	lfsr	0,__pbssBANK0
   112  000866  0E44               	movlw	68
   113  000868                     clear_0:
   114  000868  6AEE               	clrf	postinc0,c
   115  00086A  06E8               	decf	wreg,f,c
   116  00086C  E1FD               	bnz	clear_0
   117                           
   118                           ; Clear objects allocated to COMRAM (2 bytes)
   119  00086E  6A3E               	clrf	(__pbssCOMRAM+1)& (0+255),c
   120  000870  6A3D               	clrf	__pbssCOMRAM& (0+255),c
   121                           
   122                           ; Initialize objects allocated to COMRAM (18 bytes)
   123                           ; load TBLPTR registers with __pidataCOMRAM
   124  000872  0EF6               	movlw	low __pidataCOMRAM
   125  000874  6EF6               	movwf	tblptrl,c
   126  000876  0E08               	movlw	high __pidataCOMRAM
   127  000878  6EF7               	movwf	tblptrh,c
   128  00087A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   129  00087C  6EF8               	movwf	tblptru,c
   130  00087E  EE00  F02B         	lfsr	0,__pdataCOMRAM
   131  000882  EE10 F012          	lfsr	1,18
   132  000886                     copy_data0:
   133  000886  0009               	tblrd		*+
   134  000888  CFF5 FFEE          	movff	tablat,postinc0
   135  00088C  50E5               	movf	postdec1,w,c
   136  00088E  50E1               	movf	fsr1l,w,c
   137  000890  E1FA               	bnz	copy_data0
   138  000892                     end_of_initialization:
   139                           	opt stack 0
   140  000892                     __end_of__initialization:
   141                           	opt stack 0
   142  000892  0100               	movlb	0
   143  000894  EF53  F000         	goto	_main	;jump to C main() function
   144                           tblptru	equ	0xFF8
   145                           tblptrh	equ	0xFF7
   146                           tblptrl	equ	0xFF6
   147                           tablat	equ	0xFF5
   148                           postinc0	equ	0xFEE
   149                           wreg	equ	0xFE8
   150                           postdec1	equ	0xFE5
   151                           fsr1l	equ	0xFE1
   152                           
   153                           	psect	bssCOMRAM
   154  00003D                     __pbssCOMRAM:
   155                           	opt stack 0
   156  00003D                     _nrfSTATUS:
   157                           	opt stack 0
   158  00003D                     	ds	1
   159  00003E                     _spiTXFlag:
   160                           	opt stack 0
   161  00003E                     	ds	1
   162                           tblptru	equ	0xFF8
   163                           tblptrh	equ	0xFF7
   164                           tblptrl	equ	0xFF6
   165                           tablat	equ	0xFF5
   166                           postinc0	equ	0xFEE
   167                           wreg	equ	0xFE8
   168                           postdec1	equ	0xFE5
   169                           fsr1l	equ	0xFE1
   170                           
   171                           	psect	dataCOMRAM
   172  00002B                     __pdataCOMRAM:
   173                           	opt stack 0
   174  00002B                     _CONFIG_CURR:
   175                           	opt stack 0
   176  00002B                     	ds	1
   177  00002C                     _DYNPD_CURR:
   178                           	opt stack 0
   179  00002C                     	ds	1
   180  00002D                     _EN_AA_CURR:
   181                           	opt stack 0
   182  00002D                     	ds	1
   183  00002E                     _EN_RXADDR_CURR:
   184                           	opt stack 0
   185  00002E                     	ds	1
   186  00002F                     _FEATURE_CURR:
   187                           	opt stack 0
   188  00002F                     	ds	1
   189  000030                     _RF_CH_CURR:
   190                           	opt stack 0
   191  000030                     	ds	1
   192  000031                     _RF_SETUP_CURR:
   193                           	opt stack 0
   194  000031                     	ds	1
   195  000032                     _RX_PW_P0_CURR:
   196                           	opt stack 0
   197  000032                     	ds	1
   198  000033                     _SETUP_AW_CURR:
   199                           	opt stack 0
   200  000033                     	ds	1
   201  000034                     _SETUP_RETR_CURR:
   202                           	opt stack 0
   203  000034                     	ds	1
   204  000035                     _RX_ADDRESS:
   205                           	opt stack 0
   206  000035                     	ds	4
   207  000039                     _TX_ADDRESS:
   208                           	opt stack 0
   209  000039                     	ds	4
   210                           tblptru	equ	0xFF8
   211                           tblptrh	equ	0xFF7
   212                           tblptrl	equ	0xFF6
   213                           tablat	equ	0xFF5
   214                           postinc0	equ	0xFEE
   215                           wreg	equ	0xFE8
   216                           postdec1	equ	0xFE5
   217                           fsr1l	equ	0xFE1
   218                           
   219                           	psect	bssBANK0
   220  000060                     __pbssBANK0:
   221                           	opt stack 0
   222  000060                     _dataBufIn:
   223                           	opt stack 0
   224  000060                     	ds	32
   225  000080                     _dataBufOut:
   226                           	opt stack 0
   227  000080                     	ds	32
   228  0000A0                     _nrfBusy:
   229                           	opt stack 0
   230  0000A0                     	ds	1
   231  0000A1                     _nrfInterrupt:
   232                           	opt stack 0
   233  0000A1                     	ds	1
   234  0000A2                     _nrfMAXRTInt:
   235                           	opt stack 0
   236  0000A2                     	ds	1
   237  0000A3                     _nrfTXDSInt:
   238                           	opt stack 0
   239  0000A3                     	ds	1
   240                           tblptru	equ	0xFF8
   241                           tblptrh	equ	0xFF7
   242                           tblptrl	equ	0xFF6
   243                           tablat	equ	0xFF5
   244                           postinc0	equ	0xFEE
   245                           wreg	equ	0xFE8
   246                           postdec1	equ	0xFE5
   247                           fsr1l	equ	0xFE1
   248                           
   249                           	psect	cstackBANK0
   250  0000A4                     __pcstackBANK0:
   251                           	opt stack 0
   252  0000A4                     nrfSetRXAddr@pipe:
   253                           	opt stack 0
   254  0000A4                     ___aldiv@counter:
   255                           	opt stack 0
   256                           
   257                           ; 1 bytes @ 0x0
   258  0000A4                     	ds	1
   259  0000A5                     ___aldiv@sign:
   260                           	opt stack 0
   261  0000A5                     nrfSetRXAddr@i:
   262                           	opt stack 0
   263                           
   264                           ; 2 bytes @ 0x1
   265  0000A5                     	ds	1
   266  0000A6                     ___aldiv@quotient:
   267                           	opt stack 0
   268                           
   269                           ; 4 bytes @ 0x2
   270  0000A6                     	ds	4
   271  0000AA                     spiConfig_1@spiSpeed:
   272                           	opt stack 0
   273                           
   274                           ; 2 bytes @ 0x6
   275  0000AA                     	ds	2
   276  0000AC                     ??_spiConfig_1:
   277                           
   278                           ; 0 bytes @ 0x8
   279  0000AC                     	ds	4
   280  0000B0                     _spiConfig_1$1495:
   281                           	opt stack 0
   282                           
   283                           ; 4 bytes @ 0xC
   284  0000B0                     	ds	4
   285  0000B4                     spiConfig_1@sspAddVal:
   286                           	opt stack 0
   287                           
   288                           ; 2 bytes @ 0x10
   289  0000B4                     	ds	2
   290  0000B6                     main@count:
   291                           	opt stack 0
   292                           
   293                           ; 2 bytes @ 0x12
   294  0000B6                     	ds	2
   295  0000B8                     main@TXtime:
   296                           	opt stack 0
   297                           
   298                           ; 2 bytes @ 0x14
   299  0000B8                     	ds	2
   300                           tblptru	equ	0xFF8
   301                           tblptrh	equ	0xFF7
   302                           tblptrl	equ	0xFF6
   303                           tablat	equ	0xFF5
   304                           postinc0	equ	0xFEE
   305                           wreg	equ	0xFE8
   306                           postdec1	equ	0xFE5
   307                           fsr1l	equ	0xFE1
   308                           
   309                           	psect	cstackCOMRAM
   310  000001                     __pcstackCOMRAM:
   311                           	opt stack 0
   312  000001                     ??_lowISR:
   313  000001                     
   314                           ; 1 bytes @ 0x0
   315  000001                     	ds	17
   316  000012                     i2spiTransferByte@data:
   317                           	opt stack 0
   318  000012                     i2setCSN@level:
   319                           	opt stack 0
   320                           
   321                           ; 2 bytes @ 0x11
   322  000012                     	ds	2
   323  000014                     ??_highISR:
   324  000014                     
   325                           ; 0 bytes @ 0x13
   326  000014                     	ds	14
   327  000022                     ?___lwmod:
   328                           	opt stack 0
   329  000022                     ?___aldiv:
   330                           	opt stack 0
   331  000022                     spiTransferByte@data:
   332                           	opt stack 0
   333  000022                     setCSN@level:
   334                           	opt stack 0
   335  000022                     delay10ms@ms_multi:
   336                           	opt stack 0
   337  000022                     ___lwmod@dividend:
   338                           	opt stack 0
   339  000022                     ___aldiv@dividend:
   340                           	opt stack 0
   341                           
   342                           ; 4 bytes @ 0x21
   343  000022                     	ds	2
   344  000024                     ??_delay10ms:
   345  000024                     nrfConfigReg@command:
   346                           	opt stack 0
   347  000024                     spiTransfer@command:
   348                           	opt stack 0
   349  000024                     nrfSetTXAddr@addr:
   350                           	opt stack 0
   351  000024                     nrfSetRXAddr@addr:
   352                           	opt stack 0
   353  000024                     nrfTXData@len:
   354                           	opt stack 0
   355  000024                     ___lwmod@divisor:
   356                           	opt stack 0
   357                           
   358                           ; 2 bytes @ 0x23
   359  000024                     	ds	1
   360  000025                     nrfConfigReg@data:
   361                           	opt stack 0
   362  000025                     spiTransfer@len:
   363                           	opt stack 0
   364  000025                     delay10ms@i:
   365                           	opt stack 0
   366                           
   367                           ; 2 bytes @ 0x24
   368  000025                     	ds	1
   369  000026                     ??_nrfTXData:
   370  000026                     nrfConfigReg@wr:
   371                           	opt stack 0
   372  000026                     ___lwmod@counter:
   373                           	opt stack 0
   374  000026                     nrfSetTXAddr@len:
   375                           	opt stack 0
   376  000026                     nrfSetRXAddr@len:
   377                           	opt stack 0
   378  000026                     ___aldiv@divisor:
   379                           	opt stack 0
   380                           
   381                           ; 4 bytes @ 0x25
   382  000026                     	ds	1
   383  000027                     ??_spiTransfer:
   384  000027                     nrfTXData@i:
   385                           	opt stack 0
   386                           
   387                           ; 2 bytes @ 0x26
   388  000027                     	ds	1
   389  000028                     ??_nrfSetRXAddr:
   390  000028                     ??_nrfSetTXAddr:
   391  000028                     spiTransfer@wrn:
   392                           	opt stack 0
   393                           
   394                           ; 1 bytes @ 0x27
   395  000028                     	ds	1
   396  000029                     nrfSetTXAddr@i:
   397                           	opt stack 0
   398  000029                     spiTransfer@i:
   399                           	opt stack 0
   400                           
   401                           ; 2 bytes @ 0x28
   402  000029                     	ds	1
   403  00002A                     
   404                           ; 0 bytes @ 0x29
   405  00002A                     	ds	1
   406  00002B                     tblptru	equ	0xFF8
   407                           tblptrh	equ	0xFF7
   408                           tblptrl	equ	0xFF6
   409                           tablat	equ	0xFF5
   410                           postinc0	equ	0xFEE
   411                           wreg	equ	0xFE8
   412                           postdec1	equ	0xFE5
   413                           fsr1l	equ	0xFE1
   414                           
   415                           ; 0 bytes @ 0x2A
   416 ;;
   417 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   418 ;;
   419 ;; *************** function _main *****************
   420 ;; Defined at:
   421 ;;		line 206 in file "main.c"
   422 ;; Parameters:    Size  Location     Type
   423 ;;		None
   424 ;; Auto vars:     Size  Location     Type
   425 ;;  TXtime          2   20[BANK0 ] unsigned int 
   426 ;;  count           2   18[BANK0 ] int 
   427 ;; Return value:  Size  Location     Type
   428 ;;		None               void
   429 ;; Registers used:
   430 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   431 ;; Tracked objects:
   432 ;;		On entry : 0/0
   433 ;;		On exit  : 0/0
   434 ;;		Unchanged: 0/0
   435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   436 ;;      Params:         0       0       0       0
   437 ;;      Locals:         0       4       0       0
   438 ;;      Temps:          0       0       0       0
   439 ;;      Totals:         0       4       0       0
   440 ;;Total ram usage:        4 bytes
   441 ;; Hardware stack levels required when called:    7
   442 ;; This function calls:
   443 ;;		___lwmod
   444 ;;		_delay10ms
   445 ;;		_intConfig
   446 ;;		_nrfConfig
   447 ;;		_nrfGetStatus
   448 ;;		_nrfTXData
   449 ;;		_portConfig
   450 ;;		_spiConfig_1
   451 ;;		_spiTransfer
   452 ;; This function is called by:
   453 ;;		Startup code after reset
   454 ;; This function uses a non-reentrant model
   455 ;;
   456                           
   457                           	psect	text0
   458  0000A6                     __ptext0:
   459                           	opt stack 0
   460  0000A6                     _main:
   461                           	opt stack 24
   462                           
   463                           ;main.c: 209: portConfig();
   464                           
   465                           ;incstack = 0
   466  0000A6  EC6E  F004         	call	_portConfig	;wreg free
   467                           
   468                           ;main.c: 210: spiConfig_1(40);
   469  0000AA  0E00               	movlw	0
   470  0000AC  0100               	movlb	0	; () banked
   471  0000AE  6FAB               	movwf	(spiConfig_1@spiSpeed+1)& (0+255),b
   472  0000B0  0E28               	movlw	40
   473  0000B2  0100               	movlb	0	; () banked
   474  0000B4  6FAA               	movwf	spiConfig_1@spiSpeed& (0+255),b
   475  0000B6  EC9D  F002         	call	_spiConfig_1	;wreg free
   476                           
   477                           ;main.c: 211: nrfConfig();
   478  0000BA  ECCE  F001         	call	_nrfConfig	;wreg free
   479                           
   480                           ;main.c: 212: intConfig();
   481  0000BE  EC84  F004         	call	_intConfig	;wreg free
   482                           
   483                           ;main.c: 214: delay10ms(1);
   484  0000C2  0E00               	movlw	0
   485  0000C4  6E23               	movwf	delay10ms@ms_multi+1,c
   486  0000C6  0E01               	movlw	1
   487  0000C8  6E22               	movwf	delay10ms@ms_multi,c
   488  0000CA  EC13  F004         	call	_delay10ms	;wreg free
   489                           
   490                           ;main.c: 216: dataBufOut[1] = 0x48;
   491  0000CE  0E48               	movlw	72
   492  0000D0  0100               	movlb	0	; () banked
   493  0000D2  6F81               	movwf	(_dataBufOut+1)& (0+255),b
   494                           
   495                           ; BSR set to: 0
   496                           ;main.c: 217: dataBufOut[2] = 0x4F;
   497  0000D4  0E4F               	movlw	79
   498  0000D6  0100               	movlb	0	; () banked
   499  0000D8  6F82               	movwf	(_dataBufOut+2)& (0+255),b
   500                           
   501                           ; BSR set to: 0
   502                           ;main.c: 218: dataBufOut[3] = 88;
   503  0000DA  0E58               	movlw	88
   504  0000DC  0100               	movlb	0	; () banked
   505  0000DE  6F83               	movwf	(_dataBufOut+3)& (0+255),b
   506                           
   507                           ; BSR set to: 0
   508                           ;main.c: 219: dataBufOut[4] = 0x49;
   509  0000E0  0E49               	movlw	73
   510  0000E2  0100               	movlb	0	; () banked
   511  0000E4  6F84               	movwf	(_dataBufOut+4)& (0+255),b
   512                           
   513                           ; BSR set to: 0
   514                           ;main.c: 220: dataBufOut[5] = 0x5F;
   515  0000E6  0E5F               	movlw	95
   516  0000E8  0100               	movlb	0	; () banked
   517  0000EA  6F85               	movwf	(_dataBufOut+5)& (0+255),b
   518                           
   519                           ; BSR set to: 0
   520                           ;main.c: 221: dataBufOut[6] = 47;
   521  0000EC  0E2F               	movlw	47
   522  0000EE  0100               	movlb	0	; () banked
   523  0000F0  6F86               	movwf	(_dataBufOut+6)& (0+255),b
   524                           
   525                           ; BSR set to: 0
   526                           ;main.c: 222: dataBufOut[7] = 0x74;
   527  0000F2  0E74               	movlw	116
   528  0000F4  0100               	movlb	0	; () banked
   529  0000F6  6F87               	movwf	(_dataBufOut+7)& (0+255),b
   530                           
   531                           ; BSR set to: 0
   532                           ;main.c: 223: dataBufOut[8] = 0x6F;
   533  0000F8  0E6F               	movlw	111
   534  0000FA  0100               	movlb	0	; () banked
   535  0000FC  6F88               	movwf	(_dataBufOut+8)& (0+255),b
   536                           
   537                           ; BSR set to: 0
   538                           ;main.c: 224: dataBufOut[9] = 58;
   539  0000FE  0E3A               	movlw	58
   540  000100  0100               	movlb	0	; () banked
   541  000102  6F89               	movwf	(_dataBufOut+9)& (0+255),b
   542                           
   543                           ; BSR set to: 0
   544                           ;main.c: 225: dataBufOut[10] = 0xA8;
   545  000104  0EA8               	movlw	168
   546  000106  0100               	movlb	0	; () banked
   547  000108  6F8A               	movwf	(_dataBufOut+10)& (0+255),b
   548                           
   549                           ; BSR set to: 0
   550                           ;main.c: 226: dataBufOut[11] = 0x6F;
   551  00010A  0E6F               	movlw	111
   552  00010C  0100               	movlb	0	; () banked
   553  00010E  6F8B               	movwf	(_dataBufOut+11)& (0+255),b
   554                           
   555                           ; BSR set to: 0
   556                           ;main.c: 227: dataBufOut[12] = 99;
   557  000110  0E63               	movlw	99
   558  000112  0100               	movlb	0	; () banked
   559  000114  6F8C               	movwf	(_dataBufOut+12)& (0+255),b
   560                           
   561                           ; BSR set to: 0
   562                           ;main.c: 228: dataBufOut[13] = 0x88;
   563  000116  0E88               	movlw	136
   564  000118  0100               	movlb	0	; () banked
   565  00011A  6F8D               	movwf	(_dataBufOut+13)& (0+255),b
   566                           
   567                           ; BSR set to: 0
   568                           ;main.c: 229: dataBufOut[14] = 0x5F;
   569  00011C  0E5F               	movlw	95
   570  00011E  0100               	movlb	0	; () banked
   571  000120  6F8E               	movwf	(_dataBufOut+14)& (0+255),b
   572                           
   573                           ; BSR set to: 0
   574                           ;main.c: 230: dataBufOut[15] = 72;
   575  000122  0E48               	movlw	72
   576  000124  0100               	movlb	0	; () banked
   577  000126  6F8F               	movwf	(_dataBufOut+15)& (0+255),b
   578                           
   579                           ; BSR set to: 0
   580                           ;main.c: 231: dataBufOut[16] = 0x98;
   581  000128  0E98               	movlw	152
   582  00012A  0100               	movlb	0	; () banked
   583  00012C  6F90               	movwf	(_dataBufOut+16)& (0+255),b
   584                           
   585                           ; BSR set to: 0
   586                           ;main.c: 232: dataBufOut[17] = 0x6F;
   587  00012E  0E6F               	movlw	111
   588  000130  0100               	movlb	0	; () banked
   589  000132  6F91               	movwf	(_dataBufOut+17)& (0+255),b
   590                           
   591                           ; BSR set to: 0
   592                           ;main.c: 233: dataBufOut[18] = 92;
   593  000134  0E5C               	movlw	92
   594  000136  0100               	movlb	0	; () banked
   595  000138  6F92               	movwf	(_dataBufOut+18)& (0+255),b
   596                           
   597                           ; BSR set to: 0
   598                           ;main.c: 234: dataBufOut[19] = 0x4A;
   599  00013A  0E4A               	movlw	74
   600  00013C  0100               	movlb	0	; () banked
   601  00013E  6F93               	movwf	(_dataBufOut+19)& (0+255),b
   602                           
   603                           ; BSR set to: 0
   604                           ;main.c: 235: dataBufOut[20] = 0x6F;
   605  000140  0E6F               	movlw	111
   606  000142  0100               	movlb	0	; () banked
   607  000144  6F94               	movwf	(_dataBufOut+20)& (0+255),b
   608                           
   609                           ; BSR set to: 0
   610                           ;main.c: 236: dataBufOut[21] = 62;
   611  000146  0E3E               	movlw	62
   612  000148  0100               	movlb	0	; () banked
   613  00014A  6F95               	movwf	(_dataBufOut+21)& (0+255),b
   614                           
   615                           ; BSR set to: 0
   616                           ;main.c: 237: dataBufOut[22] = 0x62;
   617  00014C  0E62               	movlw	98
   618  00014E  0100               	movlb	0	; () banked
   619  000150  6F96               	movwf	(_dataBufOut+22)& (0+255),b
   620                           
   621                           ; BSR set to: 0
   622                           ;main.c: 238: dataBufOut[23] = 0x6F;
   623  000152  0E6F               	movlw	111
   624  000154  0100               	movlb	0	; () banked
   625  000156  6F97               	movwf	(_dataBufOut+23)& (0+255),b
   626                           
   627                           ; BSR set to: 0
   628                           ;main.c: 239: dataBufOut[24] = 82;
   629  000158  0E52               	movlw	82
   630  00015A  0100               	movlb	0	; () banked
   631  00015C  6F98               	movwf	(_dataBufOut+24)& (0+255),b
   632                           
   633                           ; BSR set to: 0
   634                           ;main.c: 240: dataBufOut[25] = 0x86;
   635  00015E  0E86               	movlw	134
   636  000160  0100               	movlb	0	; () banked
   637  000162  6F99               	movwf	(_dataBufOut+25)& (0+255),b
   638                           
   639                           ; BSR set to: 0
   640                           ;main.c: 241: dataBufOut[26] = 0x7F;
   641  000164  0E7F               	movlw	127
   642  000166  0100               	movlb	0	; () banked
   643  000168  6F9A               	movwf	(_dataBufOut+26)& (0+255),b
   644                           
   645                           ; BSR set to: 0
   646                           ;main.c: 242: dataBufOut[27] = 72;
   647  00016A  0E48               	movlw	72
   648  00016C  0100               	movlb	0	; () banked
   649  00016E  6F9B               	movwf	(_dataBufOut+27)& (0+255),b
   650                           
   651                           ; BSR set to: 0
   652                           ;main.c: 243: dataBufOut[28] = 102;
   653  000170  0E66               	movlw	102
   654  000172  0100               	movlb	0	; () banked
   655  000174  6F9C               	movwf	(_dataBufOut+28)& (0+255),b
   656                           
   657                           ; BSR set to: 0
   658                           ;main.c: 244: dataBufOut[29] = 0xC0;
   659  000176  0EC0               	movlw	192
   660  000178  0100               	movlb	0	; () banked
   661  00017A  6F9D               	movwf	(_dataBufOut+29)& (0+255),b
   662                           
   663                           ; BSR set to: 0
   664                           ;main.c: 245: dataBufOut[30] = 0x5F;
   665  00017C  0E5F               	movlw	95
   666  00017E  0100               	movlb	0	; () banked
   667  000180  6F9E               	movwf	(_dataBufOut+30)& (0+255),b
   668                           
   669                           ; BSR set to: 0
   670                           ;main.c: 246: dataBufOut[31] = 122;
   671  000182  0E7A               	movlw	122
   672  000184  0100               	movlb	0	; () banked
   673  000186  6F9F               	movwf	(_dataBufOut+31)& (0+255),b
   674                           
   675                           ; BSR set to: 0
   676                           ;main.c: 249: int count = 1;
   677  000188  0E00               	movlw	0
   678  00018A  0100               	movlb	0	; () banked
   679  00018C  6FB7               	movwf	(main@count+1)& (0+255),b
   680  00018E  0E01               	movlw	1
   681  000190  0100               	movlb	0	; () banked
   682  000192  6FB6               	movwf	main@count& (0+255),b
   683                           
   684                           ; BSR set to: 0
   685                           ;main.c: 250: unsigned int TXtime = 20000;
   686  000194  0E4E               	movlw	78
   687  000196  0100               	movlb	0	; () banked
   688  000198  6FB9               	movwf	(main@TXtime+1)& (0+255),b
   689  00019A  0E20               	movlw	32
   690  00019C  0100               	movlb	0	; () banked
   691  00019E  6FB8               	movwf	main@TXtime& (0+255),b
   692                           
   693                           ; BSR set to: 0
   694                           ;main.c: 253: dataBufOut[0] = 0b00110000;
   695  0001A0  0E30               	movlw	48
   696  0001A2  0100               	movlb	0	; () banked
   697  0001A4  6F80               	movwf	_dataBufOut& (0+255),b
   698                           
   699                           ; BSR set to: 0
   700                           ;main.c: 254: spiTransfer('w',0x07,1);
   701  0001A6  0E07               	movlw	7
   702  0001A8  6E24               	movwf	spiTransfer@command,c
   703  0001AA  0E00               	movlw	0
   704  0001AC  6E26               	movwf	spiTransfer@len+1,c
   705  0001AE  0E01               	movlw	1
   706  0001B0  6E25               	movwf	spiTransfer@len,c
   707  0001B2  0E77               	movlw	119
   708  0001B4  EC4E  F002         	call	_spiTransfer
   709  0001B8                     l1767:
   710                           
   711                           ;main.c: 258: if (TXtime % 800 == 0) {
   712  0001B8  C0B8  F022         	movff	main@TXtime,___lwmod@dividend
   713  0001BC  C0B9  F023         	movff	main@TXtime+1,___lwmod@dividend+1
   714  0001C0  0E03               	movlw	3
   715  0001C2  6E25               	movwf	___lwmod@divisor+1,c
   716  0001C4  0E20               	movlw	32
   717  0001C6  6E24               	movwf	___lwmod@divisor,c
   718  0001C8  ECF2  F003         	call	___lwmod	;wreg free
   719  0001CC  5023               	movf	?___lwmod+1,w,c
   720  0001CE  1022               	iorwf	?___lwmod,w,c
   721  0001D0  A4D8               	btfss	status,2,c
   722  0001D2  D004               	goto	l1775
   723                           
   724                           ;main.c: 259: LATAbits.LATA0 = 1;
   725  0001D4  8089               	bsf	3977,0,c	;volatile
   726                           
   727                           ;main.c: 260: nrfGetStatus();
   728  0001D6  EC4C  F004         	call	_nrfGetStatus	;wreg free
   729                           
   730                           ;main.c: 261: LATAbits.LATA0 = 1;
   731  0001DA  8089               	bsf	3977,0,c	;volatile
   732  0001DC                     l1775:
   733                           
   734                           ;main.c: 262: }
   735                           ;main.c: 264: if (nrfInterrupt) {
   736  0001DC  0100               	movlb	0	; () banked
   737  0001DE  51A1               	movf	_nrfInterrupt& (0+255),w,b	;volatile
   738  0001E0  B4D8               	btfsc	status,2,c
   739  0001E2  D012               	goto	l1785
   740                           
   741                           ; BSR set to: 0
   742                           ;main.c: 266: dataBufOut[0] = 0b00110000;
   743  0001E4  0E30               	movlw	48
   744  0001E6  0100               	movlb	0	; () banked
   745  0001E8  6F80               	movwf	_dataBufOut& (0+255),b
   746                           
   747                           ; BSR set to: 0
   748                           ;main.c: 267: spiTransfer('w',0x07,1);
   749  0001EA  0E07               	movlw	7
   750  0001EC  6E24               	movwf	spiTransfer@command,c
   751  0001EE  0E00               	movlw	0
   752  0001F0  6E26               	movwf	spiTransfer@len+1,c
   753  0001F2  0E01               	movlw	1
   754  0001F4  6E25               	movwf	spiTransfer@len,c
   755  0001F6  0E77               	movlw	119
   756  0001F8  EC4E  F002         	call	_spiTransfer
   757                           
   758                           ;main.c: 269: nrfBusy = 0;
   759  0001FC  0E00               	movlw	0
   760  0001FE  0100               	movlb	0	; () banked
   761  000200  6FA0               	movwf	_nrfBusy& (0+255),b
   762                           
   763                           ; BSR set to: 0
   764                           ;main.c: 270: nrfInterrupt = 0;
   765  000202  0E00               	movlw	0
   766  000204  0100               	movlb	0	; () banked
   767  000206  6FA1               	movwf	_nrfInterrupt& (0+255),b	;volatile
   768  000208                     l1785:
   769                           
   770                           ; BSR set to: 0
   771                           ;main.c: 271: }
   772                           ;main.c: 273: if (nrfTXDSInt) {
   773  000208  0100               	movlb	0	; () banked
   774  00020A  51A3               	movf	_nrfTXDSInt& (0+255),w,b	;volatile
   775  00020C  B4D8               	btfsc	status,2,c
   776  00020E  D004               	goto	l106
   777                           
   778                           ; BSR set to: 0
   779                           ;main.c: 274: LATAbits.LATA3 = 1;
   780  000210  8689               	bsf	3977,3,c	;volatile
   781                           
   782                           ; BSR set to: 0
   783                           ;main.c: 275: nrfTXDSInt = 0;
   784  000212  0E00               	movlw	0
   785  000214  0100               	movlb	0	; () banked
   786  000216  6FA3               	movwf	_nrfTXDSInt& (0+255),b	;volatile
   787  000218                     l106:
   788                           
   789                           ; BSR set to: 0
   790                           ;main.c: 276: }
   791                           ;main.c: 278: if (nrfMAXRTInt) {
   792  000218  0100               	movlb	0	; () banked
   793  00021A  51A2               	movf	_nrfMAXRTInt& (0+255),w,b	;volatile
   794  00021C  B4D8               	btfsc	status,2,c
   795  00021E  D004               	goto	l1795
   796                           
   797                           ; BSR set to: 0
   798                           ;main.c: 279: LATAbits.LATA4 = 1;
   799  000220  8889               	bsf	3977,4,c	;volatile
   800                           
   801                           ; BSR set to: 0
   802                           ;main.c: 280: nrfMAXRTInt = 0;
   803  000222  0E00               	movlw	0
   804  000224  0100               	movlb	0	; () banked
   805  000226  6FA2               	movwf	_nrfMAXRTInt& (0+255),b	;volatile
   806  000228                     l1795:
   807                           
   808                           ; BSR set to: 0
   809                           ;main.c: 281: }
   810                           ;main.c: 283: if ((TXtime >= 12800) && (!nrfBusy)) {
   811  000228  0E00               	movlw	0
   812  00022A  0100               	movlb	0	; () banked
   813  00022C  5DB8               	subwf	main@TXtime& (0+255),w,b
   814  00022E  0E32               	movlw	50
   815  000230  0100               	movlb	0	; () banked
   816  000232  59B9               	subwfb	(main@TXtime+1)& (0+255),w,b
   817  000234  A0D8               	btfss	status,0,c
   818  000236  D014               	goto	l1807
   819                           
   820                           ; BSR set to: 0
   821  000238  0100               	movlb	0	; () banked
   822  00023A  67A0               	tstfsz	_nrfBusy& (0+255),b
   823  00023C  D011               	goto	l1807
   824                           
   825                           ; BSR set to: 0
   826                           ;main.c: 285: dataBufOut[0] = count;
   827  00023E  C0B6  F080         	movff	main@count,_dataBufOut
   828                           
   829                           ; BSR set to: 0
   830                           ;main.c: 286: nrfTXData(3);
   831  000242  0E00               	movlw	0
   832  000244  6E25               	movwf	nrfTXData@len+1,c
   833  000246  0E03               	movlw	3
   834  000248  6E24               	movwf	nrfTXData@len,c
   835  00024A  EC67  F003         	call	_nrfTXData	;wreg free
   836                           
   837                           ;main.c: 287: count++;
   838  00024E  0100               	movlb	0	; () banked
   839  000250  4BB6               	infsnz	main@count& (0+255),f,b
   840  000252  2BB7               	incf	(main@count+1)& (0+255),f,b
   841                           
   842                           ; BSR set to: 0
   843                           ;main.c: 288: TXtime = 0;
   844  000254  0E00               	movlw	0
   845  000256  0100               	movlb	0	; () banked
   846  000258  6FB9               	movwf	(main@TXtime+1)& (0+255),b
   847  00025A  0E00               	movlw	0
   848  00025C  0100               	movlb	0	; () banked
   849  00025E  6FB8               	movwf	main@TXtime& (0+255),b
   850  000260                     l1807:
   851                           
   852                           ; BSR set to: 0
   853                           ;main.c: 289: }
   854                           ;main.c: 291: _delay((unsigned long)((50)*(64000000/4000000.0)));
   855  000260  0EC8               	movlw	200
   856  000262                     u1027:
   857  000262  F000               	nop	
   858  000264  2EE8               	decfsz	wreg,f,c
   859  000266  D7FD               	goto	u1027
   860                           
   861                           ;main.c: 292: TXtime++;
   862  000268  0100               	movlb	0	; () banked
   863  00026A  4BB8               	infsnz	main@TXtime& (0+255),f,b
   864  00026C  2BB9               	incf	(main@TXtime+1)& (0+255),f,b
   865                           
   866                           ;main.c: 293: }
   867  00026E  D7A4               	goto	l1767
   868  000270                     __end_of_main:
   869                           	opt stack 0
   870                           tblptru	equ	0xFF8
   871                           tblptrh	equ	0xFF7
   872                           tblptrl	equ	0xFF6
   873                           tablat	equ	0xFF5
   874                           postinc0	equ	0xFEE
   875                           wreg	equ	0xFE8
   876                           postdec1	equ	0xFE5
   877                           fsr1l	equ	0xFE1
   878                           status	equ	0xFD8
   879                           
   880 ;; *************** function _spiConfig_1 *****************
   881 ;; Defined at:
   882 ;;		line 367 in file "main.c"
   883 ;; Parameters:    Size  Location     Type
   884 ;;  spiSpeed        2    6[BANK0 ] unsigned int 
   885 ;; Auto vars:     Size  Location     Type
   886 ;;  sspAddVal       2   16[BANK0 ] unsigned int 
   887 ;; Return value:  Size  Location     Type
   888 ;;		None               void
   889 ;; Registers used:
   890 ;;		wreg, status,2, status,0, cstack
   891 ;; Tracked objects:
   892 ;;		On entry : 0/0
   893 ;;		On exit  : 0/0
   894 ;;		Unchanged: 0/0
   895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   896 ;;      Params:         0       2       0       0
   897 ;;      Locals:         0       6       0       0
   898 ;;      Temps:          0       4       0       0
   899 ;;      Totals:         0      12       0       0
   900 ;;Total ram usage:       12 bytes
   901 ;; Hardware stack levels used:    1
   902 ;; Hardware stack levels required when called:    5
   903 ;; This function calls:
   904 ;;		___aldiv
   905 ;; This function is called by:
   906 ;;		_main
   907 ;; This function uses a non-reentrant model
   908 ;;
   909                           
   910                           	psect	text1
   911  00053A                     __ptext1:
   912                           	opt stack 0
   913  00053A                     _spiConfig_1:
   914                           	opt stack 25
   915                           
   916                           ;main.c: 369: SSP1CON1bits.CKP = 0;
   917                           
   918                           ; BSR set to: 0
   919                           ;incstack = 0
   920  00053A  98C6               	bcf	4038,4,c	;volatile
   921                           
   922                           ;main.c: 370: SSP1STATbits.CKE = 1;
   923  00053C  8CC7               	bsf	4039,6,c	;volatile
   924                           
   925                           ;main.c: 371: SSP1STATbits.SMP = 1;
   926  00053E  8EC7               	bsf	4039,7,c	;volatile
   927                           
   928                           ;main.c: 374: unsigned int sspAddVal = (((64000000/100000)/spiSpeed)/4)-1;
   929  000540  0100               	movlb	0	; () banked
   930  000542  C0AA  F026         	movff	spiConfig_1@spiSpeed,___aldiv@divisor
   931  000546  0100               	movlb	0	; () banked
   932  000548  C0AB  F027         	movff	spiConfig_1@spiSpeed+1,___aldiv@divisor+1
   933  00054C  6A28               	clrf	___aldiv@divisor+2,c
   934  00054E  6A29               	clrf	___aldiv@divisor+3,c
   935  000550  0E80               	movlw	128
   936  000552  6E22               	movwf	___aldiv@dividend,c
   937  000554  0E02               	movlw	2
   938  000556  6E23               	movwf	___aldiv@dividend+1,c
   939  000558  0E00               	movlw	0
   940  00055A  6E24               	movwf	___aldiv@dividend+2,c
   941  00055C  0E00               	movlw	0
   942  00055E  6E25               	movwf	___aldiv@dividend+3,c
   943  000560  EC38  F001         	call	___aldiv	;wreg free
   944  000564  C022  F0B0         	movff	?___aldiv,_spiConfig_1$1495
   945  000568  C023  F0B1         	movff	?___aldiv+1,_spiConfig_1$1495+1
   946  00056C  C024  F0B2         	movff	?___aldiv+2,_spiConfig_1$1495+2
   947  000570  C025  F0B3         	movff	?___aldiv+3,_spiConfig_1$1495+3
   948                           
   949                           ;main.c: 374: unsigned int sspAddVal = (((64000000/100000)/spiSpeed)/4)-1;
   950  000574  C0B0  F022         	movff	_spiConfig_1$1495,___aldiv@dividend
   951  000578  C0B1  F023         	movff	_spiConfig_1$1495+1,___aldiv@dividend+1
   952  00057C  C0B2  F024         	movff	_spiConfig_1$1495+2,___aldiv@dividend+2
   953  000580  C0B3  F025         	movff	_spiConfig_1$1495+3,___aldiv@dividend+3
   954  000584  0E04               	movlw	4
   955  000586  6E26               	movwf	___aldiv@divisor,c
   956  000588  0E00               	movlw	0
   957  00058A  6E27               	movwf	___aldiv@divisor+1,c
   958  00058C  0E00               	movlw	0
   959  00058E  6E28               	movwf	___aldiv@divisor+2,c
   960  000590  0E00               	movlw	0
   961  000592  6E29               	movwf	___aldiv@divisor+3,c
   962  000594  EC38  F001         	call	___aldiv	;wreg free
   963  000598  C022  F0AC         	movff	?___aldiv,??_spiConfig_1
   964  00059C  C023  F0AD         	movff	?___aldiv+1,??_spiConfig_1+1
   965  0005A0  C024  F0AE         	movff	?___aldiv+2,??_spiConfig_1+2
   966  0005A4  C025  F0AF         	movff	?___aldiv+3,??_spiConfig_1+3
   967  0005A8  0EFF               	movlw	255
   968  0005AA  0100               	movlb	0	; () banked
   969  0005AC  25AC               	addwf	??_spiConfig_1& (0+255),w,b
   970  0005AE  0100               	movlb	0	; () banked
   971  0005B0  6FB4               	movwf	spiConfig_1@sspAddVal& (0+255),b
   972  0005B2  0EFF               	movlw	255
   973  0005B4  0100               	movlb	0	; () banked
   974  0005B6  21AD               	addwfc	(??_spiConfig_1+1)& (0+255),w,b
   975  0005B8  0100               	movlb	0	; () banked
   976  0005BA  6FB5               	movwf	(spiConfig_1@sspAddVal+1)& (0+255),b
   977                           
   978                           ; BSR set to: 0
   979                           ;main.c: 375: SSP1ADD = sspAddVal;
   980  0005BC  C0B4  FFC8         	movff	spiConfig_1@sspAddVal,4040	;volatile
   981                           
   982                           ; BSR set to: 0
   983                           ;main.c: 376: SSP1CON1bits.SSPM = 0b1010;
   984  0005C0  50C6               	movf	4038,w,c	;volatile
   985  0005C2  0BF0               	andlw	-16
   986  0005C4  090A               	iorlw	10
   987  0005C6  6EC6               	movwf	4038,c	;volatile
   988                           
   989                           ; BSR set to: 0
   990                           ;main.c: 378: SSP1CON1bits.SSPEN = 1;
   991  0005C8  8AC6               	bsf	4038,5,c	;volatile
   992                           
   993                           ; BSR set to: 0
   994                           ;main.c: 380: LATAbits.LATA2 = 1;
   995  0005CA  8489               	bsf	3977,2,c	;volatile
   996                           
   997                           ; BSR set to: 0
   998  0005CC  0012               	return	
   999  0005CE                     __end_of_spiConfig_1:
  1000                           	opt stack 0
  1001                           tblptru	equ	0xFF8
  1002                           tblptrh	equ	0xFF7
  1003                           tblptrl	equ	0xFF6
  1004                           tablat	equ	0xFF5
  1005                           postinc0	equ	0xFEE
  1006                           wreg	equ	0xFE8
  1007                           postdec1	equ	0xFE5
  1008                           fsr1l	equ	0xFE1
  1009                           status	equ	0xFD8
  1010                           
  1011 ;; *************** function ___aldiv *****************
  1012 ;; Defined at:
  1013 ;;		line 8 in file "F:\Program FIles (x86)\Microchip\xc8\v1.33\sources\common\aldiv.c"
  1014 ;; Parameters:    Size  Location     Type
  1015 ;;  dividend        4   33[COMRAM] long 
  1016 ;;  divisor         4   37[COMRAM] long 
  1017 ;; Auto vars:     Size  Location     Type
  1018 ;;  quotient        4    2[BANK0 ] long 
  1019 ;;  sign            1    1[BANK0 ] unsigned char 
  1020 ;;  counter         1    0[BANK0 ] unsigned char 
  1021 ;; Return value:  Size  Location     Type
  1022 ;;                  4   33[COMRAM] long 
  1023 ;; Registers used:
  1024 ;;		wreg, status,2, status,0
  1025 ;; Tracked objects:
  1026 ;;		On entry : 0/0
  1027 ;;		On exit  : 0/0
  1028 ;;		Unchanged: 0/0
  1029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1030 ;;      Params:         8       0       0       0
  1031 ;;      Locals:         0       6       0       0
  1032 ;;      Temps:          0       0       0       0
  1033 ;;      Totals:         8       6       0       0
  1034 ;;Total ram usage:       14 bytes
  1035 ;; Hardware stack levels used:    1
  1036 ;; Hardware stack levels required when called:    4
  1037 ;; This function calls:
  1038 ;;		Nothing
  1039 ;; This function is called by:
  1040 ;;		_spiConfig_1
  1041 ;; This function uses a non-reentrant model
  1042 ;;
  1043                           
  1044                           	psect	text2
  1045  000270                     __ptext2:
  1046                           	opt stack 0
  1047  000270                     ___aldiv:
  1048                           	opt stack 25
  1049                           
  1050                           ; BSR set to: 0
  1051                           ;incstack = 0
  1052  000270  0E00               	movlw	0
  1053  000272  0100               	movlb	0	; () banked
  1054  000274  6FA5               	movwf	___aldiv@sign& (0+255),b
  1055                           
  1056                           ; BSR set to: 0
  1057  000276  5029               	movf	___aldiv@divisor+3,w,c
  1058  000278  0A80               	xorlw	128
  1059  00027A  0F80               	addlw	128
  1060  00027C  E108               	bnz	u885
  1061  00027E  0E00               	movlw	0
  1062  000280  5C28               	subwf	___aldiv@divisor+2,w,c
  1063  000282  E105               	bnz	u885
  1064  000284  0E00               	movlw	0
  1065  000286  5C27               	subwf	___aldiv@divisor+1,w,c
  1066  000288  E102               	bnz	u885
  1067  00028A  0E00               	movlw	0
  1068  00028C  5C26               	subwf	___aldiv@divisor,w,c
  1069  00028E                     u885:
  1070  00028E  B0D8               	btfsc	status,0,c
  1071  000290  D00B               	goto	l1589
  1072                           
  1073                           ; BSR set to: 0
  1074  000292  1E29               	comf	___aldiv@divisor+3,f,c
  1075  000294  1E28               	comf	___aldiv@divisor+2,f,c
  1076  000296  1E27               	comf	___aldiv@divisor+1,f,c
  1077  000298  6C26               	negf	___aldiv@divisor,c
  1078  00029A  0E00               	movlw	0
  1079  00029C  2227               	addwfc	___aldiv@divisor+1,f,c
  1080  00029E  2228               	addwfc	___aldiv@divisor+2,f,c
  1081  0002A0  2229               	addwfc	___aldiv@divisor+3,f,c
  1082                           
  1083                           ; BSR set to: 0
  1084  0002A2  0E01               	movlw	1
  1085  0002A4  0100               	movlb	0	; () banked
  1086  0002A6  6FA5               	movwf	___aldiv@sign& (0+255),b
  1087  0002A8                     l1589:
  1088                           
  1089                           ; BSR set to: 0
  1090  0002A8  5025               	movf	___aldiv@dividend+3,w,c
  1091  0002AA  0A80               	xorlw	128
  1092  0002AC  0F80               	addlw	128
  1093  0002AE  E108               	bnz	u895
  1094  0002B0  0E00               	movlw	0
  1095  0002B2  5C24               	subwf	___aldiv@dividend+2,w,c
  1096  0002B4  E105               	bnz	u895
  1097  0002B6  0E00               	movlw	0
  1098  0002B8  5C23               	subwf	___aldiv@dividend+1,w,c
  1099  0002BA  E102               	bnz	u895
  1100  0002BC  0E00               	movlw	0
  1101  0002BE  5C22               	subwf	___aldiv@dividend,w,c
  1102  0002C0                     u895:
  1103  0002C0  B0D8               	btfsc	status,0,c
  1104  0002C2  D00B               	goto	l1595
  1105                           
  1106                           ; BSR set to: 0
  1107  0002C4  1E25               	comf	___aldiv@dividend+3,f,c
  1108  0002C6  1E24               	comf	___aldiv@dividend+2,f,c
  1109  0002C8  1E23               	comf	___aldiv@dividend+1,f,c
  1110  0002CA  6C22               	negf	___aldiv@dividend,c
  1111  0002CC  0E00               	movlw	0
  1112  0002CE  2223               	addwfc	___aldiv@dividend+1,f,c
  1113  0002D0  2224               	addwfc	___aldiv@dividend+2,f,c
  1114  0002D2  2225               	addwfc	___aldiv@dividend+3,f,c
  1115                           
  1116                           ; BSR set to: 0
  1117  0002D4  0E01               	movlw	1
  1118  0002D6  0100               	movlb	0	; () banked
  1119  0002D8  1BA5               	xorwf	___aldiv@sign& (0+255),f,b
  1120  0002DA                     l1595:
  1121                           
  1122                           ; BSR set to: 0
  1123  0002DA  0E00               	movlw	0
  1124  0002DC  0100               	movlb	0	; () banked
  1125  0002DE  6FA6               	movwf	___aldiv@quotient& (0+255),b
  1126  0002E0  0E00               	movlw	0
  1127  0002E2  0100               	movlb	0	; () banked
  1128  0002E4  6FA7               	movwf	(___aldiv@quotient+1)& (0+255),b
  1129  0002E6  0E00               	movlw	0
  1130  0002E8  0100               	movlb	0	; () banked
  1131  0002EA  6FA8               	movwf	(___aldiv@quotient+2)& (0+255),b
  1132  0002EC  0E00               	movlw	0
  1133  0002EE  0100               	movlb	0	; () banked
  1134  0002F0  6FA9               	movwf	(___aldiv@quotient+3)& (0+255),b
  1135                           
  1136                           ; BSR set to: 0
  1137  0002F2  5029               	movf	___aldiv@divisor+3,w,c
  1138  0002F4  1026               	iorwf	___aldiv@divisor,w,c
  1139  0002F6  1027               	iorwf	___aldiv@divisor+1,w,c
  1140  0002F8  1028               	iorwf	___aldiv@divisor+2,w,c
  1141  0002FA  B4D8               	btfsc	status,2,c
  1142  0002FC  D033               	goto	l1617
  1143                           
  1144                           ; BSR set to: 0
  1145  0002FE  0E01               	movlw	1
  1146  000300  0100               	movlb	0	; () banked
  1147  000302  6FA4               	movwf	___aldiv@counter& (0+255),b
  1148  000304  D007               	goto	l1603
  1149  000306                     l1601:
  1150                           
  1151                           ; BSR set to: 0
  1152  000306  90D8               	bcf	status,0,c
  1153  000308  3626               	rlcf	___aldiv@divisor,f,c
  1154  00030A  3627               	rlcf	___aldiv@divisor+1,f,c
  1155  00030C  3628               	rlcf	___aldiv@divisor+2,f,c
  1156  00030E  3629               	rlcf	___aldiv@divisor+3,f,c
  1157  000310  0100               	movlb	0	; () banked
  1158  000312  2BA4               	incf	___aldiv@counter& (0+255),f,b
  1159  000314                     l1603:
  1160                           
  1161                           ; BSR set to: 0
  1162  000314  AE29               	btfss	___aldiv@divisor+3,7,c
  1163  000316  D7F7               	goto	l1601
  1164  000318                     l1605:
  1165                           
  1166                           ; BSR set to: 0
  1167  000318  0100               	movlb	0	; () banked
  1168  00031A  90D8               	bcf	status,0,c
  1169  00031C  0100               	movlb	0	; () banked
  1170  00031E  37A6               	rlcf	___aldiv@quotient& (0+255),f,b
  1171  000320  0100               	movlb	0	; () banked
  1172  000322  37A7               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  1173  000324  0100               	movlb	0	; () banked
  1174  000326  37A8               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  1175  000328  0100               	movlb	0	; () banked
  1176  00032A  37A9               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  1177                           
  1178                           ; BSR set to: 0
  1179  00032C  5026               	movf	___aldiv@divisor,w,c
  1180  00032E  5C22               	subwf	___aldiv@dividend,w,c
  1181  000330  5027               	movf	___aldiv@divisor+1,w,c
  1182  000332  5823               	subwfb	___aldiv@dividend+1,w,c
  1183  000334  5028               	movf	___aldiv@divisor+2,w,c
  1184  000336  5824               	subwfb	___aldiv@dividend+2,w,c
  1185  000338  5029               	movf	___aldiv@divisor+3,w,c
  1186  00033A  5825               	subwfb	___aldiv@dividend+3,w,c
  1187  00033C  A0D8               	btfss	status,0,c
  1188  00033E  D00A               	goto	l1613
  1189                           
  1190                           ; BSR set to: 0
  1191  000340  5026               	movf	___aldiv@divisor,w,c
  1192  000342  5E22               	subwf	___aldiv@dividend,f,c
  1193  000344  5027               	movf	___aldiv@divisor+1,w,c
  1194  000346  5A23               	subwfb	___aldiv@dividend+1,f,c
  1195  000348  5028               	movf	___aldiv@divisor+2,w,c
  1196  00034A  5A24               	subwfb	___aldiv@dividend+2,f,c
  1197  00034C  5029               	movf	___aldiv@divisor+3,w,c
  1198  00034E  5A25               	subwfb	___aldiv@dividend+3,f,c
  1199                           
  1200                           ; BSR set to: 0
  1201  000350  0100               	movlb	0	; () banked
  1202  000352  81A6               	bsf	___aldiv@quotient& (0+255),0,b
  1203  000354                     l1613:
  1204                           
  1205                           ; BSR set to: 0
  1206  000354  90D8               	bcf	status,0,c
  1207  000356  3229               	rrcf	___aldiv@divisor+3,f,c
  1208  000358  3228               	rrcf	___aldiv@divisor+2,f,c
  1209  00035A  3227               	rrcf	___aldiv@divisor+1,f,c
  1210  00035C  3226               	rrcf	___aldiv@divisor,f,c
  1211                           
  1212                           ; BSR set to: 0
  1213  00035E  0100               	movlb	0	; () banked
  1214  000360  2FA4               	decfsz	___aldiv@counter& (0+255),f,b
  1215  000362  D7DA               	goto	l1605
  1216  000364                     l1617:
  1217                           
  1218                           ; BSR set to: 0
  1219  000364  0100               	movlb	0	; () banked
  1220  000366  51A5               	movf	___aldiv@sign& (0+255),w,b
  1221  000368  B4D8               	btfsc	status,2,c
  1222  00036A  D00F               	goto	l1621
  1223                           
  1224                           ; BSR set to: 0
  1225  00036C  0100               	movlb	0	; () banked
  1226  00036E  1FA9               	comf	(___aldiv@quotient+3)& (0+255),f,b
  1227  000370  0100               	movlb	0	; () banked
  1228  000372  1FA8               	comf	(___aldiv@quotient+2)& (0+255),f,b
  1229  000374  0100               	movlb	0	; () banked
  1230  000376  1FA7               	comf	(___aldiv@quotient+1)& (0+255),f,b
  1231  000378  0100               	movlb	0	; () banked
  1232  00037A  6DA6               	negf	___aldiv@quotient& (0+255),b
  1233  00037C  0E00               	movlw	0
  1234  00037E  0100               	movlb	0	; () banked
  1235  000380  23A7               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  1236  000382  0100               	movlb	0	; () banked
  1237  000384  23A8               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  1238  000386  0100               	movlb	0	; () banked
  1239  000388  23A9               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  1240  00038A                     l1621:
  1241                           
  1242                           ; BSR set to: 0
  1243  00038A  C0A6  F022         	movff	___aldiv@quotient,?___aldiv
  1244  00038E  C0A7  F023         	movff	___aldiv@quotient+1,?___aldiv+1
  1245  000392  C0A8  F024         	movff	___aldiv@quotient+2,?___aldiv+2
  1246  000396  C0A9  F025         	movff	___aldiv@quotient+3,?___aldiv+3
  1247  00039A  0012               	return	
  1248  00039C                     __end_of___aldiv:
  1249                           	opt stack 0
  1250                           tblptru	equ	0xFF8
  1251                           tblptrh	equ	0xFF7
  1252                           tblptrl	equ	0xFF6
  1253                           tablat	equ	0xFF5
  1254                           postinc0	equ	0xFEE
  1255                           wreg	equ	0xFE8
  1256                           postdec1	equ	0xFE5
  1257                           fsr1l	equ	0xFE1
  1258                           status	equ	0xFD8
  1259                           
  1260 ;; *************** function _portConfig *****************
  1261 ;; Defined at:
  1262 ;;		line 351 in file "main.c"
  1263 ;; Parameters:    Size  Location     Type
  1264 ;;		None
  1265 ;; Auto vars:     Size  Location     Type
  1266 ;;		None
  1267 ;; Return value:  Size  Location     Type
  1268 ;;		None               void
  1269 ;; Registers used:
  1270 ;;		wreg, status,2
  1271 ;; Tracked objects:
  1272 ;;		On entry : 0/0
  1273 ;;		On exit  : 0/0
  1274 ;;		Unchanged: 0/0
  1275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1276 ;;      Params:         0       0       0       0
  1277 ;;      Locals:         0       0       0       0
  1278 ;;      Temps:          0       0       0       0
  1279 ;;      Totals:         0       0       0       0
  1280 ;;Total ram usage:        0 bytes
  1281 ;; Hardware stack levels used:    1
  1282 ;; Hardware stack levels required when called:    4
  1283 ;; This function calls:
  1284 ;;		Nothing
  1285 ;; This function is called by:
  1286 ;;		_main
  1287 ;; This function uses a non-reentrant model
  1288 ;;
  1289                           
  1290                           	psect	text3
  1291  0008DC                     __ptext3:
  1292                           	opt stack 0
  1293  0008DC                     _portConfig:
  1294                           	opt stack 26
  1295                           
  1296                           ;main.c: 352: TRISA = 0b00000000;
  1297                           
  1298                           ; BSR set to: 0
  1299                           ;incstack = 0
  1300  0008DC  0E00               	movlw	0
  1301  0008DE  6E92               	movwf	3986,c	;volatile
  1302                           
  1303                           ;main.c: 353: TRISB = 0b00010000;
  1304  0008E0  0E10               	movlw	16
  1305  0008E2  6E93               	movwf	3987,c	;volatile
  1306                           
  1307                           ;main.c: 354: TRISC = 0b00010000;
  1308  0008E4  0E10               	movlw	16
  1309  0008E6  6E94               	movwf	3988,c	;volatile
  1310                           
  1311                           ;main.c: 356: LATA = 0b00000100;
  1312  0008E8  0E04               	movlw	4
  1313  0008EA  6E89               	movwf	3977,c	;volatile
  1314                           
  1315                           ;main.c: 357: LATB = 0x00;
  1316  0008EC  0E00               	movlw	0
  1317  0008EE  6E8A               	movwf	3978,c	;volatile
  1318                           
  1319                           ;main.c: 358: LATC = 0x00;
  1320  0008F0  0E00               	movlw	0
  1321  0008F2  6E8B               	movwf	3979,c	;volatile
  1322  0008F4  0012               	return	
  1323  0008F6                     __end_of_portConfig:
  1324                           	opt stack 0
  1325                           tblptru	equ	0xFF8
  1326                           tblptrh	equ	0xFF7
  1327                           tblptrl	equ	0xFF6
  1328                           tablat	equ	0xFF5
  1329                           postinc0	equ	0xFEE
  1330                           wreg	equ	0xFE8
  1331                           postdec1	equ	0xFE5
  1332                           fsr1l	equ	0xFE1
  1333                           status	equ	0xFD8
  1334                           
  1335 ;; *************** function _nrfTXData *****************
  1336 ;; Defined at:
  1337 ;;		line 556 in file "main.c"
  1338 ;; Parameters:    Size  Location     Type
  1339 ;;  len             2   35[COMRAM] int 
  1340 ;; Auto vars:     Size  Location     Type
  1341 ;;  i               2   38[COMRAM] int 
  1342 ;; Return value:  Size  Location     Type
  1343 ;;		None               void
  1344 ;; Registers used:
  1345 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1346 ;; Tracked objects:
  1347 ;;		On entry : 0/0
  1348 ;;		On exit  : 0/0
  1349 ;;		Unchanged: 0/0
  1350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1351 ;;      Params:         2       0       0       0
  1352 ;;      Locals:         2       0       0       0
  1353 ;;      Temps:          1       0       0       0
  1354 ;;      Totals:         5       0       0       0
  1355 ;;Total ram usage:        5 bytes
  1356 ;; Hardware stack levels used:    1
  1357 ;; Hardware stack levels required when called:    5
  1358 ;; This function calls:
  1359 ;;		_setCSN
  1360 ;;		_spiTransferByte
  1361 ;; This function is called by:
  1362 ;;		_main
  1363 ;; This function uses a non-reentrant model
  1364 ;;
  1365                           
  1366                           	psect	text4
  1367  0006CE                     __ptext4:
  1368                           	opt stack 0
  1369  0006CE                     _nrfTXData:
  1370                           	opt stack 25
  1371                           
  1372                           ;main.c: 558: setCSN(0);
  1373                           
  1374                           ;incstack = 0
  1375  0006CE  0E00               	movlw	0
  1376  0006D0  6E23               	movwf	setCSN@level+1,c
  1377  0006D2  0E00               	movlw	0
  1378  0006D4  6E22               	movwf	setCSN@level,c
  1379  0006D6  EC95  F004         	call	_setCSN	;wreg free
  1380                           
  1381                           ;main.c: 560: spiTransferByte(0xA0);
  1382  0006DA  0EA0               	movlw	160
  1383  0006DC  EC8D  F004         	call	_spiTransferByte
  1384                           
  1385                           ;main.c: 562: if (len != 0) {
  1386  0006E0  5025               	movf	nrfTXData@len+1,w,c
  1387  0006E2  1024               	iorwf	nrfTXData@len,w,c
  1388  0006E4  B4D8               	btfsc	status,2,c
  1389  0006E6  D01C               	goto	l1677
  1390                           
  1391                           ;main.c: 563: for (int i=0;i<len;i++) {
  1392  0006E8  0E00               	movlw	0
  1393  0006EA  6E28               	movwf	nrfTXData@i+1,c
  1394  0006EC  0E00               	movlw	0
  1395  0006EE  6E27               	movwf	nrfTXData@i,c
  1396  0006F0  D00D               	goto	l1675
  1397  0006F2                     l1671:
  1398                           
  1399                           ;main.c: 564: spiTransferByte(dataBufOut[i]);
  1400  0006F2  0100               	movlb	0	; () banked
  1401  0006F4  0E80               	movlw	low _dataBufOut
  1402  0006F6  2427               	addwf	nrfTXData@i,w,c
  1403  0006F8  6ED9               	movwf	fsr2l,c
  1404  0006FA  0100               	movlb	0	; () banked
  1405  0006FC  0E00               	movlw	high _dataBufOut
  1406  0006FE  2028               	addwfc	nrfTXData@i+1,w,c
  1407  000700  6EDA               	movwf	fsr2h,c
  1408  000702  50DF               	movf	indf2,w,c
  1409  000704  EC8D  F004         	call	_spiTransferByte
  1410  000708  4A27               	infsnz	nrfTXData@i,f,c
  1411  00070A  2A28               	incf	nrfTXData@i+1,f,c
  1412  00070C                     l1675:
  1413  00070C  5028               	movf	nrfTXData@i+1,w,c
  1414  00070E  0A80               	xorlw	128
  1415  000710  6E26               	movwf	??_nrfTXData& (0+255),c
  1416  000712  5024               	movf	nrfTXData@len,w,c
  1417  000714  5C27               	subwf	nrfTXData@i,w,c
  1418  000716  5025               	movf	nrfTXData@len+1,w,c
  1419  000718  0A80               	xorlw	128
  1420  00071A  5826               	subwfb	??_nrfTXData& (0+255),w,c
  1421  00071C  A0D8               	btfss	status,0,c
  1422  00071E  D7E9               	goto	l1671
  1423  000720                     l1677:
  1424                           
  1425                           ;main.c: 565: }
  1426                           ;main.c: 566: }
  1427                           ;main.c: 568: setCSN(1);
  1428  000720  0E00               	movlw	0
  1429  000722  6E23               	movwf	setCSN@level+1,c
  1430  000724  0E01               	movlw	1
  1431  000726  6E22               	movwf	setCSN@level,c
  1432  000728  EC95  F004         	call	_setCSN	;wreg free
  1433                           
  1434                           ;main.c: 571: LATAbits.LATA1 = 1;
  1435  00072C  8289               	bsf	3977,1,c	;volatile
  1436                           
  1437                           ;main.c: 572: _delay((unsigned long)((12)*(64000000/4000000.0)));
  1438  00072E  0E40               	movlw	64
  1439  000730                     u1037:
  1440  000730  2EE8               	decfsz	wreg,f,c
  1441  000732  D7FE               	goto	u1037
  1442                           
  1443                           ;main.c: 573: LATAbits.LATA1 = 0;
  1444  000734  9289               	bcf	3977,1,c	;volatile
  1445                           
  1446                           ;main.c: 579: nrfBusy = 1;
  1447  000736  0E01               	movlw	1
  1448  000738  0100               	movlb	0	; () banked
  1449  00073A  6FA0               	movwf	_nrfBusy& (0+255),b
  1450                           
  1451                           ; BSR set to: 0
  1452  00073C  0012               	return	
  1453  00073E                     __end_of_nrfTXData:
  1454                           	opt stack 0
  1455                           tblptru	equ	0xFF8
  1456                           tblptrh	equ	0xFF7
  1457                           tblptrl	equ	0xFF6
  1458                           tablat	equ	0xFF5
  1459                           postinc0	equ	0xFEE
  1460                           wreg	equ	0xFE8
  1461                           postdec1	equ	0xFE5
  1462                           fsr1l	equ	0xFE1
  1463                           indf2	equ	0xFDF
  1464                           fsr2h	equ	0xFDA
  1465                           fsr2l	equ	0xFD9
  1466                           status	equ	0xFD8
  1467                           
  1468 ;; *************** function _nrfGetStatus *****************
  1469 ;; Defined at:
  1470 ;;		line 438 in file "main.c"
  1471 ;; Parameters:    Size  Location     Type
  1472 ;;		None
  1473 ;; Auto vars:     Size  Location     Type
  1474 ;;		None
  1475 ;; Return value:  Size  Location     Type
  1476 ;;		None               void
  1477 ;; Registers used:
  1478 ;;		wreg, status,2, status,0, cstack
  1479 ;; Tracked objects:
  1480 ;;		On entry : 0/0
  1481 ;;		On exit  : 0/0
  1482 ;;		Unchanged: 0/0
  1483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1484 ;;      Params:         0       0       0       0
  1485 ;;      Locals:         0       0       0       0
  1486 ;;      Temps:          0       0       0       0
  1487 ;;      Totals:         0       0       0       0
  1488 ;;Total ram usage:        0 bytes
  1489 ;; Hardware stack levels used:    1
  1490 ;; Hardware stack levels required when called:    5
  1491 ;; This function calls:
  1492 ;;		_setCSN
  1493 ;;		_spiTransferByte
  1494 ;; This function is called by:
  1495 ;;		_main
  1496 ;; This function uses a non-reentrant model
  1497 ;;
  1498                           
  1499                           	psect	text5
  1500  000898                     __ptext5:
  1501                           	opt stack 0
  1502  000898                     _nrfGetStatus:
  1503                           	opt stack 25
  1504                           
  1505                           ;main.c: 440: setCSN(0);
  1506                           
  1507                           ; BSR set to: 0
  1508                           ;incstack = 0
  1509  000898  0E00               	movlw	0
  1510  00089A  6E23               	movwf	setCSN@level+1,c
  1511  00089C  0E00               	movlw	0
  1512  00089E  6E22               	movwf	setCSN@level,c
  1513  0008A0  EC95  F004         	call	_setCSN	;wreg free
  1514                           
  1515                           ;main.c: 442: nrfSTATUS = spiTransferByte(0xFF);
  1516  0008A4  0EFF               	movlw	255
  1517  0008A6  EC8D  F004         	call	_spiTransferByte
  1518  0008AA  6E3D               	movwf	_nrfSTATUS,c
  1519                           
  1520                           ;main.c: 444: setCSN(1);
  1521  0008AC  0E00               	movlw	0
  1522  0008AE  6E23               	movwf	setCSN@level+1,c
  1523  0008B0  0E01               	movlw	1
  1524  0008B2  6E22               	movwf	setCSN@level,c
  1525  0008B4  EC95  F004         	call	_setCSN	;wreg free
  1526  0008B8  0012               	return	
  1527  0008BA                     __end_of_nrfGetStatus:
  1528                           	opt stack 0
  1529                           tblptru	equ	0xFF8
  1530                           tblptrh	equ	0xFF7
  1531                           tblptrl	equ	0xFF6
  1532                           tablat	equ	0xFF5
  1533                           postinc0	equ	0xFEE
  1534                           wreg	equ	0xFE8
  1535                           postdec1	equ	0xFE5
  1536                           fsr1l	equ	0xFE1
  1537                           indf2	equ	0xFDF
  1538                           fsr2h	equ	0xFDA
  1539                           fsr2l	equ	0xFD9
  1540                           status	equ	0xFD8
  1541                           
  1542 ;; *************** function _nrfConfig *****************
  1543 ;; Defined at:
  1544 ;;		line 386 in file "main.c"
  1545 ;; Parameters:    Size  Location     Type
  1546 ;;		None
  1547 ;; Auto vars:     Size  Location     Type
  1548 ;;		None
  1549 ;; Return value:  Size  Location     Type
  1550 ;;		None               void
  1551 ;; Registers used:
  1552 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1553 ;; Tracked objects:
  1554 ;;		On entry : 0/0
  1555 ;;		On exit  : 0/0
  1556 ;;		Unchanged: 0/0
  1557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1558 ;;      Params:         0       0       0       0
  1559 ;;      Locals:         0       0       0       0
  1560 ;;      Temps:          0       0       0       0
  1561 ;;      Totals:         0       0       0       0
  1562 ;;Total ram usage:        0 bytes
  1563 ;; Hardware stack levels used:    1
  1564 ;; Hardware stack levels required when called:    6
  1565 ;; This function calls:
  1566 ;;		_nrfConfigReg
  1567 ;;		_nrfSetRXAddr
  1568 ;;		_nrfSetTXAddr
  1569 ;;		_spiTransfer
  1570 ;; This function is called by:
  1571 ;;		_main
  1572 ;; This function uses a non-reentrant model
  1573 ;;
  1574                           
  1575                           	psect	text6
  1576  00039C                     __ptext6:
  1577                           	opt stack 0
  1578  00039C                     _nrfConfig:
  1579                           	opt stack 24
  1580                           
  1581                           ;main.c: 389: nrfConfigReg('w',0x00,CONFIG_CURR);
  1582                           
  1583                           ;incstack = 0
  1584  00039C  0E00               	movlw	0
  1585  00039E  6E24               	movwf	nrfConfigReg@command,c
  1586  0003A0  C02B  F025         	movff	_CONFIG_CURR,nrfConfigReg@data
  1587  0003A4  0E77               	movlw	119
  1588  0003A6  ECCD  F003         	call	_nrfConfigReg
  1589                           
  1590                           ;main.c: 391: nrfConfigReg('w',0x01,EN_AA_CURR);
  1591  0003AA  0E01               	movlw	1
  1592  0003AC  6E24               	movwf	nrfConfigReg@command,c
  1593  0003AE  C02D  F025         	movff	_EN_AA_CURR,nrfConfigReg@data
  1594  0003B2  0E77               	movlw	119
  1595  0003B4  ECCD  F003         	call	_nrfConfigReg
  1596                           
  1597                           ;main.c: 393: nrfConfigReg('w',0x02,EN_RXADDR_CURR);
  1598  0003B8  0E02               	movlw	2
  1599  0003BA  6E24               	movwf	nrfConfigReg@command,c
  1600  0003BC  C02E  F025         	movff	_EN_RXADDR_CURR,nrfConfigReg@data
  1601  0003C0  0E77               	movlw	119
  1602  0003C2  ECCD  F003         	call	_nrfConfigReg
  1603                           
  1604                           ;main.c: 395: nrfConfigReg('w',0x03,SETUP_AW_CURR);
  1605  0003C6  0E03               	movlw	3
  1606  0003C8  6E24               	movwf	nrfConfigReg@command,c
  1607  0003CA  C033  F025         	movff	_SETUP_AW_CURR,nrfConfigReg@data
  1608  0003CE  0E77               	movlw	119
  1609  0003D0  ECCD  F003         	call	_nrfConfigReg
  1610                           
  1611                           ;main.c: 397: nrfConfigReg('w',0x04,SETUP_RETR_CURR);
  1612  0003D4  0E04               	movlw	4
  1613  0003D6  6E24               	movwf	nrfConfigReg@command,c
  1614  0003D8  C034  F025         	movff	_SETUP_RETR_CURR,nrfConfigReg@data
  1615  0003DC  0E77               	movlw	119
  1616  0003DE  ECCD  F003         	call	_nrfConfigReg
  1617                           
  1618                           ;main.c: 399: nrfConfigReg('w',0x05,RF_CH_CURR);
  1619  0003E2  0E05               	movlw	5
  1620  0003E4  6E24               	movwf	nrfConfigReg@command,c
  1621  0003E6  C030  F025         	movff	_RF_CH_CURR,nrfConfigReg@data
  1622  0003EA  0E77               	movlw	119
  1623  0003EC  ECCD  F003         	call	_nrfConfigReg
  1624                           
  1625                           ;main.c: 401: nrfConfigReg('w',0x06,RF_SETUP_CURR);
  1626  0003F0  0E06               	movlw	6
  1627  0003F2  6E24               	movwf	nrfConfigReg@command,c
  1628  0003F4  C031  F025         	movff	_RF_SETUP_CURR,nrfConfigReg@data
  1629  0003F8  0E77               	movlw	119
  1630  0003FA  ECCD  F003         	call	_nrfConfigReg
  1631                           
  1632                           ;main.c: 403: nrfSetRXAddr(0x0A,TX_ADDRESS,4);
  1633  0003FE  0E00               	movlw	high _TX_ADDRESS
  1634  000400  6E25               	movwf	nrfSetRXAddr@addr+1,c
  1635  000402  0E39               	movlw	low _TX_ADDRESS
  1636  000404  6E24               	movwf	nrfSetRXAddr@addr,c
  1637  000406  0E00               	movlw	0
  1638  000408  6E27               	movwf	nrfSetRXAddr@len+1,c
  1639  00040A  0E04               	movlw	4
  1640  00040C  6E26               	movwf	nrfSetRXAddr@len,c
  1641  00040E  0E0A               	movlw	10
  1642  000410  EC2E  F003         	call	_nrfSetRXAddr
  1643                           
  1644                           ;main.c: 405: nrfSetRXAddr(0x0B,RX_ADDRESS,4);
  1645  000414  0E00               	movlw	high _RX_ADDRESS
  1646  000416  6E25               	movwf	nrfSetRXAddr@addr+1,c
  1647  000418  0E35               	movlw	low _RX_ADDRESS
  1648  00041A  6E24               	movwf	nrfSetRXAddr@addr,c
  1649  00041C  0E00               	movlw	0
  1650  00041E  6E27               	movwf	nrfSetRXAddr@len+1,c
  1651  000420  0E04               	movlw	4
  1652  000422  6E26               	movwf	nrfSetRXAddr@len,c
  1653  000424  0E0B               	movlw	11
  1654  000426  EC2E  F003         	call	_nrfSetRXAddr
  1655                           
  1656                           ;main.c: 407: nrfSetTXAddr(TX_ADDRESS,4);
  1657  00042A  0E00               	movlw	high _TX_ADDRESS
  1658  00042C  6E25               	movwf	nrfSetTXAddr@addr+1,c
  1659  00042E  0E39               	movlw	low _TX_ADDRESS
  1660  000430  6E24               	movwf	nrfSetTXAddr@addr,c
  1661  000432  0E00               	movlw	0
  1662  000434  6E27               	movwf	nrfSetTXAddr@len+1,c
  1663  000436  0E04               	movlw	4
  1664  000438  6E26               	movwf	nrfSetTXAddr@len,c
  1665  00043A  EC9F  F003         	call	_nrfSetTXAddr	;wreg free
  1666                           
  1667                           ;main.c: 409: nrfConfigReg('w',0x12,RX_PW_P0_CURR);
  1668  00043E  0E12               	movlw	18
  1669  000440  6E24               	movwf	nrfConfigReg@command,c
  1670  000442  C032  F025         	movff	_RX_PW_P0_CURR,nrfConfigReg@data
  1671  000446  0E77               	movlw	119
  1672  000448  ECCD  F003         	call	_nrfConfigReg
  1673                           
  1674                           ;main.c: 411: nrfConfigReg('w',0x11,RX_PW_P0_CURR);
  1675  00044C  0E11               	movlw	17
  1676  00044E  6E24               	movwf	nrfConfigReg@command,c
  1677  000450  C032  F025         	movff	_RX_PW_P0_CURR,nrfConfigReg@data
  1678  000454  0E77               	movlw	119
  1679  000456  ECCD  F003         	call	_nrfConfigReg
  1680                           
  1681                           ;main.c: 413: nrfConfigReg('w',0x1C,DYNPD_CURR);
  1682  00045A  0E1C               	movlw	28
  1683  00045C  6E24               	movwf	nrfConfigReg@command,c
  1684  00045E  C02C  F025         	movff	_DYNPD_CURR,nrfConfigReg@data
  1685  000462  0E77               	movlw	119
  1686  000464  ECCD  F003         	call	_nrfConfigReg
  1687                           
  1688                           ;main.c: 415: nrfConfigReg('w',0x1D,FEATURE_CURR);
  1689  000468  0E1D               	movlw	29
  1690  00046A  6E24               	movwf	nrfConfigReg@command,c
  1691  00046C  C02F  F025         	movff	_FEATURE_CURR,nrfConfigReg@data
  1692  000470  0E77               	movlw	119
  1693  000472  ECCD  F003         	call	_nrfConfigReg
  1694                           
  1695                           ;main.c: 417: spiTransfer('n',0xE1,0);
  1696  000476  0EE1               	movlw	225
  1697  000478  6E24               	movwf	spiTransfer@command,c
  1698  00047A  0E00               	movlw	0
  1699  00047C  6E26               	movwf	spiTransfer@len+1,c
  1700  00047E  0E00               	movlw	0
  1701  000480  6E25               	movwf	spiTransfer@len,c
  1702  000482  0E6E               	movlw	110
  1703  000484  EC4E  F002         	call	_spiTransfer
  1704                           
  1705                           ;main.c: 419: spiTransfer('n',0xE2,0);
  1706  000488  0EE2               	movlw	226
  1707  00048A  6E24               	movwf	spiTransfer@command,c
  1708  00048C  0E00               	movlw	0
  1709  00048E  6E26               	movwf	spiTransfer@len+1,c
  1710  000490  0E00               	movlw	0
  1711  000492  6E25               	movwf	spiTransfer@len,c
  1712  000494  0E6E               	movlw	110
  1713  000496  EC4E  F002         	call	_spiTransfer
  1714  00049A  0012               	return	
  1715  00049C                     __end_of_nrfConfig:
  1716                           	opt stack 0
  1717                           tblptru	equ	0xFF8
  1718                           tblptrh	equ	0xFF7
  1719                           tblptrl	equ	0xFF6
  1720                           tablat	equ	0xFF5
  1721                           postinc0	equ	0xFEE
  1722                           wreg	equ	0xFE8
  1723                           postdec1	equ	0xFE5
  1724                           fsr1l	equ	0xFE1
  1725                           indf2	equ	0xFDF
  1726                           fsr2h	equ	0xFDA
  1727                           fsr2l	equ	0xFD9
  1728                           status	equ	0xFD8
  1729                           
  1730 ;; *************** function _spiTransfer *****************
  1731 ;; Defined at:
  1732 ;;		line 518 in file "main.c"
  1733 ;; Parameters:    Size  Location     Type
  1734 ;;  wrn             1    wreg     unsigned char 
  1735 ;;  command         1   35[COMRAM] unsigned char 
  1736 ;;  len             2   36[COMRAM] int 
  1737 ;; Auto vars:     Size  Location     Type
  1738 ;;  wrn             1   39[COMRAM] unsigned char 
  1739 ;;  i               2   40[COMRAM] int 
  1740 ;; Return value:  Size  Location     Type
  1741 ;;		None               void
  1742 ;; Registers used:
  1743 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1744 ;; Tracked objects:
  1745 ;;		On entry : 0/0
  1746 ;;		On exit  : 0/0
  1747 ;;		Unchanged: 0/0
  1748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1749 ;;      Params:         3       0       0       0
  1750 ;;      Locals:         3       0       0       0
  1751 ;;      Temps:          1       0       0       0
  1752 ;;      Totals:         7       0       0       0
  1753 ;;Total ram usage:        7 bytes
  1754 ;; Hardware stack levels used:    1
  1755 ;; Hardware stack levels required when called:    5
  1756 ;; This function calls:
  1757 ;;		_setCSN
  1758 ;;		_spiTransferByte
  1759 ;; This function is called by:
  1760 ;;		_main
  1761 ;;		_nrfConfig
  1762 ;; This function uses a non-reentrant model
  1763 ;;
  1764                           
  1765                           	psect	text7
  1766  00049C                     __ptext7:
  1767                           	opt stack 0
  1768  00049C                     _spiTransfer:
  1769                           	opt stack 25
  1770                           
  1771                           ;incstack = 0
  1772                           ;spiTransfer@wrn stored from wreg
  1773  00049C  6E28               	movwf	spiTransfer@wrn,c
  1774                           
  1775                           ;main.c: 520: setCSN(0);
  1776  00049E  0E00               	movlw	0
  1777  0004A0  6E23               	movwf	setCSN@level+1,c
  1778  0004A2  0E00               	movlw	0
  1779  0004A4  6E22               	movwf	setCSN@level,c
  1780  0004A6  EC95  F004         	call	_setCSN	;wreg free
  1781                           
  1782                           ;main.c: 522: if (wrn == 'w') {
  1783  0004AA  5028               	movf	spiTransfer@wrn,w,c
  1784  0004AC  0A77               	xorlw	119
  1785  0004AE  A4D8               	btfss	status,2,c
  1786  0004B0  D005               	goto	l1515
  1787                           
  1788                           ;main.c: 523: spiTransferByte(0x20|command);
  1789  0004B2  5024               	movf	spiTransfer@command,w,c
  1790  0004B4  0920               	iorlw	32
  1791  0004B6  EC8D  F004         	call	_spiTransferByte
  1792                           
  1793                           ;main.c: 524: } else if (wrn == 'r') {
  1794  0004BA  D00F               	goto	l1523
  1795  0004BC                     l1515:
  1796  0004BC  5028               	movf	spiTransfer@wrn,w,c
  1797  0004BE  0A72               	xorlw	114
  1798  0004C0  A4D8               	btfss	status,2,c
  1799  0004C2  D004               	goto	l1519
  1800                           
  1801                           ;main.c: 525: spiTransferByte(0x00|command);
  1802  0004C4  5024               	movf	spiTransfer@command,w,c
  1803  0004C6  EC8D  F004         	call	_spiTransferByte
  1804                           
  1805                           ;main.c: 526: } else if(wrn == 'n') {
  1806  0004CA  D007               	goto	l1523
  1807  0004CC                     l1519:
  1808  0004CC  5028               	movf	spiTransfer@wrn,w,c
  1809  0004CE  0A6E               	xorlw	110
  1810  0004D0  A4D8               	btfss	status,2,c
  1811  0004D2  D003               	goto	l1523
  1812                           
  1813                           ;main.c: 527: spiTransferByte(command);
  1814  0004D4  5024               	movf	spiTransfer@command,w,c
  1815  0004D6  EC8D  F004         	call	_spiTransferByte
  1816  0004DA                     l1523:
  1817                           
  1818                           ;main.c: 528: }
  1819                           ;main.c: 530: if (len != 0) {
  1820  0004DA  5026               	movf	spiTransfer@len+1,w,c
  1821  0004DC  1025               	iorwf	spiTransfer@len,w,c
  1822  0004DE  B4D8               	btfsc	status,2,c
  1823  0004E0  D025               	goto	l1533
  1824                           
  1825                           ;main.c: 531: for (int i=0;i<len;i++) {
  1826  0004E2  0E00               	movlw	0
  1827  0004E4  6E2A               	movwf	spiTransfer@i+1,c
  1828  0004E6  0E00               	movlw	0
  1829  0004E8  6E29               	movwf	spiTransfer@i,c
  1830  0004EA  D016               	goto	l1531
  1831  0004EC                     l1527:
  1832                           
  1833                           ;main.c: 532: dataBufIn[i] = spiTransferByte(dataBufOut[i]);
  1834  0004EC  0100               	movlb	0	; () banked
  1835  0004EE  0E60               	movlw	low _dataBufIn
  1836  0004F0  2429               	addwf	spiTransfer@i,w,c
  1837  0004F2  6ED9               	movwf	fsr2l,c
  1838  0004F4  0100               	movlb	0	; () banked
  1839  0004F6  0E00               	movlw	high _dataBufIn
  1840  0004F8  202A               	addwfc	spiTransfer@i+1,w,c
  1841  0004FA  6EDA               	movwf	fsr2h,c
  1842  0004FC  0100               	movlb	0	; () banked
  1843  0004FE  0E80               	movlw	low _dataBufOut
  1844  000500  2429               	addwf	spiTransfer@i,w,c
  1845  000502  6EE1               	movwf	fsr1l,c
  1846  000504  0100               	movlb	0	; () banked
  1847  000506  0E00               	movlw	high _dataBufOut
  1848  000508  202A               	addwfc	spiTransfer@i+1,w,c
  1849  00050A  6EE2               	movwf	fsr1h,c
  1850  00050C  50E7               	movf	indf1,w,c
  1851  00050E  EC8D  F004         	call	_spiTransferByte
  1852  000512  6EDF               	movwf	indf2,c
  1853  000514  4A29               	infsnz	spiTransfer@i,f,c
  1854  000516  2A2A               	incf	spiTransfer@i+1,f,c
  1855  000518                     l1531:
  1856  000518  502A               	movf	spiTransfer@i+1,w,c
  1857  00051A  0A80               	xorlw	128
  1858  00051C  6E27               	movwf	??_spiTransfer& (0+255),c
  1859  00051E  5025               	movf	spiTransfer@len,w,c
  1860  000520  5C29               	subwf	spiTransfer@i,w,c
  1861  000522  5026               	movf	spiTransfer@len+1,w,c
  1862  000524  0A80               	xorlw	128
  1863  000526  5827               	subwfb	??_spiTransfer& (0+255),w,c
  1864  000528  A0D8               	btfss	status,0,c
  1865  00052A  D7E0               	goto	l1527
  1866  00052C                     l1533:
  1867                           
  1868                           ;main.c: 533: }
  1869                           ;main.c: 534: }
  1870                           ;main.c: 536: setCSN(1);
  1871  00052C  0E00               	movlw	0
  1872  00052E  6E23               	movwf	setCSN@level+1,c
  1873  000530  0E01               	movlw	1
  1874  000532  6E22               	movwf	setCSN@level,c
  1875  000534  EC95  F004         	call	_setCSN	;wreg free
  1876  000538  0012               	return	
  1877  00053A                     __end_of_spiTransfer:
  1878                           	opt stack 0
  1879                           tblptru	equ	0xFF8
  1880                           tblptrh	equ	0xFF7
  1881                           tblptrl	equ	0xFF6
  1882                           tablat	equ	0xFF5
  1883                           postinc0	equ	0xFEE
  1884                           wreg	equ	0xFE8
  1885                           indf1	equ	0xFE7
  1886                           postdec1	equ	0xFE5
  1887                           fsr1h	equ	0xFE2
  1888                           fsr1l	equ	0xFE1
  1889                           indf2	equ	0xFDF
  1890                           fsr2h	equ	0xFDA
  1891                           fsr2l	equ	0xFD9
  1892                           status	equ	0xFD8
  1893                           
  1894 ;; *************** function _nrfSetTXAddr *****************
  1895 ;; Defined at:
  1896 ;;		line 472 in file "main.c"
  1897 ;; Parameters:    Size  Location     Type
  1898 ;;  addr            2   35[COMRAM] PTR unsigned char 
  1899 ;;		 -> TX_ADDRESS(4), 
  1900 ;;  len             2   37[COMRAM] int 
  1901 ;; Auto vars:     Size  Location     Type
  1902 ;;  i               2   40[COMRAM] int 
  1903 ;; Return value:  Size  Location     Type
  1904 ;;		None               void
  1905 ;; Registers used:
  1906 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1907 ;; Tracked objects:
  1908 ;;		On entry : 0/0
  1909 ;;		On exit  : 0/0
  1910 ;;		Unchanged: 0/0
  1911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1912 ;;      Params:         4       0       0       0
  1913 ;;      Locals:         2       0       0       0
  1914 ;;      Temps:          1       0       0       0
  1915 ;;      Totals:         7       0       0       0
  1916 ;;Total ram usage:        7 bytes
  1917 ;; Hardware stack levels used:    1
  1918 ;; Hardware stack levels required when called:    5
  1919 ;; This function calls:
  1920 ;;		_setCSN
  1921 ;;		_spiTransferByte
  1922 ;; This function is called by:
  1923 ;;		_nrfConfig
  1924 ;; This function uses a non-reentrant model
  1925 ;;
  1926                           
  1927                           	psect	text8
  1928  00073E                     __ptext8:
  1929                           	opt stack 0
  1930  00073E                     _nrfSetTXAddr:
  1931                           	opt stack 24
  1932                           
  1933                           ;main.c: 474: setCSN(0);
  1934                           
  1935                           ;incstack = 0
  1936  00073E  0E00               	movlw	0
  1937  000740  6E23               	movwf	setCSN@level+1,c
  1938  000742  0E00               	movlw	0
  1939  000744  6E22               	movwf	setCSN@level,c
  1940  000746  EC95  F004         	call	_setCSN	;wreg free
  1941                           
  1942                           ;main.c: 476: spiTransferByte(0x20|0x10);
  1943  00074A  0E30               	movlw	48
  1944  00074C  EC8D  F004         	call	_spiTransferByte
  1945                           
  1946                           ;main.c: 478: if (len != 0) {
  1947  000750  5027               	movf	nrfSetTXAddr@len+1,w,c
  1948  000752  1026               	iorwf	nrfSetTXAddr@len,w,c
  1949  000754  B4D8               	btfsc	status,2,c
  1950  000756  D01A               	goto	l1579
  1951                           
  1952                           ;main.c: 480: for (int i=0;i<len;i++) {
  1953  000758  0E00               	movlw	0
  1954  00075A  6E2A               	movwf	nrfSetTXAddr@i+1,c
  1955  00075C  0E00               	movlw	0
  1956  00075E  6E29               	movwf	nrfSetTXAddr@i,c
  1957  000760  D00B               	goto	l1577
  1958  000762                     l1573:
  1959                           
  1960                           ;main.c: 481: spiTransferByte(addr[i]);
  1961  000762  5029               	movf	nrfSetTXAddr@i,w,c
  1962  000764  2424               	addwf	nrfSetTXAddr@addr,w,c
  1963  000766  6ED9               	movwf	fsr2l,c
  1964  000768  502A               	movf	nrfSetTXAddr@i+1,w,c
  1965  00076A  2025               	addwfc	nrfSetTXAddr@addr+1,w,c
  1966  00076C  6EDA               	movwf	fsr2h,c
  1967  00076E  50DF               	movf	indf2,w,c
  1968  000770  EC8D  F004         	call	_spiTransferByte
  1969  000774  4A29               	infsnz	nrfSetTXAddr@i,f,c
  1970  000776  2A2A               	incf	nrfSetTXAddr@i+1,f,c
  1971  000778                     l1577:
  1972  000778  502A               	movf	nrfSetTXAddr@i+1,w,c
  1973  00077A  0A80               	xorlw	128
  1974  00077C  6E28               	movwf	??_nrfSetTXAddr& (0+255),c
  1975  00077E  5026               	movf	nrfSetTXAddr@len,w,c
  1976  000780  5C29               	subwf	nrfSetTXAddr@i,w,c
  1977  000782  5027               	movf	nrfSetTXAddr@len+1,w,c
  1978  000784  0A80               	xorlw	128
  1979  000786  5828               	subwfb	??_nrfSetTXAddr& (0+255),w,c
  1980  000788  A0D8               	btfss	status,0,c
  1981  00078A  D7EB               	goto	l1573
  1982  00078C                     l1579:
  1983                           
  1984                           ;main.c: 482: }
  1985                           ;main.c: 483: }
  1986                           ;main.c: 485: setCSN(1);
  1987  00078C  0E00               	movlw	0
  1988  00078E  6E23               	movwf	setCSN@level+1,c
  1989  000790  0E01               	movlw	1
  1990  000792  6E22               	movwf	setCSN@level,c
  1991  000794  EC95  F004         	call	_setCSN	;wreg free
  1992  000798  0012               	return	
  1993  00079A                     __end_of_nrfSetTXAddr:
  1994                           	opt stack 0
  1995                           tblptru	equ	0xFF8
  1996                           tblptrh	equ	0xFF7
  1997                           tblptrl	equ	0xFF6
  1998                           tablat	equ	0xFF5
  1999                           postinc0	equ	0xFEE
  2000                           wreg	equ	0xFE8
  2001                           indf1	equ	0xFE7
  2002                           postdec1	equ	0xFE5
  2003                           fsr1h	equ	0xFE2
  2004                           fsr1l	equ	0xFE1
  2005                           indf2	equ	0xFDF
  2006                           fsr2h	equ	0xFDA
  2007                           fsr2l	equ	0xFD9
  2008                           status	equ	0xFD8
  2009                           
  2010 ;; *************** function _nrfSetRXAddr *****************
  2011 ;; Defined at:
  2012 ;;		line 494 in file "main.c"
  2013 ;; Parameters:    Size  Location     Type
  2014 ;;  pipe            1    wreg     unsigned char 
  2015 ;;  addr            2   35[COMRAM] PTR unsigned char 
  2016 ;;		 -> RX_ADDRESS(4), TX_ADDRESS(4), 
  2017 ;;  len             2   37[COMRAM] int 
  2018 ;; Auto vars:     Size  Location     Type
  2019 ;;  pipe            1    0[BANK0 ] unsigned char 
  2020 ;;  i               2    1[BANK0 ] int 
  2021 ;; Return value:  Size  Location     Type
  2022 ;;		None               void
  2023 ;; Registers used:
  2024 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2025 ;; Tracked objects:
  2026 ;;		On entry : 0/0
  2027 ;;		On exit  : 0/0
  2028 ;;		Unchanged: 0/0
  2029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2030 ;;      Params:         4       0       0       0
  2031 ;;      Locals:         0       3       0       0
  2032 ;;      Temps:          1       0       0       0
  2033 ;;      Totals:         5       3       0       0
  2034 ;;Total ram usage:        8 bytes
  2035 ;; Hardware stack levels used:    1
  2036 ;; Hardware stack levels required when called:    5
  2037 ;; This function calls:
  2038 ;;		_setCSN
  2039 ;;		_spiTransferByte
  2040 ;; This function is called by:
  2041 ;;		_nrfConfig
  2042 ;; This function uses a non-reentrant model
  2043 ;;
  2044                           
  2045                           	psect	text9
  2046  00065C                     __ptext9:
  2047                           	opt stack 0
  2048  00065C                     _nrfSetRXAddr:
  2049                           	opt stack 24
  2050                           
  2051                           ;incstack = 0
  2052                           ;nrfSetRXAddr@pipe stored from wreg
  2053  00065C  0100               	movlb	0	; () banked
  2054  00065E  6FA4               	movwf	nrfSetRXAddr@pipe& (0+255),b
  2055                           
  2056                           ; BSR set to: 0
  2057                           ;main.c: 496: setCSN(0);
  2058  000660  0E00               	movlw	0
  2059  000662  6E23               	movwf	setCSN@level+1,c
  2060  000664  0E00               	movlw	0
  2061  000666  6E22               	movwf	setCSN@level,c
  2062  000668  EC95  F004         	call	_setCSN	;wreg free
  2063                           
  2064                           ;main.c: 498: spiTransferByte(0x20|pipe);
  2065  00066C  0100               	movlb	0	; () banked
  2066  00066E  51A4               	movf	nrfSetRXAddr@pipe& (0+255),w,b
  2067  000670  0920               	iorlw	32
  2068  000672  EC8D  F004         	call	_spiTransferByte
  2069                           
  2070                           ;main.c: 500: if (len != 0) {
  2071  000676  5027               	movf	nrfSetRXAddr@len+1,w,c
  2072  000678  1026               	iorwf	nrfSetRXAddr@len,w,c
  2073  00067A  B4D8               	btfsc	status,2,c
  2074  00067C  D021               	goto	l1563
  2075                           
  2076                           ;main.c: 502: for (int i=0;i<len;i++) {
  2077  00067E  0E00               	movlw	0
  2078  000680  0100               	movlb	0	; () banked
  2079  000682  6FA6               	movwf	(nrfSetRXAddr@i+1)& (0+255),b
  2080  000684  0E00               	movlw	0
  2081  000686  0100               	movlb	0	; () banked
  2082  000688  6FA5               	movwf	nrfSetRXAddr@i& (0+255),b
  2083  00068A  D00E               	goto	l1561
  2084  00068C                     l1557:
  2085                           
  2086                           ; BSR set to: 0
  2087                           ;main.c: 503: spiTransferByte(addr[i]);
  2088  00068C  0100               	movlb	0	; () banked
  2089  00068E  51A5               	movf	nrfSetRXAddr@i& (0+255),w,b
  2090  000690  2424               	addwf	nrfSetRXAddr@addr,w,c
  2091  000692  6ED9               	movwf	fsr2l,c
  2092  000694  0100               	movlb	0	; () banked
  2093  000696  51A6               	movf	(nrfSetRXAddr@i+1)& (0+255),w,b
  2094  000698  2025               	addwfc	nrfSetRXAddr@addr+1,w,c
  2095  00069A  6EDA               	movwf	fsr2h,c
  2096  00069C  50DF               	movf	indf2,w,c
  2097  00069E  EC8D  F004         	call	_spiTransferByte
  2098  0006A2  0100               	movlb	0	; () banked
  2099  0006A4  4BA5               	infsnz	nrfSetRXAddr@i& (0+255),f,b
  2100  0006A6  2BA6               	incf	(nrfSetRXAddr@i+1)& (0+255),f,b
  2101  0006A8                     l1561:
  2102                           
  2103                           ; BSR set to: 0
  2104  0006A8  0100               	movlb	0	; () banked
  2105  0006AA  51A6               	movf	(nrfSetRXAddr@i+1)& (0+255),w,b
  2106  0006AC  0A80               	xorlw	128
  2107  0006AE  6E28               	movwf	??_nrfSetRXAddr& (0+255),c
  2108  0006B0  5026               	movf	nrfSetRXAddr@len,w,c
  2109  0006B2  0100               	movlb	0	; () banked
  2110  0006B4  5DA5               	subwf	nrfSetRXAddr@i& (0+255),w,b
  2111  0006B6  5027               	movf	nrfSetRXAddr@len+1,w,c
  2112  0006B8  0A80               	xorlw	128
  2113  0006BA  5828               	subwfb	??_nrfSetRXAddr& (0+255),w,c
  2114  0006BC  A0D8               	btfss	status,0,c
  2115  0006BE  D7E6               	goto	l1557
  2116  0006C0                     l1563:
  2117                           
  2118                           ;main.c: 504: }
  2119                           ;main.c: 505: }
  2120                           ;main.c: 507: setCSN(1);
  2121  0006C0  0E00               	movlw	0
  2122  0006C2  6E23               	movwf	setCSN@level+1,c
  2123  0006C4  0E01               	movlw	1
  2124  0006C6  6E22               	movwf	setCSN@level,c
  2125  0006C8  EC95  F004         	call	_setCSN	;wreg free
  2126  0006CC  0012               	return	
  2127  0006CE                     __end_of_nrfSetRXAddr:
  2128                           	opt stack 0
  2129                           tblptru	equ	0xFF8
  2130                           tblptrh	equ	0xFF7
  2131                           tblptrl	equ	0xFF6
  2132                           tablat	equ	0xFF5
  2133                           postinc0	equ	0xFEE
  2134                           wreg	equ	0xFE8
  2135                           indf1	equ	0xFE7
  2136                           postdec1	equ	0xFE5
  2137                           fsr1h	equ	0xFE2
  2138                           fsr1l	equ	0xFE1
  2139                           indf2	equ	0xFDF
  2140                           fsr2h	equ	0xFDA
  2141                           fsr2l	equ	0xFD9
  2142                           status	equ	0xFD8
  2143                           
  2144 ;; *************** function _nrfConfigReg *****************
  2145 ;; Defined at:
  2146 ;;		line 450 in file "main.c"
  2147 ;; Parameters:    Size  Location     Type
  2148 ;;  wr              1    wreg     unsigned char 
  2149 ;;  command         1   35[COMRAM] unsigned char 
  2150 ;;  data            1   36[COMRAM] unsigned char 
  2151 ;; Auto vars:     Size  Location     Type
  2152 ;;  wr              1   37[COMRAM] unsigned char 
  2153 ;; Return value:  Size  Location     Type
  2154 ;;                  1    wreg      unsigned char 
  2155 ;; Registers used:
  2156 ;;		wreg, status,2, status,0, cstack
  2157 ;; Tracked objects:
  2158 ;;		On entry : 0/0
  2159 ;;		On exit  : 0/0
  2160 ;;		Unchanged: 0/0
  2161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2162 ;;      Params:         2       0       0       0
  2163 ;;      Locals:         1       0       0       0
  2164 ;;      Temps:          0       0       0       0
  2165 ;;      Totals:         3       0       0       0
  2166 ;;Total ram usage:        3 bytes
  2167 ;; Hardware stack levels used:    1
  2168 ;; Hardware stack levels required when called:    5
  2169 ;; This function calls:
  2170 ;;		_setCSN
  2171 ;;		_spiTransferByte
  2172 ;; This function is called by:
  2173 ;;		_nrfConfig
  2174 ;; This function uses a non-reentrant model
  2175 ;;
  2176                           
  2177                           	psect	text10
  2178  00079A                     __ptext10:
  2179                           	opt stack 0
  2180  00079A                     _nrfConfigReg:
  2181                           	opt stack 24
  2182                           
  2183                           ;incstack = 0
  2184                           ;nrfConfigReg@wr stored from wreg
  2185  00079A  6E26               	movwf	nrfConfigReg@wr,c
  2186                           
  2187                           ;main.c: 452: setCSN(0);
  2188  00079C  0E00               	movlw	0
  2189  00079E  6E23               	movwf	setCSN@level+1,c
  2190  0007A0  0E00               	movlw	0
  2191  0007A2  6E22               	movwf	setCSN@level,c
  2192  0007A4  EC95  F004         	call	_setCSN	;wreg free
  2193                           
  2194                           ;main.c: 454: if (wr == 'w') {
  2195  0007A8  5026               	movf	nrfConfigReg@wr,w,c
  2196  0007AA  0A77               	xorlw	119
  2197  0007AC  A4D8               	btfss	status,2,c
  2198  0007AE  D008               	goto	l1543
  2199                           
  2200                           ;main.c: 455: spiTransferByte(0x20|command);
  2201  0007B0  5024               	movf	nrfConfigReg@command,w,c
  2202  0007B2  0920               	iorlw	32
  2203  0007B4  EC8D  F004         	call	_spiTransferByte
  2204                           
  2205                           ;main.c: 456: spiTransferByte(data);
  2206  0007B8  5025               	movf	nrfConfigReg@data,w,c
  2207  0007BA  EC8D  F004         	call	_spiTransferByte
  2208                           
  2209                           ;main.c: 457: } else if (wr == 'r') {
  2210  0007BE  D00B               	goto	l1547
  2211  0007C0                     l1543:
  2212  0007C0  5026               	movf	nrfConfigReg@wr,w,c
  2213  0007C2  0A72               	xorlw	114
  2214  0007C4  A4D8               	btfss	status,2,c
  2215  0007C6  D007               	goto	l1547
  2216                           
  2217                           ;main.c: 458: spiTransferByte(0x00|command);
  2218  0007C8  5024               	movf	nrfConfigReg@command,w,c
  2219  0007CA  EC8D  F004         	call	_spiTransferByte
  2220                           
  2221                           ;main.c: 459: data = spiTransferByte(0xFF);
  2222  0007CE  0EFF               	movlw	255
  2223  0007D0  EC8D  F004         	call	_spiTransferByte
  2224  0007D4  6E25               	movwf	nrfConfigReg@data,c
  2225  0007D6                     l1547:
  2226                           
  2227                           ;main.c: 460: }
  2228                           ;main.c: 462: setCSN(1);
  2229  0007D6  0E00               	movlw	0
  2230  0007D8  6E23               	movwf	setCSN@level+1,c
  2231  0007DA  0E01               	movlw	1
  2232  0007DC  6E22               	movwf	setCSN@level,c
  2233  0007DE  EC95  F004         	call	_setCSN	;wreg free
  2234  0007E2  0012               	return	
  2235  0007E4                     __end_of_nrfConfigReg:
  2236                           	opt stack 0
  2237                           tblptru	equ	0xFF8
  2238                           tblptrh	equ	0xFF7
  2239                           tblptrl	equ	0xFF6
  2240                           tablat	equ	0xFF5
  2241                           postinc0	equ	0xFEE
  2242                           wreg	equ	0xFE8
  2243                           indf1	equ	0xFE7
  2244                           postdec1	equ	0xFE5
  2245                           fsr1h	equ	0xFE2
  2246                           fsr1l	equ	0xFE1
  2247                           indf2	equ	0xFDF
  2248                           fsr2h	equ	0xFDA
  2249                           fsr2l	equ	0xFD9
  2250                           status	equ	0xFD8
  2251                           
  2252 ;; *************** function _spiTransferByte *****************
  2253 ;; Defined at:
  2254 ;;		line 542 in file "main.c"
  2255 ;; Parameters:    Size  Location     Type
  2256 ;;  data            1    wreg     unsigned char 
  2257 ;; Auto vars:     Size  Location     Type
  2258 ;;  data            1   33[COMRAM] unsigned char 
  2259 ;; Return value:  Size  Location     Type
  2260 ;;                  1    wreg      unsigned char 
  2261 ;; Registers used:
  2262 ;;		wreg, status,2
  2263 ;; Tracked objects:
  2264 ;;		On entry : 0/0
  2265 ;;		On exit  : 0/0
  2266 ;;		Unchanged: 0/0
  2267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2268 ;;      Params:         0       0       0       0
  2269 ;;      Locals:         1       0       0       0
  2270 ;;      Temps:          0       0       0       0
  2271 ;;      Totals:         1       0       0       0
  2272 ;;Total ram usage:        1 bytes
  2273 ;; Hardware stack levels used:    1
  2274 ;; Hardware stack levels required when called:    4
  2275 ;; This function calls:
  2276 ;;		Nothing
  2277 ;; This function is called by:
  2278 ;;		_nrfGetStatus
  2279 ;;		_nrfConfigReg
  2280 ;;		_nrfSetTXAddr
  2281 ;;		_nrfSetRXAddr
  2282 ;;		_spiTransfer
  2283 ;;		_nrfTXData
  2284 ;; This function uses a non-reentrant model
  2285 ;;
  2286                           
  2287                           	psect	text11
  2288  00091A                     __ptext11:
  2289                           	opt stack 0
  2290  00091A                     _spiTransferByte:
  2291                           	opt stack 25
  2292                           
  2293                           ;incstack = 0
  2294                           ;spiTransferByte@data stored from wreg
  2295  00091A  6E22               	movwf	spiTransferByte@data,c
  2296                           
  2297                           ;main.c: 544: SSP1BUF = data;
  2298  00091C  C022  FFC9         	movff	spiTransferByte@data,4041	;volatile
  2299  000920                     l175:
  2300  000920  A69E               	btfss	3998,3,c	;volatile
  2301  000922  D7FE               	goto	l175
  2302                           
  2303                           ;main.c: 547: PIR1bits.SSP1IF = 0;
  2304  000924  969E               	bcf	3998,3,c	;volatile
  2305                           
  2306                           ;main.c: 549: return SSP1BUF;
  2307  000926  50C9               	movf	4041,w,c	;volatile
  2308  000928  0012               	return	
  2309  00092A                     __end_of_spiTransferByte:
  2310                           	opt stack 0
  2311                           tblptru	equ	0xFF8
  2312                           tblptrh	equ	0xFF7
  2313                           tblptrl	equ	0xFF6
  2314                           tablat	equ	0xFF5
  2315                           postinc0	equ	0xFEE
  2316                           wreg	equ	0xFE8
  2317                           indf1	equ	0xFE7
  2318                           postdec1	equ	0xFE5
  2319                           fsr1h	equ	0xFE2
  2320                           fsr1l	equ	0xFE1
  2321                           indf2	equ	0xFDF
  2322                           fsr2h	equ	0xFDA
  2323                           fsr2l	equ	0xFD9
  2324                           status	equ	0xFD8
  2325                           
  2326 ;; *************** function _setCSN *****************
  2327 ;; Defined at:
  2328 ;;		line 425 in file "main.c"
  2329 ;; Parameters:    Size  Location     Type
  2330 ;;  level           2   33[COMRAM] int 
  2331 ;; Auto vars:     Size  Location     Type
  2332 ;;		None
  2333 ;; Return value:  Size  Location     Type
  2334 ;;		None               void
  2335 ;; Registers used:
  2336 ;;		wreg, status,2, status,0
  2337 ;; Tracked objects:
  2338 ;;		On entry : 0/0
  2339 ;;		On exit  : 0/0
  2340 ;;		Unchanged: 0/0
  2341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2342 ;;      Params:         2       0       0       0
  2343 ;;      Locals:         0       0       0       0
  2344 ;;      Temps:          0       0       0       0
  2345 ;;      Totals:         2       0       0       0
  2346 ;;Total ram usage:        2 bytes
  2347 ;; Hardware stack levels used:    1
  2348 ;; Hardware stack levels required when called:    4
  2349 ;; This function calls:
  2350 ;;		Nothing
  2351 ;; This function is called by:
  2352 ;;		_nrfGetStatus
  2353 ;;		_nrfConfigReg
  2354 ;;		_nrfSetTXAddr
  2355 ;;		_nrfSetRXAddr
  2356 ;;		_spiTransfer
  2357 ;;		_nrfTXData
  2358 ;; This function uses a non-reentrant model
  2359 ;;
  2360                           
  2361                           	psect	text12
  2362  00092A                     __ptext12:
  2363                           	opt stack 0
  2364  00092A                     _setCSN:
  2365                           	opt stack 25
  2366                           
  2367                           ;main.c: 427: if (level == 1) {
  2368                           
  2369                           ;incstack = 0
  2370  00092A  0422               	decf	setCSN@level,w,c
  2371  00092C  1023               	iorwf	setCSN@level+1,w,c
  2372  00092E  A4D8               	btfss	status,2,c
  2373  000930  D002               	goto	l135
  2374                           
  2375                           ;main.c: 428: LATAbits.LATA2 = 1;
  2376  000932  8489               	bsf	3977,2,c	;volatile
  2377                           
  2378                           ;main.c: 429: } else {
  2379  000934  0012               	return	
  2380  000936                     l135:
  2381                           
  2382                           ;main.c: 430: LATAbits.LATA2 = 0;
  2383  000936  9489               	bcf	3977,2,c	;volatile
  2384  000938  0012               	return	
  2385  00093A                     __end_of_setCSN:
  2386                           	opt stack 0
  2387                           tblptru	equ	0xFF8
  2388                           tblptrh	equ	0xFF7
  2389                           tblptrl	equ	0xFF6
  2390                           tablat	equ	0xFF5
  2391                           postinc0	equ	0xFEE
  2392                           wreg	equ	0xFE8
  2393                           indf1	equ	0xFE7
  2394                           postdec1	equ	0xFE5
  2395                           fsr1h	equ	0xFE2
  2396                           fsr1l	equ	0xFE1
  2397                           indf2	equ	0xFDF
  2398                           fsr2h	equ	0xFDA
  2399                           fsr2l	equ	0xFD9
  2400                           status	equ	0xFD8
  2401                           
  2402 ;; *************** function _intConfig *****************
  2403 ;; Defined at:
  2404 ;;		line 331 in file "main.c"
  2405 ;; Parameters:    Size  Location     Type
  2406 ;;		None
  2407 ;; Auto vars:     Size  Location     Type
  2408 ;;		None
  2409 ;; Return value:  Size  Location     Type
  2410 ;;		None               void
  2411 ;; Registers used:
  2412 ;;		None
  2413 ;; Tracked objects:
  2414 ;;		On entry : 0/0
  2415 ;;		On exit  : 0/0
  2416 ;;		Unchanged: 0/0
  2417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2418 ;;      Params:         0       0       0       0
  2419 ;;      Locals:         0       0       0       0
  2420 ;;      Temps:          0       0       0       0
  2421 ;;      Totals:         0       0       0       0
  2422 ;;Total ram usage:        0 bytes
  2423 ;; Hardware stack levels used:    1
  2424 ;; Hardware stack levels required when called:    4
  2425 ;; This function calls:
  2426 ;;		Nothing
  2427 ;; This function is called by:
  2428 ;;		_main
  2429 ;; This function uses a non-reentrant model
  2430 ;;
  2431                           
  2432                           	psect	text13
  2433  000908                     __ptext13:
  2434                           	opt stack 0
  2435  000908                     _intConfig:
  2436                           	opt stack 26
  2437                           
  2438                           ;main.c: 334: PIR1bits.SSP1IF = 0;
  2439                           
  2440                           ;incstack = 0
  2441  000908  969E               	bcf	3998,3,c	;volatile
  2442                           
  2443                           ;main.c: 337: IOCBbits.IOCB4 = 1;
  2444  00090A  8862               	bsf	3938,4,c	;volatile
  2445                           
  2446                           ;main.c: 338: INTCONbits.RBIF = 0;
  2447  00090C  90F2               	bcf	intcon,0,c	;volatile
  2448                           
  2449                           ;main.c: 339: INTCON2bits.RBIP = 1;
  2450  00090E  80F1               	bsf	intcon2,0,c	;volatile
  2451                           
  2452                           ;main.c: 340: INTCONbits.RBIE = 1;
  2453  000910  86F2               	bsf	intcon,3,c	;volatile
  2454                           
  2455                           ;main.c: 343: RCONbits.IPEN = 1;
  2456  000912  8ED0               	bsf	4048,7,c	;volatile
  2457                           
  2458                           ;main.c: 344: INTCONbits.GIEH = 1;
  2459  000914  8EF2               	bsf	intcon,7,c	;volatile
  2460                           
  2461                           ;main.c: 345: INTCONbits.GIEL = 1;
  2462  000916  8CF2               	bsf	intcon,6,c	;volatile
  2463  000918  0012               	return	
  2464  00091A                     __end_of_intConfig:
  2465                           	opt stack 0
  2466                           tblptru	equ	0xFF8
  2467                           tblptrh	equ	0xFF7
  2468                           tblptrl	equ	0xFF6
  2469                           tablat	equ	0xFF5
  2470                           intcon	equ	0xFF2
  2471                           intcon2	equ	0xFF1
  2472                           postinc0	equ	0xFEE
  2473                           wreg	equ	0xFE8
  2474                           indf1	equ	0xFE7
  2475                           postdec1	equ	0xFE5
  2476                           fsr1h	equ	0xFE2
  2477                           fsr1l	equ	0xFE1
  2478                           indf2	equ	0xFDF
  2479                           fsr2h	equ	0xFDA
  2480                           fsr2l	equ	0xFD9
  2481                           status	equ	0xFD8
  2482                           
  2483 ;; *************** function _delay10ms *****************
  2484 ;; Defined at:
  2485 ;;		line 585 in file "main.c"
  2486 ;; Parameters:    Size  Location     Type
  2487 ;;  ms_multi        2   33[COMRAM] int 
  2488 ;; Auto vars:     Size  Location     Type
  2489 ;;  i               2   36[COMRAM] int 
  2490 ;; Return value:  Size  Location     Type
  2491 ;;		None               void
  2492 ;; Registers used:
  2493 ;;		wreg, status,2, status,0
  2494 ;; Tracked objects:
  2495 ;;		On entry : 0/0
  2496 ;;		On exit  : 0/0
  2497 ;;		Unchanged: 0/0
  2498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2499 ;;      Params:         2       0       0       0
  2500 ;;      Locals:         2       0       0       0
  2501 ;;      Temps:          1       0       0       0
  2502 ;;      Totals:         5       0       0       0
  2503 ;;Total ram usage:        5 bytes
  2504 ;; Hardware stack levels used:    1
  2505 ;; Hardware stack levels required when called:    4
  2506 ;; This function calls:
  2507 ;;		Nothing
  2508 ;; This function is called by:
  2509 ;;		_main
  2510 ;; This function uses a non-reentrant model
  2511 ;;
  2512                           
  2513                           	psect	text14
  2514  000826                     __ptext14:
  2515                           	opt stack 0
  2516  000826                     _delay10ms:
  2517                           	opt stack 26
  2518                           
  2519                           ;main.c: 586: int i = 0;
  2520                           
  2521                           ;incstack = 0
  2522  000826  0E00               	movlw	0
  2523  000828  6E26               	movwf	delay10ms@i+1,c
  2524  00082A  0E00               	movlw	0
  2525  00082C  6E25               	movwf	delay10ms@i,c
  2526                           
  2527                           ;main.c: 587: for (i=0;i<ms_multi;i++) {
  2528  00082E  0E00               	movlw	0
  2529  000830  6E26               	movwf	delay10ms@i+1,c
  2530  000832  0E00               	movlw	0
  2531  000834  6E25               	movwf	delay10ms@i,c
  2532  000836  D00A               	goto	l188
  2533  000838                     l1305:
  2534                           
  2535                           ;main.c: 588: _delay((unsigned long)((11)*(64000000/4000.0)));
  2536  000838  0EE5               	movlw	229
  2537  00083A  6E24               	movwf	??_delay10ms& (0+255),c
  2538  00083C  0E91               	movlw	145
  2539  00083E                     u1047:
  2540  00083E  2EE8               	decfsz	wreg,f,c
  2541  000840  D7FE               	goto	u1047
  2542  000842  2E24               	decfsz	??_delay10ms& (0+255),f,c
  2543  000844  D7FC               	goto	u1047
  2544  000846  F000               	nop	
  2545  000848  4A25               	infsnz	delay10ms@i,f,c
  2546  00084A  2A26               	incf	delay10ms@i+1,f,c
  2547  00084C                     l188:
  2548  00084C  5026               	movf	delay10ms@i+1,w,c
  2549  00084E  0A80               	xorlw	128
  2550  000850  6E24               	movwf	??_delay10ms& (0+255),c
  2551  000852  5022               	movf	delay10ms@ms_multi,w,c
  2552  000854  5C25               	subwf	delay10ms@i,w,c
  2553  000856  5023               	movf	delay10ms@ms_multi+1,w,c
  2554  000858  0A80               	xorlw	128
  2555  00085A  5824               	subwfb	??_delay10ms& (0+255),w,c
  2556  00085C  B0D8               	btfsc	status,0,c
  2557  00085E  0012               	return	
  2558  000860  D7EB               	goto	l1305
  2559  000862                     __end_of_delay10ms:
  2560                           	opt stack 0
  2561                           tblptru	equ	0xFF8
  2562                           tblptrh	equ	0xFF7
  2563                           tblptrl	equ	0xFF6
  2564                           tablat	equ	0xFF5
  2565                           intcon	equ	0xFF2
  2566                           intcon2	equ	0xFF1
  2567                           postinc0	equ	0xFEE
  2568                           wreg	equ	0xFE8
  2569                           indf1	equ	0xFE7
  2570                           postdec1	equ	0xFE5
  2571                           fsr1h	equ	0xFE2
  2572                           fsr1l	equ	0xFE1
  2573                           indf2	equ	0xFDF
  2574                           fsr2h	equ	0xFDA
  2575                           fsr2l	equ	0xFD9
  2576                           status	equ	0xFD8
  2577                           
  2578 ;; *************** function ___lwmod *****************
  2579 ;; Defined at:
  2580 ;;		line 8 in file "F:\Program FIles (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  2581 ;; Parameters:    Size  Location     Type
  2582 ;;  dividend        2   33[COMRAM] unsigned int 
  2583 ;;  divisor         2   35[COMRAM] unsigned int 
  2584 ;; Auto vars:     Size  Location     Type
  2585 ;;  counter         1   37[COMRAM] unsigned char 
  2586 ;; Return value:  Size  Location     Type
  2587 ;;                  2   33[COMRAM] unsigned int 
  2588 ;; Registers used:
  2589 ;;		wreg, status,2, status,0
  2590 ;; Tracked objects:
  2591 ;;		On entry : 0/0
  2592 ;;		On exit  : 0/0
  2593 ;;		Unchanged: 0/0
  2594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2595 ;;      Params:         4       0       0       0
  2596 ;;      Locals:         1       0       0       0
  2597 ;;      Temps:          0       0       0       0
  2598 ;;      Totals:         5       0       0       0
  2599 ;;Total ram usage:        5 bytes
  2600 ;; Hardware stack levels used:    1
  2601 ;; Hardware stack levels required when called:    4
  2602 ;; This function calls:
  2603 ;;		Nothing
  2604 ;; This function is called by:
  2605 ;;		_main
  2606 ;; This function uses a non-reentrant model
  2607 ;;
  2608                           
  2609                           	psect	text15
  2610  0007E4                     __ptext15:
  2611                           	opt stack 0
  2612  0007E4                     ___lwmod:
  2613                           	opt stack 26
  2614                           
  2615                           ;incstack = 0
  2616  0007E4  5025               	movf	___lwmod@divisor+1,w,c
  2617  0007E6  1024               	iorwf	___lwmod@divisor,w,c
  2618  0007E8  B4D8               	btfsc	status,2,c
  2619  0007EA  D018               	goto	l716
  2620  0007EC  0E01               	movlw	1
  2621  0007EE  6E26               	movwf	___lwmod@counter,c
  2622  0007F0  D004               	goto	l1345
  2623  0007F2                     l1343:
  2624  0007F2  90D8               	bcf	status,0,c
  2625  0007F4  3624               	rlcf	___lwmod@divisor,f,c
  2626  0007F6  3625               	rlcf	___lwmod@divisor+1,f,c
  2627  0007F8  2A26               	incf	___lwmod@counter,f,c
  2628  0007FA                     l1345:
  2629  0007FA  AE25               	btfss	___lwmod@divisor+1,7,c
  2630  0007FC  D7FA               	goto	l1343
  2631  0007FE                     l1347:
  2632  0007FE  5024               	movf	___lwmod@divisor,w,c
  2633  000800  5C22               	subwf	___lwmod@dividend,w,c
  2634  000802  5025               	movf	___lwmod@divisor+1,w,c
  2635  000804  5823               	subwfb	___lwmod@dividend+1,w,c
  2636  000806  A0D8               	btfss	status,0,c
  2637  000808  D004               	goto	l1351
  2638  00080A  5024               	movf	___lwmod@divisor,w,c
  2639  00080C  5E22               	subwf	___lwmod@dividend,f,c
  2640  00080E  5025               	movf	___lwmod@divisor+1,w,c
  2641  000810  5A23               	subwfb	___lwmod@dividend+1,f,c
  2642  000812                     l1351:
  2643  000812  90D8               	bcf	status,0,c
  2644  000814  3225               	rrcf	___lwmod@divisor+1,f,c
  2645  000816  3224               	rrcf	___lwmod@divisor,f,c
  2646  000818  2E26               	decfsz	___lwmod@counter,f,c
  2647  00081A  D7F1               	goto	l1347
  2648  00081C                     l716:
  2649  00081C  C022  F022         	movff	___lwmod@dividend,?___lwmod
  2650  000820  C023  F023         	movff	___lwmod@dividend+1,?___lwmod+1
  2651  000824  0012               	return	
  2652  000826                     __end_of___lwmod:
  2653                           	opt stack 0
  2654                           tblptru	equ	0xFF8
  2655                           tblptrh	equ	0xFF7
  2656                           tblptrl	equ	0xFF6
  2657                           tablat	equ	0xFF5
  2658                           intcon	equ	0xFF2
  2659                           intcon2	equ	0xFF1
  2660                           postinc0	equ	0xFEE
  2661                           wreg	equ	0xFE8
  2662                           indf1	equ	0xFE7
  2663                           postdec1	equ	0xFE5
  2664                           fsr1h	equ	0xFE2
  2665                           fsr1l	equ	0xFE1
  2666                           indf2	equ	0xFDF
  2667                           fsr2h	equ	0xFDA
  2668                           fsr2l	equ	0xFD9
  2669                           status	equ	0xFD8
  2670                           
  2671 ;; *************** function _lowISR *****************
  2672 ;; Defined at:
  2673 ;;		line 324 in file "main.c"
  2674 ;; Parameters:    Size  Location     Type
  2675 ;;		None
  2676 ;; Auto vars:     Size  Location     Type
  2677 ;;		None
  2678 ;; Return value:  Size  Location     Type
  2679 ;;		None               void
  2680 ;; Registers used:
  2681 ;;		None
  2682 ;; Tracked objects:
  2683 ;;		On entry : 0/0
  2684 ;;		On exit  : 0/0
  2685 ;;		Unchanged: 0/0
  2686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2687 ;;      Params:         0       0       0       0
  2688 ;;      Locals:         0       0       0       0
  2689 ;;      Temps:         17       0       0       0
  2690 ;;      Totals:        17       0       0       0
  2691 ;;Total ram usage:       17 bytes
  2692 ;; Hardware stack levels used:    1
  2693 ;; Hardware stack levels required when called:    3
  2694 ;; This function calls:
  2695 ;;		Nothing
  2696 ;; This function is called by:
  2697 ;;		Interrupt level 1
  2698 ;; This function uses a non-reentrant model
  2699 ;;
  2700                           
  2701                           	psect	intcodelo
  2702  000018                     __pintcodelo:
  2703                           	opt stack 0
  2704  000018                     _lowISR:
  2705                           	opt stack 24
  2706                           
  2707                           ;incstack = 0
  2708  000018  CFD8 F001          	movff	status,??_lowISR
  2709  00001C  CFE8 F002          	movff	wreg,??_lowISR+1
  2710  000020  CFE0 F003          	movff	bsr,??_lowISR+2
  2711  000024  CFFA F004          	movff	pclath,??_lowISR+3
  2712  000028  CFFB F005          	movff	pclatu,??_lowISR+4
  2713  00002C  CFE9 F006          	movff	fsr0l,??_lowISR+5
  2714  000030  CFEA F007          	movff	fsr0h,??_lowISR+6
  2715  000034  CFE1 F008          	movff	fsr1l,??_lowISR+7
  2716  000038  CFE2 F009          	movff	fsr1h,??_lowISR+8
  2717  00003C  CFD9 F00A          	movff	fsr2l,??_lowISR+9
  2718  000040  CFDA F00B          	movff	fsr2h,??_lowISR+10
  2719  000044  CFF3 F00C          	movff	prodl,??_lowISR+11
  2720  000048  CFF4 F00D          	movff	prodh,??_lowISR+12
  2721  00004C  CFF6 F00E          	movff	tblptrl,??_lowISR+13
  2722  000050  CFF7 F00F          	movff	tblptrh,??_lowISR+14
  2723  000054  CFF8 F010          	movff	tblptru,??_lowISR+15
  2724  000058  CFF5 F011          	movff	tablat,??_lowISR+16
  2725  00005C  C011  FFF5         	movff	??_lowISR+16,tablat
  2726  000060  C010  FFF8         	movff	??_lowISR+15,tblptru
  2727  000064  C00F  FFF7         	movff	??_lowISR+14,tblptrh
  2728  000068  C00E  FFF6         	movff	??_lowISR+13,tblptrl
  2729  00006C  C00D  FFF4         	movff	??_lowISR+12,prodh
  2730  000070  C00C  FFF3         	movff	??_lowISR+11,prodl
  2731  000074  C00B  FFDA         	movff	??_lowISR+10,fsr2h
  2732  000078  C00A  FFD9         	movff	??_lowISR+9,fsr2l
  2733  00007C  C009  FFE2         	movff	??_lowISR+8,fsr1h
  2734  000080  C008  FFE1         	movff	??_lowISR+7,fsr1l
  2735  000084  C007  FFEA         	movff	??_lowISR+6,fsr0h
  2736  000088  C006  FFE9         	movff	??_lowISR+5,fsr0l
  2737  00008C  C005  FFFB         	movff	??_lowISR+4,pclatu
  2738  000090  C004  FFFA         	movff	??_lowISR+3,pclath
  2739  000094  C003  FFE0         	movff	??_lowISR+2,bsr
  2740  000098  C002  FFE8         	movff	??_lowISR+1,wreg
  2741  00009C  C001  FFD8         	movff	??_lowISR,status
  2742  0000A0  0010               	retfie	
  2743  0000A2                     __end_of_lowISR:
  2744                           	opt stack 0
  2745                           pclatu	equ	0xFFB
  2746                           pclath	equ	0xFFA
  2747                           tblptru	equ	0xFF8
  2748                           tblptrh	equ	0xFF7
  2749                           tblptrl	equ	0xFF6
  2750                           tablat	equ	0xFF5
  2751                           prodh	equ	0xFF4
  2752                           prodl	equ	0xFF3
  2753                           intcon	equ	0xFF2
  2754                           intcon2	equ	0xFF1
  2755                           postinc0	equ	0xFEE
  2756                           fsr0h	equ	0xFEA
  2757                           fsr0l	equ	0xFE9
  2758                           wreg	equ	0xFE8
  2759                           indf1	equ	0xFE7
  2760                           postdec1	equ	0xFE5
  2761                           fsr1h	equ	0xFE2
  2762                           fsr1l	equ	0xFE1
  2763                           bsr	equ	0xFE0
  2764                           indf2	equ	0xFDF
  2765                           fsr2h	equ	0xFDA
  2766                           fsr2l	equ	0xFD9
  2767                           status	equ	0xFD8
  2768                           
  2769 ;; *************** function _highISR *****************
  2770 ;; Defined at:
  2771 ;;		line 299 in file "main.c"
  2772 ;; Parameters:    Size  Location     Type
  2773 ;;		None
  2774 ;; Auto vars:     Size  Location     Type
  2775 ;;		None
  2776 ;; Return value:  Size  Location     Type
  2777 ;;		None               void
  2778 ;; Registers used:
  2779 ;;		wreg, status,2, status,0, cstack
  2780 ;; Tracked objects:
  2781 ;;		On entry : 0/0
  2782 ;;		On exit  : 0/0
  2783 ;;		Unchanged: 0/0
  2784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2785 ;;      Params:         0       0       0       0
  2786 ;;      Locals:         0       0       0       0
  2787 ;;      Temps:         14       0       0       0
  2788 ;;      Totals:        14       0       0       0
  2789 ;;Total ram usage:       14 bytes
  2790 ;; Hardware stack levels used:    1
  2791 ;; Hardware stack levels required when called:    2
  2792 ;; This function calls:
  2793 ;;		i2_nrfGetStatus
  2794 ;; This function is called by:
  2795 ;;		Interrupt level 2
  2796 ;; This function uses a non-reentrant model
  2797 ;;
  2798                           
  2799                           	psect	intcode
  2800  000008                     __pintcode:
  2801                           	opt stack 0
  2802  000008                     _highISR:
  2803                           	opt stack 24
  2804                           
  2805                           ;incstack = 0
  2806  000008  CFFA F014          	movff	pclath,??_highISR
  2807  00000C  CFFB F015          	movff	pclatu,??_highISR+1
  2808  000010  CFE9 F016          	movff	fsr0l,??_highISR+2
  2809  000014  EFE7  F002         	goto	int_func
  2810                           pclatu	equ	0xFFB
  2811                           pclath	equ	0xFFA
  2812                           tblptru	equ	0xFF8
  2813                           tblptrh	equ	0xFF7
  2814                           tblptrl	equ	0xFF6
  2815                           tablat	equ	0xFF5
  2816                           prodh	equ	0xFF4
  2817                           prodl	equ	0xFF3
  2818                           intcon	equ	0xFF2
  2819                           intcon2	equ	0xFF1
  2820                           postinc0	equ	0xFEE
  2821                           fsr0h	equ	0xFEA
  2822                           fsr0l	equ	0xFE9
  2823                           wreg	equ	0xFE8
  2824                           indf1	equ	0xFE7
  2825                           postdec1	equ	0xFE5
  2826                           fsr1h	equ	0xFE2
  2827                           fsr1l	equ	0xFE1
  2828                           bsr	equ	0xFE0
  2829                           indf2	equ	0xFDF
  2830                           fsr2h	equ	0xFDA
  2831                           fsr2l	equ	0xFD9
  2832                           status	equ	0xFD8
  2833                           
  2834                           	psect	intcode_body
  2835  0005CE                     __pintcode_body:
  2836                           	opt stack 24
  2837  0005CE                     int_func:
  2838                           	opt stack 24
  2839  0005CE  CFEA F017          	movff	fsr0h,??_highISR+3
  2840  0005D2  CFE1 F018          	movff	fsr1l,??_highISR+4
  2841  0005D6  CFE2 F019          	movff	fsr1h,??_highISR+5
  2842  0005DA  CFD9 F01A          	movff	fsr2l,??_highISR+6
  2843  0005DE  CFDA F01B          	movff	fsr2h,??_highISR+7
  2844  0005E2  CFF3 F01C          	movff	prodl,??_highISR+8
  2845  0005E6  CFF4 F01D          	movff	prodh,??_highISR+9
  2846  0005EA  CFF6 F01E          	movff	tblptrl,??_highISR+10
  2847  0005EE  CFF7 F01F          	movff	tblptrh,??_highISR+11
  2848  0005F2  CFF8 F020          	movff	tblptru,??_highISR+12
  2849  0005F6  CFF5 F021          	movff	tablat,??_highISR+13
  2850                           
  2851                           ;main.c: 301: if (INTCONbits.RBIF) {
  2852  0005FA  A0F2               	btfss	intcon,0,c	;volatile
  2853  0005FC  D012               	goto	i2l117
  2854                           
  2855                           ;main.c: 303: if (PORTBbits.RB4 == 0) {
  2856  0005FE  B881               	btfsc	3969,4,c	;volatile
  2857  000600  D00F               	goto	i2l1501
  2858                           
  2859                           ;main.c: 304: nrfInterrupt = 1;
  2860  000602  0E01               	movlw	1
  2861  000604  0100               	movlb	0	; () banked
  2862  000606  6FA1               	movwf	_nrfInterrupt& (0+255),b	;volatile
  2863                           
  2864                           ; BSR set to: 0
  2865                           ;main.c: 306: nrfGetStatus();
  2866  000608  EC5D  F004         	call	i2_nrfGetStatus	;wreg free
  2867                           
  2868                           ;main.c: 308: if (((nrfSTATUS) & (1 <<(5)))) {
  2869  00060C  AA3D               	btfss	_nrfSTATUS,5,c
  2870  00060E  D003               	goto	i2l1497
  2871                           
  2872                           ;main.c: 309: nrfTXDSInt = 1;
  2873  000610  0E01               	movlw	1
  2874  000612  0100               	movlb	0	; () banked
  2875  000614  6FA3               	movwf	_nrfTXDSInt& (0+255),b	;volatile
  2876  000616                     i2l1497:
  2877                           
  2878                           ;main.c: 310: }
  2879                           ;main.c: 312: if (((nrfSTATUS) & (1 <<(4)))) {
  2880  000616  A83D               	btfss	_nrfSTATUS,4,c
  2881  000618  D003               	goto	i2l1501
  2882                           
  2883                           ;main.c: 313: nrfMAXRTInt = 1;
  2884  00061A  0E01               	movlw	1
  2885  00061C  0100               	movlb	0	; () banked
  2886  00061E  6FA2               	movwf	_nrfMAXRTInt& (0+255),b	;volatile
  2887  000620                     i2l1501:
  2888                           
  2889                           ;main.c: 314: }
  2890                           ;main.c: 315: }
  2891                           ;main.c: 317: INTCONbits.RBIF = 0;
  2892  000620  90F2               	bcf	intcon,0,c	;volatile
  2893  000622                     i2l117:
  2894  000622  C021  FFF5         	movff	??_highISR+13,tablat
  2895  000626  C020  FFF8         	movff	??_highISR+12,tblptru
  2896  00062A  C01F  FFF7         	movff	??_highISR+11,tblptrh
  2897  00062E  C01E  FFF6         	movff	??_highISR+10,tblptrl
  2898  000632  C01D  FFF4         	movff	??_highISR+9,prodh
  2899  000636  C01C  FFF3         	movff	??_highISR+8,prodl
  2900  00063A  C01B  FFDA         	movff	??_highISR+7,fsr2h
  2901  00063E  C01A  FFD9         	movff	??_highISR+6,fsr2l
  2902  000642  C019  FFE2         	movff	??_highISR+5,fsr1h
  2903  000646  C018  FFE1         	movff	??_highISR+4,fsr1l
  2904  00064A  C017  FFEA         	movff	??_highISR+3,fsr0h
  2905  00064E  C016  FFE9         	movff	??_highISR+2,fsr0l
  2906  000652  C015  FFFB         	movff	??_highISR+1,pclatu
  2907  000656  C014  FFFA         	movff	??_highISR,pclath
  2908  00065A  0011               	retfie		f
  2909  00065C                     __end_of_highISR:
  2910                           	opt stack 0
  2911                           pclatu	equ	0xFFB
  2912                           pclath	equ	0xFFA
  2913                           tblptru	equ	0xFF8
  2914                           tblptrh	equ	0xFF7
  2915                           tblptrl	equ	0xFF6
  2916                           tablat	equ	0xFF5
  2917                           prodh	equ	0xFF4
  2918                           prodl	equ	0xFF3
  2919                           intcon	equ	0xFF2
  2920                           intcon2	equ	0xFF1
  2921                           postinc0	equ	0xFEE
  2922                           fsr0h	equ	0xFEA
  2923                           fsr0l	equ	0xFE9
  2924                           wreg	equ	0xFE8
  2925                           indf1	equ	0xFE7
  2926                           postdec1	equ	0xFE5
  2927                           fsr1h	equ	0xFE2
  2928                           fsr1l	equ	0xFE1
  2929                           bsr	equ	0xFE0
  2930                           indf2	equ	0xFDF
  2931                           fsr2h	equ	0xFDA
  2932                           fsr2l	equ	0xFD9
  2933                           status	equ	0xFD8
  2934                           
  2935 ;; *************** function i2_nrfGetStatus *****************
  2936 ;; Defined at:
  2937 ;;		line 438 in file "main.c"
  2938 ;; Parameters:    Size  Location     Type
  2939 ;;		None
  2940 ;; Auto vars:     Size  Location     Type
  2941 ;;		None
  2942 ;; Return value:  Size  Location     Type
  2943 ;;		None               void
  2944 ;; Registers used:
  2945 ;;		wreg, status,2, status,0, cstack
  2946 ;; Tracked objects:
  2947 ;;		On entry : 0/0
  2948 ;;		On exit  : 0/0
  2949 ;;		Unchanged: 0/0
  2950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2951 ;;      Params:         0       0       0       0
  2952 ;;      Locals:         0       0       0       0
  2953 ;;      Temps:          0       0       0       0
  2954 ;;      Totals:         0       0       0       0
  2955 ;;Total ram usage:        0 bytes
  2956 ;; Hardware stack levels used:    1
  2957 ;; Hardware stack levels required when called:    1
  2958 ;; This function calls:
  2959 ;;		i2_setCSN
  2960 ;;		i2_spiTransferByte
  2961 ;; This function is called by:
  2962 ;;		_highISR
  2963 ;; This function uses a non-reentrant model
  2964 ;;
  2965                           
  2966                           	psect	text18
  2967  0008BA                     __ptext18:
  2968                           	opt stack 0
  2969  0008BA                     i2_nrfGetStatus:
  2970                           	opt stack 24
  2971                           
  2972                           ;main.c: 440: setCSN(0);
  2973                           
  2974                           ;incstack = 0
  2975  0008BA  0E00               	movlw	0
  2976  0008BC  6E13               	movwf	i2setCSN@level+1,c
  2977  0008BE  0E00               	movlw	0
  2978  0008C0  6E12               	movwf	i2setCSN@level,c
  2979  0008C2  ECA5  F004         	call	i2_setCSN	;wreg free
  2980                           
  2981                           ;main.c: 442: nrfSTATUS = spiTransferByte(0xFF);
  2982  0008C6  0EFF               	movlw	255
  2983  0008C8  EC9D  F004         	call	i2_spiTransferByte
  2984  0008CC  6E3D               	movwf	_nrfSTATUS,c
  2985                           
  2986                           ;main.c: 444: setCSN(1);
  2987  0008CE  0E00               	movlw	0
  2988  0008D0  6E13               	movwf	i2setCSN@level+1,c
  2989  0008D2  0E01               	movlw	1
  2990  0008D4  6E12               	movwf	i2setCSN@level,c
  2991  0008D6  ECA5  F004         	call	i2_setCSN	;wreg free
  2992  0008DA  0012               	return	
  2993  0008DC                     __end_ofi2_nrfGetStatus:
  2994                           	opt stack 0
  2995                           pclatu	equ	0xFFB
  2996                           pclath	equ	0xFFA
  2997                           tblptru	equ	0xFF8
  2998                           tblptrh	equ	0xFF7
  2999                           tblptrl	equ	0xFF6
  3000                           tablat	equ	0xFF5
  3001                           prodh	equ	0xFF4
  3002                           prodl	equ	0xFF3
  3003                           intcon	equ	0xFF2
  3004                           intcon2	equ	0xFF1
  3005                           postinc0	equ	0xFEE
  3006                           fsr0h	equ	0xFEA
  3007                           fsr0l	equ	0xFE9
  3008                           wreg	equ	0xFE8
  3009                           indf1	equ	0xFE7
  3010                           postdec1	equ	0xFE5
  3011                           fsr1h	equ	0xFE2
  3012                           fsr1l	equ	0xFE1
  3013                           bsr	equ	0xFE0
  3014                           indf2	equ	0xFDF
  3015                           fsr2h	equ	0xFDA
  3016                           fsr2l	equ	0xFD9
  3017                           status	equ	0xFD8
  3018                           
  3019 ;; *************** function i2_spiTransferByte *****************
  3020 ;; Defined at:
  3021 ;;		line 542 in file "main.c"
  3022 ;; Parameters:    Size  Location     Type
  3023 ;;  data            1    wreg     unsigned char 
  3024 ;; Auto vars:     Size  Location     Type
  3025 ;;  data            1   17[COMRAM] unsigned char 
  3026 ;; Return value:  Size  Location     Type
  3027 ;;                  1    wreg      unsigned char 
  3028 ;; Registers used:
  3029 ;;		wreg, status,2
  3030 ;; Tracked objects:
  3031 ;;		On entry : 0/0
  3032 ;;		On exit  : 0/0
  3033 ;;		Unchanged: 0/0
  3034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3035 ;;      Params:         0       0       0       0
  3036 ;;      Locals:         1       0       0       0
  3037 ;;      Temps:          0       0       0       0
  3038 ;;      Totals:         1       0       0       0
  3039 ;;Total ram usage:        1 bytes
  3040 ;; Hardware stack levels used:    1
  3041 ;; This function calls:
  3042 ;;		Nothing
  3043 ;; This function is called by:
  3044 ;;		i2_nrfGetStatus
  3045 ;; This function uses a non-reentrant model
  3046 ;;
  3047                           
  3048                           	psect	text19
  3049  00093A                     __ptext19:
  3050                           	opt stack 0
  3051  00093A                     i2_spiTransferByte:
  3052                           	opt stack 24
  3053                           
  3054                           ;incstack = 0
  3055                           ;i2spiTransferByte@data stored from wreg
  3056  00093A  6E12               	movwf	i2spiTransferByte@data,c
  3057                           
  3058                           ;main.c: 544: SSP1BUF = data;
  3059  00093C  C012  FFC9         	movff	i2spiTransferByte@data,4041	;volatile
  3060  000940                     i2l175:
  3061  000940  A69E               	btfss	3998,3,c	;volatile
  3062  000942  D7FE               	goto	i2l175
  3063                           
  3064                           ;main.c: 547: PIR1bits.SSP1IF = 0;
  3065  000944  969E               	bcf	3998,3,c	;volatile
  3066                           
  3067                           ;main.c: 549: return SSP1BUF;
  3068  000946  50C9               	movf	4041,w,c	;volatile
  3069  000948  0012               	return	
  3070  00094A                     __end_ofi2_spiTransferByte:
  3071                           	opt stack 0
  3072                           pclatu	equ	0xFFB
  3073                           pclath	equ	0xFFA
  3074                           tblptru	equ	0xFF8
  3075                           tblptrh	equ	0xFF7
  3076                           tblptrl	equ	0xFF6
  3077                           tablat	equ	0xFF5
  3078                           prodh	equ	0xFF4
  3079                           prodl	equ	0xFF3
  3080                           intcon	equ	0xFF2
  3081                           intcon2	equ	0xFF1
  3082                           postinc0	equ	0xFEE
  3083                           fsr0h	equ	0xFEA
  3084                           fsr0l	equ	0xFE9
  3085                           wreg	equ	0xFE8
  3086                           indf1	equ	0xFE7
  3087                           postdec1	equ	0xFE5
  3088                           fsr1h	equ	0xFE2
  3089                           fsr1l	equ	0xFE1
  3090                           bsr	equ	0xFE0
  3091                           indf2	equ	0xFDF
  3092                           fsr2h	equ	0xFDA
  3093                           fsr2l	equ	0xFD9
  3094                           status	equ	0xFD8
  3095                           
  3096 ;; *************** function i2_setCSN *****************
  3097 ;; Defined at:
  3098 ;;		line 425 in file "main.c"
  3099 ;; Parameters:    Size  Location     Type
  3100 ;;  level           2   17[COMRAM] int 
  3101 ;; Auto vars:     Size  Location     Type
  3102 ;;		None
  3103 ;; Return value:  Size  Location     Type
  3104 ;;		None               void
  3105 ;; Registers used:
  3106 ;;		wreg, status,2, status,0
  3107 ;; Tracked objects:
  3108 ;;		On entry : 0/0
  3109 ;;		On exit  : 0/0
  3110 ;;		Unchanged: 0/0
  3111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3112 ;;      Params:         2       0       0       0
  3113 ;;      Locals:         0       0       0       0
  3114 ;;      Temps:          0       0       0       0
  3115 ;;      Totals:         2       0       0       0
  3116 ;;Total ram usage:        2 bytes
  3117 ;; Hardware stack levels used:    1
  3118 ;; This function calls:
  3119 ;;		Nothing
  3120 ;; This function is called by:
  3121 ;;		i2_nrfGetStatus
  3122 ;; This function uses a non-reentrant model
  3123 ;;
  3124                           
  3125                           	psect	text20
  3126  00094A                     __ptext20:
  3127                           	opt stack 0
  3128  00094A                     i2_setCSN:
  3129                           	opt stack 24
  3130                           
  3131                           ;main.c: 427: if (level == 1) {
  3132                           
  3133                           ;incstack = 0
  3134  00094A  0412               	decf	i2setCSN@level,w,c
  3135  00094C  1013               	iorwf	i2setCSN@level+1,w,c
  3136  00094E  A4D8               	btfss	status,2,c
  3137  000950  D002               	goto	i2l135
  3138                           
  3139                           ;main.c: 428: LATAbits.LATA2 = 1;
  3140  000952  8489               	bsf	3977,2,c	;volatile
  3141                           
  3142                           ;main.c: 429: } else {
  3143  000954  0012               	return	
  3144  000956                     i2l135:
  3145                           
  3146                           ;main.c: 430: LATAbits.LATA2 = 0;
  3147  000956  9489               	bcf	3977,2,c	;volatile
  3148  000958  0012               	return	
  3149  00095A                     __end_ofi2_setCSN:
  3150                           	opt stack 0
  3151  0000                     pclatu	equ	0xFFB
  3152                           pclath	equ	0xFFA
  3153                           tblptru	equ	0xFF8
  3154                           tblptrh	equ	0xFF7
  3155                           tblptrl	equ	0xFF6
  3156                           tablat	equ	0xFF5
  3157                           prodh	equ	0xFF4
  3158                           prodl	equ	0xFF3
  3159                           intcon	equ	0xFF2
  3160                           intcon2	equ	0xFF1
  3161                           postinc0	equ	0xFEE
  3162                           fsr0h	equ	0xFEA
  3163                           fsr0l	equ	0xFE9
  3164                           wreg	equ	0xFE8
  3165                           indf1	equ	0xFE7
  3166                           postdec1	equ	0xFE5
  3167                           fsr1h	equ	0xFE2
  3168                           fsr1l	equ	0xFE1
  3169                           bsr	equ	0xFE0
  3170                           indf2	equ	0xFDF
  3171                           fsr2h	equ	0xFDA
  3172                           fsr2l	equ	0xFD9
  3173                           status	equ	0xFD8
  3174                           pclatu	equ	0xFFB
  3175                           pclath	equ	0xFFA
  3176                           tblptru	equ	0xFF8
  3177                           tblptrh	equ	0xFF7
  3178                           tblptrl	equ	0xFF6
  3179                           tablat	equ	0xFF5
  3180                           prodh	equ	0xFF4
  3181                           prodl	equ	0xFF3
  3182                           intcon	equ	0xFF2
  3183                           intcon2	equ	0xFF1
  3184                           postinc0	equ	0xFEE
  3185                           fsr0h	equ	0xFEA
  3186                           fsr0l	equ	0xFE9
  3187                           wreg	equ	0xFE8
  3188                           indf1	equ	0xFE7
  3189                           postdec1	equ	0xFE5
  3190                           fsr1h	equ	0xFE2
  3191                           fsr1l	equ	0xFE1
  3192                           bsr	equ	0xFE0
  3193                           indf2	equ	0xFDF
  3194                           fsr2h	equ	0xFDA
  3195                           fsr2l	equ	0xFD9
  3196                           status	equ	0xFD8
  3197                           
  3198                           	psect	rparam
  3199  0000                     pclatu	equ	0xFFB
  3200                           pclath	equ	0xFFA
  3201                           tblptru	equ	0xFF8
  3202                           tblptrh	equ	0xFF7
  3203                           tblptrl	equ	0xFF6
  3204                           tablat	equ	0xFF5
  3205                           prodh	equ	0xFF4
  3206                           prodl	equ	0xFF3
  3207                           intcon	equ	0xFF2
  3208                           intcon2	equ	0xFF1
  3209                           postinc0	equ	0xFEE
  3210                           fsr0h	equ	0xFEA
  3211                           fsr0l	equ	0xFE9
  3212                           wreg	equ	0xFE8
  3213                           indf1	equ	0xFE7
  3214                           postdec1	equ	0xFE5
  3215                           fsr1h	equ	0xFE2
  3216                           fsr1l	equ	0xFE1
  3217                           bsr	equ	0xFE0
  3218                           indf2	equ	0xFDF
  3219                           fsr2h	equ	0xFDA
  3220                           fsr2l	equ	0xFD9
  3221                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        18
    BSS         70
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     42      62
    BANK0           160     22      90
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    nrfSetRXAddr@addr	PTR unsigned char  size(2) Largest target is 4
		 -> RX_ADDRESS(COMRAM[4]), TX_ADDRESS(COMRAM[4]), 

    nrfSetTXAddr@addr	PTR unsigned char  size(2) Largest target is 4
		 -> TX_ADDRESS(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->_spiTransfer
    _spiConfig_1->___aldiv
    _nrfTXData->_setCSN
    _nrfGetStatus->_setCSN
    _nrfConfig->_nrfSetTXAddr
    _nrfConfig->_spiTransfer
    _spiTransfer->_setCSN
    _nrfSetTXAddr->_setCSN
    _nrfSetRXAddr->_setCSN
    _nrfConfigReg->_setCSN

Critical Paths under _highISR in COMRAM

    i2_nrfGetStatus->i2_setCSN

Critical Paths under _lowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_spiConfig_1
    _spiConfig_1->___aldiv
    _nrfConfig->_nrfSetRXAddr

Critical Paths under _highISR in BANK0

    None.

Critical Paths under _lowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _highISR in BANK1

    None.

Critical Paths under _lowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _highISR in BANK2

    None.

Critical Paths under _lowISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   11503
                                             18 BANK0      4     4      0
                            ___lwmod
                          _delay10ms
                          _intConfig
                          _nrfConfig
                       _nrfGetStatus
                          _nrfTXData
                         _portConfig
                        _spiConfig_1
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiConfig_1                                         12    10      2     869
                                              6 BANK0     12    10      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     705
                                             33 COMRAM     8     0      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _portConfig                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _nrfTXData                                            5     3      2    1037
                                             35 COMRAM     5     3      2
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (1) _nrfGetStatus                                         0     0      0     842
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (1) _nrfConfig                                            0     0      0    6573
                       _nrfConfigReg
                       _nrfSetRXAddr
                       _nrfSetTXAddr
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiTransfer                                          7     4      3    1709
                                             35 COMRAM     7     4      3
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfSetTXAddr                                         7     3      4    1133
                                             35 COMRAM     7     3      4
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfSetRXAddr                                         8     4      4    1294
                                             35 COMRAM     5     1      4
                                              0 BANK0      3     3      0
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfConfigReg                                         3     1      2    2437
                                             35 COMRAM     3     1      2
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _spiTransferByte                                      1     1      0      31
                                             33 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setCSN                                               2     0      2     811
                                             33 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _intConfig                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _delay10ms                                            5     3      2     100
                                             33 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4     265
                                             33 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _lowISR                                              17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _highISR                                             14    14      0      96
                                             19 COMRAM    14    14      0
                     i2_nrfGetStatus
 ---------------------------------------------------------------------------------
 (6) i2_nrfGetStatus                                       0     0      0      96
                           i2_setCSN
                  i2_spiTransferByte
 ---------------------------------------------------------------------------------
 (7) i2_spiTransferByte                                    1     1      0      22
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) i2_setCSN                                             2     0      2      74
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lwmod
   _delay10ms
   _intConfig
   _nrfConfig
     _nrfConfigReg
       _setCSN
       _spiTransferByte
     _nrfSetRXAddr
       _setCSN
       _spiTransferByte
     _nrfSetTXAddr
       _setCSN
       _spiTransferByte
     _spiTransfer
       _setCSN
       _spiTransferByte
   _nrfGetStatus
     _setCSN
     _spiTransferByte
   _nrfTXData
     _setCSN
     _spiTransferByte
   _portConfig
   _spiConfig_1
     ___aldiv
   _spiTransfer
     _setCSN
     _spiTransferByte

 _lowISR (ROOT)

 _highISR (ROOT)
   i2_nrfGetStatus
     i2_setCSN
     i2_spiTransferByte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       6        0.0%
BANK2              100      0       0       7        0.0%
BITBANK1           100      0       0       9        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     16      5A       4       56.3%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2A      3E       1       65.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      98       8        0.0%
DATA                 0      0      98      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Fri Oct 03 11:09:23 2014

  __size_of_spiTransferByte 0010                          bsr 000FE0                  _RX_ADDRESS 0035  
               __CFG_LVP$ON 000000                         l106 0218                         l135 0936  
                       l175 0920                         l188 084C                         l716 081C  
                       u885 028E                         u895 02C0             ?i2_nrfGetStatus 0001  
                       wreg 000FE8                  _TX_ADDRESS 0039                        l1305 0838  
                      l1351 0812                        l1343 07F2                        l1345 07FA  
                      l1601 0306                        l1347 07FE                        l1531 0518  
                      l1523 04DA                        l1515 04BC                        l1603 0314  
                      l1533 052C                        l1621 038A                        l1613 0354  
                      l1605 0318                        l1543 07C0                        l1527 04EC  
                      l1519 04CC                        l1561 06A8                        l1617 0364  
                      l1547 07D6                        l1563 06C0                        l1557 068C  
                      l1573 0762                        l1671 06F2                        l1807 0260  
                      l1577 0778                        l1579 078C                        l1675 070C  
                      l1595 02DA                        l1677 0720                        l1589 02A8  
                      l1775 01DC                        l1767 01B8                        l1785 0208  
                      l1795 0228                        u1027 0262                        u1037 0730  
                      u1047 083E                        _LATA 000F89                        _LATB 000F8A  
                      _LATC 000F8B          spiTransfer@command 0024                        _main 00A6  
                      fsr0h 000FEA                        fsr1h 000FE2                        fsr0l 000FE9  
                      fsr2h 000FDA                        indf1 000FE7                        fsr1l 000FE1  
                      indf2 000FDF                        fsr2l 000FD9               __CFG_BORV$190 000000  
                      pclat 000FFA                        prodh 000FF4                        prodl 000FF3  
                      start 00A2               __CFG_IESO$OFF 000000              nrfConfigReg@wr 0026  
         i2_spiTransferByte 093A          ?i2_spiTransferByte 0001             __end_of___aldiv 039C  
                     ?_main 0001             __end_of___lwmod 0826                       i2l117 0622  
                     i2l135 0956                       i2l175 0940                       _TRISA 000F92  
                     _TRISB 000F93                       _TRISC 000F94             __end_of_highISR 065C  
            __CFG_FCMEN$OFF 000000         ??i2_spiTransferByte 0012          __CFG_MCLRE$EXTMCLR 000000  
                     tablat 000FF5                       status 000FD8              __CFG_HFOFST$ON 000000  
            __CFG_FOSC$HSHP 000000            __end_ofi2_setCSN 095A             __initialization 0862  
 __end_ofi2_spiTransferByte 094A                __end_of_main 0270         spiTransferByte@data 0022  
                    ??_main 002B               __activetblptr 000000           ??_spiTransferByte 0022  
            __CFG_PLLCFG$ON 000000               nrfSetRXAddr@i 00A5               nrfSetTXAddr@i 0029  
                    i2l1501 0620              __CFG_WDTEN$OFF 000000                      i2l1497 0616  
              ?_spiConfig_1 00AA              __CFG_PWRTEN$ON 000000              __CFG_XINST$OFF 000000  
                 ??___aldiv 002A              __CFG_STVREN$ON 000000                   ??___lwmod 0026  
                    _lowISR 0018                      _setCSN 092A                      clear_0 0868  
               setCSN@level 0022                   ??_highISR 0014               ?_nrfGetStatus 0001  
             ?_nrfConfigReg 0024                _FEATURE_CURR 002F         spiConfig_1@spiSpeed 00AA  
              __pdataCOMRAM 002B                ?_spiTransfer 0024                      tblptrh 000FF7  
                    tblptrl 000FF6                      tblptru 000FF8                  __accesstop 0060  
   __end_of__initialization 0892             __CFG_PBADEN$OFF 000000               ?_nrfSetRXAddr 0024  
             ?_nrfSetTXAddr 0024  __size_ofi2_spiTransferByte 0010              __pcstackCOMRAM 0001  
        __size_of_delay10ms 003C            ??i2_nrfGetStatus 0014              ??_nrfGetStatus 0024  
            _EN_RXADDR_CURR 002E              ??_nrfConfigReg 0026            nrfConfigReg@data 0025  
                 ?i2_setCSN 0012                  _dataBufOut 0080                  __pbssBANK0 0060  
        __size_of_intConfig 0012              ??_nrfSetRXAddr 0028              ??_nrfSetTXAddr 0028  
        __size_of_nrfTXData 0070          __size_of_nrfConfig 0100         nrfConfigReg@command 0024  
        __CFG_CCP2MX$PORTC1 000000          __CFG_CCP3MX$PORTB5 000000                     ?_lowISR 0001  
                   ?_setCSN 0022                  ??i2_setCSN 0014                     _SSP1ADD 000FC8  
                   _SSP1BUF 000FC9           __end_of_delay10ms 0862            nrfSetRXAddr@addr 0024  
          nrfSetRXAddr@pipe 00A4                     __Hparam 0000                     __Lparam 0000  
      __size_of_spiConfig_1 0094             _spiTransferByte 091A                  delay10ms@i 0025  
                   ___aldiv 0270               _RX_PW_P0_CURR 0032                     ___lwmod 07E4  
                _nrfTXDSInt 00A3                     __pcinit 0862             __size_of_lowISR 008A  
           __size_of_setCSN 0010            nrfSetTXAddr@addr 0024                     __ramtop 0300  
         __end_of_intConfig 091A                     _highISR 0008                     __ptext0 00A6  
                   __ptext1 053A                     __ptext2 0270                     __ptext3 08DC  
                   __ptext4 06CE                     __ptext5 0898                     __ptext6 039C  
                   __ptext7 049C                     __ptext8 073E                     __ptext9 065C  
                   _nrfBusy 00A0           __end_of_nrfTXData 073E            ___aldiv@dividend 0022  
         __end_of_nrfConfig 049C        __size_of_spiTransfer 009E              __pintcode_body 05CE  
      end_of_initialization 0892        spiConfig_1@sspAddVal 00B4                     int_func 05CE  
      __end_of_nrfGetStatus 08BA        __end_of_nrfConfigReg 07E4            ___aldiv@quotient 00A6  
                   postdec1 000FE5                     postinc0 000FEE                nrfTXData@len 0024  
                _portConfig 08DC                   _PORTBbits 000F81        __end_of_nrfSetRXAddr 06CE  
      __end_of_nrfSetTXAddr 079A                  main@TXtime 00B8     __end_of_spiTransferByte 092A  
             __pidataCOMRAM 08F6              __end_of_lowISR 00A2              __end_of_setCSN 093A  
       start_initialization 0862           __size_ofi2_setCSN 0010            _spiConfig_1$1495 00B0  
                  ??_lowISR 0001                    ??_setCSN 0024                 ?_portConfig 0001  
                nrfTXData@i 0027                 __pbssCOMRAM 003D               __pcstackBANK0 00A4  
     __size_of_nrfGetStatus 0022       __size_of_nrfConfigReg 004A                   _dataBufIn 0060  
          ?_spiTransferByte 0001                   _delay10ms 0826                 _CONFIG_CURR 002B  
             _SETUP_AW_CURR 0033                   __pintcode 0008                    ?___aldiv 0022  
     __size_of_nrfSetRXAddr 0072                    ?___lwmod 0022       __size_of_nrfSetTXAddr 005C  
           _SETUP_RETR_CURR 0034                 __pintcodelo 0018            __CFG_PRICLKEN$ON 000000  
                  ?_highISR 0001                _nrfGetStatus 0898                _nrfConfigReg 079A  
           nrfSetRXAddr@len 0026                   _intConfig 0908     __size_ofi2_nrfGetStatus 0022  
                 _nrfSTATUS 003D                   _nrfTXData 06CE             nrfSetTXAddr@len 0026  
                 _nrfConfig 039C             ___aldiv@divisor 0026             ___aldiv@counter 00A4  
                  _IOCBbits 000F62         __size_of_portConfig 001A                    _LATAbits 000F89  
                ?_delay10ms 0022               ??_spiConfig_1 00AC                _nrfSetRXAddr 065C  
              _nrfSetTXAddr 073E                _nrfInterrupt 00A1                   _spiTXFlag 003E  
                  _PIR1bits 000F9E                    _RCONbits 000FD0            __CFG_WDTPS$32768 000000  
             _RF_SETUP_CURR 0031           delay10ms@ms_multi 0022               ??_spiTransfer 0027  
                 main@count 00B6                  ?_intConfig 0001                    i2_setCSN 094A  
               _INTCON2bits 000FF1                  ?_nrfTXData 0024                   copy_data0 0886  
                ?_nrfConfig 0001                    __Hrparam 0000                 _nrfMAXRTInt 00A2  
                  __Lrparam 0000          __CFG_BOREN$SBORDIS 000000           __CFG_P2BMX$PORTB5 000000  
       __end_of_spiConfig_1 05CE            __size_of___aldiv 012C            __size_of___lwmod 0042  
             i2setCSN@level 0012            __size_of_highISR 0654                    __ptext10 079A  
                  __ptext11 091A                    __ptext20 094A                    __ptext12 092A  
                  __ptext13 0908                    __ptext14 0826                    __ptext15 07E4  
                  __ptext18 08BA                    __ptext19 093A                _SSP1CON1bits 000FC6  
       __end_of_spiTransfer 053A               __size_of_main 01CA                 ??_delay10ms 0024  
                _EN_AA_CURR 002D                _SSP1STATbits 000FC7                ??_portConfig 0022  
                _DYNPD_CURR 002C                  _INTCONbits 000FF2                 ??_intConfig 0022  
            i2_nrfGetStatus 08BA                 ??_nrfTXData 0026                 ??_nrfConfig 002B  
                  intlevel1 0000                    intlevel2 0000            ___lwmod@dividend 0022  
        __end_of_portConfig 08F6                 _spiConfig_1 053A       i2spiTransferByte@data 0012  
            spiTransfer@len 0025              spiTransfer@wrn 0028                  _RF_CH_CURR 0030  
    __end_ofi2_nrfGetStatus 08DC             ___lwmod@divisor 0024                 _spiTransfer 049C  
           ___lwmod@counter 0026                ___aldiv@sign 00A5           __CFG_T3CMX$PORTC0 000000  
              spiTransfer@i 0029  
