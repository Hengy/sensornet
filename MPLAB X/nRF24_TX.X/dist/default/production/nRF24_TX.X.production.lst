

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Oct 01 09:36:43 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F24K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    25  0000                     
    26                           	psect	idataCOMRAM
    27  003B13                     __pidataCOMRAM:
    28                           	opt stack 0
    29                           
    30                           ;initializer for _CONFIG_CURR
    31  003B13  4A                 	db	74
    32                           
    33                           ;initializer for _DYNPD_CURR
    34  003B14  01                 	db	1
    35                           
    36                           ;initializer for _EN_RXADDR_CURR
    37  003B15  01                 	db	1
    38                           
    39                           ;initializer for _FEATURE_CURR
    40  003B16  04                 	db	4
    41                           
    42                           ;initializer for _RF_CH_CURR
    43  003B17  69                 	db	105
    44                           
    45                           ;initializer for _RF_SETUP_CURR
    46  003B18  06                 	db	6
    47                           
    48                           ;initializer for _RX_PW_P0_CURR
    49  003B19  01                 	db	1
    50                           
    51                           ;initializer for _SETUP_AW_CURR
    52  003B1A  02                 	db	2
    53                           
    54                           ;initializer for _SETUP_RETR_CURR
    55  003B1B  20                 	db	32
    56                           
    57                           ;initializer for _RX_ADDRESS
    58  003B1C  E7                 	db	231
    59  003B1D  E7                 	db	231
    60  003B1E  E7                 	db	231
    61  003B1F  E7                 	db	231
    62                           
    63                           ;initializer for _TX_ADDRESS
    64  003B20  E7                 	db	231
    65  003B21  E7                 	db	231
    66  003B22  E7                 	db	231
    67  003B23  E7                 	db	231
    68  0000                     _LATA	set	3977
    69  0000                     _LATAbits	set	3977
    70  0000                     _LATB	set	3978
    71  0000                     _LATC	set	3979
    72  0000                     _SSP1ADD	set	4040
    73  0000                     _SSP1BUF	set	4041
    74  0000                     _SSP1CON1bits	set	4038
    75  0000                     _SSP1STATbits	set	4039
    76  0000                     _TRISA	set	3986
    77  0000                     _TRISB	set	3987
    78  0000                     _TRISC	set	3988
    79                           
    80                           ; #config settings
    81  0000                     
    82                           	psect	cinit
    83  003B8A                     __pcinit:
    84                           	opt stack 0
    85  003B8A                     start_initialization:
    86                           	opt stack 0
    87  003B8A                     __initialization:
    88                           	opt stack 0
    89                           
    90                           ; Clear objects allocated to COMRAM (66 bytes)
    91  003B8A  EE00  F001         	lfsr	0,__pbssCOMRAM
    92  003B8E  0E42               	movlw	66
    93  003B90                     clear_0:
    94  003B90  6AEE               	clrf	postinc0,c
    95  003B92  06E8               	decf	wreg,f,c
    96  003B94  E1FD               	bnz	clear_0
    97                           
    98                           ; Initialize objects allocated to COMRAM (17 bytes)
    99                           ; load TBLPTR registers with __pidataCOMRAM
   100  003B96  0E13               	movlw	low __pidataCOMRAM
   101  003B98  6EF6               	movwf	tblptrl,c
   102  003B9A  0E3B               	movlw	high __pidataCOMRAM
   103  003B9C  6EF7               	movwf	tblptrh,c
   104  003B9E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   105  003BA0  6EF8               	movwf	tblptru,c
   106  003BA2  EE00  F043         	lfsr	0,__pdataCOMRAM
   107  003BA6  EE10 F011          	lfsr	1,17
   108  003BAA                     copy_data0:
   109  003BAA  0009               	tblrd		*+
   110  003BAC  CFF5 FFEE          	movff	tablat,postinc0
   111  003BB0  50E5               	movf	postdec1,w,c
   112  003BB2  50E1               	movf	fsr1l,w,c
   113  003BB4  E1FA               	bnz	copy_data0
   114  003BB6                     end_of_initialization:
   115                           	opt stack 0
   116  003BB6                     __end_of__initialization:
   117                           	opt stack 0
   118  003BB6  0100               	movlb	0
   119  003BB8  EF88  F01F         	goto	_main	;jump to C main() function
   120                           tblptru	equ	0xFF8
   121                           tblptrh	equ	0xFF7
   122                           tblptrl	equ	0xFF6
   123                           tablat	equ	0xFF5
   124                           postinc0	equ	0xFEE
   125                           wreg	equ	0xFE8
   126                           postdec1	equ	0xFE5
   127                           fsr1l	equ	0xFE1
   128                           
   129                           	psect	bssCOMRAM
   130  000001                     __pbssCOMRAM:
   131                           	opt stack 0
   132  000001                     _dataBufIn:
   133                           	opt stack 0
   134  000001                     	ds	32
   135  000021                     _dataBufOut:
   136                           	opt stack 0
   137  000021                     	ds	32
   138  000041                     _EN_AA_CURR:
   139                           	opt stack 0
   140  000041                     	ds	1
   141  000042                     _nrfSTATUS:
   142                           	opt stack 0
   143  000042                     	ds	1
   144                           tblptru	equ	0xFF8
   145                           tblptrh	equ	0xFF7
   146                           tblptrl	equ	0xFF6
   147                           tablat	equ	0xFF5
   148                           postinc0	equ	0xFEE
   149                           wreg	equ	0xFE8
   150                           postdec1	equ	0xFE5
   151                           fsr1l	equ	0xFE1
   152                           
   153                           	psect	dataCOMRAM
   154  000043                     __pdataCOMRAM:
   155                           	opt stack 0
   156  000043                     _CONFIG_CURR:
   157                           	opt stack 0
   158  000043                     	ds	1
   159  000044                     _DYNPD_CURR:
   160                           	opt stack 0
   161  000044                     	ds	1
   162  000045                     _EN_RXADDR_CURR:
   163                           	opt stack 0
   164  000045                     	ds	1
   165  000046                     _FEATURE_CURR:
   166                           	opt stack 0
   167  000046                     	ds	1
   168  000047                     _RF_CH_CURR:
   169                           	opt stack 0
   170  000047                     	ds	1
   171  000048                     _RF_SETUP_CURR:
   172                           	opt stack 0
   173  000048                     	ds	1
   174  000049                     _RX_PW_P0_CURR:
   175                           	opt stack 0
   176  000049                     	ds	1
   177  00004A                     _SETUP_AW_CURR:
   178                           	opt stack 0
   179  00004A                     	ds	1
   180  00004B                     _SETUP_RETR_CURR:
   181                           	opt stack 0
   182  00004B                     	ds	1
   183  00004C                     _RX_ADDRESS:
   184                           	opt stack 0
   185  00004C                     	ds	4
   186  000050                     _TX_ADDRESS:
   187                           	opt stack 0
   188  000050                     	ds	4
   189                           tblptru	equ	0xFF8
   190                           tblptrh	equ	0xFF7
   191                           tblptrl	equ	0xFF6
   192                           tablat	equ	0xFF5
   193                           postinc0	equ	0xFEE
   194                           wreg	equ	0xFE8
   195                           postdec1	equ	0xFE5
   196                           fsr1l	equ	0xFE1
   197                           
   198                           	psect	cstackCOMRAM
   199  000054                     __pcstackCOMRAM:
   200                           	opt stack 0
   201  000054                     spiTransferByte@data:
   202                           	opt stack 0
   203  000054                     setCSN@level:
   204                           	opt stack 0
   205  000054                     delay10ms@ms_multi:
   206                           	opt stack 0
   207                           
   208                           ; 2 bytes @ 0x0
   209  000054                     	ds	2
   210  000056                     ??_delay10ms:
   211  000056                     nrfConfigReg@command:
   212                           	opt stack 0
   213  000056                     spiTransfer@command:
   214                           	opt stack 0
   215  000056                     nrfSetTXAddr@addr:
   216                           	opt stack 0
   217  000056                     nrfSetRXAddr@addr:
   218                           	opt stack 0
   219  000056                     nrfTXData@len:
   220                           	opt stack 0
   221                           
   222                           ; 2 bytes @ 0x2
   223  000056                     	ds	1
   224  000057                     nrfConfigReg@data:
   225                           	opt stack 0
   226  000057                     spiTransfer@len:
   227                           	opt stack 0
   228  000057                     delay10ms@i:
   229                           	opt stack 0
   230                           
   231                           ; 2 bytes @ 0x3
   232  000057                     	ds	1
   233  000058                     ??_nrfTXData:
   234  000058                     nrfConfigReg@wr:
   235                           	opt stack 0
   236  000058                     nrfSetTXAddr@len:
   237                           	opt stack 0
   238  000058                     nrfSetRXAddr@len:
   239                           	opt stack 0
   240                           
   241                           ; 2 bytes @ 0x4
   242  000058                     	ds	1
   243  000059                     ??_spiTransfer:
   244  000059                     nrfTXData@i_558:
   245                           	opt stack 0
   246                           
   247                           ; 2 bytes @ 0x5
   248  000059                     	ds	1
   249  00005A                     ??_nrfSetRXAddr:
   250  00005A                     ??_nrfSetTXAddr:
   251  00005A                     spiTransfer@i:
   252                           	opt stack 0
   253                           
   254                           ; 2 bytes @ 0x6
   255  00005A                     	ds	1
   256  00005B                     nrfSetRXAddr@pipe:
   257                           	opt stack 0
   258  00005B                     nrfSetTXAddr@i:
   259                           	opt stack 0
   260  00005B                     nrfTXData@i:
   261                           	opt stack 0
   262                           
   263                           ; 2 bytes @ 0x7
   264  00005B                     	ds	1
   265  00005C                     spiTransfer@wrn:
   266                           	opt stack 0
   267  00005C                     nrfSetRXAddr@i:
   268                           	opt stack 0
   269                           
   270                           ; 2 bytes @ 0x8
   271  00005C                     	ds	2
   272  00005E                     main@count:
   273                           	opt stack 0
   274                           
   275                           ; 2 bytes @ 0xA
   276  00005E                     	ds	2
   277                           tblptru	equ	0xFF8
   278                           tblptrh	equ	0xFF7
   279                           tblptrl	equ	0xFF6
   280                           tablat	equ	0xFF5
   281                           postinc0	equ	0xFEE
   282                           wreg	equ	0xFE8
   283                           postdec1	equ	0xFE5
   284                           fsr1l	equ	0xFE1
   285                           
   286 ;;
   287 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   288 ;;
   289 ;; *************** function _main *****************
   290 ;; Defined at:
   291 ;;		line 192 in file "main.c"
   292 ;; Parameters:    Size  Location     Type
   293 ;;		None
   294 ;; Auto vars:     Size  Location     Type
   295 ;;  count           2   10[COMRAM] int 
   296 ;; Return value:  Size  Location     Type
   297 ;;		None               void
   298 ;; Registers used:
   299 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   300 ;; Tracked objects:
   301 ;;		On entry : 0/0
   302 ;;		On exit  : 0/0
   303 ;;		Unchanged: 0/0
   304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   305 ;;      Params:         0       0       0       0
   306 ;;      Locals:         2       0       0       0
   307 ;;      Temps:          0       0       0       0
   308 ;;      Totals:         2       0       0       0
   309 ;;Total ram usage:        2 bytes
   310 ;; Hardware stack levels required when called:    3
   311 ;; This function calls:
   312 ;;		_delay10ms
   313 ;;		_nrfConfig
   314 ;;		_nrfGetStatus
   315 ;;		_nrfTXData
   316 ;;		_portConfig
   317 ;;		_spiConfig_1
   318 ;;		_spiTransfer
   319 ;; This function is called by:
   320 ;;		Startup code after reset
   321 ;; This function uses a non-reentrant model
   322 ;;
   323                           
   324                           	psect	text0
   325  003F10                     __ptext0:
   326                           	opt stack 0
   327  003F10                     _main:
   328                           	opt stack 28
   329                           
   330                           ;main.c: 195: portConfig();
   331                           
   332                           ;incstack = 0
   333  003F10  ECA7  F01D         	call	_portConfig	;wreg free
   334                           
   335                           ;main.c: 196: spiConfig_1();
   336  003F14  EC9B  F01D         	call	_spiConfig_1	;wreg free
   337                           
   338                           ;main.c: 197: nrfConfig();
   339  003F18  EC1A  F01F         	call	_nrfConfig	;wreg free
   340                           
   341                           ;main.c: 199: delay10ms(1);
   342  003F1C  0E00               	movlw	0
   343  003F1E  6E55               	movwf	delay10ms@ms_multi+1,c
   344  003F20  0E01               	movlw	1
   345  003F22  6E54               	movwf	delay10ms@ms_multi,c
   346  003F24  ECDE  F01D         	call	_delay10ms	;wreg free
   347                           
   348                           ;main.c: 201: dataBufOut[1] = 0x48;
   349  003F28  0E48               	movlw	72
   350  003F2A  6E22               	movwf	_dataBufOut+1,c
   351                           
   352                           ;main.c: 202: dataBufOut[2] = 0x4F;
   353  003F2C  0E4F               	movlw	79
   354  003F2E  6E23               	movwf	_dataBufOut+2,c
   355                           
   356                           ;main.c: 203: dataBufOut[3] = 88;
   357  003F30  0E58               	movlw	88
   358  003F32  6E24               	movwf	_dataBufOut+3,c
   359                           
   360                           ;main.c: 204: dataBufOut[4] = 0x49;
   361  003F34  0E49               	movlw	73
   362  003F36  6E25               	movwf	_dataBufOut+4,c
   363                           
   364                           ;main.c: 205: dataBufOut[5] = 0x5F;
   365  003F38  0E5F               	movlw	95
   366  003F3A  6E26               	movwf	_dataBufOut+5,c
   367                           
   368                           ;main.c: 206: dataBufOut[6] = 47;
   369  003F3C  0E2F               	movlw	47
   370  003F3E  6E27               	movwf	_dataBufOut+6,c
   371                           
   372                           ;main.c: 207: dataBufOut[7] = 0x74;
   373  003F40  0E74               	movlw	116
   374  003F42  6E28               	movwf	_dataBufOut+7,c
   375                           
   376                           ;main.c: 208: dataBufOut[8] = 0x6F;
   377  003F44  0E6F               	movlw	111
   378  003F46  6E29               	movwf	_dataBufOut+8,c
   379                           
   380                           ;main.c: 209: dataBufOut[9] = 58;
   381  003F48  0E3A               	movlw	58
   382  003F4A  6E2A               	movwf	_dataBufOut+9,c
   383                           
   384                           ;main.c: 210: dataBufOut[10] = 0xA8;
   385  003F4C  0EA8               	movlw	168
   386  003F4E  6E2B               	movwf	_dataBufOut+10,c
   387                           
   388                           ;main.c: 211: dataBufOut[11] = 0x6F;
   389  003F50  0E6F               	movlw	111
   390  003F52  6E2C               	movwf	_dataBufOut+11,c
   391                           
   392                           ;main.c: 212: dataBufOut[12] = 99;
   393  003F54  0E63               	movlw	99
   394  003F56  6E2D               	movwf	_dataBufOut+12,c
   395                           
   396                           ;main.c: 213: dataBufOut[13] = 0x88;
   397  003F58  0E88               	movlw	136
   398  003F5A  6E2E               	movwf	_dataBufOut+13,c
   399                           
   400                           ;main.c: 214: dataBufOut[14] = 0x5F;
   401  003F5C  0E5F               	movlw	95
   402  003F5E  6E2F               	movwf	_dataBufOut+14,c
   403                           
   404                           ;main.c: 215: dataBufOut[15] = 72;
   405  003F60  0E48               	movlw	72
   406  003F62  6E30               	movwf	_dataBufOut+15,c
   407                           
   408                           ;main.c: 216: dataBufOut[16] = 0x98;
   409  003F64  0E98               	movlw	152
   410  003F66  6E31               	movwf	_dataBufOut+16,c
   411                           
   412                           ;main.c: 217: dataBufOut[17] = 0x6F;
   413  003F68  0E6F               	movlw	111
   414  003F6A  6E32               	movwf	_dataBufOut+17,c
   415                           
   416                           ;main.c: 218: dataBufOut[18] = 92;
   417  003F6C  0E5C               	movlw	92
   418  003F6E  6E33               	movwf	_dataBufOut+18,c
   419                           
   420                           ;main.c: 219: dataBufOut[19] = 0x4A;
   421  003F70  0E4A               	movlw	74
   422  003F72  6E34               	movwf	_dataBufOut+19,c
   423                           
   424                           ;main.c: 220: dataBufOut[20] = 0x6F;
   425  003F74  0E6F               	movlw	111
   426  003F76  6E35               	movwf	_dataBufOut+20,c
   427                           
   428                           ;main.c: 221: dataBufOut[21] = 62;
   429  003F78  0E3E               	movlw	62
   430  003F7A  6E36               	movwf	_dataBufOut+21,c
   431                           
   432                           ;main.c: 222: dataBufOut[22] = 0x62;
   433  003F7C  0E62               	movlw	98
   434  003F7E  6E37               	movwf	_dataBufOut+22,c
   435                           
   436                           ;main.c: 223: dataBufOut[23] = 0x6F;
   437  003F80  0E6F               	movlw	111
   438  003F82  6E38               	movwf	_dataBufOut+23,c
   439                           
   440                           ;main.c: 224: dataBufOut[24] = 82;
   441  003F84  0E52               	movlw	82
   442  003F86  6E39               	movwf	_dataBufOut+24,c
   443                           
   444                           ;main.c: 225: dataBufOut[25] = 0x86;
   445  003F88  0E86               	movlw	134
   446  003F8A  6E3A               	movwf	_dataBufOut+25,c
   447                           
   448                           ;main.c: 226: dataBufOut[26] = 0x7F;
   449  003F8C  0E7F               	movlw	127
   450  003F8E  6E3B               	movwf	_dataBufOut+26,c
   451                           
   452                           ;main.c: 227: dataBufOut[27] = 72;
   453  003F90  0E48               	movlw	72
   454  003F92  6E3C               	movwf	_dataBufOut+27,c
   455                           
   456                           ;main.c: 228: dataBufOut[28] = 102;
   457  003F94  0E66               	movlw	102
   458  003F96  6E3D               	movwf	_dataBufOut+28,c
   459                           
   460                           ;main.c: 229: dataBufOut[29] = 0xC0;
   461  003F98  0EC0               	movlw	192
   462  003F9A  6E3E               	movwf	_dataBufOut+29,c
   463                           
   464                           ;main.c: 230: dataBufOut[30] = 0x5F;
   465  003F9C  0E5F               	movlw	95
   466  003F9E  6E3F               	movwf	_dataBufOut+30,c
   467                           
   468                           ;main.c: 231: dataBufOut[31] = 122;
   469  003FA0  0E7A               	movlw	122
   470  003FA2  6E40               	movwf	_dataBufOut+31,c
   471                           
   472                           ;main.c: 234: int count = 1;
   473  003FA4  0E00               	movlw	0
   474  003FA6  6E5F               	movwf	main@count+1,c
   475  003FA8  0E01               	movlw	1
   476  003FAA  6E5E               	movwf	main@count,c
   477  003FAC                     l950:
   478                           
   479                           ;main.c: 237: dataBufOut[0] = count;
   480  003FAC  C05E  F021         	movff	main@count,_dataBufOut
   481                           
   482                           ;main.c: 238: nrfTXData(32);
   483  003FB0  0E00               	movlw	0
   484  003FB2  6E57               	movwf	nrfTXData@len+1,c
   485  003FB4  0E20               	movlw	32
   486  003FB6  6E56               	movwf	nrfTXData@len,c
   487  003FB8  ECCA  F01E         	call	_nrfTXData	;wreg free
   488                           
   489                           ;main.c: 239: count++;
   490  003FBC  4A5E               	infsnz	main@count,f,c
   491  003FBE  2A5F               	incf	main@count+1,f,c
   492                           
   493                           ;main.c: 241: nrfGetStatus();
   494  003FC0  ECB4  F01D         	call	_nrfGetStatus	;wreg free
   495                           
   496                           ;main.c: 243: if (nrfSTATUS != 0x0E) {
   497  003FC4  5042               	movf	_nrfSTATUS,w,c
   498  003FC6  0A0E               	xorlw	14
   499  003FC8  B4D8               	btfsc	status,2,c
   500  003FCA  D013               	goto	l970
   501                           
   502                           ;main.c: 245: LATAbits.LATA0 = 1;
   503  003FCC  8089               	bsf	3977,0,c	;volatile
   504                           
   505                           ;main.c: 248: dataBufOut[0] = 0b01110000;
   506  003FCE  0E70               	movlw	112
   507  003FD0  6E21               	movwf	_dataBufOut,c
   508                           
   509                           ;main.c: 249: spiTransfer('w',0x07,1);
   510  003FD2  0E07               	movlw	7
   511  003FD4  6E56               	movwf	spiTransfer@command,c
   512  003FD6  0E00               	movlw	0
   513  003FD8  6E58               	movwf	spiTransfer@len+1,c
   514  003FDA  0E01               	movlw	1
   515  003FDC  6E57               	movwf	spiTransfer@len,c
   516  003FDE  0E77               	movlw	119
   517  003FE0  EC7F  F01E         	call	_spiTransfer
   518                           
   519                           ;main.c: 251: delay10ms(10);
   520  003FE4  0E00               	movlw	0
   521  003FE6  6E55               	movwf	delay10ms@ms_multi+1,c
   522  003FE8  0E0A               	movlw	10
   523  003FEA  6E54               	movwf	delay10ms@ms_multi,c
   524  003FEC  ECDE  F01D         	call	_delay10ms	;wreg free
   525                           
   526                           ;main.c: 253: LATAbits.LATA0 = 0;
   527  003FF0  9089               	bcf	3977,0,c	;volatile
   528  003FF2                     l970:
   529                           
   530                           ;main.c: 254: }
   531                           ;main.c: 256: delay10ms(500);
   532  003FF2  0E01               	movlw	1
   533  003FF4  6E55               	movwf	delay10ms@ms_multi+1,c
   534  003FF6  0EF4               	movlw	244
   535  003FF8  6E54               	movwf	delay10ms@ms_multi,c
   536  003FFA  ECDE  F01D         	call	_delay10ms	;wreg free
   537                           
   538                           ;main.c: 257: }
   539  003FFE  D7D6               	goto	l950
   540  004000                     __end_of_main:
   541                           	opt stack 0
   542                           tblptru	equ	0xFF8
   543                           tblptrh	equ	0xFF7
   544                           tblptrl	equ	0xFF6
   545                           tablat	equ	0xFF5
   546                           postinc0	equ	0xFEE
   547                           wreg	equ	0xFE8
   548                           postdec1	equ	0xFE5
   549                           fsr1l	equ	0xFE1
   550                           status	equ	0xFD8
   551                           
   552 ;; *************** function _spiConfig_1 *****************
   553 ;; Defined at:
   554 ;;		line 277 in file "main.c"
   555 ;; Parameters:    Size  Location     Type
   556 ;;		None
   557 ;; Auto vars:     Size  Location     Type
   558 ;;		None
   559 ;; Return value:  Size  Location     Type
   560 ;;		None               void
   561 ;; Registers used:
   562 ;;		wreg, status,2
   563 ;; Tracked objects:
   564 ;;		On entry : 0/0
   565 ;;		On exit  : 0/0
   566 ;;		Unchanged: 0/0
   567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   568 ;;      Params:         0       0       0       0
   569 ;;      Locals:         0       0       0       0
   570 ;;      Temps:          0       0       0       0
   571 ;;      Totals:         0       0       0       0
   572 ;;Total ram usage:        0 bytes
   573 ;; Hardware stack levels used:    1
   574 ;; This function calls:
   575 ;;		Nothing
   576 ;; This function is called by:
   577 ;;		_main
   578 ;; This function uses a non-reentrant model
   579 ;;
   580                           
   581                           	psect	text1
   582  003B36                     __ptext1:
   583                           	opt stack 0
   584  003B36                     _spiConfig_1:
   585                           	opt stack 30
   586                           
   587                           ;main.c: 278: SSP1CON1bits.CKP = 0;
   588                           
   589                           ;incstack = 0
   590  003B36  98C6               	bcf	4038,4,c	;volatile
   591                           
   592                           ;main.c: 279: SSP1STATbits.CKE = 1;
   593  003B38  8CC7               	bsf	4039,6,c	;volatile
   594                           
   595                           ;main.c: 280: SSP1STATbits.SMP = 1;
   596  003B3A  8EC7               	bsf	4039,7,c	;volatile
   597                           
   598                           ;main.c: 281: SSP1ADD = 0b00000011;
   599  003B3C  0E03               	movlw	3
   600  003B3E  6EC8               	movwf	4040,c	;volatile
   601                           
   602                           ;main.c: 282: SSP1CON1bits.SSPM = 0b1010;
   603  003B40  50C6               	movf	4038,w,c	;volatile
   604  003B42  0BF0               	andlw	-16
   605  003B44  090A               	iorlw	10
   606  003B46  6EC6               	movwf	4038,c	;volatile
   607                           
   608                           ;main.c: 283: SSP1CON1bits.SSPEN = 1;
   609  003B48  8AC6               	bsf	4038,5,c	;volatile
   610                           
   611                           ;main.c: 284: LATAbits.LATA2 = 1;
   612  003B4A  8489               	bsf	3977,2,c	;volatile
   613  003B4C  0012               	return	
   614  003B4E                     __end_of_spiConfig_1:
   615                           	opt stack 0
   616                           tblptru	equ	0xFF8
   617                           tblptrh	equ	0xFF7
   618                           tblptrl	equ	0xFF6
   619                           tablat	equ	0xFF5
   620                           postinc0	equ	0xFEE
   621                           wreg	equ	0xFE8
   622                           postdec1	equ	0xFE5
   623                           fsr1l	equ	0xFE1
   624                           status	equ	0xFD8
   625                           
   626 ;; *************** function _portConfig *****************
   627 ;; Defined at:
   628 ;;		line 263 in file "main.c"
   629 ;; Parameters:    Size  Location     Type
   630 ;;		None
   631 ;; Auto vars:     Size  Location     Type
   632 ;;		None
   633 ;; Return value:  Size  Location     Type
   634 ;;		None               void
   635 ;; Registers used:
   636 ;;		wreg, status,2
   637 ;; Tracked objects:
   638 ;;		On entry : 0/0
   639 ;;		On exit  : 0/0
   640 ;;		Unchanged: 0/0
   641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   642 ;;      Params:         0       0       0       0
   643 ;;      Locals:         0       0       0       0
   644 ;;      Temps:          0       0       0       0
   645 ;;      Totals:         0       0       0       0
   646 ;;Total ram usage:        0 bytes
   647 ;; Hardware stack levels used:    1
   648 ;; This function calls:
   649 ;;		Nothing
   650 ;; This function is called by:
   651 ;;		_main
   652 ;; This function uses a non-reentrant model
   653 ;;
   654                           
   655                           	psect	text2
   656  003B4E                     __ptext2:
   657                           	opt stack 0
   658  003B4E                     _portConfig:
   659                           	opt stack 30
   660                           
   661                           ;main.c: 264: TRISA = 0b00001000;
   662                           
   663                           ;incstack = 0
   664  003B4E  0E08               	movlw	8
   665  003B50  6E92               	movwf	3986,c	;volatile
   666                           
   667                           ;main.c: 265: TRISB = 0b00000000;
   668  003B52  0E00               	movlw	0
   669  003B54  6E93               	movwf	3987,c	;volatile
   670                           
   671                           ;main.c: 266: TRISC = 0b00010000;
   672  003B56  0E10               	movlw	16
   673  003B58  6E94               	movwf	3988,c	;volatile
   674                           
   675                           ;main.c: 268: LATA = 0b00000100;
   676  003B5A  0E04               	movlw	4
   677  003B5C  6E89               	movwf	3977,c	;volatile
   678                           
   679                           ;main.c: 269: LATB = 0x00;
   680  003B5E  0E00               	movlw	0
   681  003B60  6E8A               	movwf	3978,c	;volatile
   682                           
   683                           ;main.c: 270: LATC = 0x00;
   684  003B62  0E00               	movlw	0
   685  003B64  6E8B               	movwf	3979,c	;volatile
   686  003B66  0012               	return	
   687  003B68                     __end_of_portConfig:
   688                           	opt stack 0
   689                           tblptru	equ	0xFF8
   690                           tblptrh	equ	0xFF7
   691                           tblptrl	equ	0xFF6
   692                           tablat	equ	0xFF5
   693                           postinc0	equ	0xFEE
   694                           wreg	equ	0xFE8
   695                           postdec1	equ	0xFE5
   696                           fsr1l	equ	0xFE1
   697                           status	equ	0xFD8
   698                           
   699 ;; *************** function _nrfTXData *****************
   700 ;; Defined at:
   701 ;;		line 455 in file "main.c"
   702 ;; Parameters:    Size  Location     Type
   703 ;;  len             2    2[COMRAM] int 
   704 ;; Auto vars:     Size  Location     Type
   705 ;;  i               2    7[COMRAM] int 
   706 ;;  i               2    5[COMRAM] int 
   707 ;; Return value:  Size  Location     Type
   708 ;;		None               void
   709 ;; Registers used:
   710 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   711 ;; Tracked objects:
   712 ;;		On entry : 0/0
   713 ;;		On exit  : 0/0
   714 ;;		Unchanged: 0/0
   715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   716 ;;      Params:         2       0       0       0
   717 ;;      Locals:         4       0       0       0
   718 ;;      Temps:          1       0       0       0
   719 ;;      Totals:         7       0       0       0
   720 ;;Total ram usage:        7 bytes
   721 ;; Hardware stack levels used:    1
   722 ;; Hardware stack levels required when called:    1
   723 ;; This function calls:
   724 ;;		_setCSN
   725 ;;		_spiTransferByte
   726 ;; This function is called by:
   727 ;;		_main
   728 ;; This function uses a non-reentrant model
   729 ;;
   730                           
   731                           	psect	text3
   732  003D94                     __ptext3:
   733                           	opt stack 0
   734  003D94                     _nrfTXData:
   735                           	opt stack 29
   736                           
   737                           ;main.c: 457: setCSN(0);
   738                           
   739                           ;incstack = 0
   740  003D94  0E00               	movlw	0
   741  003D96  6E55               	movwf	setCSN@level+1,c
   742  003D98  0E00               	movlw	0
   743  003D9A  6E54               	movwf	setCSN@level,c
   744  003D9C  EC81  F01D         	call	_setCSN	;wreg free
   745                           
   746                           ;main.c: 459: spiTransferByte(0xA0);
   747  003DA0  0EA0               	movlw	160
   748  003DA2  EC92  F01D         	call	_spiTransferByte
   749                           
   750                           ;main.c: 461: if (len != 0) {
   751  003DA6  5057               	movf	nrfTXData@len+1,w,c
   752  003DA8  1056               	iorwf	nrfTXData@len,w,c
   753  003DAA  B4D8               	btfsc	status,2,c
   754  003DAC  D01A               	goto	l858
   755                           
   756                           ;main.c: 462: for (int i=0;i<len;i++) {
   757  003DAE  0E00               	movlw	0
   758  003DB0  6E5C               	movwf	nrfTXData@i+1,c
   759  003DB2  0E00               	movlw	0
   760  003DB4  6E5B               	movwf	nrfTXData@i,c
   761  003DB6  D00B               	goto	l856
   762  003DB8                     l852:
   763                           
   764                           ;main.c: 463: spiTransferByte(dataBufOut[i]);
   765  003DB8  0E21               	movlw	low _dataBufOut
   766  003DBA  245B               	addwf	nrfTXData@i,w,c
   767  003DBC  6ED9               	movwf	fsr2l,c
   768  003DBE  0E00               	movlw	high _dataBufOut
   769  003DC0  205C               	addwfc	nrfTXData@i+1,w,c
   770  003DC2  6EDA               	movwf	fsr2h,c
   771  003DC4  50DF               	movf	indf2,w,c
   772  003DC6  EC92  F01D         	call	_spiTransferByte
   773  003DCA  4A5B               	infsnz	nrfTXData@i,f,c
   774  003DCC  2A5C               	incf	nrfTXData@i+1,f,c
   775  003DCE                     l856:
   776  003DCE  505C               	movf	nrfTXData@i+1,w,c
   777  003DD0  0A80               	xorlw	128
   778  003DD2  6E58               	movwf	??_nrfTXData& (0+255),c
   779  003DD4  5056               	movf	nrfTXData@len,w,c
   780  003DD6  5C5B               	subwf	nrfTXData@i,w,c
   781  003DD8  5057               	movf	nrfTXData@len+1,w,c
   782  003DDA  0A80               	xorlw	128
   783  003DDC  5858               	subwfb	??_nrfTXData& (0+255),w,c
   784  003DDE  A0D8               	btfss	status,0,c
   785  003DE0  D7EB               	goto	l852
   786  003DE2                     l858:
   787                           
   788                           ;main.c: 464: }
   789                           ;main.c: 465: }
   790                           ;main.c: 467: setCSN(1);
   791  003DE2  0E00               	movlw	0
   792  003DE4  6E55               	movwf	setCSN@level+1,c
   793  003DE6  0E01               	movlw	1
   794  003DE8  6E54               	movwf	setCSN@level,c
   795  003DEA  EC81  F01D         	call	_setCSN	;wreg free
   796                           
   797                           ;main.c: 470: LATAbits.LATA1 = 1;
   798  003DEE  8289               	bsf	3977,1,c	;volatile
   799                           
   800                           ;main.c: 471: _delay((unsigned long)((12)*(64000000/4000000.0)));
   801  003DF0  0E40               	movlw	64
   802  003DF2                     u187:
   803  003DF2  2EE8               	decfsz	wreg,f,c
   804  003DF4  D7FE               	goto	u187
   805                           
   806                           ;main.c: 472: LATAbits.LATA1 = 0;
   807  003DF6  9289               	bcf	3977,1,c	;volatile
   808                           
   809                           ;main.c: 473: _delay((unsigned long)((180)*(64000000/4000000.0)));
   810  003DF8  0E04               	movlw	4
   811  003DFA  6E58               	movwf	??_nrfTXData& (0+255),c
   812  003DFC  0EBC               	movlw	188
   813  003DFE                     u197:
   814  003DFE  2EE8               	decfsz	wreg,f,c
   815  003E00  D7FE               	goto	u197
   816  003E02  2E58               	decfsz	??_nrfTXData& (0+255),f,c
   817  003E04  D7FC               	goto	u197
   818  003E06  D000               	nop2	
   819                           
   820                           ;main.c: 474: for (int i=0;i<len;i++) {
   821  003E08  0E00               	movlw	0
   822  003E0A  6E5A               	movwf	nrfTXData@i_558+1,c
   823  003E0C  0E00               	movlw	0
   824  003E0E  6E59               	movwf	nrfTXData@i_558,c
   825  003E10  D006               	goto	l141
   826  003E12                     l870:
   827                           
   828                           ;main.c: 475: _delay((unsigned long)((8)*(64000000/4000000.0)));
   829  003E12  0E2A               	movlw	42
   830  003E14                     u207:
   831  003E14  2EE8               	decfsz	wreg,f,c
   832  003E16  D7FE               	goto	u207
   833  003E18  D000               	nop2		;nop
   834  003E1A  4A59               	infsnz	nrfTXData@i_558,f,c
   835  003E1C  2A5A               	incf	nrfTXData@i_558+1,f,c
   836  003E1E                     l141:
   837  003E1E  505A               	movf	nrfTXData@i_558+1,w,c
   838  003E20  0A80               	xorlw	128
   839  003E22  6E58               	movwf	??_nrfTXData& (0+255),c
   840  003E24  5056               	movf	nrfTXData@len,w,c
   841  003E26  5C59               	subwf	nrfTXData@i_558,w,c
   842  003E28  5057               	movf	nrfTXData@len+1,w,c
   843  003E2A  0A80               	xorlw	128
   844  003E2C  5858               	subwfb	??_nrfTXData& (0+255),w,c
   845  003E2E  B0D8               	btfsc	status,0,c
   846  003E30  0012               	return	
   847  003E32  D7EF               	goto	l870
   848  003E34                     __end_of_nrfTXData:
   849                           	opt stack 0
   850                           tblptru	equ	0xFF8
   851                           tblptrh	equ	0xFF7
   852                           tblptrl	equ	0xFF6
   853                           tablat	equ	0xFF5
   854                           postinc0	equ	0xFEE
   855                           wreg	equ	0xFE8
   856                           postdec1	equ	0xFE5
   857                           fsr1l	equ	0xFE1
   858                           indf2	equ	0xFDF
   859                           fsr2h	equ	0xFDA
   860                           fsr2l	equ	0xFD9
   861                           status	equ	0xFD8
   862                           
   863 ;; *************** function _nrfGetStatus *****************
   864 ;; Defined at:
   865 ;;		line 338 in file "main.c"
   866 ;; Parameters:    Size  Location     Type
   867 ;;		None
   868 ;; Auto vars:     Size  Location     Type
   869 ;;		None
   870 ;; Return value:  Size  Location     Type
   871 ;;		None               void
   872 ;; Registers used:
   873 ;;		wreg, status,2, status,0, cstack
   874 ;; Tracked objects:
   875 ;;		On entry : 0/0
   876 ;;		On exit  : 0/0
   877 ;;		Unchanged: 0/0
   878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   879 ;;      Params:         0       0       0       0
   880 ;;      Locals:         0       0       0       0
   881 ;;      Temps:          0       0       0       0
   882 ;;      Totals:         0       0       0       0
   883 ;;Total ram usage:        0 bytes
   884 ;; Hardware stack levels used:    1
   885 ;; Hardware stack levels required when called:    1
   886 ;; This function calls:
   887 ;;		_setCSN
   888 ;;		_spiTransferByte
   889 ;; This function is called by:
   890 ;;		_main
   891 ;; This function uses a non-reentrant model
   892 ;;
   893                           
   894                           	psect	text4
   895  003B68                     __ptext4:
   896                           	opt stack 0
   897  003B68                     _nrfGetStatus:
   898                           	opt stack 29
   899                           
   900                           ;main.c: 340: setCSN(0);
   901                           
   902                           ;incstack = 0
   903  003B68  0E00               	movlw	0
   904  003B6A  6E55               	movwf	setCSN@level+1,c
   905  003B6C  0E00               	movlw	0
   906  003B6E  6E54               	movwf	setCSN@level,c
   907  003B70  EC81  F01D         	call	_setCSN	;wreg free
   908                           
   909                           ;main.c: 342: nrfSTATUS = spiTransferByte(0xFF);
   910  003B74  0EFF               	movlw	255
   911  003B76  EC92  F01D         	call	_spiTransferByte
   912  003B7A  6E42               	movwf	_nrfSTATUS,c
   913                           
   914                           ;main.c: 344: setCSN(1);
   915  003B7C  0E00               	movlw	0
   916  003B7E  6E55               	movwf	setCSN@level+1,c
   917  003B80  0E01               	movlw	1
   918  003B82  6E54               	movwf	setCSN@level,c
   919  003B84  EC81  F01D         	call	_setCSN	;wreg free
   920  003B88  0012               	return	
   921  003B8A                     __end_of_nrfGetStatus:
   922                           	opt stack 0
   923                           tblptru	equ	0xFF8
   924                           tblptrh	equ	0xFF7
   925                           tblptrl	equ	0xFF6
   926                           tablat	equ	0xFF5
   927                           postinc0	equ	0xFEE
   928                           wreg	equ	0xFE8
   929                           postdec1	equ	0xFE5
   930                           fsr1l	equ	0xFE1
   931                           indf2	equ	0xFDF
   932                           fsr2h	equ	0xFDA
   933                           fsr2l	equ	0xFD9
   934                           status	equ	0xFD8
   935                           
   936 ;; *************** function _nrfConfig *****************
   937 ;; Defined at:
   938 ;;		line 290 in file "main.c"
   939 ;; Parameters:    Size  Location     Type
   940 ;;		None
   941 ;; Auto vars:     Size  Location     Type
   942 ;;		None
   943 ;; Return value:  Size  Location     Type
   944 ;;		None               void
   945 ;; Registers used:
   946 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   947 ;; Tracked objects:
   948 ;;		On entry : 0/0
   949 ;;		On exit  : 0/0
   950 ;;		Unchanged: 0/0
   951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   952 ;;      Params:         0       0       0       0
   953 ;;      Locals:         0       0       0       0
   954 ;;      Temps:          0       0       0       0
   955 ;;      Totals:         0       0       0       0
   956 ;;Total ram usage:        0 bytes
   957 ;; Hardware stack levels used:    1
   958 ;; Hardware stack levels required when called:    2
   959 ;; This function calls:
   960 ;;		_nrfConfigReg
   961 ;;		_nrfSetRXAddr
   962 ;;		_nrfSetTXAddr
   963 ;;		_spiTransfer
   964 ;; This function is called by:
   965 ;;		_main
   966 ;; This function uses a non-reentrant model
   967 ;;
   968                           
   969                           	psect	text5
   970  003E34                     __ptext5:
   971                           	opt stack 0
   972  003E34                     _nrfConfig:
   973                           	opt stack 28
   974                           
   975                           ;main.c: 293: nrfConfigReg('w',0x00,CONFIG_CURR);
   976                           
   977                           ;incstack = 0
   978  003E34  0E00               	movlw	0
   979  003E36  6E56               	movwf	nrfConfigReg@command,c
   980  003E38  C043  F057         	movff	_CONFIG_CURR,nrfConfigReg@data
   981  003E3C  0E77               	movlw	119
   982  003E3E  ECFC  F01D         	call	_nrfConfigReg
   983                           
   984                           ;main.c: 295: nrfConfigReg('w',0x01,EN_AA_CURR);
   985  003E42  0E01               	movlw	1
   986  003E44  6E56               	movwf	nrfConfigReg@command,c
   987  003E46  C041  F057         	movff	_EN_AA_CURR,nrfConfigReg@data
   988  003E4A  0E77               	movlw	119
   989  003E4C  ECFC  F01D         	call	_nrfConfigReg
   990                           
   991                           ;main.c: 297: nrfConfigReg('w',0x02,EN_RXADDR_CURR);
   992  003E50  0E02               	movlw	2
   993  003E52  6E56               	movwf	nrfConfigReg@command,c
   994  003E54  C045  F057         	movff	_EN_RXADDR_CURR,nrfConfigReg@data
   995  003E58  0E77               	movlw	119
   996  003E5A  ECFC  F01D         	call	_nrfConfigReg
   997                           
   998                           ;main.c: 299: nrfConfigReg('w',0x03,SETUP_AW_CURR);
   999  003E5E  0E03               	movlw	3
  1000  003E60  6E56               	movwf	nrfConfigReg@command,c
  1001  003E62  C04A  F057         	movff	_SETUP_AW_CURR,nrfConfigReg@data
  1002  003E66  0E77               	movlw	119
  1003  003E68  ECFC  F01D         	call	_nrfConfigReg
  1004                           
  1005                           ;main.c: 301: nrfConfigReg('w',0x04,SETUP_RETR_CURR);
  1006  003E6C  0E04               	movlw	4
  1007  003E6E  6E56               	movwf	nrfConfigReg@command,c
  1008  003E70  C04B  F057         	movff	_SETUP_RETR_CURR,nrfConfigReg@data
  1009  003E74  0E77               	movlw	119
  1010  003E76  ECFC  F01D         	call	_nrfConfigReg
  1011                           
  1012                           ;main.c: 303: nrfConfigReg('w',0x05,RF_CH_CURR);
  1013  003E7A  0E05               	movlw	5
  1014  003E7C  6E56               	movwf	nrfConfigReg@command,c
  1015  003E7E  C047  F057         	movff	_RF_CH_CURR,nrfConfigReg@data
  1016  003E82  0E77               	movlw	119
  1017  003E84  ECFC  F01D         	call	_nrfConfigReg
  1018                           
  1019                           ;main.c: 305: nrfConfigReg('w',0x06,RF_SETUP_CURR);
  1020  003E88  0E06               	movlw	6
  1021  003E8A  6E56               	movwf	nrfConfigReg@command,c
  1022  003E8C  C048  F057         	movff	_RF_SETUP_CURR,nrfConfigReg@data
  1023  003E90  0E77               	movlw	119
  1024  003E92  ECFC  F01D         	call	_nrfConfigReg
  1025                           
  1026                           ;main.c: 307: nrfSetRXAddr(0x0A,RX_ADDRESS,4);
  1027  003E96  0E00               	movlw	high _RX_ADDRESS
  1028  003E98  6E57               	movwf	nrfSetRXAddr@addr+1,c
  1029  003E9A  0E4C               	movlw	low _RX_ADDRESS
  1030  003E9C  6E56               	movwf	nrfSetRXAddr@addr,c
  1031  003E9E  0E00               	movlw	0
  1032  003EA0  6E59               	movwf	nrfSetRXAddr@len+1,c
  1033  003EA2  0E04               	movlw	4
  1034  003EA4  6E58               	movwf	nrfSetRXAddr@len,c
  1035  003EA6  0E0A               	movlw	10
  1036  003EA8  EC4F  F01E         	call	_nrfSetRXAddr
  1037                           
  1038                           ;main.c: 309: nrfSetTXAddr(TX_ADDRESS,4);
  1039  003EAC  0E00               	movlw	high _TX_ADDRESS
  1040  003EAE  6E57               	movwf	nrfSetTXAddr@addr+1,c
  1041  003EB0  0E50               	movlw	low _TX_ADDRESS
  1042  003EB2  6E56               	movwf	nrfSetTXAddr@addr,c
  1043  003EB4  0E00               	movlw	0
  1044  003EB6  6E59               	movwf	nrfSetTXAddr@len+1,c
  1045  003EB8  0E04               	movlw	4
  1046  003EBA  6E58               	movwf	nrfSetTXAddr@len,c
  1047  003EBC  EC21  F01E         	call	_nrfSetTXAddr	;wreg free
  1048                           
  1049                           ;main.c: 311: nrfConfigReg('w',0x11,RX_PW_P0_CURR);
  1050  003EC0  0E11               	movlw	17
  1051  003EC2  6E56               	movwf	nrfConfigReg@command,c
  1052  003EC4  C049  F057         	movff	_RX_PW_P0_CURR,nrfConfigReg@data
  1053  003EC8  0E77               	movlw	119
  1054  003ECA  ECFC  F01D         	call	_nrfConfigReg
  1055                           
  1056                           ;main.c: 313: nrfConfigReg('w',0x1C,DYNPD_CURR);
  1057  003ECE  0E1C               	movlw	28
  1058  003ED0  6E56               	movwf	nrfConfigReg@command,c
  1059  003ED2  C044  F057         	movff	_DYNPD_CURR,nrfConfigReg@data
  1060  003ED6  0E77               	movlw	119
  1061  003ED8  ECFC  F01D         	call	_nrfConfigReg
  1062                           
  1063                           ;main.c: 315: nrfConfigReg('w',0x1D,FEATURE_CURR);
  1064  003EDC  0E1D               	movlw	29
  1065  003EDE  6E56               	movwf	nrfConfigReg@command,c
  1066  003EE0  C046  F057         	movff	_FEATURE_CURR,nrfConfigReg@data
  1067  003EE4  0E77               	movlw	119
  1068  003EE6  ECFC  F01D         	call	_nrfConfigReg
  1069                           
  1070                           ;main.c: 317: spiTransfer('n',0xE1,0);
  1071  003EEA  0EE1               	movlw	225
  1072  003EEC  6E56               	movwf	spiTransfer@command,c
  1073  003EEE  0E00               	movlw	0
  1074  003EF0  6E58               	movwf	spiTransfer@len+1,c
  1075  003EF2  0E00               	movlw	0
  1076  003EF4  6E57               	movwf	spiTransfer@len,c
  1077  003EF6  0E6E               	movlw	110
  1078  003EF8  EC7F  F01E         	call	_spiTransfer
  1079                           
  1080                           ;main.c: 319: spiTransfer('n',0xE2,0);
  1081  003EFC  0EE2               	movlw	226
  1082  003EFE  6E56               	movwf	spiTransfer@command,c
  1083  003F00  0E00               	movlw	0
  1084  003F02  6E58               	movwf	spiTransfer@len+1,c
  1085  003F04  0E00               	movlw	0
  1086  003F06  6E57               	movwf	spiTransfer@len,c
  1087  003F08  0E6E               	movlw	110
  1088  003F0A  EC7F  F01E         	call	_spiTransfer
  1089  003F0E  0012               	return	
  1090  003F10                     __end_of_nrfConfig:
  1091                           	opt stack 0
  1092                           tblptru	equ	0xFF8
  1093                           tblptrh	equ	0xFF7
  1094                           tblptrl	equ	0xFF6
  1095                           tablat	equ	0xFF5
  1096                           postinc0	equ	0xFEE
  1097                           wreg	equ	0xFE8
  1098                           postdec1	equ	0xFE5
  1099                           fsr1l	equ	0xFE1
  1100                           indf2	equ	0xFDF
  1101                           fsr2h	equ	0xFDA
  1102                           fsr2l	equ	0xFD9
  1103                           status	equ	0xFD8
  1104                           
  1105 ;; *************** function _spiTransfer *****************
  1106 ;; Defined at:
  1107 ;;		line 418 in file "main.c"
  1108 ;; Parameters:    Size  Location     Type
  1109 ;;  wrn             1    wreg     unsigned char 
  1110 ;;  command         1    2[COMRAM] unsigned char 
  1111 ;;  len             2    3[COMRAM] int 
  1112 ;; Auto vars:     Size  Location     Type
  1113 ;;  wrn             1    8[COMRAM] unsigned char 
  1114 ;;  i               2    6[COMRAM] int 
  1115 ;; Return value:  Size  Location     Type
  1116 ;;		None               void
  1117 ;; Registers used:
  1118 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1119 ;; Tracked objects:
  1120 ;;		On entry : 0/0
  1121 ;;		On exit  : 0/0
  1122 ;;		Unchanged: 0/0
  1123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1124 ;;      Params:         3       0       0       0
  1125 ;;      Locals:         3       0       0       0
  1126 ;;      Temps:          1       0       0       0
  1127 ;;      Totals:         7       0       0       0
  1128 ;;Total ram usage:        7 bytes
  1129 ;; Hardware stack levels used:    1
  1130 ;; Hardware stack levels required when called:    1
  1131 ;; This function calls:
  1132 ;;		_setCSN
  1133 ;;		_spiTransferByte
  1134 ;; This function is called by:
  1135 ;;		_main
  1136 ;;		_nrfConfig
  1137 ;; This function uses a non-reentrant model
  1138 ;;
  1139                           
  1140                           	psect	text6
  1141  003CFE                     __ptext6:
  1142                           	opt stack 0
  1143  003CFE                     _spiTransfer:
  1144                           	opt stack 29
  1145                           
  1146                           ;incstack = 0
  1147                           ;spiTransfer@wrn stored from wreg
  1148  003CFE  6E5C               	movwf	spiTransfer@wrn,c
  1149                           
  1150                           ;main.c: 420: setCSN(0);
  1151  003D00  0E00               	movlw	0
  1152  003D02  6E55               	movwf	setCSN@level+1,c
  1153  003D04  0E00               	movlw	0
  1154  003D06  6E54               	movwf	setCSN@level,c
  1155  003D08  EC81  F01D         	call	_setCSN	;wreg free
  1156                           
  1157                           ;main.c: 422: if (wrn == 'w') {
  1158  003D0C  505C               	movf	spiTransfer@wrn,w,c
  1159  003D0E  0A77               	xorlw	119
  1160  003D10  A4D8               	btfss	status,2,c
  1161  003D12  D005               	goto	l752
  1162                           
  1163                           ;main.c: 423: spiTransferByte(0x20|command);
  1164  003D14  5056               	movf	spiTransfer@command,w,c
  1165  003D16  0920               	iorlw	32
  1166  003D18  EC92  F01D         	call	_spiTransferByte
  1167                           
  1168                           ;main.c: 424: } else if (wrn == 'r') {
  1169  003D1C  D00F               	goto	l760
  1170  003D1E                     l752:
  1171  003D1E  505C               	movf	spiTransfer@wrn,w,c
  1172  003D20  0A72               	xorlw	114
  1173  003D22  A4D8               	btfss	status,2,c
  1174  003D24  D004               	goto	l756
  1175                           
  1176                           ;main.c: 425: spiTransferByte(0x00|command);
  1177  003D26  5056               	movf	spiTransfer@command,w,c
  1178  003D28  EC92  F01D         	call	_spiTransferByte
  1179                           
  1180                           ;main.c: 426: } else if(wrn == 'n') {
  1181  003D2C  D007               	goto	l760
  1182  003D2E                     l756:
  1183  003D2E  505C               	movf	spiTransfer@wrn,w,c
  1184  003D30  0A6E               	xorlw	110
  1185  003D32  A4D8               	btfss	status,2,c
  1186  003D34  D003               	goto	l760
  1187                           
  1188                           ;main.c: 427: spiTransferByte(command);
  1189  003D36  5056               	movf	spiTransfer@command,w,c
  1190  003D38  EC92  F01D         	call	_spiTransferByte
  1191  003D3C                     l760:
  1192                           
  1193                           ;main.c: 428: }
  1194                           ;main.c: 430: if (len != 0) {
  1195  003D3C  5058               	movf	spiTransfer@len+1,w,c
  1196  003D3E  1057               	iorwf	spiTransfer@len,w,c
  1197  003D40  B4D8               	btfsc	status,2,c
  1198  003D42  D021               	goto	l770
  1199                           
  1200                           ;main.c: 431: for (int i=0;i<len;i++) {
  1201  003D44  0E00               	movlw	0
  1202  003D46  6E5B               	movwf	spiTransfer@i+1,c
  1203  003D48  0E00               	movlw	0
  1204  003D4A  6E5A               	movwf	spiTransfer@i,c
  1205  003D4C  D012               	goto	l768
  1206  003D4E                     l764:
  1207                           
  1208                           ;main.c: 432: dataBufIn[i] = spiTransferByte(dataBufOut[i]);
  1209  003D4E  0E01               	movlw	low _dataBufIn
  1210  003D50  245A               	addwf	spiTransfer@i,w,c
  1211  003D52  6ED9               	movwf	fsr2l,c
  1212  003D54  0E00               	movlw	high _dataBufIn
  1213  003D56  205B               	addwfc	spiTransfer@i+1,w,c
  1214  003D58  6EDA               	movwf	fsr2h,c
  1215  003D5A  0E21               	movlw	low _dataBufOut
  1216  003D5C  245A               	addwf	spiTransfer@i,w,c
  1217  003D5E  6EE1               	movwf	fsr1l,c
  1218  003D60  0E00               	movlw	high _dataBufOut
  1219  003D62  205B               	addwfc	spiTransfer@i+1,w,c
  1220  003D64  6EE2               	movwf	fsr1h,c
  1221  003D66  50E7               	movf	indf1,w,c
  1222  003D68  EC92  F01D         	call	_spiTransferByte
  1223  003D6C  6EDF               	movwf	indf2,c
  1224  003D6E  4A5A               	infsnz	spiTransfer@i,f,c
  1225  003D70  2A5B               	incf	spiTransfer@i+1,f,c
  1226  003D72                     l768:
  1227  003D72  505B               	movf	spiTransfer@i+1,w,c
  1228  003D74  0A80               	xorlw	128
  1229  003D76  6E59               	movwf	??_spiTransfer& (0+255),c
  1230  003D78  5057               	movf	spiTransfer@len,w,c
  1231  003D7A  5C5A               	subwf	spiTransfer@i,w,c
  1232  003D7C  5058               	movf	spiTransfer@len+1,w,c
  1233  003D7E  0A80               	xorlw	128
  1234  003D80  5859               	subwfb	??_spiTransfer& (0+255),w,c
  1235  003D82  A0D8               	btfss	status,0,c
  1236  003D84  D7E4               	goto	l764
  1237  003D86                     l770:
  1238                           
  1239                           ;main.c: 433: }
  1240                           ;main.c: 434: }
  1241                           ;main.c: 436: setCSN(1);
  1242  003D86  0E00               	movlw	0
  1243  003D88  6E55               	movwf	setCSN@level+1,c
  1244  003D8A  0E01               	movlw	1
  1245  003D8C  6E54               	movwf	setCSN@level,c
  1246  003D8E  EC81  F01D         	call	_setCSN	;wreg free
  1247  003D92  0012               	return	
  1248  003D94                     __end_of_spiTransfer:
  1249                           	opt stack 0
  1250                           tblptru	equ	0xFF8
  1251                           tblptrh	equ	0xFF7
  1252                           tblptrl	equ	0xFF6
  1253                           tablat	equ	0xFF5
  1254                           postinc0	equ	0xFEE
  1255                           wreg	equ	0xFE8
  1256                           indf1	equ	0xFE7
  1257                           postdec1	equ	0xFE5
  1258                           fsr1h	equ	0xFE2
  1259                           fsr1l	equ	0xFE1
  1260                           indf2	equ	0xFDF
  1261                           fsr2h	equ	0xFDA
  1262                           fsr2l	equ	0xFD9
  1263                           status	equ	0xFD8
  1264                           
  1265 ;; *************** function _nrfSetTXAddr *****************
  1266 ;; Defined at:
  1267 ;;		line 372 in file "main.c"
  1268 ;; Parameters:    Size  Location     Type
  1269 ;;  addr            2    2[COMRAM] PTR unsigned char 
  1270 ;;		 -> TX_ADDRESS(4), 
  1271 ;;  len             2    4[COMRAM] int 
  1272 ;; Auto vars:     Size  Location     Type
  1273 ;;  i               2    7[COMRAM] int 
  1274 ;; Return value:  Size  Location     Type
  1275 ;;		None               void
  1276 ;; Registers used:
  1277 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1278 ;; Tracked objects:
  1279 ;;		On entry : 0/0
  1280 ;;		On exit  : 0/0
  1281 ;;		Unchanged: 0/0
  1282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1283 ;;      Params:         4       0       0       0
  1284 ;;      Locals:         2       0       0       0
  1285 ;;      Temps:          1       0       0       0
  1286 ;;      Totals:         7       0       0       0
  1287 ;;Total ram usage:        7 bytes
  1288 ;; Hardware stack levels used:    1
  1289 ;; Hardware stack levels required when called:    1
  1290 ;; This function calls:
  1291 ;;		_setCSN
  1292 ;;		_spiTransferByte
  1293 ;; This function is called by:
  1294 ;;		_nrfConfig
  1295 ;; This function uses a non-reentrant model
  1296 ;;
  1297                           
  1298                           	psect	text7
  1299  003C42                     __ptext7:
  1300                           	opt stack 0
  1301  003C42                     _nrfSetTXAddr:
  1302                           	opt stack 28
  1303                           
  1304                           ;main.c: 374: setCSN(0);
  1305                           
  1306                           ;incstack = 0
  1307  003C42  0E00               	movlw	0
  1308  003C44  6E55               	movwf	setCSN@level+1,c
  1309  003C46  0E00               	movlw	0
  1310  003C48  6E54               	movwf	setCSN@level,c
  1311  003C4A  EC81  F01D         	call	_setCSN	;wreg free
  1312                           
  1313                           ;main.c: 376: spiTransferByte(0x20|0x10);
  1314  003C4E  0E30               	movlw	48
  1315  003C50  EC92  F01D         	call	_spiTransferByte
  1316                           
  1317                           ;main.c: 378: if (len != 0) {
  1318  003C54  5059               	movf	nrfSetTXAddr@len+1,w,c
  1319  003C56  1058               	iorwf	nrfSetTXAddr@len,w,c
  1320  003C58  B4D8               	btfsc	status,2,c
  1321  003C5A  D01A               	goto	l816
  1322                           
  1323                           ;main.c: 380: for (int i=0;i<len;i++) {
  1324  003C5C  0E00               	movlw	0
  1325  003C5E  6E5C               	movwf	nrfSetTXAddr@i+1,c
  1326  003C60  0E00               	movlw	0
  1327  003C62  6E5B               	movwf	nrfSetTXAddr@i,c
  1328  003C64  D00B               	goto	l814
  1329  003C66                     l810:
  1330                           
  1331                           ;main.c: 381: spiTransferByte(addr[i]);
  1332  003C66  505B               	movf	nrfSetTXAddr@i,w,c
  1333  003C68  2456               	addwf	nrfSetTXAddr@addr,w,c
  1334  003C6A  6ED9               	movwf	fsr2l,c
  1335  003C6C  505C               	movf	nrfSetTXAddr@i+1,w,c
  1336  003C6E  2057               	addwfc	nrfSetTXAddr@addr+1,w,c
  1337  003C70  6EDA               	movwf	fsr2h,c
  1338  003C72  50DF               	movf	indf2,w,c
  1339  003C74  EC92  F01D         	call	_spiTransferByte
  1340  003C78  4A5B               	infsnz	nrfSetTXAddr@i,f,c
  1341  003C7A  2A5C               	incf	nrfSetTXAddr@i+1,f,c
  1342  003C7C                     l814:
  1343  003C7C  505C               	movf	nrfSetTXAddr@i+1,w,c
  1344  003C7E  0A80               	xorlw	128
  1345  003C80  6E5A               	movwf	??_nrfSetTXAddr& (0+255),c
  1346  003C82  5058               	movf	nrfSetTXAddr@len,w,c
  1347  003C84  5C5B               	subwf	nrfSetTXAddr@i,w,c
  1348  003C86  5059               	movf	nrfSetTXAddr@len+1,w,c
  1349  003C88  0A80               	xorlw	128
  1350  003C8A  585A               	subwfb	??_nrfSetTXAddr& (0+255),w,c
  1351  003C8C  A0D8               	btfss	status,0,c
  1352  003C8E  D7EB               	goto	l810
  1353  003C90                     l816:
  1354                           
  1355                           ;main.c: 382: }
  1356                           ;main.c: 383: }
  1357                           ;main.c: 385: setCSN(1);
  1358  003C90  0E00               	movlw	0
  1359  003C92  6E55               	movwf	setCSN@level+1,c
  1360  003C94  0E01               	movlw	1
  1361  003C96  6E54               	movwf	setCSN@level,c
  1362  003C98  EC81  F01D         	call	_setCSN	;wreg free
  1363  003C9C  0012               	return	
  1364  003C9E                     __end_of_nrfSetTXAddr:
  1365                           	opt stack 0
  1366                           tblptru	equ	0xFF8
  1367                           tblptrh	equ	0xFF7
  1368                           tblptrl	equ	0xFF6
  1369                           tablat	equ	0xFF5
  1370                           postinc0	equ	0xFEE
  1371                           wreg	equ	0xFE8
  1372                           indf1	equ	0xFE7
  1373                           postdec1	equ	0xFE5
  1374                           fsr1h	equ	0xFE2
  1375                           fsr1l	equ	0xFE1
  1376                           indf2	equ	0xFDF
  1377                           fsr2h	equ	0xFDA
  1378                           fsr2l	equ	0xFD9
  1379                           status	equ	0xFD8
  1380                           
  1381 ;; *************** function _nrfSetRXAddr *****************
  1382 ;; Defined at:
  1383 ;;		line 394 in file "main.c"
  1384 ;; Parameters:    Size  Location     Type
  1385 ;;  pipe            1    wreg     unsigned char 
  1386 ;;  addr            2    2[COMRAM] PTR unsigned char 
  1387 ;;		 -> RX_ADDRESS(4), 
  1388 ;;  len             2    4[COMRAM] int 
  1389 ;; Auto vars:     Size  Location     Type
  1390 ;;  pipe            1    7[COMRAM] unsigned char 
  1391 ;;  i               2    8[COMRAM] int 
  1392 ;; Return value:  Size  Location     Type
  1393 ;;		None               void
  1394 ;; Registers used:
  1395 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1396 ;; Tracked objects:
  1397 ;;		On entry : 0/0
  1398 ;;		On exit  : 0/0
  1399 ;;		Unchanged: 0/0
  1400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1401 ;;      Params:         4       0       0       0
  1402 ;;      Locals:         3       0       0       0
  1403 ;;      Temps:          1       0       0       0
  1404 ;;      Totals:         8       0       0       0
  1405 ;;Total ram usage:        8 bytes
  1406 ;; Hardware stack levels used:    1
  1407 ;; Hardware stack levels required when called:    1
  1408 ;; This function calls:
  1409 ;;		_setCSN
  1410 ;;		_spiTransferByte
  1411 ;; This function is called by:
  1412 ;;		_nrfConfig
  1413 ;; This function uses a non-reentrant model
  1414 ;;
  1415                           
  1416                           	psect	text8
  1417  003C9E                     __ptext8:
  1418                           	opt stack 0
  1419  003C9E                     _nrfSetRXAddr:
  1420                           	opt stack 28
  1421                           
  1422                           ;incstack = 0
  1423                           ;nrfSetRXAddr@pipe stored from wreg
  1424  003C9E  6E5B               	movwf	nrfSetRXAddr@pipe,c
  1425                           
  1426                           ;main.c: 396: setCSN(0);
  1427  003CA0  0E00               	movlw	0
  1428  003CA2  6E55               	movwf	setCSN@level+1,c
  1429  003CA4  0E00               	movlw	0
  1430  003CA6  6E54               	movwf	setCSN@level,c
  1431  003CA8  EC81  F01D         	call	_setCSN	;wreg free
  1432                           
  1433                           ;main.c: 398: spiTransferByte(0x20|pipe);
  1434  003CAC  505B               	movf	nrfSetRXAddr@pipe,w,c
  1435  003CAE  0920               	iorlw	32
  1436  003CB0  EC92  F01D         	call	_spiTransferByte
  1437                           
  1438                           ;main.c: 400: if (len != 0) {
  1439  003CB4  5059               	movf	nrfSetRXAddr@len+1,w,c
  1440  003CB6  1058               	iorwf	nrfSetRXAddr@len,w,c
  1441  003CB8  B4D8               	btfsc	status,2,c
  1442  003CBA  D01A               	goto	l800
  1443                           
  1444                           ;main.c: 402: for (int i=0;i<len;i++) {
  1445  003CBC  0E00               	movlw	0
  1446  003CBE  6E5D               	movwf	nrfSetRXAddr@i+1,c
  1447  003CC0  0E00               	movlw	0
  1448  003CC2  6E5C               	movwf	nrfSetRXAddr@i,c
  1449  003CC4  D00B               	goto	l798
  1450  003CC6                     l794:
  1451                           
  1452                           ;main.c: 403: spiTransferByte(addr[i]);
  1453  003CC6  505C               	movf	nrfSetRXAddr@i,w,c
  1454  003CC8  2456               	addwf	nrfSetRXAddr@addr,w,c
  1455  003CCA  6ED9               	movwf	fsr2l,c
  1456  003CCC  505D               	movf	nrfSetRXAddr@i+1,w,c
  1457  003CCE  2057               	addwfc	nrfSetRXAddr@addr+1,w,c
  1458  003CD0  6EDA               	movwf	fsr2h,c
  1459  003CD2  50DF               	movf	indf2,w,c
  1460  003CD4  EC92  F01D         	call	_spiTransferByte
  1461  003CD8  4A5C               	infsnz	nrfSetRXAddr@i,f,c
  1462  003CDA  2A5D               	incf	nrfSetRXAddr@i+1,f,c
  1463  003CDC                     l798:
  1464  003CDC  505D               	movf	nrfSetRXAddr@i+1,w,c
  1465  003CDE  0A80               	xorlw	128
  1466  003CE0  6E5A               	movwf	??_nrfSetRXAddr& (0+255),c
  1467  003CE2  5058               	movf	nrfSetRXAddr@len,w,c
  1468  003CE4  5C5C               	subwf	nrfSetRXAddr@i,w,c
  1469  003CE6  5059               	movf	nrfSetRXAddr@len+1,w,c
  1470  003CE8  0A80               	xorlw	128
  1471  003CEA  585A               	subwfb	??_nrfSetRXAddr& (0+255),w,c
  1472  003CEC  A0D8               	btfss	status,0,c
  1473  003CEE  D7EB               	goto	l794
  1474  003CF0                     l800:
  1475                           
  1476                           ;main.c: 404: }
  1477                           ;main.c: 405: }
  1478                           ;main.c: 407: setCSN(1);
  1479  003CF0  0E00               	movlw	0
  1480  003CF2  6E55               	movwf	setCSN@level+1,c
  1481  003CF4  0E01               	movlw	1
  1482  003CF6  6E54               	movwf	setCSN@level,c
  1483  003CF8  EC81  F01D         	call	_setCSN	;wreg free
  1484  003CFC  0012               	return	
  1485  003CFE                     __end_of_nrfSetRXAddr:
  1486                           	opt stack 0
  1487                           tblptru	equ	0xFF8
  1488                           tblptrh	equ	0xFF7
  1489                           tblptrl	equ	0xFF6
  1490                           tablat	equ	0xFF5
  1491                           postinc0	equ	0xFEE
  1492                           wreg	equ	0xFE8
  1493                           indf1	equ	0xFE7
  1494                           postdec1	equ	0xFE5
  1495                           fsr1h	equ	0xFE2
  1496                           fsr1l	equ	0xFE1
  1497                           indf2	equ	0xFDF
  1498                           fsr2h	equ	0xFDA
  1499                           fsr2l	equ	0xFD9
  1500                           status	equ	0xFD8
  1501                           
  1502 ;; *************** function _nrfConfigReg *****************
  1503 ;; Defined at:
  1504 ;;		line 350 in file "main.c"
  1505 ;; Parameters:    Size  Location     Type
  1506 ;;  wr              1    wreg     unsigned char 
  1507 ;;  command         1    2[COMRAM] unsigned char 
  1508 ;;  data            1    3[COMRAM] unsigned char 
  1509 ;; Auto vars:     Size  Location     Type
  1510 ;;  wr              1    4[COMRAM] unsigned char 
  1511 ;; Return value:  Size  Location     Type
  1512 ;;                  1    wreg      unsigned char 
  1513 ;; Registers used:
  1514 ;;		wreg, status,2, status,0, cstack
  1515 ;; Tracked objects:
  1516 ;;		On entry : 0/0
  1517 ;;		On exit  : 0/0
  1518 ;;		Unchanged: 0/0
  1519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1520 ;;      Params:         2       0       0       0
  1521 ;;      Locals:         1       0       0       0
  1522 ;;      Temps:          0       0       0       0
  1523 ;;      Totals:         3       0       0       0
  1524 ;;Total ram usage:        3 bytes
  1525 ;; Hardware stack levels used:    1
  1526 ;; Hardware stack levels required when called:    1
  1527 ;; This function calls:
  1528 ;;		_setCSN
  1529 ;;		_spiTransferByte
  1530 ;; This function is called by:
  1531 ;;		_nrfConfig
  1532 ;; This function uses a non-reentrant model
  1533 ;;
  1534                           
  1535                           	psect	text9
  1536  003BF8                     __ptext9:
  1537                           	opt stack 0
  1538  003BF8                     _nrfConfigReg:
  1539                           	opt stack 28
  1540                           
  1541                           ;incstack = 0
  1542                           ;nrfConfigReg@wr stored from wreg
  1543  003BF8  6E58               	movwf	nrfConfigReg@wr,c
  1544                           
  1545                           ;main.c: 352: setCSN(0);
  1546  003BFA  0E00               	movlw	0
  1547  003BFC  6E55               	movwf	setCSN@level+1,c
  1548  003BFE  0E00               	movlw	0
  1549  003C00  6E54               	movwf	setCSN@level,c
  1550  003C02  EC81  F01D         	call	_setCSN	;wreg free
  1551                           
  1552                           ;main.c: 354: if (wr == 'w') {
  1553  003C06  5058               	movf	nrfConfigReg@wr,w,c
  1554  003C08  0A77               	xorlw	119
  1555  003C0A  A4D8               	btfss	status,2,c
  1556  003C0C  D008               	goto	l780
  1557                           
  1558                           ;main.c: 355: spiTransferByte(0x20|command);
  1559  003C0E  5056               	movf	nrfConfigReg@command,w,c
  1560  003C10  0920               	iorlw	32
  1561  003C12  EC92  F01D         	call	_spiTransferByte
  1562                           
  1563                           ;main.c: 356: spiTransferByte(data);
  1564  003C16  5057               	movf	nrfConfigReg@data,w,c
  1565  003C18  EC92  F01D         	call	_spiTransferByte
  1566                           
  1567                           ;main.c: 357: } else if (wr == 'r') {
  1568  003C1C  D00B               	goto	l784
  1569  003C1E                     l780:
  1570  003C1E  5058               	movf	nrfConfigReg@wr,w,c
  1571  003C20  0A72               	xorlw	114
  1572  003C22  A4D8               	btfss	status,2,c
  1573  003C24  D007               	goto	l784
  1574                           
  1575                           ;main.c: 358: spiTransferByte(0x00|command);
  1576  003C26  5056               	movf	nrfConfigReg@command,w,c
  1577  003C28  EC92  F01D         	call	_spiTransferByte
  1578                           
  1579                           ;main.c: 359: data = spiTransferByte(0xFF);
  1580  003C2C  0EFF               	movlw	255
  1581  003C2E  EC92  F01D         	call	_spiTransferByte
  1582  003C32  6E57               	movwf	nrfConfigReg@data,c
  1583  003C34                     l784:
  1584                           
  1585                           ;main.c: 360: }
  1586                           ;main.c: 362: setCSN(1);
  1587  003C34  0E00               	movlw	0
  1588  003C36  6E55               	movwf	setCSN@level+1,c
  1589  003C38  0E01               	movlw	1
  1590  003C3A  6E54               	movwf	setCSN@level,c
  1591  003C3C  EC81  F01D         	call	_setCSN	;wreg free
  1592  003C40  0012               	return	
  1593  003C42                     __end_of_nrfConfigReg:
  1594                           	opt stack 0
  1595                           tblptru	equ	0xFF8
  1596                           tblptrh	equ	0xFF7
  1597                           tblptrl	equ	0xFF6
  1598                           tablat	equ	0xFF5
  1599                           postinc0	equ	0xFEE
  1600                           wreg	equ	0xFE8
  1601                           indf1	equ	0xFE7
  1602                           postdec1	equ	0xFE5
  1603                           fsr1h	equ	0xFE2
  1604                           fsr1l	equ	0xFE1
  1605                           indf2	equ	0xFDF
  1606                           fsr2h	equ	0xFDA
  1607                           fsr2l	equ	0xFD9
  1608                           status	equ	0xFD8
  1609                           
  1610 ;; *************** function _spiTransferByte *****************
  1611 ;; Defined at:
  1612 ;;		line 442 in file "main.c"
  1613 ;; Parameters:    Size  Location     Type
  1614 ;;  data            1    wreg     unsigned char 
  1615 ;; Auto vars:     Size  Location     Type
  1616 ;;  data            1    0[COMRAM] unsigned char 
  1617 ;; Return value:  Size  Location     Type
  1618 ;;                  1    wreg      unsigned char 
  1619 ;; Registers used:
  1620 ;;		wreg, status,2, cstack
  1621 ;; Tracked objects:
  1622 ;;		On entry : 0/0
  1623 ;;		On exit  : 0/0
  1624 ;;		Unchanged: 0/0
  1625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1626 ;;      Params:         0       0       0       0
  1627 ;;      Locals:         1       0       0       0
  1628 ;;      Temps:          0       0       0       0
  1629 ;;      Totals:         1       0       0       0
  1630 ;;Total ram usage:        1 bytes
  1631 ;; Hardware stack levels used:    1
  1632 ;; This function calls:
  1633 ;;		Nothing
  1634 ;; This function is called by:
  1635 ;;		_nrfGetStatus
  1636 ;;		_nrfConfigReg
  1637 ;;		_nrfSetTXAddr
  1638 ;;		_nrfSetRXAddr
  1639 ;;		_spiTransfer
  1640 ;;		_nrfTXData
  1641 ;; This function uses a non-reentrant model
  1642 ;;
  1643                           
  1644                           	psect	text10
  1645  003B24                     __ptext10:
  1646                           	opt stack 0
  1647  003B24                     _spiTransferByte:
  1648                           	opt stack 29
  1649                           
  1650                           ;incstack = 0
  1651                           ;spiTransferByte@data stored from wreg
  1652  003B24  6E54               	movwf	spiTransferByte@data,c
  1653                           
  1654                           ;main.c: 444: SSP1BUF = data;
  1655  003B26  C054  FFC9         	movff	spiTransferByte@data,4041	;volatile
  1656                           
  1657                           ;main.c: 446: _delay((unsigned long)((1)*(64000000/4000000.0)));
  1658  003B2A  0E05               	movlw	5
  1659  003B2C                     u217:
  1660  003B2C  2EE8               	decfsz	wreg,f,c
  1661  003B2E  D7FE               	goto	u217
  1662  003B30  F000               	nop	
  1663                           
  1664                           ;main.c: 448: return SSP1BUF;
  1665  003B32  50C9               	movf	4041,w,c	;volatile
  1666  003B34  0012               	return	
  1667  003B36                     __end_of_spiTransferByte:
  1668                           	opt stack 0
  1669                           tblptru	equ	0xFF8
  1670                           tblptrh	equ	0xFF7
  1671                           tblptrl	equ	0xFF6
  1672                           tablat	equ	0xFF5
  1673                           postinc0	equ	0xFEE
  1674                           wreg	equ	0xFE8
  1675                           indf1	equ	0xFE7
  1676                           postdec1	equ	0xFE5
  1677                           fsr1h	equ	0xFE2
  1678                           fsr1l	equ	0xFE1
  1679                           indf2	equ	0xFDF
  1680                           fsr2h	equ	0xFDA
  1681                           fsr2l	equ	0xFD9
  1682                           status	equ	0xFD8
  1683                           
  1684 ;; *************** function _setCSN *****************
  1685 ;; Defined at:
  1686 ;;		line 325 in file "main.c"
  1687 ;; Parameters:    Size  Location     Type
  1688 ;;  level           2    0[COMRAM] int 
  1689 ;; Auto vars:     Size  Location     Type
  1690 ;;		None
  1691 ;; Return value:  Size  Location     Type
  1692 ;;		None               void
  1693 ;; Registers used:
  1694 ;;		wreg, status,2, status,0
  1695 ;; Tracked objects:
  1696 ;;		On entry : 0/0
  1697 ;;		On exit  : 0/0
  1698 ;;		Unchanged: 0/0
  1699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1700 ;;      Params:         2       0       0       0
  1701 ;;      Locals:         0       0       0       0
  1702 ;;      Temps:          0       0       0       0
  1703 ;;      Totals:         2       0       0       0
  1704 ;;Total ram usage:        2 bytes
  1705 ;; Hardware stack levels used:    1
  1706 ;; This function calls:
  1707 ;;		Nothing
  1708 ;; This function is called by:
  1709 ;;		_nrfGetStatus
  1710 ;;		_nrfConfigReg
  1711 ;;		_nrfSetTXAddr
  1712 ;;		_nrfSetRXAddr
  1713 ;;		_spiTransfer
  1714 ;;		_nrfTXData
  1715 ;; This function uses a non-reentrant model
  1716 ;;
  1717                           
  1718                           	psect	text11
  1719  003B02                     __ptext11:
  1720                           	opt stack 0
  1721  003B02                     _setCSN:
  1722                           	opt stack 29
  1723                           
  1724                           ;main.c: 327: if (level == 1) {
  1725                           
  1726                           ;incstack = 0
  1727  003B02  0454               	decf	setCSN@level,w,c
  1728  003B04  1055               	iorwf	setCSN@level+1,w,c
  1729  003B06  A4D8               	btfss	status,2,c
  1730  003B08  D002               	goto	l94
  1731                           
  1732                           ;main.c: 328: LATAbits.LATA2 = 1;
  1733  003B0A  8489               	bsf	3977,2,c	;volatile
  1734                           
  1735                           ;main.c: 329: } else {
  1736  003B0C  0012               	return	
  1737  003B0E                     l94:
  1738                           
  1739                           ;main.c: 330: LATAbits.LATA2 = 0;
  1740  003B0E  9489               	bcf	3977,2,c	;volatile
  1741  003B10  0012               	return	
  1742  003B12                     __end_of_setCSN:
  1743                           	opt stack 0
  1744                           tblptru	equ	0xFF8
  1745                           tblptrh	equ	0xFF7
  1746                           tblptrl	equ	0xFF6
  1747                           tablat	equ	0xFF5
  1748                           postinc0	equ	0xFEE
  1749                           wreg	equ	0xFE8
  1750                           indf1	equ	0xFE7
  1751                           postdec1	equ	0xFE5
  1752                           fsr1h	equ	0xFE2
  1753                           fsr1l	equ	0xFE1
  1754                           indf2	equ	0xFDF
  1755                           fsr2h	equ	0xFDA
  1756                           fsr2l	equ	0xFD9
  1757                           status	equ	0xFD8
  1758                           
  1759 ;; *************** function _delay10ms *****************
  1760 ;; Defined at:
  1761 ;;		line 482 in file "main.c"
  1762 ;; Parameters:    Size  Location     Type
  1763 ;;  ms_multi        2    0[COMRAM] int 
  1764 ;; Auto vars:     Size  Location     Type
  1765 ;;  i               2    3[COMRAM] int 
  1766 ;; Return value:  Size  Location     Type
  1767 ;;		None               void
  1768 ;; Registers used:
  1769 ;;		wreg, status,2, status,0
  1770 ;; Tracked objects:
  1771 ;;		On entry : 0/0
  1772 ;;		On exit  : 0/0
  1773 ;;		Unchanged: 0/0
  1774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1775 ;;      Params:         2       0       0       0
  1776 ;;      Locals:         2       0       0       0
  1777 ;;      Temps:          1       0       0       0
  1778 ;;      Totals:         5       0       0       0
  1779 ;;Total ram usage:        5 bytes
  1780 ;; Hardware stack levels used:    1
  1781 ;; This function calls:
  1782 ;;		Nothing
  1783 ;; This function is called by:
  1784 ;;		_main
  1785 ;; This function uses a non-reentrant model
  1786 ;;
  1787                           
  1788                           	psect	text12
  1789  003BBC                     __ptext12:
  1790                           	opt stack 0
  1791  003BBC                     _delay10ms:
  1792                           	opt stack 30
  1793                           
  1794                           ;main.c: 483: int i = 0;
  1795                           
  1796                           ;incstack = 0
  1797  003BBC  0E00               	movlw	0
  1798  003BBE  6E58               	movwf	delay10ms@i+1,c
  1799  003BC0  0E00               	movlw	0
  1800  003BC2  6E57               	movwf	delay10ms@i,c
  1801                           
  1802                           ;main.c: 484: for (i=0;i<ms_multi;i++) {
  1803  003BC4  0E00               	movlw	0
  1804  003BC6  6E58               	movwf	delay10ms@i+1,c
  1805  003BC8  0E00               	movlw	0
  1806  003BCA  6E57               	movwf	delay10ms@i,c
  1807  003BCC  D00A               	goto	l147
  1808  003BCE                     l840:
  1809                           
  1810                           ;main.c: 485: _delay((unsigned long)((11)*(64000000/4000.0)));
  1811  003BCE  0EE5               	movlw	229
  1812  003BD0  6E56               	movwf	??_delay10ms& (0+255),c
  1813  003BD2  0E91               	movlw	145
  1814  003BD4                     u227:
  1815  003BD4  2EE8               	decfsz	wreg,f,c
  1816  003BD6  D7FE               	goto	u227
  1817  003BD8  2E56               	decfsz	??_delay10ms& (0+255),f,c
  1818  003BDA  D7FC               	goto	u227
  1819  003BDC  F000               	nop	
  1820  003BDE  4A57               	infsnz	delay10ms@i,f,c
  1821  003BE0  2A58               	incf	delay10ms@i+1,f,c
  1822  003BE2                     l147:
  1823  003BE2  5058               	movf	delay10ms@i+1,w,c
  1824  003BE4  0A80               	xorlw	128
  1825  003BE6  6E56               	movwf	??_delay10ms& (0+255),c
  1826  003BE8  5054               	movf	delay10ms@ms_multi,w,c
  1827  003BEA  5C57               	subwf	delay10ms@i,w,c
  1828  003BEC  5055               	movf	delay10ms@ms_multi+1,w,c
  1829  003BEE  0A80               	xorlw	128
  1830  003BF0  5856               	subwfb	??_delay10ms& (0+255),w,c
  1831  003BF2  B0D8               	btfsc	status,0,c
  1832  003BF4  0012               	return	
  1833  003BF6  D7EB               	goto	l840
  1834  003BF8                     __end_of_delay10ms:
  1835                           	opt stack 0
  1836  0000                     tblptru	equ	0xFF8
  1837                           tblptrh	equ	0xFF7
  1838                           tblptrl	equ	0xFF6
  1839                           tablat	equ	0xFF5
  1840                           postinc0	equ	0xFEE
  1841                           wreg	equ	0xFE8
  1842                           indf1	equ	0xFE7
  1843                           postdec1	equ	0xFE5
  1844                           fsr1h	equ	0xFE2
  1845                           fsr1l	equ	0xFE1
  1846                           indf2	equ	0xFDF
  1847                           fsr2h	equ	0xFDA
  1848                           fsr2l	equ	0xFD9
  1849                           status	equ	0xFD8
  1850                           tblptru	equ	0xFF8
  1851                           tblptrh	equ	0xFF7
  1852                           tblptrl	equ	0xFF6
  1853                           tablat	equ	0xFF5
  1854                           postinc0	equ	0xFEE
  1855                           wreg	equ	0xFE8
  1856                           indf1	equ	0xFE7
  1857                           postdec1	equ	0xFE5
  1858                           fsr1h	equ	0xFE2
  1859                           fsr1l	equ	0xFE1
  1860                           indf2	equ	0xFDF
  1861                           fsr2h	equ	0xFDA
  1862                           fsr2l	equ	0xFD9
  1863                           status	equ	0xFD8
  1864                           
  1865                           	psect	rparam
  1866  0000                     tblptru	equ	0xFF8
  1867                           tblptrh	equ	0xFF7
  1868                           tblptrl	equ	0xFF6
  1869                           tablat	equ	0xFF5
  1870                           postinc0	equ	0xFEE
  1871                           wreg	equ	0xFE8
  1872                           indf1	equ	0xFE7
  1873                           postdec1	equ	0xFE5
  1874                           fsr1h	equ	0xFE2
  1875                           fsr1l	equ	0xFE1
  1876                           indf2	equ	0xFDF
  1877                           fsr2h	equ	0xFDA
  1878                           fsr2l	equ	0xFD9
  1879                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        17
    BSS         66
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     12      95
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    nrfSetRXAddr@addr	PTR unsigned char  size(2) Largest target is 4
		 -> RX_ADDRESS(COMRAM[4]), 

    nrfSetTXAddr@addr	PTR unsigned char  size(2) Largest target is 4
		 -> TX_ADDRESS(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _nrfTXData->_setCSN
    _nrfGetStatus->_setCSN
    _nrfConfig->_nrfSetRXAddr
    _spiTransfer->_setCSN
    _nrfSetTXAddr->_setCSN
    _nrfSetRXAddr->_setCSN
    _nrfConfigReg->_setCSN

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    6252
                                             10 COMRAM     2     2      0
                          _delay10ms
                          _nrfConfig
                       _nrfGetStatus
                          _nrfTXData
                         _portConfig
                        _spiConfig_1
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiConfig_1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _portConfig                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _nrfTXData                                            7     5      2     679
                                              2 COMRAM     7     5      2
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (1) _nrfGetStatus                                         0     0      0     546
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (1) _nrfConfig                                            0     0      0    3884
                       _nrfConfigReg
                       _nrfSetRXAddr
                       _nrfSetTXAddr
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiTransfer                                          7     4      3     969
                                              2 COMRAM     7     4      3
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfSetTXAddr                                         7     3      4     707
                                              2 COMRAM     7     3      4
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfSetRXAddr                                         8     4      4     722
                                              2 COMRAM     8     4      4
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfConfigReg                                         3     1      2    1486
                                              2 COMRAM     3     1      2
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _spiTransferByte                                      1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setCSN                                               2     0      2     531
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _delay10ms                                            5     3      2     159
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay10ms
   _nrfConfig
     _nrfConfigReg
       _setCSN
       _spiTransferByte
     _nrfSetRXAddr
       _setCSN
       _spiTransferByte
     _nrfSetTXAddr
       _setCSN
       _spiTransferByte
     _spiTransfer
       _setCSN
       _spiTransferByte
   _nrfGetStatus
     _setCSN
     _spiTransferByte
   _nrfTXData
     _setCSN
     _spiTransferByte
   _portConfig
   _spiConfig_1
   _spiTransfer
     _setCSN
     _spiTransferByte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       6        0.0%
BANK2              100      0       0       7        0.0%
BITBANK1           100      0       0       9        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      C      5F       1      100.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5F       8        0.0%
DATA                 0      0      5F      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Oct 01 09:36:43 2014

__size_of_spiTransferByte 0012                        l94 3B0E                _RX_ADDRESS 004C  
             __CFG_LVP$ON 000000                       l141 3E1E                       l147 3BE2  
                     l800 3CF0                       l810 3C66                       l814 3C7C  
                     l840 3BCE                       l816 3C90                       l760 3D3C  
                     l752 3D1E                       l770 3D86                       l780 3C1E  
                     l764 3D4E                       l756 3D2E                       l852 3DB8  
                     l870 3E12                       l950 3FAC                       l784 3C34  
                     l768 3D72                       l856 3DCE                       l794 3CC6  
                     l858 3DE2                       l970 3FF2                       l798 3CDC  
                     u207 3E14                       u217 3B2C                       u227 3BD4  
                     u187 3DF2                       u197 3DFE                       wreg 000FE8  
              _TX_ADDRESS 0050                      _LATA 000F89                      _LATB 000F8A  
                    _LATC 000F8B        spiTransfer@command 0056                      _main 3F10  
                    indf1 000FE7                      fsr1l 000FE1                      indf2 000FDF  
                    fsr2l 000FD9             __CFG_BORV$190 000000                      start 0000  
           __CFG_IESO$OFF 000000            nrfConfigReg@wr 0058                     ?_main 0054  
                   _TRISA 000F92                     _TRISB 000F93                     _TRISC 000F94  
          __CFG_FCMEN$OFF 000000        __CFG_MCLRE$EXTMCLR 000000                     tablat 000FF5  
                   status 000FD8            __CFG_HFOFST$ON 000000            __CFG_FOSC$HSHP 000000  
         __initialization 3B8A              __end_of_main 4000       spiTransferByte@data 0054  
                  ??_main 005E             __activetblptr 000000         ??_spiTransferByte 0054  
          __CFG_PLLCFG$ON 000000             nrfSetRXAddr@i 005C             nrfSetTXAddr@i 005B  
          __CFG_WDTEN$OFF 000000              ?_spiConfig_1 0054            __CFG_PWRTEN$ON 000000  
          __CFG_XINST$OFF 000000            __CFG_STVREN$ON 000000                    _setCSN 3B02  
                  clear_0 3B90               setCSN@level 0054             ?_nrfGetStatus 0054  
           ?_nrfConfigReg 0056              _FEATURE_CURR 0046              __pdataCOMRAM 0043  
            ?_spiTransfer 0056                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8                __accesstop 0060   __end_of__initialization 3BB6  
         __CFG_PBADEN$OFF 000000             ?_nrfSetRXAddr 0056             ?_nrfSetTXAddr 0056  
          __pcstackCOMRAM 0054        __size_of_delay10ms 003C            ??_nrfGetStatus 0056  
          _EN_RXADDR_CURR 0045            ??_nrfConfigReg 0058          nrfConfigReg@data 0057  
              _dataBufOut 0021            ??_nrfSetRXAddr 005A            ??_nrfSetTXAddr 005A  
      __size_of_nrfTXData 00A0        __size_of_nrfConfig 00DC       nrfConfigReg@command 0056  
      __CFG_CCP2MX$PORTC1 000000        __CFG_CCP3MX$PORTB5 000000                   ?_setCSN 0054  
                 _SSP1ADD 000FC8                   _SSP1BUF 000FC9         __end_of_delay10ms 3BF8  
        nrfSetRXAddr@addr 0056          nrfSetRXAddr@pipe 005B                   __Hparam 0000  
                 __Lparam 0000      __size_of_spiConfig_1 0018           _spiTransferByte 3B24  
              delay10ms@i 0057             _RX_PW_P0_CURR 0049                   __pcinit 3B8A  
         __size_of_setCSN 0010          nrfSetTXAddr@addr 0056                   __ramtop 0300  
                 __ptext0 3F10                   __ptext1 3B36                   __ptext2 3B4E  
                 __ptext3 3D94                   __ptext4 3B68                   __ptext5 3E34  
                 __ptext6 3CFE                   __ptext7 3C42                   __ptext8 3C9E  
                 __ptext9 3BF8         __end_of_nrfTXData 3E34         __end_of_nrfConfig 3F10  
    __size_of_spiTransfer 0096      end_of_initialization 3BB6      __end_of_nrfGetStatus 3B8A  
    __end_of_nrfConfigReg 3C42                   postdec1 000FE5                   postinc0 000FEE  
            nrfTXData@len 0056                _portConfig 3B4E      __end_of_nrfSetRXAddr 3CFE  
    __end_of_nrfSetTXAddr 3C9E   __end_of_spiTransferByte 3B36             __pidataCOMRAM 3B13  
          __end_of_setCSN 3B12       start_initialization 3B8A                  ??_setCSN 0056  
             ?_portConfig 0054                nrfTXData@i 005B               __pbssCOMRAM 0001  
   __size_of_nrfGetStatus 0022     __size_of_nrfConfigReg 004A                 _dataBufIn 0001  
        ?_spiTransferByte 0054                 _delay10ms 3BBC               _CONFIG_CURR 0043  
           _SETUP_AW_CURR 004A     __size_of_nrfSetRXAddr 0060     __size_of_nrfSetTXAddr 005C  
         _SETUP_RETR_CURR 004B          __CFG_PRICLKEN$ON 000000              _nrfGetStatus 3B68  
            _nrfConfigReg 3BF8           nrfSetRXAddr@len 0058                 _nrfSTATUS 0042  
               _nrfTXData 3D94           nrfSetTXAddr@len 0058                 _nrfConfig 3E34  
     __size_of_portConfig 001A                  _LATAbits 000F89                ?_delay10ms 0054  
           ??_spiConfig_1 0054              _nrfSetRXAddr 3C9E              _nrfSetTXAddr 3C42  
        __CFG_WDTPS$32768 000000             _RF_SETUP_CURR 0048         delay10ms@ms_multi 0054  
           ??_spiTransfer 0059                 main@count 005E                ?_nrfTXData 0056  
               copy_data0 3BAA                ?_nrfConfig 0054                  __Hrparam 0000  
                __Lrparam 0000        __CFG_BOREN$SBORDIS 000000         __CFG_P2BMX$PORTB5 000000  
     __end_of_spiConfig_1 3B4E                  __ptext10 3B24                  __ptext11 3B02  
                __ptext12 3BBC              _SSP1CON1bits 000FC6       __end_of_spiTransfer 3D94  
           __size_of_main 00F0               ??_delay10ms 0056                _EN_AA_CURR 0041  
            _SSP1STATbits 000FC7              ??_portConfig 0054            nrfTXData@i_558 0059  
              _DYNPD_CURR 0044               ??_nrfTXData 0058               ??_nrfConfig 005E  
      __end_of_portConfig 3B68               _spiConfig_1 3B36            spiTransfer@len 0057  
          spiTransfer@wrn 005C                _RF_CH_CURR 0047               _spiTransfer 3CFE  
       __CFG_T3CMX$PORTC0 000000              spiTransfer@i 005A  
