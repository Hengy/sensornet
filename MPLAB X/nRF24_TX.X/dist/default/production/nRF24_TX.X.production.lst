

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Oct 01 14:56:37 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F24K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    31  0000                     
    32                           	psect	idataCOMRAM
    33  000814                     __pidataCOMRAM:
    34                           	opt stack 0
    35                           
    36                           ;initializer for _CONFIG_CURR
    37  000814  5A                 	db	90
    38                           
    39                           ;initializer for _DYNPD_CURR
    40  000815  01                 	db	1
    41                           
    42                           ;initializer for _EN_RXADDR_CURR
    43  000816  01                 	db	1
    44                           
    45                           ;initializer for _FEATURE_CURR
    46  000817  04                 	db	4
    47                           
    48                           ;initializer for _RF_CH_CURR
    49  000818  69                 	db	105
    50                           
    51                           ;initializer for _RF_SETUP_CURR
    52  000819  06                 	db	6
    53                           
    54                           ;initializer for _RX_PW_P0_CURR
    55  00081A  01                 	db	1
    56                           
    57                           ;initializer for _SETUP_AW_CURR
    58  00081B  02                 	db	2
    59                           
    60                           ;initializer for _SETUP_RETR_CURR
    61  00081C  21                 	db	33
    62                           
    63                           ;initializer for _RX_ADDRESS
    64  00081D  E7                 	db	231
    65  00081E  E7                 	db	231
    66  00081F  E7                 	db	231
    67  000820  E7                 	db	231
    68                           
    69                           ;initializer for _TX_ADDRESS
    70  000821  E7                 	db	231
    71  000822  E7                 	db	231
    72  000823  E7                 	db	231
    73  000824  E7                 	db	231
    74  0000                     _INTCONbits	set	4082
    75  0000                     _IOCBbits	set	3938
    76  0000                     _LATA	set	3977
    77  0000                     _LATAbits	set	3977
    78  0000                     _LATB	set	3978
    79  0000                     _LATC	set	3979
    80  0000                     _PIR1bits	set	3998
    81  0000                     _RCONbits	set	4048
    82  0000                     _SSP1ADD	set	4040
    83  0000                     _SSP1BUF	set	4041
    84  0000                     _SSP1CON1bits	set	4038
    85  0000                     _SSP1STATbits	set	4039
    86  0000                     _TRISA	set	3986
    87  0000                     _TRISB	set	3987
    88  0000                     _TRISC	set	3988
    89                           
    90                           ; #config settings
    91  0000                     
    92                           	psect	cinit
    93  0007A0                     __pcinit:
    94                           	opt stack 0
    95  0007A0                     start_initialization:
    96                           	opt stack 0
    97  0007A0                     __initialization:
    98                           	opt stack 0
    99                           
   100                           ; Clear objects allocated to BANK0 (64 bytes)
   101  0007A0  EE00  F060         	lfsr	0,__pbssBANK0
   102  0007A4  0E40               	movlw	64
   103  0007A6                     clear_0:
   104  0007A6  6AEE               	clrf	postinc0,c
   105  0007A8  06E8               	decf	wreg,f,c
   106  0007AA  E1FD               	bnz	clear_0
   107                           
   108                           ; Clear objects allocated to COMRAM (3 bytes)
   109  0007AC  6A3F               	clrf	(__pbssCOMRAM+2)& (0+255),c
   110  0007AE  6A3E               	clrf	(__pbssCOMRAM+1)& (0+255),c
   111  0007B0  6A3D               	clrf	__pbssCOMRAM& (0+255),c
   112                           
   113                           ; Initialize objects allocated to COMRAM (17 bytes)
   114                           ; load TBLPTR registers with __pidataCOMRAM
   115  0007B2  0E14               	movlw	low __pidataCOMRAM
   116  0007B4  6EF6               	movwf	tblptrl,c
   117  0007B6  0E08               	movlw	high __pidataCOMRAM
   118  0007B8  6EF7               	movwf	tblptrh,c
   119  0007BA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   120  0007BC  6EF8               	movwf	tblptru,c
   121  0007BE  EE00  F02C         	lfsr	0,__pdataCOMRAM
   122  0007C2  EE10 F011          	lfsr	1,17
   123  0007C6                     copy_data0:
   124  0007C6  0009               	tblrd		*+
   125  0007C8  CFF5 FFEE          	movff	tablat,postinc0
   126  0007CC  50E5               	movf	postdec1,w,c
   127  0007CE  50E1               	movf	fsr1l,w,c
   128  0007D0  E1FA               	bnz	copy_data0
   129  0007D2                     end_of_initialization:
   130                           	opt stack 0
   131  0007D2                     __end_of__initialization:
   132                           	opt stack 0
   133  0007D2  0100               	movlb	0
   134  0007D4  EF53  F000         	goto	_main	;jump to C main() function
   135                           tblptru	equ	0xFF8
   136                           tblptrh	equ	0xFF7
   137                           tblptrl	equ	0xFF6
   138                           tablat	equ	0xFF5
   139                           postinc0	equ	0xFEE
   140                           wreg	equ	0xFE8
   141                           postdec1	equ	0xFE5
   142                           fsr1l	equ	0xFE1
   143                           
   144                           	psect	bssCOMRAM
   145  00003D                     __pbssCOMRAM:
   146                           	opt stack 0
   147  00003D                     _EN_AA_CURR:
   148                           	opt stack 0
   149  00003D                     	ds	1
   150  00003E                     _nrfSTATUS:
   151                           	opt stack 0
   152  00003E                     	ds	1
   153  00003F                     _spiTXFlag:
   154                           	opt stack 0
   155  00003F                     	ds	1
   156                           tblptru	equ	0xFF8
   157                           tblptrh	equ	0xFF7
   158                           tblptrl	equ	0xFF6
   159                           tablat	equ	0xFF5
   160                           postinc0	equ	0xFEE
   161                           wreg	equ	0xFE8
   162                           postdec1	equ	0xFE5
   163                           fsr1l	equ	0xFE1
   164                           
   165                           	psect	dataCOMRAM
   166  00002C                     __pdataCOMRAM:
   167                           	opt stack 0
   168  00002C                     _CONFIG_CURR:
   169                           	opt stack 0
   170  00002C                     	ds	1
   171  00002D                     _DYNPD_CURR:
   172                           	opt stack 0
   173  00002D                     	ds	1
   174  00002E                     _EN_RXADDR_CURR:
   175                           	opt stack 0
   176  00002E                     	ds	1
   177  00002F                     _FEATURE_CURR:
   178                           	opt stack 0
   179  00002F                     	ds	1
   180  000030                     _RF_CH_CURR:
   181                           	opt stack 0
   182  000030                     	ds	1
   183  000031                     _RF_SETUP_CURR:
   184                           	opt stack 0
   185  000031                     	ds	1
   186  000032                     _RX_PW_P0_CURR:
   187                           	opt stack 0
   188  000032                     	ds	1
   189  000033                     _SETUP_AW_CURR:
   190                           	opt stack 0
   191  000033                     	ds	1
   192  000034                     _SETUP_RETR_CURR:
   193                           	opt stack 0
   194  000034                     	ds	1
   195  000035                     _RX_ADDRESS:
   196                           	opt stack 0
   197  000035                     	ds	4
   198  000039                     _TX_ADDRESS:
   199                           	opt stack 0
   200  000039                     	ds	4
   201                           tblptru	equ	0xFF8
   202                           tblptrh	equ	0xFF7
   203                           tblptrl	equ	0xFF6
   204                           tablat	equ	0xFF5
   205                           postinc0	equ	0xFEE
   206                           wreg	equ	0xFE8
   207                           postdec1	equ	0xFE5
   208                           fsr1l	equ	0xFE1
   209                           
   210                           	psect	bssBANK0
   211  000060                     __pbssBANK0:
   212                           	opt stack 0
   213  000060                     _dataBufIn:
   214                           	opt stack 0
   215  000060                     	ds	32
   216  000080                     _dataBufOut:
   217                           	opt stack 0
   218  000080                     	ds	32
   219                           tblptru	equ	0xFF8
   220                           tblptrh	equ	0xFF7
   221                           tblptrl	equ	0xFF6
   222                           tablat	equ	0xFF5
   223                           postinc0	equ	0xFEE
   224                           wreg	equ	0xFE8
   225                           postdec1	equ	0xFE5
   226                           fsr1l	equ	0xFE1
   227                           
   228                           	psect	cstackBANK0
   229  0000A0                     __pcstackBANK0:
   230                           	opt stack 0
   231  0000A0                     ___aldiv@counter:
   232                           	opt stack 0
   233                           
   234                           ; 1 bytes @ 0x0
   235  0000A0                     	ds	1
   236  0000A1                     ___aldiv@sign:
   237                           	opt stack 0
   238                           
   239                           ; 1 bytes @ 0x1
   240  0000A1                     	ds	1
   241  0000A2                     ___aldiv@quotient:
   242                           	opt stack 0
   243                           
   244                           ; 4 bytes @ 0x2
   245  0000A2                     	ds	4
   246  0000A6                     ??_spiConfig_1:
   247                           
   248                           ; 0 bytes @ 0x6
   249  0000A6                     	ds	4
   250  0000AA                     _spiConfig_1$1285:
   251                           	opt stack 0
   252                           
   253                           ; 4 bytes @ 0xA
   254  0000AA                     	ds	4
   255  0000AE                     _spiConfig_1$1286:
   256                           	opt stack 0
   257                           
   258                           ; 4 bytes @ 0xE
   259  0000AE                     	ds	4
   260  0000B2                     spiConfig_1@addVal:
   261                           	opt stack 0
   262                           
   263                           ; 2 bytes @ 0x12
   264  0000B2                     	ds	2
   265                           tblptru	equ	0xFF8
   266                           tblptrh	equ	0xFF7
   267                           tblptrl	equ	0xFF6
   268                           tablat	equ	0xFF5
   269                           postinc0	equ	0xFEE
   270                           wreg	equ	0xFE8
   271                           postdec1	equ	0xFE5
   272                           fsr1l	equ	0xFE1
   273                           
   274                           	psect	cstackCOMRAM
   275  000001                     __pcstackCOMRAM:
   276                           	opt stack 0
   277  000001                     ??_lowISR:
   278  000001                     
   279                           ; 1 bytes @ 0x0
   280  000001                     	ds	17
   281  000012                     ??_highISR:
   282                           
   283                           ; 0 bytes @ 0x11
   284  000012                     	ds	14
   285  000020                     ?___aldiv:
   286                           	opt stack 0
   287  000020                     spiTransferByte@data:
   288                           	opt stack 0
   289  000020                     setCSN@level:
   290                           	opt stack 0
   291  000020                     delay10ms@ms_multi:
   292                           	opt stack 0
   293  000020                     ___aldiv@dividend:
   294                           	opt stack 0
   295                           
   296                           ; 4 bytes @ 0x1F
   297  000020                     	ds	2
   298  000022                     ??_delay10ms:
   299  000022                     nrfConfigReg@command:
   300                           	opt stack 0
   301  000022                     spiTransfer@command:
   302                           	opt stack 0
   303  000022                     nrfSetTXAddr@addr:
   304                           	opt stack 0
   305  000022                     nrfSetRXAddr@addr:
   306                           	opt stack 0
   307  000022                     nrfTXData@len:
   308                           	opt stack 0
   309                           
   310                           ; 2 bytes @ 0x21
   311  000022                     	ds	1
   312  000023                     nrfConfigReg@data:
   313                           	opt stack 0
   314  000023                     spiTransfer@len:
   315                           	opt stack 0
   316  000023                     delay10ms@i:
   317                           	opt stack 0
   318                           
   319                           ; 2 bytes @ 0x22
   320  000023                     	ds	1
   321  000024                     ??_nrfTXData:
   322  000024                     nrfConfigReg@wr:
   323                           	opt stack 0
   324  000024                     nrfSetTXAddr@len:
   325                           	opt stack 0
   326  000024                     nrfSetRXAddr@len:
   327                           	opt stack 0
   328  000024                     ___aldiv@divisor:
   329                           	opt stack 0
   330                           
   331                           ; 4 bytes @ 0x23
   332  000024                     	ds	1
   333  000025                     ??_spiTransfer:
   334  000025                     nrfTXData@i_787:
   335                           	opt stack 0
   336                           
   337                           ; 2 bytes @ 0x24
   338  000025                     	ds	1
   339  000026                     ??_nrfSetRXAddr:
   340  000026                     ??_nrfSetTXAddr:
   341  000026                     spiTransfer@wrn:
   342                           	opt stack 0
   343                           
   344                           ; 1 bytes @ 0x25
   345  000026                     	ds	1
   346  000027                     nrfSetRXAddr@pipe:
   347                           	opt stack 0
   348  000027                     nrfSetTXAddr@i:
   349                           	opt stack 0
   350  000027                     spiTransfer@i:
   351                           	opt stack 0
   352  000027                     nrfTXData@i:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x26
   356  000027                     	ds	1
   357  000028                     spiConfig_1@spiSpeed:
   358                           	opt stack 0
   359  000028                     nrfSetRXAddr@i:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x27
   363  000028                     	ds	2
   364  00002A                     main@count:
   365                           	opt stack 0
   366                           
   367                           ; 2 bytes @ 0x29
   368  00002A                     	ds	2
   369                           tblptru	equ	0xFF8
   370                           tblptrh	equ	0xFF7
   371                           tblptrl	equ	0xFF6
   372                           tablat	equ	0xFF5
   373                           postinc0	equ	0xFEE
   374                           wreg	equ	0xFE8
   375                           postdec1	equ	0xFE5
   376                           fsr1l	equ	0xFE1
   377                           
   378 ;;
   379 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   380 ;;
   381 ;; *************** function _main *****************
   382 ;; Defined at:
   383 ;;		line 198 in file "main.c"
   384 ;; Parameters:    Size  Location     Type
   385 ;;		None
   386 ;; Auto vars:     Size  Location     Type
   387 ;;  count           2   41[COMRAM] int 
   388 ;; Return value:  Size  Location     Type
   389 ;;		None               void
   390 ;; Registers used:
   391 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   392 ;; Tracked objects:
   393 ;;		On entry : 0/0
   394 ;;		On exit  : 0/0
   395 ;;		Unchanged: 0/0
   396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   397 ;;      Params:         0       0       0       0
   398 ;;      Locals:         2       0       0       0
   399 ;;      Temps:          0       0       0       0
   400 ;;      Totals:         2       0       0       0
   401 ;;Total ram usage:        2 bytes
   402 ;; Hardware stack levels required when called:    5
   403 ;; This function calls:
   404 ;;		_delay10ms
   405 ;;		_nrfConfig
   406 ;;		_nrfGetStatus
   407 ;;		_nrfTXData
   408 ;;		_portConfig
   409 ;;		_spiConfig_1
   410 ;;		_spiTransfer
   411 ;; This function is called by:
   412 ;;		Startup code after reset
   413 ;; This function uses a non-reentrant model
   414 ;;
   415                           
   416                           	psect	text0
   417  0000A6                     __ptext0:
   418                           	opt stack 0
   419  0000A6                     _main:
   420                           	opt stack 26
   421                           
   422                           ;main.c: 201: portConfig();
   423                           
   424                           ;incstack = 0
   425  0000A6  ECFD  F003         	call	_portConfig	;wreg free
   426                           
   427                           ;main.c: 203: spiConfig_1(40);
   428  0000AA  0E00               	movlw	0
   429  0000AC  6E29               	movwf	spiConfig_1@spiSpeed+1,c
   430  0000AE  0E28               	movlw	40
   431  0000B0  6E28               	movwf	spiConfig_1@spiSpeed,c
   432  0000B2  ECF9  F001         	call	_spiConfig_1	;wreg free
   433                           
   434                           ;main.c: 204: nrfConfig();
   435  0000B6  EC8B  F001         	call	_nrfConfig	;wreg free
   436                           
   437                           ;main.c: 206: delay10ms(1);
   438  0000BA  0E00               	movlw	0
   439  0000BC  6E21               	movwf	delay10ms@ms_multi+1,c
   440  0000BE  0E01               	movlw	1
   441  0000C0  6E20               	movwf	delay10ms@ms_multi,c
   442  0000C2  ECB2  F003         	call	_delay10ms	;wreg free
   443                           
   444                           ;main.c: 208: dataBufOut[1] = 0x48;
   445  0000C6  0E48               	movlw	72
   446  0000C8  0100               	movlb	0	; () banked
   447  0000CA  6F81               	movwf	(_dataBufOut+1)& (0+255),b
   448                           
   449                           ; BSR set to: 0
   450                           ;main.c: 209: dataBufOut[2] = 0x4F;
   451  0000CC  0E4F               	movlw	79
   452  0000CE  0100               	movlb	0	; () banked
   453  0000D0  6F82               	movwf	(_dataBufOut+2)& (0+255),b
   454                           
   455                           ; BSR set to: 0
   456                           ;main.c: 210: dataBufOut[3] = 88;
   457  0000D2  0E58               	movlw	88
   458  0000D4  0100               	movlb	0	; () banked
   459  0000D6  6F83               	movwf	(_dataBufOut+3)& (0+255),b
   460                           
   461                           ; BSR set to: 0
   462                           ;main.c: 211: dataBufOut[4] = 0x49;
   463  0000D8  0E49               	movlw	73
   464  0000DA  0100               	movlb	0	; () banked
   465  0000DC  6F84               	movwf	(_dataBufOut+4)& (0+255),b
   466                           
   467                           ; BSR set to: 0
   468                           ;main.c: 212: dataBufOut[5] = 0x5F;
   469  0000DE  0E5F               	movlw	95
   470  0000E0  0100               	movlb	0	; () banked
   471  0000E2  6F85               	movwf	(_dataBufOut+5)& (0+255),b
   472                           
   473                           ; BSR set to: 0
   474                           ;main.c: 213: dataBufOut[6] = 47;
   475  0000E4  0E2F               	movlw	47
   476  0000E6  0100               	movlb	0	; () banked
   477  0000E8  6F86               	movwf	(_dataBufOut+6)& (0+255),b
   478                           
   479                           ; BSR set to: 0
   480                           ;main.c: 214: dataBufOut[7] = 0x74;
   481  0000EA  0E74               	movlw	116
   482  0000EC  0100               	movlb	0	; () banked
   483  0000EE  6F87               	movwf	(_dataBufOut+7)& (0+255),b
   484                           
   485                           ; BSR set to: 0
   486                           ;main.c: 215: dataBufOut[8] = 0x6F;
   487  0000F0  0E6F               	movlw	111
   488  0000F2  0100               	movlb	0	; () banked
   489  0000F4  6F88               	movwf	(_dataBufOut+8)& (0+255),b
   490                           
   491                           ; BSR set to: 0
   492                           ;main.c: 216: dataBufOut[9] = 58;
   493  0000F6  0E3A               	movlw	58
   494  0000F8  0100               	movlb	0	; () banked
   495  0000FA  6F89               	movwf	(_dataBufOut+9)& (0+255),b
   496                           
   497                           ; BSR set to: 0
   498                           ;main.c: 217: dataBufOut[10] = 0xA8;
   499  0000FC  0EA8               	movlw	168
   500  0000FE  0100               	movlb	0	; () banked
   501  000100  6F8A               	movwf	(_dataBufOut+10)& (0+255),b
   502                           
   503                           ; BSR set to: 0
   504                           ;main.c: 218: dataBufOut[11] = 0x6F;
   505  000102  0E6F               	movlw	111
   506  000104  0100               	movlb	0	; () banked
   507  000106  6F8B               	movwf	(_dataBufOut+11)& (0+255),b
   508                           
   509                           ; BSR set to: 0
   510                           ;main.c: 219: dataBufOut[12] = 99;
   511  000108  0E63               	movlw	99
   512  00010A  0100               	movlb	0	; () banked
   513  00010C  6F8C               	movwf	(_dataBufOut+12)& (0+255),b
   514                           
   515                           ; BSR set to: 0
   516                           ;main.c: 220: dataBufOut[13] = 0x88;
   517  00010E  0E88               	movlw	136
   518  000110  0100               	movlb	0	; () banked
   519  000112  6F8D               	movwf	(_dataBufOut+13)& (0+255),b
   520                           
   521                           ; BSR set to: 0
   522                           ;main.c: 221: dataBufOut[14] = 0x5F;
   523  000114  0E5F               	movlw	95
   524  000116  0100               	movlb	0	; () banked
   525  000118  6F8E               	movwf	(_dataBufOut+14)& (0+255),b
   526                           
   527                           ; BSR set to: 0
   528                           ;main.c: 222: dataBufOut[15] = 72;
   529  00011A  0E48               	movlw	72
   530  00011C  0100               	movlb	0	; () banked
   531  00011E  6F8F               	movwf	(_dataBufOut+15)& (0+255),b
   532                           
   533                           ; BSR set to: 0
   534                           ;main.c: 223: dataBufOut[16] = 0x98;
   535  000120  0E98               	movlw	152
   536  000122  0100               	movlb	0	; () banked
   537  000124  6F90               	movwf	(_dataBufOut+16)& (0+255),b
   538                           
   539                           ; BSR set to: 0
   540                           ;main.c: 224: dataBufOut[17] = 0x6F;
   541  000126  0E6F               	movlw	111
   542  000128  0100               	movlb	0	; () banked
   543  00012A  6F91               	movwf	(_dataBufOut+17)& (0+255),b
   544                           
   545                           ; BSR set to: 0
   546                           ;main.c: 225: dataBufOut[18] = 92;
   547  00012C  0E5C               	movlw	92
   548  00012E  0100               	movlb	0	; () banked
   549  000130  6F92               	movwf	(_dataBufOut+18)& (0+255),b
   550                           
   551                           ; BSR set to: 0
   552                           ;main.c: 226: dataBufOut[19] = 0x4A;
   553  000132  0E4A               	movlw	74
   554  000134  0100               	movlb	0	; () banked
   555  000136  6F93               	movwf	(_dataBufOut+19)& (0+255),b
   556                           
   557                           ; BSR set to: 0
   558                           ;main.c: 227: dataBufOut[20] = 0x6F;
   559  000138  0E6F               	movlw	111
   560  00013A  0100               	movlb	0	; () banked
   561  00013C  6F94               	movwf	(_dataBufOut+20)& (0+255),b
   562                           
   563                           ; BSR set to: 0
   564                           ;main.c: 228: dataBufOut[21] = 62;
   565  00013E  0E3E               	movlw	62
   566  000140  0100               	movlb	0	; () banked
   567  000142  6F95               	movwf	(_dataBufOut+21)& (0+255),b
   568                           
   569                           ; BSR set to: 0
   570                           ;main.c: 229: dataBufOut[22] = 0x62;
   571  000144  0E62               	movlw	98
   572  000146  0100               	movlb	0	; () banked
   573  000148  6F96               	movwf	(_dataBufOut+22)& (0+255),b
   574                           
   575                           ; BSR set to: 0
   576                           ;main.c: 230: dataBufOut[23] = 0x6F;
   577  00014A  0E6F               	movlw	111
   578  00014C  0100               	movlb	0	; () banked
   579  00014E  6F97               	movwf	(_dataBufOut+23)& (0+255),b
   580                           
   581                           ; BSR set to: 0
   582                           ;main.c: 231: dataBufOut[24] = 82;
   583  000150  0E52               	movlw	82
   584  000152  0100               	movlb	0	; () banked
   585  000154  6F98               	movwf	(_dataBufOut+24)& (0+255),b
   586                           
   587                           ; BSR set to: 0
   588                           ;main.c: 232: dataBufOut[25] = 0x86;
   589  000156  0E86               	movlw	134
   590  000158  0100               	movlb	0	; () banked
   591  00015A  6F99               	movwf	(_dataBufOut+25)& (0+255),b
   592                           
   593                           ; BSR set to: 0
   594                           ;main.c: 233: dataBufOut[26] = 0x7F;
   595  00015C  0E7F               	movlw	127
   596  00015E  0100               	movlb	0	; () banked
   597  000160  6F9A               	movwf	(_dataBufOut+26)& (0+255),b
   598                           
   599                           ; BSR set to: 0
   600                           ;main.c: 234: dataBufOut[27] = 72;
   601  000162  0E48               	movlw	72
   602  000164  0100               	movlb	0	; () banked
   603  000166  6F9B               	movwf	(_dataBufOut+27)& (0+255),b
   604                           
   605                           ; BSR set to: 0
   606                           ;main.c: 235: dataBufOut[28] = 102;
   607  000168  0E66               	movlw	102
   608  00016A  0100               	movlb	0	; () banked
   609  00016C  6F9C               	movwf	(_dataBufOut+28)& (0+255),b
   610                           
   611                           ; BSR set to: 0
   612                           ;main.c: 236: dataBufOut[29] = 0xC0;
   613  00016E  0EC0               	movlw	192
   614  000170  0100               	movlb	0	; () banked
   615  000172  6F9D               	movwf	(_dataBufOut+29)& (0+255),b
   616                           
   617                           ; BSR set to: 0
   618                           ;main.c: 237: dataBufOut[30] = 0x5F;
   619  000174  0E5F               	movlw	95
   620  000176  0100               	movlb	0	; () banked
   621  000178  6F9E               	movwf	(_dataBufOut+30)& (0+255),b
   622                           
   623                           ; BSR set to: 0
   624                           ;main.c: 238: dataBufOut[31] = 122;
   625  00017A  0E7A               	movlw	122
   626  00017C  0100               	movlb	0	; () banked
   627  00017E  6F9F               	movwf	(_dataBufOut+31)& (0+255),b
   628                           
   629                           ; BSR set to: 0
   630                           ;main.c: 241: int count = 1;
   631  000180  0E00               	movlw	0
   632  000182  6E2B               	movwf	main@count+1,c
   633  000184  0E01               	movlw	1
   634  000186  6E2A               	movwf	main@count,c
   635  000188                     l1458:
   636                           
   637                           ;main.c: 244: dataBufOut[0] = count;
   638  000188  C02A  F080         	movff	main@count,_dataBufOut
   639                           
   640                           ;main.c: 245: nrfTXData(5);
   641  00018C  0E00               	movlw	0
   642  00018E  6E23               	movwf	nrfTXData@len+1,c
   643  000190  0E05               	movlw	5
   644  000192  6E22               	movwf	nrfTXData@len,c
   645  000194  EC5B  F002         	call	_nrfTXData	;wreg free
   646                           
   647                           ;main.c: 246: count++;
   648  000198  4A2A               	infsnz	main@count,f,c
   649  00019A  2A2B               	incf	main@count+1,f,c
   650                           
   651                           ;main.c: 248: nrfGetStatus();
   652  00019C  ECEC  F003         	call	_nrfGetStatus	;wreg free
   653                           
   654                           ;main.c: 250: if (nrfSTATUS != 0x0E) {
   655  0001A0  503E               	movf	_nrfSTATUS,w,c
   656  0001A2  0A0E               	xorlw	14
   657  0001A4  B4D8               	btfsc	status,2,c
   658  0001A6  D01A               	goto	l1482
   659                           
   660                           ;main.c: 252: LATAbits.LATA0 = 1;
   661  0001A8  8089               	bsf	3977,0,c	;volatile
   662                           
   663                           ;main.c: 255: dataBufOut[0] = 0b00100000;
   664  0001AA  0E20               	movlw	32
   665  0001AC  0100               	movlb	0	; () banked
   666  0001AE  6F80               	movwf	_dataBufOut& (0+255),b
   667                           
   668                           ; BSR set to: 0
   669                           ;main.c: 256: spiTransfer('w',0x07,1);
   670  0001B0  0E07               	movlw	7
   671  0001B2  6E22               	movwf	spiTransfer@command,c
   672  0001B4  0E00               	movlw	0
   673  0001B6  6E24               	movwf	spiTransfer@len+1,c
   674  0001B8  0E01               	movlw	1
   675  0001BA  6E23               	movwf	spiTransfer@len,c
   676  0001BC  0E77               	movlw	119
   677  0001BE  ECAD  F002         	call	_spiTransfer
   678                           
   679                           ;main.c: 258: _delay((unsigned long)((20)*(64000000/4000000.0)));
   680  0001C2  0E6A               	movlw	106
   681  0001C4                     u567:
   682  0001C4  2EE8               	decfsz	wreg,f,c
   683  0001C6  D7FE               	goto	u567
   684  0001C8  D000               	nop2		;nop
   685                           
   686                           ;main.c: 259: nrfGetStatus();
   687  0001CA  ECEC  F003         	call	_nrfGetStatus	;wreg free
   688                           
   689                           ;main.c: 261: delay10ms(10);
   690  0001CE  0E00               	movlw	0
   691  0001D0  6E21               	movwf	delay10ms@ms_multi+1,c
   692  0001D2  0E0A               	movlw	10
   693  0001D4  6E20               	movwf	delay10ms@ms_multi,c
   694  0001D6  ECB2  F003         	call	_delay10ms	;wreg free
   695                           
   696                           ;main.c: 263: LATAbits.LATA0 = 0;
   697  0001DA  9089               	bcf	3977,0,c	;volatile
   698  0001DC                     l1482:
   699                           
   700                           ;main.c: 264: }
   701                           ;main.c: 266: delay10ms(500);
   702  0001DC  0E01               	movlw	1
   703  0001DE  6E21               	movwf	delay10ms@ms_multi+1,c
   704  0001E0  0EF4               	movlw	244
   705  0001E2  6E20               	movwf	delay10ms@ms_multi,c
   706  0001E4  ECB2  F003         	call	_delay10ms	;wreg free
   707                           
   708                           ;main.c: 267: }
   709  0001E8  D7CF               	goto	l1458
   710  0001EA                     __end_of_main:
   711                           	opt stack 0
   712                           tblptru	equ	0xFF8
   713                           tblptrh	equ	0xFF7
   714                           tblptrl	equ	0xFF6
   715                           tablat	equ	0xFF5
   716                           postinc0	equ	0xFEE
   717                           wreg	equ	0xFE8
   718                           postdec1	equ	0xFE5
   719                           fsr1l	equ	0xFE1
   720                           status	equ	0xFD8
   721                           
   722 ;; *************** function _spiConfig_1 *****************
   723 ;; Defined at:
   724 ;;		line 321 in file "main.c"
   725 ;; Parameters:    Size  Location     Type
   726 ;;  spiSpeed        2   39[COMRAM] unsigned int 
   727 ;; Auto vars:     Size  Location     Type
   728 ;;  addVal          2   18[BANK0 ] unsigned int 
   729 ;; Return value:  Size  Location     Type
   730 ;;		None               void
   731 ;; Registers used:
   732 ;;		wreg, status,2, status,0, cstack
   733 ;; Tracked objects:
   734 ;;		On entry : 0/0
   735 ;;		On exit  : 0/0
   736 ;;		Unchanged: 0/0
   737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   738 ;;      Params:         2       0       0       0
   739 ;;      Locals:         0      10       0       0
   740 ;;      Temps:          0       4       0       0
   741 ;;      Totals:         2      14       0       0
   742 ;;Total ram usage:       16 bytes
   743 ;; Hardware stack levels used:    1
   744 ;; Hardware stack levels required when called:    3
   745 ;; This function calls:
   746 ;;		___aldiv
   747 ;; This function is called by:
   748 ;;		_main
   749 ;; This function uses a non-reentrant model
   750 ;;
   751                           
   752                           	psect	text1
   753  0003F2                     __ptext1:
   754                           	opt stack 0
   755  0003F2                     _spiConfig_1:
   756                           	opt stack 27
   757                           
   758                           ;main.c: 323: SSP1CON1bits.CKP = 0;
   759                           
   760                           ;incstack = 0
   761  0003F2  98C6               	bcf	4038,4,c	;volatile
   762                           
   763                           ;main.c: 324: SSP1STATbits.CKE = 1;
   764  0003F4  8CC7               	bsf	4039,6,c	;volatile
   765                           
   766                           ;main.c: 325: SSP1STATbits.SMP = 1;
   767  0003F6  8EC7               	bsf	4039,7,c	;volatile
   768                           
   769                           ;main.c: 328: unsigned int addVal = ((((64000000/1000)/spiSpeed)/100)/4)-1;
   770  0003F8  C028  F024         	movff	spiConfig_1@spiSpeed,___aldiv@divisor
   771  0003FC  C029  F025         	movff	spiConfig_1@spiSpeed+1,___aldiv@divisor+1
   772  000400  6A26               	clrf	___aldiv@divisor+2,c
   773  000402  6A27               	clrf	___aldiv@divisor+3,c
   774  000404  0E00               	movlw	0
   775  000406  6E20               	movwf	___aldiv@dividend,c
   776  000408  0EFA               	movlw	250
   777  00040A  6E21               	movwf	___aldiv@dividend+1,c
   778  00040C  0E00               	movlw	0
   779  00040E  6E22               	movwf	___aldiv@dividend+2,c
   780  000410  0E00               	movlw	0
   781  000412  6E23               	movwf	___aldiv@dividend+3,c
   782  000414  ECF5  F000         	call	___aldiv	;wreg free
   783  000418  C020  F0AA         	movff	?___aldiv,_spiConfig_1$1285
   784  00041C  C021  F0AB         	movff	?___aldiv+1,_spiConfig_1$1285+1
   785  000420  C022  F0AC         	movff	?___aldiv+2,_spiConfig_1$1285+2
   786  000424  C023  F0AD         	movff	?___aldiv+3,_spiConfig_1$1285+3
   787                           
   788                           ;main.c: 328: unsigned int addVal = ((((64000000/1000)/spiSpeed)/100)/4)-1;
   789  000428  0E64               	movlw	100
   790  00042A  6E24               	movwf	___aldiv@divisor,c
   791  00042C  0E00               	movlw	0
   792  00042E  6E25               	movwf	___aldiv@divisor+1,c
   793  000430  0E00               	movlw	0
   794  000432  6E26               	movwf	___aldiv@divisor+2,c
   795  000434  0E00               	movlw	0
   796  000436  6E27               	movwf	___aldiv@divisor+3,c
   797  000438  C0AA  F020         	movff	_spiConfig_1$1285,___aldiv@dividend
   798  00043C  C0AB  F021         	movff	_spiConfig_1$1285+1,___aldiv@dividend+1
   799  000440  C0AC  F022         	movff	_spiConfig_1$1285+2,___aldiv@dividend+2
   800  000444  C0AD  F023         	movff	_spiConfig_1$1285+3,___aldiv@dividend+3
   801  000448  ECF5  F000         	call	___aldiv	;wreg free
   802  00044C  C020  F0AE         	movff	?___aldiv,_spiConfig_1$1286
   803  000450  C021  F0AF         	movff	?___aldiv+1,_spiConfig_1$1286+1
   804  000454  C022  F0B0         	movff	?___aldiv+2,_spiConfig_1$1286+2
   805  000458  C023  F0B1         	movff	?___aldiv+3,_spiConfig_1$1286+3
   806                           
   807                           ;main.c: 328: unsigned int addVal = ((((64000000/1000)/spiSpeed)/100)/4)-1;
   808  00045C  C0AE  F020         	movff	_spiConfig_1$1286,___aldiv@dividend
   809  000460  C0AF  F021         	movff	_spiConfig_1$1286+1,___aldiv@dividend+1
   810  000464  C0B0  F022         	movff	_spiConfig_1$1286+2,___aldiv@dividend+2
   811  000468  C0B1  F023         	movff	_spiConfig_1$1286+3,___aldiv@dividend+3
   812  00046C  0E04               	movlw	4
   813  00046E  6E24               	movwf	___aldiv@divisor,c
   814  000470  0E00               	movlw	0
   815  000472  6E25               	movwf	___aldiv@divisor+1,c
   816  000474  0E00               	movlw	0
   817  000476  6E26               	movwf	___aldiv@divisor+2,c
   818  000478  0E00               	movlw	0
   819  00047A  6E27               	movwf	___aldiv@divisor+3,c
   820  00047C  ECF5  F000         	call	___aldiv	;wreg free
   821  000480  C020  F0A6         	movff	?___aldiv,??_spiConfig_1
   822  000484  C021  F0A7         	movff	?___aldiv+1,??_spiConfig_1+1
   823  000488  C022  F0A8         	movff	?___aldiv+2,??_spiConfig_1+2
   824  00048C  C023  F0A9         	movff	?___aldiv+3,??_spiConfig_1+3
   825  000490  0EFF               	movlw	255
   826  000492  0100               	movlb	0	; () banked
   827  000494  25A6               	addwf	??_spiConfig_1& (0+255),w,b
   828  000496  0100               	movlb	0	; () banked
   829  000498  6FB2               	movwf	spiConfig_1@addVal& (0+255),b
   830  00049A  0EFF               	movlw	255
   831  00049C  0100               	movlb	0	; () banked
   832  00049E  21A7               	addwfc	(??_spiConfig_1+1)& (0+255),w,b
   833  0004A0  0100               	movlb	0	; () banked
   834  0004A2  6FB3               	movwf	(spiConfig_1@addVal+1)& (0+255),b
   835                           
   836                           ; BSR set to: 0
   837                           ;main.c: 329: SSP1ADD = addVal;
   838  0004A4  C0B2  FFC8         	movff	spiConfig_1@addVal,4040	;volatile
   839                           
   840                           ; BSR set to: 0
   841                           ;main.c: 330: SSP1CON1bits.SSPM = 0b1010;
   842  0004A8  50C6               	movf	4038,w,c	;volatile
   843  0004AA  0BF0               	andlw	-16
   844  0004AC  090A               	iorlw	10
   845  0004AE  6EC6               	movwf	4038,c	;volatile
   846                           
   847                           ; BSR set to: 0
   848                           ;main.c: 332: SSP1CON1bits.SSPEN = 1;
   849  0004B0  8AC6               	bsf	4038,5,c	;volatile
   850                           
   851                           ; BSR set to: 0
   852                           ;main.c: 334: LATAbits.LATA2 = 1;
   853  0004B2  8489               	bsf	3977,2,c	;volatile
   854                           
   855                           ; BSR set to: 0
   856  0004B4  0012               	return	
   857  0004B6                     __end_of_spiConfig_1:
   858                           	opt stack 0
   859                           tblptru	equ	0xFF8
   860                           tblptrh	equ	0xFF7
   861                           tblptrl	equ	0xFF6
   862                           tablat	equ	0xFF5
   863                           postinc0	equ	0xFEE
   864                           wreg	equ	0xFE8
   865                           postdec1	equ	0xFE5
   866                           fsr1l	equ	0xFE1
   867                           status	equ	0xFD8
   868                           
   869 ;; *************** function ___aldiv *****************
   870 ;; Defined at:
   871 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\aldiv.c"
   872 ;; Parameters:    Size  Location     Type
   873 ;;  dividend        4   31[COMRAM] long 
   874 ;;  divisor         4   35[COMRAM] long 
   875 ;; Auto vars:     Size  Location     Type
   876 ;;  quotient        4    2[BANK0 ] long 
   877 ;;  sign            1    1[BANK0 ] unsigned char 
   878 ;;  counter         1    0[BANK0 ] unsigned char 
   879 ;; Return value:  Size  Location     Type
   880 ;;                  4   31[COMRAM] long 
   881 ;; Registers used:
   882 ;;		wreg, status,2, status,0
   883 ;; Tracked objects:
   884 ;;		On entry : 0/0
   885 ;;		On exit  : 0/0
   886 ;;		Unchanged: 0/0
   887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   888 ;;      Params:         8       0       0       0
   889 ;;      Locals:         0       6       0       0
   890 ;;      Temps:          0       0       0       0
   891 ;;      Totals:         8       6       0       0
   892 ;;Total ram usage:       14 bytes
   893 ;; Hardware stack levels used:    1
   894 ;; Hardware stack levels required when called:    2
   895 ;; This function calls:
   896 ;;		Nothing
   897 ;; This function is called by:
   898 ;;		_spiConfig_1
   899 ;; This function uses a non-reentrant model
   900 ;;
   901                           
   902                           	psect	text2
   903  0001EA                     __ptext2:
   904                           	opt stack 0
   905  0001EA                     ___aldiv:
   906                           	opt stack 27
   907                           
   908                           ; BSR set to: 0
   909                           ;incstack = 0
   910  0001EA  0E00               	movlw	0
   911  0001EC  0100               	movlb	0	; () banked
   912  0001EE  6FA1               	movwf	___aldiv@sign& (0+255),b
   913                           
   914                           ; BSR set to: 0
   915  0001F0  5027               	movf	___aldiv@divisor+3,w,c
   916  0001F2  0A80               	xorlw	128
   917  0001F4  0F80               	addlw	128
   918  0001F6  E108               	bnz	u495
   919  0001F8  0E00               	movlw	0
   920  0001FA  5C26               	subwf	___aldiv@divisor+2,w,c
   921  0001FC  E105               	bnz	u495
   922  0001FE  0E00               	movlw	0
   923  000200  5C25               	subwf	___aldiv@divisor+1,w,c
   924  000202  E102               	bnz	u495
   925  000204  0E00               	movlw	0
   926  000206  5C24               	subwf	___aldiv@divisor,w,c
   927  000208                     u495:
   928  000208  B0D8               	btfsc	status,0,c
   929  00020A  D00B               	goto	l1338
   930                           
   931                           ; BSR set to: 0
   932  00020C  1E27               	comf	___aldiv@divisor+3,f,c
   933  00020E  1E26               	comf	___aldiv@divisor+2,f,c
   934  000210  1E25               	comf	___aldiv@divisor+1,f,c
   935  000212  6C24               	negf	___aldiv@divisor,c
   936  000214  0E00               	movlw	0
   937  000216  2225               	addwfc	___aldiv@divisor+1,f,c
   938  000218  2226               	addwfc	___aldiv@divisor+2,f,c
   939  00021A  2227               	addwfc	___aldiv@divisor+3,f,c
   940                           
   941                           ; BSR set to: 0
   942  00021C  0E01               	movlw	1
   943  00021E  0100               	movlb	0	; () banked
   944  000220  6FA1               	movwf	___aldiv@sign& (0+255),b
   945  000222                     l1338:
   946                           
   947                           ; BSR set to: 0
   948  000222  5023               	movf	___aldiv@dividend+3,w,c
   949  000224  0A80               	xorlw	128
   950  000226  0F80               	addlw	128
   951  000228  E108               	bnz	u505
   952  00022A  0E00               	movlw	0
   953  00022C  5C22               	subwf	___aldiv@dividend+2,w,c
   954  00022E  E105               	bnz	u505
   955  000230  0E00               	movlw	0
   956  000232  5C21               	subwf	___aldiv@dividend+1,w,c
   957  000234  E102               	bnz	u505
   958  000236  0E00               	movlw	0
   959  000238  5C20               	subwf	___aldiv@dividend,w,c
   960  00023A                     u505:
   961  00023A  B0D8               	btfsc	status,0,c
   962  00023C  D00B               	goto	l1344
   963                           
   964                           ; BSR set to: 0
   965  00023E  1E23               	comf	___aldiv@dividend+3,f,c
   966  000240  1E22               	comf	___aldiv@dividend+2,f,c
   967  000242  1E21               	comf	___aldiv@dividend+1,f,c
   968  000244  6C20               	negf	___aldiv@dividend,c
   969  000246  0E00               	movlw	0
   970  000248  2221               	addwfc	___aldiv@dividend+1,f,c
   971  00024A  2222               	addwfc	___aldiv@dividend+2,f,c
   972  00024C  2223               	addwfc	___aldiv@dividend+3,f,c
   973                           
   974                           ; BSR set to: 0
   975  00024E  0E01               	movlw	1
   976  000250  0100               	movlb	0	; () banked
   977  000252  1BA1               	xorwf	___aldiv@sign& (0+255),f,b
   978  000254                     l1344:
   979                           
   980                           ; BSR set to: 0
   981  000254  0E00               	movlw	0
   982  000256  0100               	movlb	0	; () banked
   983  000258  6FA2               	movwf	___aldiv@quotient& (0+255),b
   984  00025A  0E00               	movlw	0
   985  00025C  0100               	movlb	0	; () banked
   986  00025E  6FA3               	movwf	(___aldiv@quotient+1)& (0+255),b
   987  000260  0E00               	movlw	0
   988  000262  0100               	movlb	0	; () banked
   989  000264  6FA4               	movwf	(___aldiv@quotient+2)& (0+255),b
   990  000266  0E00               	movlw	0
   991  000268  0100               	movlb	0	; () banked
   992  00026A  6FA5               	movwf	(___aldiv@quotient+3)& (0+255),b
   993                           
   994                           ; BSR set to: 0
   995  00026C  5027               	movf	___aldiv@divisor+3,w,c
   996  00026E  1024               	iorwf	___aldiv@divisor,w,c
   997  000270  1025               	iorwf	___aldiv@divisor+1,w,c
   998  000272  1026               	iorwf	___aldiv@divisor+2,w,c
   999  000274  B4D8               	btfsc	status,2,c
  1000  000276  D033               	goto	l1366
  1001                           
  1002                           ; BSR set to: 0
  1003  000278  0E01               	movlw	1
  1004  00027A  0100               	movlb	0	; () banked
  1005  00027C  6FA0               	movwf	___aldiv@counter& (0+255),b
  1006  00027E  D007               	goto	l1352
  1007  000280                     l1350:
  1008                           
  1009                           ; BSR set to: 0
  1010  000280  90D8               	bcf	status,0,c
  1011  000282  3624               	rlcf	___aldiv@divisor,f,c
  1012  000284  3625               	rlcf	___aldiv@divisor+1,f,c
  1013  000286  3626               	rlcf	___aldiv@divisor+2,f,c
  1014  000288  3627               	rlcf	___aldiv@divisor+3,f,c
  1015  00028A  0100               	movlb	0	; () banked
  1016  00028C  2BA0               	incf	___aldiv@counter& (0+255),f,b
  1017  00028E                     l1352:
  1018                           
  1019                           ; BSR set to: 0
  1020  00028E  AE27               	btfss	___aldiv@divisor+3,7,c
  1021  000290  D7F7               	goto	l1350
  1022  000292                     l1354:
  1023                           
  1024                           ; BSR set to: 0
  1025  000292  0100               	movlb	0	; () banked
  1026  000294  90D8               	bcf	status,0,c
  1027  000296  0100               	movlb	0	; () banked
  1028  000298  37A2               	rlcf	___aldiv@quotient& (0+255),f,b
  1029  00029A  0100               	movlb	0	; () banked
  1030  00029C  37A3               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  1031  00029E  0100               	movlb	0	; () banked
  1032  0002A0  37A4               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  1033  0002A2  0100               	movlb	0	; () banked
  1034  0002A4  37A5               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  1035                           
  1036                           ; BSR set to: 0
  1037  0002A6  5024               	movf	___aldiv@divisor,w,c
  1038  0002A8  5C20               	subwf	___aldiv@dividend,w,c
  1039  0002AA  5025               	movf	___aldiv@divisor+1,w,c
  1040  0002AC  5821               	subwfb	___aldiv@dividend+1,w,c
  1041  0002AE  5026               	movf	___aldiv@divisor+2,w,c
  1042  0002B0  5822               	subwfb	___aldiv@dividend+2,w,c
  1043  0002B2  5027               	movf	___aldiv@divisor+3,w,c
  1044  0002B4  5823               	subwfb	___aldiv@dividend+3,w,c
  1045  0002B6  A0D8               	btfss	status,0,c
  1046  0002B8  D00A               	goto	l1362
  1047                           
  1048                           ; BSR set to: 0
  1049  0002BA  5024               	movf	___aldiv@divisor,w,c
  1050  0002BC  5E20               	subwf	___aldiv@dividend,f,c
  1051  0002BE  5025               	movf	___aldiv@divisor+1,w,c
  1052  0002C0  5A21               	subwfb	___aldiv@dividend+1,f,c
  1053  0002C2  5026               	movf	___aldiv@divisor+2,w,c
  1054  0002C4  5A22               	subwfb	___aldiv@dividend+2,f,c
  1055  0002C6  5027               	movf	___aldiv@divisor+3,w,c
  1056  0002C8  5A23               	subwfb	___aldiv@dividend+3,f,c
  1057                           
  1058                           ; BSR set to: 0
  1059  0002CA  0100               	movlb	0	; () banked
  1060  0002CC  81A2               	bsf	___aldiv@quotient& (0+255),0,b
  1061  0002CE                     l1362:
  1062                           
  1063                           ; BSR set to: 0
  1064  0002CE  90D8               	bcf	status,0,c
  1065  0002D0  3227               	rrcf	___aldiv@divisor+3,f,c
  1066  0002D2  3226               	rrcf	___aldiv@divisor+2,f,c
  1067  0002D4  3225               	rrcf	___aldiv@divisor+1,f,c
  1068  0002D6  3224               	rrcf	___aldiv@divisor,f,c
  1069                           
  1070                           ; BSR set to: 0
  1071  0002D8  0100               	movlb	0	; () banked
  1072  0002DA  2FA0               	decfsz	___aldiv@counter& (0+255),f,b
  1073  0002DC  D7DA               	goto	l1354
  1074  0002DE                     l1366:
  1075                           
  1076                           ; BSR set to: 0
  1077  0002DE  0100               	movlb	0	; () banked
  1078  0002E0  51A1               	movf	___aldiv@sign& (0+255),w,b
  1079  0002E2  B4D8               	btfsc	status,2,c
  1080  0002E4  D00F               	goto	l1370
  1081                           
  1082                           ; BSR set to: 0
  1083  0002E6  0100               	movlb	0	; () banked
  1084  0002E8  1FA5               	comf	(___aldiv@quotient+3)& (0+255),f,b
  1085  0002EA  0100               	movlb	0	; () banked
  1086  0002EC  1FA4               	comf	(___aldiv@quotient+2)& (0+255),f,b
  1087  0002EE  0100               	movlb	0	; () banked
  1088  0002F0  1FA3               	comf	(___aldiv@quotient+1)& (0+255),f,b
  1089  0002F2  0100               	movlb	0	; () banked
  1090  0002F4  6DA2               	negf	___aldiv@quotient& (0+255),b
  1091  0002F6  0E00               	movlw	0
  1092  0002F8  0100               	movlb	0	; () banked
  1093  0002FA  23A3               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  1094  0002FC  0100               	movlb	0	; () banked
  1095  0002FE  23A4               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  1096  000300  0100               	movlb	0	; () banked
  1097  000302  23A5               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  1098  000304                     l1370:
  1099                           
  1100                           ; BSR set to: 0
  1101  000304  C0A2  F020         	movff	___aldiv@quotient,?___aldiv
  1102  000308  C0A3  F021         	movff	___aldiv@quotient+1,?___aldiv+1
  1103  00030C  C0A4  F022         	movff	___aldiv@quotient+2,?___aldiv+2
  1104  000310  C0A5  F023         	movff	___aldiv@quotient+3,?___aldiv+3
  1105  000314  0012               	return	
  1106  000316                     __end_of___aldiv:
  1107                           	opt stack 0
  1108                           tblptru	equ	0xFF8
  1109                           tblptrh	equ	0xFF7
  1110                           tblptrl	equ	0xFF6
  1111                           tablat	equ	0xFF5
  1112                           postinc0	equ	0xFEE
  1113                           wreg	equ	0xFE8
  1114                           postdec1	equ	0xFE5
  1115                           fsr1l	equ	0xFE1
  1116                           status	equ	0xFD8
  1117                           
  1118 ;; *************** function _portConfig *****************
  1119 ;; Defined at:
  1120 ;;		line 307 in file "main.c"
  1121 ;; Parameters:    Size  Location     Type
  1122 ;;		None
  1123 ;; Auto vars:     Size  Location     Type
  1124 ;;		None
  1125 ;; Return value:  Size  Location     Type
  1126 ;;		None               void
  1127 ;; Registers used:
  1128 ;;		wreg, status,2
  1129 ;; Tracked objects:
  1130 ;;		On entry : 0/0
  1131 ;;		On exit  : 0/0
  1132 ;;		Unchanged: 0/0
  1133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1134 ;;      Params:         0       0       0       0
  1135 ;;      Locals:         0       0       0       0
  1136 ;;      Temps:          0       0       0       0
  1137 ;;      Totals:         0       0       0       0
  1138 ;;Total ram usage:        0 bytes
  1139 ;; Hardware stack levels used:    1
  1140 ;; Hardware stack levels required when called:    2
  1141 ;; This function calls:
  1142 ;;		Nothing
  1143 ;; This function is called by:
  1144 ;;		_main
  1145 ;; This function uses a non-reentrant model
  1146 ;;
  1147                           
  1148                           	psect	text3
  1149  0007FA                     __ptext3:
  1150                           	opt stack 0
  1151  0007FA                     _portConfig:
  1152                           	opt stack 28
  1153                           
  1154                           ;main.c: 308: TRISA = 0b00000000;
  1155                           
  1156                           ; BSR set to: 0
  1157                           ;incstack = 0
  1158  0007FA  0E00               	movlw	0
  1159  0007FC  6E92               	movwf	3986,c	;volatile
  1160                           
  1161                           ;main.c: 309: TRISB = 0b00010000;
  1162  0007FE  0E10               	movlw	16
  1163  000800  6E93               	movwf	3987,c	;volatile
  1164                           
  1165                           ;main.c: 310: TRISC = 0b00010000;
  1166  000802  0E10               	movlw	16
  1167  000804  6E94               	movwf	3988,c	;volatile
  1168                           
  1169                           ;main.c: 312: LATA = 0b00000100;
  1170  000806  0E04               	movlw	4
  1171  000808  6E89               	movwf	3977,c	;volatile
  1172                           
  1173                           ;main.c: 313: LATB = 0x00;
  1174  00080A  0E00               	movlw	0
  1175  00080C  6E8A               	movwf	3978,c	;volatile
  1176                           
  1177                           ;main.c: 314: LATC = 0x00;
  1178  00080E  0E00               	movlw	0
  1179  000810  6E8B               	movwf	3979,c	;volatile
  1180  000812  0012               	return	
  1181  000814                     __end_of_portConfig:
  1182                           	opt stack 0
  1183                           tblptru	equ	0xFF8
  1184                           tblptrh	equ	0xFF7
  1185                           tblptrl	equ	0xFF6
  1186                           tablat	equ	0xFF5
  1187                           postinc0	equ	0xFEE
  1188                           wreg	equ	0xFE8
  1189                           postdec1	equ	0xFE5
  1190                           fsr1l	equ	0xFE1
  1191                           status	equ	0xFD8
  1192                           
  1193 ;; *************** function _nrfTXData *****************
  1194 ;; Defined at:
  1195 ;;		line 506 in file "main.c"
  1196 ;; Parameters:    Size  Location     Type
  1197 ;;  len             2   33[COMRAM] int 
  1198 ;; Auto vars:     Size  Location     Type
  1199 ;;  i               2   38[COMRAM] int 
  1200 ;;  i               2   36[COMRAM] int 
  1201 ;; Return value:  Size  Location     Type
  1202 ;;		None               void
  1203 ;; Registers used:
  1204 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1205 ;; Tracked objects:
  1206 ;;		On entry : 0/0
  1207 ;;		On exit  : 0/0
  1208 ;;		Unchanged: 0/0
  1209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1210 ;;      Params:         2       0       0       0
  1211 ;;      Locals:         4       0       0       0
  1212 ;;      Temps:          1       0       0       0
  1213 ;;      Totals:         7       0       0       0
  1214 ;;Total ram usage:        7 bytes
  1215 ;; Hardware stack levels used:    1
  1216 ;; Hardware stack levels required when called:    3
  1217 ;; This function calls:
  1218 ;;		_setCSN
  1219 ;;		_spiTransferByte
  1220 ;; This function is called by:
  1221 ;;		_main
  1222 ;; This function uses a non-reentrant model
  1223 ;;
  1224                           
  1225                           	psect	text4
  1226  0004B6                     __ptext4:
  1227                           	opt stack 0
  1228  0004B6                     _nrfTXData:
  1229                           	opt stack 27
  1230                           
  1231                           ;main.c: 508: setCSN(0);
  1232                           
  1233                           ;incstack = 0
  1234  0004B6  0E00               	movlw	0
  1235  0004B8  6E21               	movwf	setCSN@level+1,c
  1236  0004BA  0E00               	movlw	0
  1237  0004BC  6E20               	movwf	setCSN@level,c
  1238  0004BE  EC1B  F004         	call	_setCSN	;wreg free
  1239                           
  1240                           ;main.c: 510: spiTransferByte(0xA0);
  1241  0004C2  0EA0               	movlw	160
  1242  0004C4  EC13  F004         	call	_spiTransferByte
  1243                           
  1244                           ;main.c: 512: if (len != 0) {
  1245  0004C8  5023               	movf	nrfTXData@len+1,w,c
  1246  0004CA  1022               	iorwf	nrfTXData@len,w,c
  1247  0004CC  B4D8               	btfsc	status,2,c
  1248  0004CE  D01C               	goto	l1210
  1249                           
  1250                           ;main.c: 513: for (int i=0;i<len;i++) {
  1251  0004D0  0E00               	movlw	0
  1252  0004D2  6E28               	movwf	nrfTXData@i+1,c
  1253  0004D4  0E00               	movlw	0
  1254  0004D6  6E27               	movwf	nrfTXData@i,c
  1255  0004D8  D00D               	goto	l1208
  1256  0004DA                     l1204:
  1257                           
  1258                           ;main.c: 514: spiTransferByte(dataBufOut[i]);
  1259  0004DA  0100               	movlb	0	; () banked
  1260  0004DC  0E80               	movlw	low _dataBufOut
  1261  0004DE  2427               	addwf	nrfTXData@i,w,c
  1262  0004E0  6ED9               	movwf	fsr2l,c
  1263  0004E2  0100               	movlb	0	; () banked
  1264  0004E4  0E00               	movlw	high _dataBufOut
  1265  0004E6  2028               	addwfc	nrfTXData@i+1,w,c
  1266  0004E8  6EDA               	movwf	fsr2h,c
  1267  0004EA  50DF               	movf	indf2,w,c
  1268  0004EC  EC13  F004         	call	_spiTransferByte
  1269  0004F0  4A27               	infsnz	nrfTXData@i,f,c
  1270  0004F2  2A28               	incf	nrfTXData@i+1,f,c
  1271  0004F4                     l1208:
  1272  0004F4  5028               	movf	nrfTXData@i+1,w,c
  1273  0004F6  0A80               	xorlw	128
  1274  0004F8  6E24               	movwf	??_nrfTXData& (0+255),c
  1275  0004FA  5022               	movf	nrfTXData@len,w,c
  1276  0004FC  5C27               	subwf	nrfTXData@i,w,c
  1277  0004FE  5023               	movf	nrfTXData@len+1,w,c
  1278  000500  0A80               	xorlw	128
  1279  000502  5824               	subwfb	??_nrfTXData& (0+255),w,c
  1280  000504  A0D8               	btfss	status,0,c
  1281  000506  D7E9               	goto	l1204
  1282  000508                     l1210:
  1283                           
  1284                           ;main.c: 515: }
  1285                           ;main.c: 516: }
  1286                           ;main.c: 518: setCSN(1);
  1287  000508  0E00               	movlw	0
  1288  00050A  6E21               	movwf	setCSN@level+1,c
  1289  00050C  0E01               	movlw	1
  1290  00050E  6E20               	movwf	setCSN@level,c
  1291  000510  EC1B  F004         	call	_setCSN	;wreg free
  1292                           
  1293                           ;main.c: 521: LATAbits.LATA1 = 1;
  1294  000514  8289               	bsf	3977,1,c	;volatile
  1295                           
  1296                           ;main.c: 522: _delay((unsigned long)((12)*(64000000/4000000.0)));
  1297  000516  0E40               	movlw	64
  1298  000518                     u577:
  1299  000518  2EE8               	decfsz	wreg,f,c
  1300  00051A  D7FE               	goto	u577
  1301                           
  1302                           ;main.c: 523: LATAbits.LATA1 = 0;
  1303  00051C  9289               	bcf	3977,1,c	;volatile
  1304                           
  1305                           ;main.c: 524: _delay((unsigned long)((180)*(64000000/4000000.0)));
  1306  00051E  0E04               	movlw	4
  1307  000520  6E24               	movwf	??_nrfTXData& (0+255),c
  1308  000522  0EBC               	movlw	188
  1309  000524                     u587:
  1310  000524  2EE8               	decfsz	wreg,f,c
  1311  000526  D7FE               	goto	u587
  1312  000528  2E24               	decfsz	??_nrfTXData& (0+255),f,c
  1313  00052A  D7FC               	goto	u587
  1314  00052C  D000               	nop2	
  1315                           
  1316                           ;main.c: 525: for (int i=0;i<len;i++) {
  1317  00052E  0E00               	movlw	0
  1318  000530  6E26               	movwf	nrfTXData@i_787+1,c
  1319  000532  0E00               	movlw	0
  1320  000534  6E25               	movwf	nrfTXData@i_787,c
  1321  000536  D006               	goto	l163
  1322  000538                     l1222:
  1323                           
  1324                           ;main.c: 526: _delay((unsigned long)((8)*(64000000/4000000.0)));
  1325  000538  0E2A               	movlw	42
  1326  00053A                     u597:
  1327  00053A  2EE8               	decfsz	wreg,f,c
  1328  00053C  D7FE               	goto	u597
  1329  00053E  D000               	nop2		;nop
  1330  000540  4A25               	infsnz	nrfTXData@i_787,f,c
  1331  000542  2A26               	incf	nrfTXData@i_787+1,f,c
  1332  000544                     l163:
  1333  000544  5026               	movf	nrfTXData@i_787+1,w,c
  1334  000546  0A80               	xorlw	128
  1335  000548  6E24               	movwf	??_nrfTXData& (0+255),c
  1336  00054A  5022               	movf	nrfTXData@len,w,c
  1337  00054C  5C25               	subwf	nrfTXData@i_787,w,c
  1338  00054E  5023               	movf	nrfTXData@len+1,w,c
  1339  000550  0A80               	xorlw	128
  1340  000552  5824               	subwfb	??_nrfTXData& (0+255),w,c
  1341  000554  B0D8               	btfsc	status,0,c
  1342  000556  0012               	return	
  1343  000558  D7EF               	goto	l1222
  1344  00055A                     __end_of_nrfTXData:
  1345                           	opt stack 0
  1346                           tblptru	equ	0xFF8
  1347                           tblptrh	equ	0xFF7
  1348                           tblptrl	equ	0xFF6
  1349                           tablat	equ	0xFF5
  1350                           postinc0	equ	0xFEE
  1351                           wreg	equ	0xFE8
  1352                           postdec1	equ	0xFE5
  1353                           fsr1l	equ	0xFE1
  1354                           indf2	equ	0xFDF
  1355                           fsr2h	equ	0xFDA
  1356                           fsr2l	equ	0xFD9
  1357                           status	equ	0xFD8
  1358                           
  1359 ;; *************** function _nrfGetStatus *****************
  1360 ;; Defined at:
  1361 ;;		line 388 in file "main.c"
  1362 ;; Parameters:    Size  Location     Type
  1363 ;;		None
  1364 ;; Auto vars:     Size  Location     Type
  1365 ;;		None
  1366 ;; Return value:  Size  Location     Type
  1367 ;;		None               void
  1368 ;; Registers used:
  1369 ;;		wreg, status,2, status,0, cstack
  1370 ;; Tracked objects:
  1371 ;;		On entry : 0/0
  1372 ;;		On exit  : 0/0
  1373 ;;		Unchanged: 0/0
  1374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1375 ;;      Params:         0       0       0       0
  1376 ;;      Locals:         0       0       0       0
  1377 ;;      Temps:          0       0       0       0
  1378 ;;      Totals:         0       0       0       0
  1379 ;;Total ram usage:        0 bytes
  1380 ;; Hardware stack levels used:    1
  1381 ;; Hardware stack levels required when called:    3
  1382 ;; This function calls:
  1383 ;;		_setCSN
  1384 ;;		_spiTransferByte
  1385 ;; This function is called by:
  1386 ;;		_main
  1387 ;; This function uses a non-reentrant model
  1388 ;;
  1389                           
  1390                           	psect	text5
  1391  0007D8                     __ptext5:
  1392                           	opt stack 0
  1393  0007D8                     _nrfGetStatus:
  1394                           	opt stack 27
  1395                           
  1396                           ;main.c: 390: setCSN(0);
  1397                           
  1398                           ;incstack = 0
  1399  0007D8  0E00               	movlw	0
  1400  0007DA  6E21               	movwf	setCSN@level+1,c
  1401  0007DC  0E00               	movlw	0
  1402  0007DE  6E20               	movwf	setCSN@level,c
  1403  0007E0  EC1B  F004         	call	_setCSN	;wreg free
  1404                           
  1405                           ;main.c: 392: nrfSTATUS = spiTransferByte(0xFF);
  1406  0007E4  0EFF               	movlw	255
  1407  0007E6  EC13  F004         	call	_spiTransferByte
  1408  0007EA  6E3E               	movwf	_nrfSTATUS,c
  1409                           
  1410                           ;main.c: 394: setCSN(1);
  1411  0007EC  0E00               	movlw	0
  1412  0007EE  6E21               	movwf	setCSN@level+1,c
  1413  0007F0  0E01               	movlw	1
  1414  0007F2  6E20               	movwf	setCSN@level,c
  1415  0007F4  EC1B  F004         	call	_setCSN	;wreg free
  1416  0007F8  0012               	return	
  1417  0007FA                     __end_of_nrfGetStatus:
  1418                           	opt stack 0
  1419                           tblptru	equ	0xFF8
  1420                           tblptrh	equ	0xFF7
  1421                           tblptrl	equ	0xFF6
  1422                           tablat	equ	0xFF5
  1423                           postinc0	equ	0xFEE
  1424                           wreg	equ	0xFE8
  1425                           postdec1	equ	0xFE5
  1426                           fsr1l	equ	0xFE1
  1427                           indf2	equ	0xFDF
  1428                           fsr2h	equ	0xFDA
  1429                           fsr2l	equ	0xFD9
  1430                           status	equ	0xFD8
  1431                           
  1432 ;; *************** function _nrfConfig *****************
  1433 ;; Defined at:
  1434 ;;		line 340 in file "main.c"
  1435 ;; Parameters:    Size  Location     Type
  1436 ;;		None
  1437 ;; Auto vars:     Size  Location     Type
  1438 ;;		None
  1439 ;; Return value:  Size  Location     Type
  1440 ;;		None               void
  1441 ;; Registers used:
  1442 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1443 ;; Tracked objects:
  1444 ;;		On entry : 0/0
  1445 ;;		On exit  : 0/0
  1446 ;;		Unchanged: 0/0
  1447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1448 ;;      Params:         0       0       0       0
  1449 ;;      Locals:         0       0       0       0
  1450 ;;      Temps:          0       0       0       0
  1451 ;;      Totals:         0       0       0       0
  1452 ;;Total ram usage:        0 bytes
  1453 ;; Hardware stack levels used:    1
  1454 ;; Hardware stack levels required when called:    4
  1455 ;; This function calls:
  1456 ;;		_nrfConfigReg
  1457 ;;		_nrfSetRXAddr
  1458 ;;		_nrfSetTXAddr
  1459 ;;		_spiTransfer
  1460 ;; This function is called by:
  1461 ;;		_main
  1462 ;; This function uses a non-reentrant model
  1463 ;;
  1464                           
  1465                           	psect	text6
  1466  000316                     __ptext6:
  1467                           	opt stack 0
  1468  000316                     _nrfConfig:
  1469                           	opt stack 26
  1470                           
  1471                           ;main.c: 343: nrfConfigReg('w',0x00,CONFIG_CURR);
  1472                           
  1473                           ;incstack = 0
  1474  000316  0E00               	movlw	0
  1475  000318  6E22               	movwf	nrfConfigReg@command,c
  1476  00031A  C02C  F023         	movff	_CONFIG_CURR,nrfConfigReg@data
  1477  00031E  0E77               	movlw	119
  1478  000320  EC8D  F003         	call	_nrfConfigReg
  1479                           
  1480                           ;main.c: 345: nrfConfigReg('w',0x01,EN_AA_CURR);
  1481  000324  0E01               	movlw	1
  1482  000326  6E22               	movwf	nrfConfigReg@command,c
  1483  000328  C03D  F023         	movff	_EN_AA_CURR,nrfConfigReg@data
  1484  00032C  0E77               	movlw	119
  1485  00032E  EC8D  F003         	call	_nrfConfigReg
  1486                           
  1487                           ;main.c: 347: nrfConfigReg('w',0x02,EN_RXADDR_CURR);
  1488  000332  0E02               	movlw	2
  1489  000334  6E22               	movwf	nrfConfigReg@command,c
  1490  000336  C02E  F023         	movff	_EN_RXADDR_CURR,nrfConfigReg@data
  1491  00033A  0E77               	movlw	119
  1492  00033C  EC8D  F003         	call	_nrfConfigReg
  1493                           
  1494                           ;main.c: 349: nrfConfigReg('w',0x03,SETUP_AW_CURR);
  1495  000340  0E03               	movlw	3
  1496  000342  6E22               	movwf	nrfConfigReg@command,c
  1497  000344  C033  F023         	movff	_SETUP_AW_CURR,nrfConfigReg@data
  1498  000348  0E77               	movlw	119
  1499  00034A  EC8D  F003         	call	_nrfConfigReg
  1500                           
  1501                           ;main.c: 351: nrfConfigReg('w',0x04,SETUP_RETR_CURR);
  1502  00034E  0E04               	movlw	4
  1503  000350  6E22               	movwf	nrfConfigReg@command,c
  1504  000352  C034  F023         	movff	_SETUP_RETR_CURR,nrfConfigReg@data
  1505  000356  0E77               	movlw	119
  1506  000358  EC8D  F003         	call	_nrfConfigReg
  1507                           
  1508                           ;main.c: 353: nrfConfigReg('w',0x05,RF_CH_CURR);
  1509  00035C  0E05               	movlw	5
  1510  00035E  6E22               	movwf	nrfConfigReg@command,c
  1511  000360  C030  F023         	movff	_RF_CH_CURR,nrfConfigReg@data
  1512  000364  0E77               	movlw	119
  1513  000366  EC8D  F003         	call	_nrfConfigReg
  1514                           
  1515                           ;main.c: 355: nrfConfigReg('w',0x06,RF_SETUP_CURR);
  1516  00036A  0E06               	movlw	6
  1517  00036C  6E22               	movwf	nrfConfigReg@command,c
  1518  00036E  C031  F023         	movff	_RF_SETUP_CURR,nrfConfigReg@data
  1519  000372  0E77               	movlw	119
  1520  000374  EC8D  F003         	call	_nrfConfigReg
  1521                           
  1522                           ;main.c: 357: nrfSetRXAddr(0x0A,RX_ADDRESS,4);
  1523  000378  0E00               	movlw	high _RX_ADDRESS
  1524  00037A  6E23               	movwf	nrfSetRXAddr@addr+1,c
  1525  00037C  0E35               	movlw	low _RX_ADDRESS
  1526  00037E  6E22               	movwf	nrfSetRXAddr@addr,c
  1527  000380  0E00               	movlw	0
  1528  000382  6E25               	movwf	nrfSetRXAddr@len+1,c
  1529  000384  0E04               	movlw	4
  1530  000386  6E24               	movwf	nrfSetRXAddr@len,c
  1531  000388  0E0A               	movlw	10
  1532  00038A  EC2F  F003         	call	_nrfSetRXAddr
  1533                           
  1534                           ;main.c: 359: nrfSetTXAddr(TX_ADDRESS,4);
  1535  00038E  0E00               	movlw	high _TX_ADDRESS
  1536  000390  6E23               	movwf	nrfSetTXAddr@addr+1,c
  1537  000392  0E39               	movlw	low _TX_ADDRESS
  1538  000394  6E22               	movwf	nrfSetTXAddr@addr,c
  1539  000396  0E00               	movlw	0
  1540  000398  6E25               	movwf	nrfSetTXAddr@len+1,c
  1541  00039A  0E04               	movlw	4
  1542  00039C  6E24               	movwf	nrfSetTXAddr@len,c
  1543  00039E  EC5F  F003         	call	_nrfSetTXAddr	;wreg free
  1544                           
  1545                           ;main.c: 361: nrfConfigReg('w',0x11,RX_PW_P0_CURR);
  1546  0003A2  0E11               	movlw	17
  1547  0003A4  6E22               	movwf	nrfConfigReg@command,c
  1548  0003A6  C032  F023         	movff	_RX_PW_P0_CURR,nrfConfigReg@data
  1549  0003AA  0E77               	movlw	119
  1550  0003AC  EC8D  F003         	call	_nrfConfigReg
  1551                           
  1552                           ;main.c: 363: nrfConfigReg('w',0x1C,DYNPD_CURR);
  1553  0003B0  0E1C               	movlw	28
  1554  0003B2  6E22               	movwf	nrfConfigReg@command,c
  1555  0003B4  C02D  F023         	movff	_DYNPD_CURR,nrfConfigReg@data
  1556  0003B8  0E77               	movlw	119
  1557  0003BA  EC8D  F003         	call	_nrfConfigReg
  1558                           
  1559                           ;main.c: 365: nrfConfigReg('w',0x1D,FEATURE_CURR);
  1560  0003BE  0E1D               	movlw	29
  1561  0003C0  6E22               	movwf	nrfConfigReg@command,c
  1562  0003C2  C02F  F023         	movff	_FEATURE_CURR,nrfConfigReg@data
  1563  0003C6  0E77               	movlw	119
  1564  0003C8  EC8D  F003         	call	_nrfConfigReg
  1565                           
  1566                           ;main.c: 367: spiTransfer('n',0xE1,0);
  1567  0003CC  0EE1               	movlw	225
  1568  0003CE  6E22               	movwf	spiTransfer@command,c
  1569  0003D0  0E00               	movlw	0
  1570  0003D2  6E24               	movwf	spiTransfer@len+1,c
  1571  0003D4  0E00               	movlw	0
  1572  0003D6  6E23               	movwf	spiTransfer@len,c
  1573  0003D8  0E6E               	movlw	110
  1574  0003DA  ECAD  F002         	call	_spiTransfer
  1575                           
  1576                           ;main.c: 369: spiTransfer('n',0xE2,0);
  1577  0003DE  0EE2               	movlw	226
  1578  0003E0  6E22               	movwf	spiTransfer@command,c
  1579  0003E2  0E00               	movlw	0
  1580  0003E4  6E24               	movwf	spiTransfer@len+1,c
  1581  0003E6  0E00               	movlw	0
  1582  0003E8  6E23               	movwf	spiTransfer@len,c
  1583  0003EA  0E6E               	movlw	110
  1584  0003EC  ECAD  F002         	call	_spiTransfer
  1585  0003F0  0012               	return	
  1586  0003F2                     __end_of_nrfConfig:
  1587                           	opt stack 0
  1588                           tblptru	equ	0xFF8
  1589                           tblptrh	equ	0xFF7
  1590                           tblptrl	equ	0xFF6
  1591                           tablat	equ	0xFF5
  1592                           postinc0	equ	0xFEE
  1593                           wreg	equ	0xFE8
  1594                           postdec1	equ	0xFE5
  1595                           fsr1l	equ	0xFE1
  1596                           indf2	equ	0xFDF
  1597                           fsr2h	equ	0xFDA
  1598                           fsr2l	equ	0xFD9
  1599                           status	equ	0xFD8
  1600                           
  1601 ;; *************** function _spiTransfer *****************
  1602 ;; Defined at:
  1603 ;;		line 468 in file "main.c"
  1604 ;; Parameters:    Size  Location     Type
  1605 ;;  wrn             1    wreg     unsigned char 
  1606 ;;  command         1   33[COMRAM] unsigned char 
  1607 ;;  len             2   34[COMRAM] int 
  1608 ;; Auto vars:     Size  Location     Type
  1609 ;;  wrn             1   37[COMRAM] unsigned char 
  1610 ;;  i               2   38[COMRAM] int 
  1611 ;; Return value:  Size  Location     Type
  1612 ;;		None               void
  1613 ;; Registers used:
  1614 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1615 ;; Tracked objects:
  1616 ;;		On entry : 0/0
  1617 ;;		On exit  : 0/0
  1618 ;;		Unchanged: 0/0
  1619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1620 ;;      Params:         3       0       0       0
  1621 ;;      Locals:         3       0       0       0
  1622 ;;      Temps:          1       0       0       0
  1623 ;;      Totals:         7       0       0       0
  1624 ;;Total ram usage:        7 bytes
  1625 ;; Hardware stack levels used:    1
  1626 ;; Hardware stack levels required when called:    3
  1627 ;; This function calls:
  1628 ;;		_setCSN
  1629 ;;		_spiTransferByte
  1630 ;; This function is called by:
  1631 ;;		_main
  1632 ;;		_nrfConfig
  1633 ;; This function uses a non-reentrant model
  1634 ;;
  1635                           
  1636                           	psect	text7
  1637  00055A                     __ptext7:
  1638                           	opt stack 0
  1639  00055A                     _spiTransfer:
  1640                           	opt stack 27
  1641                           
  1642                           ;incstack = 0
  1643                           ;spiTransfer@wrn stored from wreg
  1644  00055A  6E26               	movwf	spiTransfer@wrn,c
  1645                           
  1646                           ;main.c: 470: setCSN(0);
  1647  00055C  0E00               	movlw	0
  1648  00055E  6E21               	movwf	setCSN@level+1,c
  1649  000560  0E00               	movlw	0
  1650  000562  6E20               	movwf	setCSN@level,c
  1651  000564  EC1B  F004         	call	_setCSN	;wreg free
  1652                           
  1653                           ;main.c: 472: if (wrn == 'w') {
  1654  000568  5026               	movf	spiTransfer@wrn,w,c
  1655  00056A  0A77               	xorlw	119
  1656  00056C  A4D8               	btfss	status,2,c
  1657  00056E  D005               	goto	l1056
  1658                           
  1659                           ;main.c: 473: spiTransferByte(0x20|command);
  1660  000570  5022               	movf	spiTransfer@command,w,c
  1661  000572  0920               	iorlw	32
  1662  000574  EC13  F004         	call	_spiTransferByte
  1663                           
  1664                           ;main.c: 474: } else if (wrn == 'r') {
  1665  000578  D00F               	goto	l1064
  1666  00057A                     l1056:
  1667  00057A  5026               	movf	spiTransfer@wrn,w,c
  1668  00057C  0A72               	xorlw	114
  1669  00057E  A4D8               	btfss	status,2,c
  1670  000580  D004               	goto	l1060
  1671                           
  1672                           ;main.c: 475: spiTransferByte(0x00|command);
  1673  000582  5022               	movf	spiTransfer@command,w,c
  1674  000584  EC13  F004         	call	_spiTransferByte
  1675                           
  1676                           ;main.c: 476: } else if(wrn == 'n') {
  1677  000588  D007               	goto	l1064
  1678  00058A                     l1060:
  1679  00058A  5026               	movf	spiTransfer@wrn,w,c
  1680  00058C  0A6E               	xorlw	110
  1681  00058E  A4D8               	btfss	status,2,c
  1682  000590  D003               	goto	l1064
  1683                           
  1684                           ;main.c: 477: spiTransferByte(command);
  1685  000592  5022               	movf	spiTransfer@command,w,c
  1686  000594  EC13  F004         	call	_spiTransferByte
  1687  000598                     l1064:
  1688                           
  1689                           ;main.c: 478: }
  1690                           ;main.c: 480: if (len != 0) {
  1691  000598  5024               	movf	spiTransfer@len+1,w,c
  1692  00059A  1023               	iorwf	spiTransfer@len,w,c
  1693  00059C  B4D8               	btfsc	status,2,c
  1694  00059E  D025               	goto	l1074
  1695                           
  1696                           ;main.c: 481: for (int i=0;i<len;i++) {
  1697  0005A0  0E00               	movlw	0
  1698  0005A2  6E28               	movwf	spiTransfer@i+1,c
  1699  0005A4  0E00               	movlw	0
  1700  0005A6  6E27               	movwf	spiTransfer@i,c
  1701  0005A8  D016               	goto	l1072
  1702  0005AA                     l1068:
  1703                           
  1704                           ;main.c: 482: dataBufIn[i] = spiTransferByte(dataBufOut[i]);
  1705  0005AA  0100               	movlb	0	; () banked
  1706  0005AC  0E60               	movlw	low _dataBufIn
  1707  0005AE  2427               	addwf	spiTransfer@i,w,c
  1708  0005B0  6ED9               	movwf	fsr2l,c
  1709  0005B2  0100               	movlb	0	; () banked
  1710  0005B4  0E00               	movlw	high _dataBufIn
  1711  0005B6  2028               	addwfc	spiTransfer@i+1,w,c
  1712  0005B8  6EDA               	movwf	fsr2h,c
  1713  0005BA  0100               	movlb	0	; () banked
  1714  0005BC  0E80               	movlw	low _dataBufOut
  1715  0005BE  2427               	addwf	spiTransfer@i,w,c
  1716  0005C0  6EE1               	movwf	fsr1l,c
  1717  0005C2  0100               	movlb	0	; () banked
  1718  0005C4  0E00               	movlw	high _dataBufOut
  1719  0005C6  2028               	addwfc	spiTransfer@i+1,w,c
  1720  0005C8  6EE2               	movwf	fsr1h,c
  1721  0005CA  50E7               	movf	indf1,w,c
  1722  0005CC  EC13  F004         	call	_spiTransferByte
  1723  0005D0  6EDF               	movwf	indf2,c
  1724  0005D2  4A27               	infsnz	spiTransfer@i,f,c
  1725  0005D4  2A28               	incf	spiTransfer@i+1,f,c
  1726  0005D6                     l1072:
  1727  0005D6  5028               	movf	spiTransfer@i+1,w,c
  1728  0005D8  0A80               	xorlw	128
  1729  0005DA  6E25               	movwf	??_spiTransfer& (0+255),c
  1730  0005DC  5023               	movf	spiTransfer@len,w,c
  1731  0005DE  5C27               	subwf	spiTransfer@i,w,c
  1732  0005E0  5024               	movf	spiTransfer@len+1,w,c
  1733  0005E2  0A80               	xorlw	128
  1734  0005E4  5825               	subwfb	??_spiTransfer& (0+255),w,c
  1735  0005E6  A0D8               	btfss	status,0,c
  1736  0005E8  D7E0               	goto	l1068
  1737  0005EA                     l1074:
  1738                           
  1739                           ;main.c: 483: }
  1740                           ;main.c: 484: }
  1741                           ;main.c: 486: setCSN(1);
  1742  0005EA  0E00               	movlw	0
  1743  0005EC  6E21               	movwf	setCSN@level+1,c
  1744  0005EE  0E01               	movlw	1
  1745  0005F0  6E20               	movwf	setCSN@level,c
  1746  0005F2  EC1B  F004         	call	_setCSN	;wreg free
  1747  0005F6  0012               	return	
  1748  0005F8                     __end_of_spiTransfer:
  1749                           	opt stack 0
  1750                           tblptru	equ	0xFF8
  1751                           tblptrh	equ	0xFF7
  1752                           tblptrl	equ	0xFF6
  1753                           tablat	equ	0xFF5
  1754                           postinc0	equ	0xFEE
  1755                           wreg	equ	0xFE8
  1756                           indf1	equ	0xFE7
  1757                           postdec1	equ	0xFE5
  1758                           fsr1h	equ	0xFE2
  1759                           fsr1l	equ	0xFE1
  1760                           indf2	equ	0xFDF
  1761                           fsr2h	equ	0xFDA
  1762                           fsr2l	equ	0xFD9
  1763                           status	equ	0xFD8
  1764                           
  1765 ;; *************** function _nrfSetTXAddr *****************
  1766 ;; Defined at:
  1767 ;;		line 422 in file "main.c"
  1768 ;; Parameters:    Size  Location     Type
  1769 ;;  addr            2   33[COMRAM] PTR unsigned char 
  1770 ;;		 -> TX_ADDRESS(4), 
  1771 ;;  len             2   35[COMRAM] int 
  1772 ;; Auto vars:     Size  Location     Type
  1773 ;;  i               2   38[COMRAM] int 
  1774 ;; Return value:  Size  Location     Type
  1775 ;;		None               void
  1776 ;; Registers used:
  1777 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1778 ;; Tracked objects:
  1779 ;;		On entry : 0/0
  1780 ;;		On exit  : 0/0
  1781 ;;		Unchanged: 0/0
  1782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1783 ;;      Params:         4       0       0       0
  1784 ;;      Locals:         2       0       0       0
  1785 ;;      Temps:          1       0       0       0
  1786 ;;      Totals:         7       0       0       0
  1787 ;;Total ram usage:        7 bytes
  1788 ;; Hardware stack levels used:    1
  1789 ;; Hardware stack levels required when called:    3
  1790 ;; This function calls:
  1791 ;;		_setCSN
  1792 ;;		_spiTransferByte
  1793 ;; This function is called by:
  1794 ;;		_nrfConfig
  1795 ;; This function uses a non-reentrant model
  1796 ;;
  1797                           
  1798                           	psect	text8
  1799  0006BE                     __ptext8:
  1800                           	opt stack 0
  1801  0006BE                     _nrfSetTXAddr:
  1802                           	opt stack 26
  1803                           
  1804                           ;main.c: 424: setCSN(0);
  1805                           
  1806                           ;incstack = 0
  1807  0006BE  0E00               	movlw	0
  1808  0006C0  6E21               	movwf	setCSN@level+1,c
  1809  0006C2  0E00               	movlw	0
  1810  0006C4  6E20               	movwf	setCSN@level,c
  1811  0006C6  EC1B  F004         	call	_setCSN	;wreg free
  1812                           
  1813                           ;main.c: 426: spiTransferByte(0x20|0x10);
  1814  0006CA  0E30               	movlw	48
  1815  0006CC  EC13  F004         	call	_spiTransferByte
  1816                           
  1817                           ;main.c: 428: if (len != 0) {
  1818  0006D0  5025               	movf	nrfSetTXAddr@len+1,w,c
  1819  0006D2  1024               	iorwf	nrfSetTXAddr@len,w,c
  1820  0006D4  B4D8               	btfsc	status,2,c
  1821  0006D6  D01A               	goto	l1120
  1822                           
  1823                           ;main.c: 430: for (int i=0;i<len;i++) {
  1824  0006D8  0E00               	movlw	0
  1825  0006DA  6E28               	movwf	nrfSetTXAddr@i+1,c
  1826  0006DC  0E00               	movlw	0
  1827  0006DE  6E27               	movwf	nrfSetTXAddr@i,c
  1828  0006E0  D00B               	goto	l1118
  1829  0006E2                     l1114:
  1830                           
  1831                           ;main.c: 431: spiTransferByte(addr[i]);
  1832  0006E2  5027               	movf	nrfSetTXAddr@i,w,c
  1833  0006E4  2422               	addwf	nrfSetTXAddr@addr,w,c
  1834  0006E6  6ED9               	movwf	fsr2l,c
  1835  0006E8  5028               	movf	nrfSetTXAddr@i+1,w,c
  1836  0006EA  2023               	addwfc	nrfSetTXAddr@addr+1,w,c
  1837  0006EC  6EDA               	movwf	fsr2h,c
  1838  0006EE  50DF               	movf	indf2,w,c
  1839  0006F0  EC13  F004         	call	_spiTransferByte
  1840  0006F4  4A27               	infsnz	nrfSetTXAddr@i,f,c
  1841  0006F6  2A28               	incf	nrfSetTXAddr@i+1,f,c
  1842  0006F8                     l1118:
  1843  0006F8  5028               	movf	nrfSetTXAddr@i+1,w,c
  1844  0006FA  0A80               	xorlw	128
  1845  0006FC  6E26               	movwf	??_nrfSetTXAddr& (0+255),c
  1846  0006FE  5024               	movf	nrfSetTXAddr@len,w,c
  1847  000700  5C27               	subwf	nrfSetTXAddr@i,w,c
  1848  000702  5025               	movf	nrfSetTXAddr@len+1,w,c
  1849  000704  0A80               	xorlw	128
  1850  000706  5826               	subwfb	??_nrfSetTXAddr& (0+255),w,c
  1851  000708  A0D8               	btfss	status,0,c
  1852  00070A  D7EB               	goto	l1114
  1853  00070C                     l1120:
  1854                           
  1855                           ;main.c: 432: }
  1856                           ;main.c: 433: }
  1857                           ;main.c: 435: setCSN(1);
  1858  00070C  0E00               	movlw	0
  1859  00070E  6E21               	movwf	setCSN@level+1,c
  1860  000710  0E01               	movlw	1
  1861  000712  6E20               	movwf	setCSN@level,c
  1862  000714  EC1B  F004         	call	_setCSN	;wreg free
  1863  000718  0012               	return	
  1864  00071A                     __end_of_nrfSetTXAddr:
  1865                           	opt stack 0
  1866                           tblptru	equ	0xFF8
  1867                           tblptrh	equ	0xFF7
  1868                           tblptrl	equ	0xFF6
  1869                           tablat	equ	0xFF5
  1870                           postinc0	equ	0xFEE
  1871                           wreg	equ	0xFE8
  1872                           indf1	equ	0xFE7
  1873                           postdec1	equ	0xFE5
  1874                           fsr1h	equ	0xFE2
  1875                           fsr1l	equ	0xFE1
  1876                           indf2	equ	0xFDF
  1877                           fsr2h	equ	0xFDA
  1878                           fsr2l	equ	0xFD9
  1879                           status	equ	0xFD8
  1880                           
  1881 ;; *************** function _nrfSetRXAddr *****************
  1882 ;; Defined at:
  1883 ;;		line 444 in file "main.c"
  1884 ;; Parameters:    Size  Location     Type
  1885 ;;  pipe            1    wreg     unsigned char 
  1886 ;;  addr            2   33[COMRAM] PTR unsigned char 
  1887 ;;		 -> RX_ADDRESS(4), 
  1888 ;;  len             2   35[COMRAM] int 
  1889 ;; Auto vars:     Size  Location     Type
  1890 ;;  pipe            1   38[COMRAM] unsigned char 
  1891 ;;  i               2   39[COMRAM] int 
  1892 ;; Return value:  Size  Location     Type
  1893 ;;		None               void
  1894 ;; Registers used:
  1895 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1896 ;; Tracked objects:
  1897 ;;		On entry : 0/0
  1898 ;;		On exit  : 0/0
  1899 ;;		Unchanged: 0/0
  1900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1901 ;;      Params:         4       0       0       0
  1902 ;;      Locals:         3       0       0       0
  1903 ;;      Temps:          1       0       0       0
  1904 ;;      Totals:         8       0       0       0
  1905 ;;Total ram usage:        8 bytes
  1906 ;; Hardware stack levels used:    1
  1907 ;; Hardware stack levels required when called:    3
  1908 ;; This function calls:
  1909 ;;		_setCSN
  1910 ;;		_spiTransferByte
  1911 ;; This function is called by:
  1912 ;;		_nrfConfig
  1913 ;; This function uses a non-reentrant model
  1914 ;;
  1915                           
  1916                           	psect	text9
  1917  00065E                     __ptext9:
  1918                           	opt stack 0
  1919  00065E                     _nrfSetRXAddr:
  1920                           	opt stack 26
  1921                           
  1922                           ;incstack = 0
  1923                           ;nrfSetRXAddr@pipe stored from wreg
  1924  00065E  6E27               	movwf	nrfSetRXAddr@pipe,c
  1925                           
  1926                           ;main.c: 446: setCSN(0);
  1927  000660  0E00               	movlw	0
  1928  000662  6E21               	movwf	setCSN@level+1,c
  1929  000664  0E00               	movlw	0
  1930  000666  6E20               	movwf	setCSN@level,c
  1931  000668  EC1B  F004         	call	_setCSN	;wreg free
  1932                           
  1933                           ;main.c: 448: spiTransferByte(0x20|pipe);
  1934  00066C  5027               	movf	nrfSetRXAddr@pipe,w,c
  1935  00066E  0920               	iorlw	32
  1936  000670  EC13  F004         	call	_spiTransferByte
  1937                           
  1938                           ;main.c: 450: if (len != 0) {
  1939  000674  5025               	movf	nrfSetRXAddr@len+1,w,c
  1940  000676  1024               	iorwf	nrfSetRXAddr@len,w,c
  1941  000678  B4D8               	btfsc	status,2,c
  1942  00067A  D01A               	goto	l1104
  1943                           
  1944                           ;main.c: 452: for (int i=0;i<len;i++) {
  1945  00067C  0E00               	movlw	0
  1946  00067E  6E29               	movwf	nrfSetRXAddr@i+1,c
  1947  000680  0E00               	movlw	0
  1948  000682  6E28               	movwf	nrfSetRXAddr@i,c
  1949  000684  D00B               	goto	l1102
  1950  000686                     l1098:
  1951                           
  1952                           ;main.c: 453: spiTransferByte(addr[i]);
  1953  000686  5028               	movf	nrfSetRXAddr@i,w,c
  1954  000688  2422               	addwf	nrfSetRXAddr@addr,w,c
  1955  00068A  6ED9               	movwf	fsr2l,c
  1956  00068C  5029               	movf	nrfSetRXAddr@i+1,w,c
  1957  00068E  2023               	addwfc	nrfSetRXAddr@addr+1,w,c
  1958  000690  6EDA               	movwf	fsr2h,c
  1959  000692  50DF               	movf	indf2,w,c
  1960  000694  EC13  F004         	call	_spiTransferByte
  1961  000698  4A28               	infsnz	nrfSetRXAddr@i,f,c
  1962  00069A  2A29               	incf	nrfSetRXAddr@i+1,f,c
  1963  00069C                     l1102:
  1964  00069C  5029               	movf	nrfSetRXAddr@i+1,w,c
  1965  00069E  0A80               	xorlw	128
  1966  0006A0  6E26               	movwf	??_nrfSetRXAddr& (0+255),c
  1967  0006A2  5024               	movf	nrfSetRXAddr@len,w,c
  1968  0006A4  5C28               	subwf	nrfSetRXAddr@i,w,c
  1969  0006A6  5025               	movf	nrfSetRXAddr@len+1,w,c
  1970  0006A8  0A80               	xorlw	128
  1971  0006AA  5826               	subwfb	??_nrfSetRXAddr& (0+255),w,c
  1972  0006AC  A0D8               	btfss	status,0,c
  1973  0006AE  D7EB               	goto	l1098
  1974  0006B0                     l1104:
  1975                           
  1976                           ;main.c: 454: }
  1977                           ;main.c: 455: }
  1978                           ;main.c: 457: setCSN(1);
  1979  0006B0  0E00               	movlw	0
  1980  0006B2  6E21               	movwf	setCSN@level+1,c
  1981  0006B4  0E01               	movlw	1
  1982  0006B6  6E20               	movwf	setCSN@level,c
  1983  0006B8  EC1B  F004         	call	_setCSN	;wreg free
  1984  0006BC  0012               	return	
  1985  0006BE                     __end_of_nrfSetRXAddr:
  1986                           	opt stack 0
  1987                           tblptru	equ	0xFF8
  1988                           tblptrh	equ	0xFF7
  1989                           tblptrl	equ	0xFF6
  1990                           tablat	equ	0xFF5
  1991                           postinc0	equ	0xFEE
  1992                           wreg	equ	0xFE8
  1993                           indf1	equ	0xFE7
  1994                           postdec1	equ	0xFE5
  1995                           fsr1h	equ	0xFE2
  1996                           fsr1l	equ	0xFE1
  1997                           indf2	equ	0xFDF
  1998                           fsr2h	equ	0xFDA
  1999                           fsr2l	equ	0xFD9
  2000                           status	equ	0xFD8
  2001                           
  2002 ;; *************** function _nrfConfigReg *****************
  2003 ;; Defined at:
  2004 ;;		line 400 in file "main.c"
  2005 ;; Parameters:    Size  Location     Type
  2006 ;;  wr              1    wreg     unsigned char 
  2007 ;;  command         1   33[COMRAM] unsigned char 
  2008 ;;  data            1   34[COMRAM] unsigned char 
  2009 ;; Auto vars:     Size  Location     Type
  2010 ;;  wr              1   35[COMRAM] unsigned char 
  2011 ;; Return value:  Size  Location     Type
  2012 ;;                  1    wreg      unsigned char 
  2013 ;; Registers used:
  2014 ;;		wreg, status,2, status,0, cstack
  2015 ;; Tracked objects:
  2016 ;;		On entry : 0/0
  2017 ;;		On exit  : 0/0
  2018 ;;		Unchanged: 0/0
  2019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2020 ;;      Params:         2       0       0       0
  2021 ;;      Locals:         1       0       0       0
  2022 ;;      Temps:          0       0       0       0
  2023 ;;      Totals:         3       0       0       0
  2024 ;;Total ram usage:        3 bytes
  2025 ;; Hardware stack levels used:    1
  2026 ;; Hardware stack levels required when called:    3
  2027 ;; This function calls:
  2028 ;;		_setCSN
  2029 ;;		_spiTransferByte
  2030 ;; This function is called by:
  2031 ;;		_nrfConfig
  2032 ;; This function uses a non-reentrant model
  2033 ;;
  2034                           
  2035                           	psect	text10
  2036  00071A                     __ptext10:
  2037                           	opt stack 0
  2038  00071A                     _nrfConfigReg:
  2039                           	opt stack 26
  2040                           
  2041                           ;incstack = 0
  2042                           ;nrfConfigReg@wr stored from wreg
  2043  00071A  6E24               	movwf	nrfConfigReg@wr,c
  2044                           
  2045                           ;main.c: 402: setCSN(0);
  2046  00071C  0E00               	movlw	0
  2047  00071E  6E21               	movwf	setCSN@level+1,c
  2048  000720  0E00               	movlw	0
  2049  000722  6E20               	movwf	setCSN@level,c
  2050  000724  EC1B  F004         	call	_setCSN	;wreg free
  2051                           
  2052                           ;main.c: 404: if (wr == 'w') {
  2053  000728  5024               	movf	nrfConfigReg@wr,w,c
  2054  00072A  0A77               	xorlw	119
  2055  00072C  A4D8               	btfss	status,2,c
  2056  00072E  D008               	goto	l1084
  2057                           
  2058                           ;main.c: 405: spiTransferByte(0x20|command);
  2059  000730  5022               	movf	nrfConfigReg@command,w,c
  2060  000732  0920               	iorlw	32
  2061  000734  EC13  F004         	call	_spiTransferByte
  2062                           
  2063                           ;main.c: 406: spiTransferByte(data);
  2064  000738  5023               	movf	nrfConfigReg@data,w,c
  2065  00073A  EC13  F004         	call	_spiTransferByte
  2066                           
  2067                           ;main.c: 407: } else if (wr == 'r') {
  2068  00073E  D00B               	goto	l1088
  2069  000740                     l1084:
  2070  000740  5024               	movf	nrfConfigReg@wr,w,c
  2071  000742  0A72               	xorlw	114
  2072  000744  A4D8               	btfss	status,2,c
  2073  000746  D007               	goto	l1088
  2074                           
  2075                           ;main.c: 408: spiTransferByte(0x00|command);
  2076  000748  5022               	movf	nrfConfigReg@command,w,c
  2077  00074A  EC13  F004         	call	_spiTransferByte
  2078                           
  2079                           ;main.c: 409: data = spiTransferByte(0xFF);
  2080  00074E  0EFF               	movlw	255
  2081  000750  EC13  F004         	call	_spiTransferByte
  2082  000754  6E23               	movwf	nrfConfigReg@data,c
  2083  000756                     l1088:
  2084                           
  2085                           ;main.c: 410: }
  2086                           ;main.c: 412: setCSN(1);
  2087  000756  0E00               	movlw	0
  2088  000758  6E21               	movwf	setCSN@level+1,c
  2089  00075A  0E01               	movlw	1
  2090  00075C  6E20               	movwf	setCSN@level,c
  2091  00075E  EC1B  F004         	call	_setCSN	;wreg free
  2092  000762  0012               	return	
  2093  000764                     __end_of_nrfConfigReg:
  2094                           	opt stack 0
  2095                           tblptru	equ	0xFF8
  2096                           tblptrh	equ	0xFF7
  2097                           tblptrl	equ	0xFF6
  2098                           tablat	equ	0xFF5
  2099                           postinc0	equ	0xFEE
  2100                           wreg	equ	0xFE8
  2101                           indf1	equ	0xFE7
  2102                           postdec1	equ	0xFE5
  2103                           fsr1h	equ	0xFE2
  2104                           fsr1l	equ	0xFE1
  2105                           indf2	equ	0xFDF
  2106                           fsr2h	equ	0xFDA
  2107                           fsr2l	equ	0xFD9
  2108                           status	equ	0xFD8
  2109                           
  2110 ;; *************** function _spiTransferByte *****************
  2111 ;; Defined at:
  2112 ;;		line 492 in file "main.c"
  2113 ;; Parameters:    Size  Location     Type
  2114 ;;  data            1    wreg     unsigned char 
  2115 ;; Auto vars:     Size  Location     Type
  2116 ;;  data            1   31[COMRAM] unsigned char 
  2117 ;; Return value:  Size  Location     Type
  2118 ;;                  1    wreg      unsigned char 
  2119 ;; Registers used:
  2120 ;;		wreg, status,2
  2121 ;; Tracked objects:
  2122 ;;		On entry : 0/0
  2123 ;;		On exit  : 0/0
  2124 ;;		Unchanged: 0/0
  2125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2126 ;;      Params:         0       0       0       0
  2127 ;;      Locals:         1       0       0       0
  2128 ;;      Temps:          0       0       0       0
  2129 ;;      Totals:         1       0       0       0
  2130 ;;Total ram usage:        1 bytes
  2131 ;; Hardware stack levels used:    1
  2132 ;; Hardware stack levels required when called:    2
  2133 ;; This function calls:
  2134 ;;		Nothing
  2135 ;; This function is called by:
  2136 ;;		_nrfGetStatus
  2137 ;;		_nrfConfigReg
  2138 ;;		_nrfSetTXAddr
  2139 ;;		_nrfSetRXAddr
  2140 ;;		_spiTransfer
  2141 ;;		_nrfTXData
  2142 ;; This function uses a non-reentrant model
  2143 ;;
  2144                           
  2145                           	psect	text11
  2146  000826                     __ptext11:
  2147                           	opt stack 0
  2148  000826                     _spiTransferByte:
  2149                           	opt stack 27
  2150                           
  2151                           ;incstack = 0
  2152                           ;spiTransferByte@data stored from wreg
  2153  000826  6E20               	movwf	spiTransferByte@data,c
  2154                           
  2155                           ;main.c: 494: SSP1BUF = data;
  2156  000828  C020  FFC9         	movff	spiTransferByte@data,4041	;volatile
  2157  00082C                     l153:
  2158  00082C  A69E               	btfss	3998,3,c	;volatile
  2159  00082E  D7FE               	goto	l153
  2160                           
  2161                           ;main.c: 497: PIR1bits.SSP1IF = 0;
  2162  000830  969E               	bcf	3998,3,c	;volatile
  2163                           
  2164                           ;main.c: 499: return SSP1BUF;
  2165  000832  50C9               	movf	4041,w,c	;volatile
  2166  000834  0012               	return	
  2167  000836                     __end_of_spiTransferByte:
  2168                           	opt stack 0
  2169                           tblptru	equ	0xFF8
  2170                           tblptrh	equ	0xFF7
  2171                           tblptrl	equ	0xFF6
  2172                           tablat	equ	0xFF5
  2173                           postinc0	equ	0xFEE
  2174                           wreg	equ	0xFE8
  2175                           indf1	equ	0xFE7
  2176                           postdec1	equ	0xFE5
  2177                           fsr1h	equ	0xFE2
  2178                           fsr1l	equ	0xFE1
  2179                           indf2	equ	0xFDF
  2180                           fsr2h	equ	0xFDA
  2181                           fsr2l	equ	0xFD9
  2182                           status	equ	0xFD8
  2183                           
  2184 ;; *************** function _setCSN *****************
  2185 ;; Defined at:
  2186 ;;		line 375 in file "main.c"
  2187 ;; Parameters:    Size  Location     Type
  2188 ;;  level           2   31[COMRAM] int 
  2189 ;; Auto vars:     Size  Location     Type
  2190 ;;		None
  2191 ;; Return value:  Size  Location     Type
  2192 ;;		None               void
  2193 ;; Registers used:
  2194 ;;		wreg, status,2, status,0
  2195 ;; Tracked objects:
  2196 ;;		On entry : 0/0
  2197 ;;		On exit  : 0/0
  2198 ;;		Unchanged: 0/0
  2199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2200 ;;      Params:         2       0       0       0
  2201 ;;      Locals:         0       0       0       0
  2202 ;;      Temps:          0       0       0       0
  2203 ;;      Totals:         2       0       0       0
  2204 ;;Total ram usage:        2 bytes
  2205 ;; Hardware stack levels used:    1
  2206 ;; Hardware stack levels required when called:    2
  2207 ;; This function calls:
  2208 ;;		Nothing
  2209 ;; This function is called by:
  2210 ;;		_nrfGetStatus
  2211 ;;		_nrfConfigReg
  2212 ;;		_nrfSetTXAddr
  2213 ;;		_nrfSetRXAddr
  2214 ;;		_spiTransfer
  2215 ;;		_nrfTXData
  2216 ;; This function uses a non-reentrant model
  2217 ;;
  2218                           
  2219                           	psect	text12
  2220  000836                     __ptext12:
  2221                           	opt stack 0
  2222  000836                     _setCSN:
  2223                           	opt stack 27
  2224                           
  2225                           ;main.c: 377: if (level == 1) {
  2226                           
  2227                           ;incstack = 0
  2228  000836  0420               	decf	setCSN@level,w,c
  2229  000838  1021               	iorwf	setCSN@level+1,w,c
  2230  00083A  A4D8               	btfss	status,2,c
  2231  00083C  D002               	goto	l113
  2232                           
  2233                           ;main.c: 378: LATAbits.LATA2 = 1;
  2234  00083E  8489               	bsf	3977,2,c	;volatile
  2235                           
  2236                           ;main.c: 379: } else {
  2237  000840  0012               	return	
  2238  000842                     l113:
  2239                           
  2240                           ;main.c: 380: LATAbits.LATA2 = 0;
  2241  000842  9489               	bcf	3977,2,c	;volatile
  2242  000844  0012               	return	
  2243  000846                     __end_of_setCSN:
  2244                           	opt stack 0
  2245                           tblptru	equ	0xFF8
  2246                           tblptrh	equ	0xFF7
  2247                           tblptrl	equ	0xFF6
  2248                           tablat	equ	0xFF5
  2249                           postinc0	equ	0xFEE
  2250                           wreg	equ	0xFE8
  2251                           indf1	equ	0xFE7
  2252                           postdec1	equ	0xFE5
  2253                           fsr1h	equ	0xFE2
  2254                           fsr1l	equ	0xFE1
  2255                           indf2	equ	0xFDF
  2256                           fsr2h	equ	0xFDA
  2257                           fsr2l	equ	0xFD9
  2258                           status	equ	0xFD8
  2259                           
  2260 ;; *************** function _delay10ms *****************
  2261 ;; Defined at:
  2262 ;;		line 533 in file "main.c"
  2263 ;; Parameters:    Size  Location     Type
  2264 ;;  ms_multi        2   31[COMRAM] int 
  2265 ;; Auto vars:     Size  Location     Type
  2266 ;;  i               2   34[COMRAM] int 
  2267 ;; Return value:  Size  Location     Type
  2268 ;;		None               void
  2269 ;; Registers used:
  2270 ;;		wreg, status,2, status,0
  2271 ;; Tracked objects:
  2272 ;;		On entry : 0/0
  2273 ;;		On exit  : 0/0
  2274 ;;		Unchanged: 0/0
  2275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2276 ;;      Params:         2       0       0       0
  2277 ;;      Locals:         2       0       0       0
  2278 ;;      Temps:          1       0       0       0
  2279 ;;      Totals:         5       0       0       0
  2280 ;;Total ram usage:        5 bytes
  2281 ;; Hardware stack levels used:    1
  2282 ;; Hardware stack levels required when called:    2
  2283 ;; This function calls:
  2284 ;;		Nothing
  2285 ;; This function is called by:
  2286 ;;		_main
  2287 ;; This function uses a non-reentrant model
  2288 ;;
  2289                           
  2290                           	psect	text13
  2291  000764                     __ptext13:
  2292                           	opt stack 0
  2293  000764                     _delay10ms:
  2294                           	opt stack 28
  2295                           
  2296                           ;main.c: 534: int i = 0;
  2297                           
  2298                           ;incstack = 0
  2299  000764  0E00               	movlw	0
  2300  000766  6E24               	movwf	delay10ms@i+1,c
  2301  000768  0E00               	movlw	0
  2302  00076A  6E23               	movwf	delay10ms@i,c
  2303                           
  2304                           ;main.c: 535: for (i=0;i<ms_multi;i++) {
  2305  00076C  0E00               	movlw	0
  2306  00076E  6E24               	movwf	delay10ms@i+1,c
  2307  000770  0E00               	movlw	0
  2308  000772  6E23               	movwf	delay10ms@i,c
  2309  000774  D00A               	goto	l169
  2310  000776                     l1192:
  2311                           
  2312                           ;main.c: 536: _delay((unsigned long)((11)*(64000000/4000.0)));
  2313  000776  0EE5               	movlw	229
  2314  000778  6E22               	movwf	??_delay10ms& (0+255),c
  2315  00077A  0E91               	movlw	145
  2316  00077C                     u607:
  2317  00077C  2EE8               	decfsz	wreg,f,c
  2318  00077E  D7FE               	goto	u607
  2319  000780  2E22               	decfsz	??_delay10ms& (0+255),f,c
  2320  000782  D7FC               	goto	u607
  2321  000784  F000               	nop	
  2322  000786  4A23               	infsnz	delay10ms@i,f,c
  2323  000788  2A24               	incf	delay10ms@i+1,f,c
  2324  00078A                     l169:
  2325  00078A  5024               	movf	delay10ms@i+1,w,c
  2326  00078C  0A80               	xorlw	128
  2327  00078E  6E22               	movwf	??_delay10ms& (0+255),c
  2328  000790  5020               	movf	delay10ms@ms_multi,w,c
  2329  000792  5C23               	subwf	delay10ms@i,w,c
  2330  000794  5021               	movf	delay10ms@ms_multi+1,w,c
  2331  000796  0A80               	xorlw	128
  2332  000798  5822               	subwfb	??_delay10ms& (0+255),w,c
  2333  00079A  B0D8               	btfsc	status,0,c
  2334  00079C  0012               	return	
  2335  00079E  D7EB               	goto	l1192
  2336  0007A0                     __end_of_delay10ms:
  2337                           	opt stack 0
  2338                           tblptru	equ	0xFF8
  2339                           tblptrh	equ	0xFF7
  2340                           tblptrl	equ	0xFF6
  2341                           tablat	equ	0xFF5
  2342                           postinc0	equ	0xFEE
  2343                           wreg	equ	0xFE8
  2344                           indf1	equ	0xFE7
  2345                           postdec1	equ	0xFE5
  2346                           fsr1h	equ	0xFE2
  2347                           fsr1l	equ	0xFE1
  2348                           indf2	equ	0xFDF
  2349                           fsr2h	equ	0xFDA
  2350                           fsr2l	equ	0xFD9
  2351                           status	equ	0xFD8
  2352                           
  2353 ;; *************** function _lowISR *****************
  2354 ;; Defined at:
  2355 ;;		line 280 in file "main.c"
  2356 ;; Parameters:    Size  Location     Type
  2357 ;;		None
  2358 ;; Auto vars:     Size  Location     Type
  2359 ;;		None
  2360 ;; Return value:  Size  Location     Type
  2361 ;;		None               void
  2362 ;; Registers used:
  2363 ;;		None
  2364 ;; Tracked objects:
  2365 ;;		On entry : 0/0
  2366 ;;		On exit  : 0/0
  2367 ;;		Unchanged: 0/0
  2368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2369 ;;      Params:         0       0       0       0
  2370 ;;      Locals:         0       0       0       0
  2371 ;;      Temps:         17       0       0       0
  2372 ;;      Totals:        17       0       0       0
  2373 ;;Total ram usage:       17 bytes
  2374 ;; Hardware stack levels used:    1
  2375 ;; Hardware stack levels required when called:    1
  2376 ;; This function calls:
  2377 ;;		Nothing
  2378 ;; This function is called by:
  2379 ;;		Interrupt level 1
  2380 ;; This function uses a non-reentrant model
  2381 ;;
  2382                           
  2383                           	psect	intcodelo
  2384  000018                     __pintcodelo:
  2385                           	opt stack 0
  2386  000018                     _lowISR:
  2387                           	opt stack 26
  2388                           
  2389                           ;incstack = 0
  2390  000018  CFD8 F001          	movff	status,??_lowISR
  2391  00001C  CFE8 F002          	movff	wreg,??_lowISR+1
  2392  000020  CFE0 F003          	movff	bsr,??_lowISR+2
  2393  000024  CFFA F004          	movff	pclath,??_lowISR+3
  2394  000028  CFFB F005          	movff	pclatu,??_lowISR+4
  2395  00002C  CFE9 F006          	movff	fsr0l,??_lowISR+5
  2396  000030  CFEA F007          	movff	fsr0h,??_lowISR+6
  2397  000034  CFE1 F008          	movff	fsr1l,??_lowISR+7
  2398  000038  CFE2 F009          	movff	fsr1h,??_lowISR+8
  2399  00003C  CFD9 F00A          	movff	fsr2l,??_lowISR+9
  2400  000040  CFDA F00B          	movff	fsr2h,??_lowISR+10
  2401  000044  CFF3 F00C          	movff	prodl,??_lowISR+11
  2402  000048  CFF4 F00D          	movff	prodh,??_lowISR+12
  2403  00004C  CFF6 F00E          	movff	tblptrl,??_lowISR+13
  2404  000050  CFF7 F00F          	movff	tblptrh,??_lowISR+14
  2405  000054  CFF8 F010          	movff	tblptru,??_lowISR+15
  2406  000058  CFF5 F011          	movff	tablat,??_lowISR+16
  2407  00005C  C011  FFF5         	movff	??_lowISR+16,tablat
  2408  000060  C010  FFF8         	movff	??_lowISR+15,tblptru
  2409  000064  C00F  FFF7         	movff	??_lowISR+14,tblptrh
  2410  000068  C00E  FFF6         	movff	??_lowISR+13,tblptrl
  2411  00006C  C00D  FFF4         	movff	??_lowISR+12,prodh
  2412  000070  C00C  FFF3         	movff	??_lowISR+11,prodl
  2413  000074  C00B  FFDA         	movff	??_lowISR+10,fsr2h
  2414  000078  C00A  FFD9         	movff	??_lowISR+9,fsr2l
  2415  00007C  C009  FFE2         	movff	??_lowISR+8,fsr1h
  2416  000080  C008  FFE1         	movff	??_lowISR+7,fsr1l
  2417  000084  C007  FFEA         	movff	??_lowISR+6,fsr0h
  2418  000088  C006  FFE9         	movff	??_lowISR+5,fsr0l
  2419  00008C  C005  FFFB         	movff	??_lowISR+4,pclatu
  2420  000090  C004  FFFA         	movff	??_lowISR+3,pclath
  2421  000094  C003  FFE0         	movff	??_lowISR+2,bsr
  2422  000098  C002  FFE8         	movff	??_lowISR+1,wreg
  2423  00009C  C001  FFD8         	movff	??_lowISR,status
  2424  0000A0  0010               	retfie	
  2425  0000A2                     __end_of_lowISR:
  2426                           	opt stack 0
  2427                           pclatu	equ	0xFFB
  2428                           pclath	equ	0xFFA
  2429                           tblptru	equ	0xFF8
  2430                           tblptrh	equ	0xFF7
  2431                           tblptrl	equ	0xFF6
  2432                           tablat	equ	0xFF5
  2433                           prodh	equ	0xFF4
  2434                           prodl	equ	0xFF3
  2435                           postinc0	equ	0xFEE
  2436                           fsr0h	equ	0xFEA
  2437                           fsr0l	equ	0xFE9
  2438                           wreg	equ	0xFE8
  2439                           indf1	equ	0xFE7
  2440                           postdec1	equ	0xFE5
  2441                           fsr1h	equ	0xFE2
  2442                           fsr1l	equ	0xFE1
  2443                           bsr	equ	0xFE0
  2444                           indf2	equ	0xFDF
  2445                           fsr2h	equ	0xFDA
  2446                           fsr2l	equ	0xFD9
  2447                           status	equ	0xFD8
  2448                           
  2449 ;; *************** function _highISR *****************
  2450 ;; Defined at:
  2451 ;;		line 273 in file "main.c"
  2452 ;; Parameters:    Size  Location     Type
  2453 ;;		None
  2454 ;; Auto vars:     Size  Location     Type
  2455 ;;		None
  2456 ;; Return value:  Size  Location     Type
  2457 ;;		None               void
  2458 ;; Registers used:
  2459 ;;		None
  2460 ;; Tracked objects:
  2461 ;;		On entry : 0/0
  2462 ;;		On exit  : 0/0
  2463 ;;		Unchanged: 0/0
  2464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2465 ;;      Params:         0       0       0       0
  2466 ;;      Locals:         0       0       0       0
  2467 ;;      Temps:         14       0       0       0
  2468 ;;      Totals:        14       0       0       0
  2469 ;;Total ram usage:       14 bytes
  2470 ;; Hardware stack levels used:    1
  2471 ;; This function calls:
  2472 ;;		Nothing
  2473 ;; This function is called by:
  2474 ;;		Interrupt level 2
  2475 ;; This function uses a non-reentrant model
  2476 ;;
  2477                           
  2478                           	psect	intcode
  2479  000008                     __pintcode:
  2480                           	opt stack 0
  2481  000008                     _highISR:
  2482                           	opt stack 26
  2483                           
  2484                           ;incstack = 0
  2485  000008  CFFA F012          	movff	pclath,??_highISR
  2486  00000C  CFFB F013          	movff	pclatu,??_highISR+1
  2487  000010  CFE9 F014          	movff	fsr0l,??_highISR+2
  2488  000014  EFFC  F002         	goto	int_func
  2489                           pclatu	equ	0xFFB
  2490                           pclath	equ	0xFFA
  2491                           tblptru	equ	0xFF8
  2492                           tblptrh	equ	0xFF7
  2493                           tblptrl	equ	0xFF6
  2494                           tablat	equ	0xFF5
  2495                           prodh	equ	0xFF4
  2496                           prodl	equ	0xFF3
  2497                           postinc0	equ	0xFEE
  2498                           fsr0h	equ	0xFEA
  2499                           fsr0l	equ	0xFE9
  2500                           wreg	equ	0xFE8
  2501                           indf1	equ	0xFE7
  2502                           postdec1	equ	0xFE5
  2503                           fsr1h	equ	0xFE2
  2504                           fsr1l	equ	0xFE1
  2505                           bsr	equ	0xFE0
  2506                           indf2	equ	0xFDF
  2507                           fsr2h	equ	0xFDA
  2508                           fsr2l	equ	0xFD9
  2509                           status	equ	0xFD8
  2510                           
  2511                           	psect	intcode_body
  2512  0005F8                     __pintcode_body:
  2513                           	opt stack 26
  2514  0005F8                     int_func:
  2515                           	opt stack 26
  2516  0005F8  CFEA F015          	movff	fsr0h,??_highISR+3
  2517  0005FC  CFE1 F016          	movff	fsr1l,??_highISR+4
  2518  000600  CFE2 F017          	movff	fsr1h,??_highISR+5
  2519  000604  CFD9 F018          	movff	fsr2l,??_highISR+6
  2520  000608  CFDA F019          	movff	fsr2h,??_highISR+7
  2521  00060C  CFF3 F01A          	movff	prodl,??_highISR+8
  2522  000610  CFF4 F01B          	movff	prodh,??_highISR+9
  2523  000614  CFF6 F01C          	movff	tblptrl,??_highISR+10
  2524  000618  CFF7 F01D          	movff	tblptrh,??_highISR+11
  2525  00061C  CFF8 F01E          	movff	tblptru,??_highISR+12
  2526  000620  CFF5 F01F          	movff	tablat,??_highISR+13
  2527  000624  C01F  FFF5         	movff	??_highISR+13,tablat
  2528  000628  C01E  FFF8         	movff	??_highISR+12,tblptru
  2529  00062C  C01D  FFF7         	movff	??_highISR+11,tblptrh
  2530  000630  C01C  FFF6         	movff	??_highISR+10,tblptrl
  2531  000634  C01B  FFF4         	movff	??_highISR+9,prodh
  2532  000638  C01A  FFF3         	movff	??_highISR+8,prodl
  2533  00063C  C019  FFDA         	movff	??_highISR+7,fsr2h
  2534  000640  C018  FFD9         	movff	??_highISR+6,fsr2l
  2535  000644  C017  FFE2         	movff	??_highISR+5,fsr1h
  2536  000648  C016  FFE1         	movff	??_highISR+4,fsr1l
  2537  00064C  C015  FFEA         	movff	??_highISR+3,fsr0h
  2538  000650  C014  FFE9         	movff	??_highISR+2,fsr0l
  2539  000654  C013  FFFB         	movff	??_highISR+1,pclatu
  2540  000658  C012  FFFA         	movff	??_highISR,pclath
  2541  00065C  0011               	retfie		f
  2542  00065E                     __end_of_highISR:
  2543                           	opt stack 0
  2544  0000                     pclatu	equ	0xFFB
  2545                           pclath	equ	0xFFA
  2546                           tblptru	equ	0xFF8
  2547                           tblptrh	equ	0xFF7
  2548                           tblptrl	equ	0xFF6
  2549                           tablat	equ	0xFF5
  2550                           prodh	equ	0xFF4
  2551                           prodl	equ	0xFF3
  2552                           postinc0	equ	0xFEE
  2553                           fsr0h	equ	0xFEA
  2554                           fsr0l	equ	0xFE9
  2555                           wreg	equ	0xFE8
  2556                           indf1	equ	0xFE7
  2557                           postdec1	equ	0xFE5
  2558                           fsr1h	equ	0xFE2
  2559                           fsr1l	equ	0xFE1
  2560                           bsr	equ	0xFE0
  2561                           indf2	equ	0xFDF
  2562                           fsr2h	equ	0xFDA
  2563                           fsr2l	equ	0xFD9
  2564                           status	equ	0xFD8
  2565                           pclatu	equ	0xFFB
  2566                           pclath	equ	0xFFA
  2567                           tblptru	equ	0xFF8
  2568                           tblptrh	equ	0xFF7
  2569                           tblptrl	equ	0xFF6
  2570                           tablat	equ	0xFF5
  2571                           prodh	equ	0xFF4
  2572                           prodl	equ	0xFF3
  2573                           postinc0	equ	0xFEE
  2574                           fsr0h	equ	0xFEA
  2575                           fsr0l	equ	0xFE9
  2576                           wreg	equ	0xFE8
  2577                           indf1	equ	0xFE7
  2578                           postdec1	equ	0xFE5
  2579                           fsr1h	equ	0xFE2
  2580                           fsr1l	equ	0xFE1
  2581                           bsr	equ	0xFE0
  2582                           indf2	equ	0xFDF
  2583                           fsr2h	equ	0xFDA
  2584                           fsr2l	equ	0xFD9
  2585                           status	equ	0xFD8
  2586                           
  2587                           	psect	rparam
  2588  0000                     pclatu	equ	0xFFB
  2589                           pclath	equ	0xFFA
  2590                           tblptru	equ	0xFF8
  2591                           tblptrh	equ	0xFF7
  2592                           tblptrl	equ	0xFF6
  2593                           tablat	equ	0xFF5
  2594                           prodh	equ	0xFF4
  2595                           prodl	equ	0xFF3
  2596                           postinc0	equ	0xFEE
  2597                           fsr0h	equ	0xFEA
  2598                           fsr0l	equ	0xFE9
  2599                           wreg	equ	0xFE8
  2600                           indf1	equ	0xFE7
  2601                           postdec1	equ	0xFE5
  2602                           fsr1h	equ	0xFE2
  2603                           fsr1l	equ	0xFE1
  2604                           bsr	equ	0xFE0
  2605                           indf2	equ	0xFDF
  2606                           fsr2h	equ	0xFDA
  2607                           fsr2l	equ	0xFD9
  2608                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        17
    BSS         67
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     43      63
    BANK0           160     20      84
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    nrfSetRXAddr@addr	PTR unsigned char  size(2) Largest target is 4
		 -> RX_ADDRESS(COMRAM[4]), 

    nrfSetTXAddr@addr	PTR unsigned char  size(2) Largest target is 4
		 -> TX_ADDRESS(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->_spiConfig_1
    _spiConfig_1->___aldiv
    _nrfTXData->_setCSN
    _nrfGetStatus->_setCSN
    _nrfConfig->_nrfSetRXAddr
    _spiTransfer->_setCSN
    _nrfSetTXAddr->_setCSN
    _nrfSetRXAddr->_setCSN
    _nrfConfigReg->_setCSN

Critical Paths under _highISR in COMRAM

    None.

Critical Paths under _lowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_spiConfig_1
    _spiConfig_1->___aldiv

Critical Paths under _highISR in BANK0

    None.

Critical Paths under _lowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _highISR in BANK1

    None.

Critical Paths under _lowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _highISR in BANK2

    None.

Critical Paths under _lowISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    8984
                                             41 COMRAM     2     2      0
                          _delay10ms
                          _nrfConfig
                       _nrfGetStatus
                          _nrfTXData
                         _portConfig
                        _spiConfig_1
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiConfig_1                                         16    14      2    1033
                                             39 COMRAM     2     0      2
                                              6 BANK0     14    14      0
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     835
                                             31 COMRAM     8     0      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _portConfig                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _nrfTXData                                            7     5      2     869
                                             33 COMRAM     7     5      2
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (1) _nrfGetStatus                                         0     0      0     680
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (1) _nrfConfig                                            0     0      0    4917
                       _nrfConfigReg
                       _nrfSetRXAddr
                       _nrfSetTXAddr
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiTransfer                                          7     4      3    1242
                                             33 COMRAM     7     4      3
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfSetTXAddr                                         7     3      4     898
                                             33 COMRAM     7     3      4
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfSetRXAddr                                         8     4      4     920
                                             33 COMRAM     8     4      4
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfConfigReg                                         3     1      2    1857
                                             33 COMRAM     3     1      2
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _spiTransferByte                                      1     1      0      22
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setCSN                                               2     0      2     658
                                             31 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _delay10ms                                            5     3      2     206
                                             31 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _lowISR                                              17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _highISR                                             14    14      0       0
                                             17 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay10ms
   _nrfConfig
     _nrfConfigReg
       _setCSN
       _spiTransferByte
     _nrfSetRXAddr
       _setCSN
       _spiTransferByte
     _nrfSetTXAddr
       _setCSN
       _spiTransferByte
     _spiTransfer
       _setCSN
       _spiTransferByte
   _nrfGetStatus
     _setCSN
     _spiTransferByte
   _nrfTXData
     _setCSN
     _spiTransferByte
   _portConfig
   _spiConfig_1
     ___aldiv
   _spiTransfer
     _setCSN
     _spiTransferByte

 _lowISR (ROOT)

 _highISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       6        0.0%
BANK2              100      0       0       7        0.0%
BITBANK1           100      0       0       9        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     14      54       4       52.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2B      3F       1       66.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      93       8        0.0%
DATA                 0      0      93      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Oct 01 14:56:37 2014

__size_of_spiTransferByte 0010                        bsr 000FE0                _RX_ADDRESS 0035  
             __CFG_LVP$ON 000000                       l113 0842                       l153 082C  
                     l163 0544                       l169 078A                       u505 023A  
                     u607 077C                       u495 0208                       u567 01C4  
                     u577 0518                       u587 0524                       u597 053A  
                     wreg 000FE8                _TX_ADDRESS 0039                      l1102 069C  
                    l1104 06B0                      l1120 070C                      l1114 06E2  
                    l1210 0508                      l1060 058A                      l1204 04DA  
                    l1118 06F8                      l1222 0538                      l1072 05D6  
                    l1064 0598                      l1056 057A                      l1208 04F4  
                    l1074 05EA                      l1084 0740                      l1068 05AA  
                    l1350 0280                      l1192 0776                      l1088 0756  
                    l1352 028E                      l1344 0254                      l1098 0686  
                    l1370 0304                      l1362 02CE                      l1354 0292  
                    l1338 0222                      l1366 02DE                      l1482 01DC  
                    l1458 0188                      _LATA 000F89                      _LATB 000F8A  
                    _LATC 000F8B        spiTransfer@command 0022                      _main 00A6  
                    fsr0h 000FEA                      fsr1h 000FE2                      fsr0l 000FE9  
                    fsr2h 000FDA                      indf1 000FE7                      fsr1l 000FE1  
                    indf2 000FDF                      fsr2l 000FD9             __CFG_BORV$190 000000  
                    pclat 000FFA                      prodh 000FF4                      prodl 000FF3  
                    start 00A2             __CFG_IESO$OFF 000000            nrfConfigReg@wr 0024  
         __end_of___aldiv 0316                     ?_main 0001                     _TRISA 000F92  
                   _TRISB 000F93                     _TRISC 000F94           __end_of_highISR 065E  
          __CFG_FCMEN$OFF 000000        __CFG_MCLRE$EXTMCLR 000000                     tablat 000FF5  
                   status 000FD8            __CFG_HFOFST$ON 000000            __CFG_FOSC$HSHP 000000  
         __initialization 07A0              __end_of_main 01EA       spiTransferByte@data 0020  
                  ??_main 002A             __activetblptr 000000         ??_spiTransferByte 0020  
          __CFG_PLLCFG$ON 000000             nrfSetRXAddr@i 0028             nrfSetTXAddr@i 0027  
          __CFG_WDTEN$OFF 000000              ?_spiConfig_1 0028            __CFG_PWRTEN$ON 000000  
          __CFG_XINST$OFF 000000                 ??___aldiv 0028            __CFG_STVREN$ON 000000  
                  _lowISR 0018                    _setCSN 0836                    clear_0 07A6  
             setCSN@level 0020                 ??_highISR 0012             ?_nrfGetStatus 0001  
           ?_nrfConfigReg 0022              _FEATURE_CURR 002F       spiConfig_1@spiSpeed 0028  
            __pdataCOMRAM 002C              ?_spiTransfer 0022                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8                __accesstop 0060  
 __end_of__initialization 07D2           __CFG_PBADEN$OFF 000000             ?_nrfSetRXAddr 0022  
           ?_nrfSetTXAddr 0022            __pcstackCOMRAM 0001        __size_of_delay10ms 003C  
          ??_nrfGetStatus 0022            _EN_RXADDR_CURR 002E            ??_nrfConfigReg 0024  
        nrfConfigReg@data 0023                _dataBufOut 0080                __pbssBANK0 0060  
          ??_nrfSetRXAddr 0026            ??_nrfSetTXAddr 0026        __size_of_nrfTXData 00A4  
      __size_of_nrfConfig 00DC       nrfConfigReg@command 0022        __CFG_CCP2MX$PORTC1 000000  
      __CFG_CCP3MX$PORTB5 000000                   ?_lowISR 0001                   ?_setCSN 0020  
                 _SSP1ADD 000FC8                   _SSP1BUF 000FC9         __end_of_delay10ms 07A0  
        nrfSetRXAddr@addr 0022          nrfSetRXAddr@pipe 0027                   __Hparam 0000  
                 __Lparam 0000      __size_of_spiConfig_1 00C4           _spiTransferByte 0826  
              delay10ms@i 0023                   ___aldiv 01EA             _RX_PW_P0_CURR 0032  
                 __pcinit 07A0           __size_of_lowISR 008A           __size_of_setCSN 0010  
        nrfSetTXAddr@addr 0022                   __ramtop 0300                   _highISR 0008  
                 __ptext0 00A6                   __ptext1 03F2                   __ptext2 01EA  
                 __ptext3 07FA                   __ptext4 04B6                   __ptext5 07D8  
                 __ptext6 0316                   __ptext7 055A                   __ptext8 06BE  
                 __ptext9 065E         __end_of_nrfTXData 055A          ___aldiv@dividend 0020  
       __end_of_nrfConfig 03F2      __size_of_spiTransfer 009E            __pintcode_body 05F8  
    end_of_initialization 07D2                   int_func 05F8      __end_of_nrfGetStatus 07FA  
    __end_of_nrfConfigReg 0764          ___aldiv@quotient 00A2                   postdec1 000FE5  
                 postinc0 000FEE              nrfTXData@len 0022                _portConfig 07FA  
    __end_of_nrfSetRXAddr 06BE      __end_of_nrfSetTXAddr 071A   __end_of_spiTransferByte 0836  
           __pidataCOMRAM 0814            __end_of_lowISR 00A2            __end_of_setCSN 0846  
     start_initialization 07A0          _spiConfig_1$1285 00AA          _spiConfig_1$1286 00AE  
                ??_lowISR 0001                  ??_setCSN 0022               ?_portConfig 0001  
              nrfTXData@i 0027               __pbssCOMRAM 003D             __pcstackBANK0 00A0  
   __size_of_nrfGetStatus 0022     __size_of_nrfConfigReg 004A                 _dataBufIn 0060  
        ?_spiTransferByte 0001                 _delay10ms 0764               _CONFIG_CURR 002C  
           _SETUP_AW_CURR 0033                 __pintcode 0008                  ?___aldiv 0020  
   __size_of_nrfSetRXAddr 0060     __size_of_nrfSetTXAddr 005C           _SETUP_RETR_CURR 0034  
             __pintcodelo 0018          __CFG_PRICLKEN$ON 000000                  ?_highISR 0001  
            _nrfGetStatus 07D8              _nrfConfigReg 071A           nrfSetRXAddr@len 0024  
               _nrfSTATUS 003E                 _nrfTXData 04B6           nrfSetTXAddr@len 0024  
               _nrfConfig 0316           ___aldiv@divisor 0024           ___aldiv@counter 00A0  
                _IOCBbits 000F62       __size_of_portConfig 001A                  _LATAbits 000F89  
              ?_delay10ms 0020             ??_spiConfig_1 00A6              _nrfSetRXAddr 065E  
            _nrfSetTXAddr 06BE                 _spiTXFlag 003F                  _PIR1bits 000F9E  
                _RCONbits 000FD0          __CFG_WDTPS$32768 000000             _RF_SETUP_CURR 0031  
       delay10ms@ms_multi 0020             ??_spiTransfer 0025                 main@count 002A  
              ?_nrfTXData 0022                 copy_data0 07C6                ?_nrfConfig 0001  
       spiConfig_1@addVal 00B2                  __Hrparam 0000                  __Lrparam 0000  
      __CFG_BOREN$SBORDIS 000000         __CFG_P2BMX$PORTB5 000000       __end_of_spiConfig_1 04B6  
        __size_of___aldiv 012C          __size_of_highISR 0656                  __ptext10 071A  
                __ptext11 0826                  __ptext12 0836                  __ptext13 0764  
            _SSP1CON1bits 000FC6       __end_of_spiTransfer 05F8             __size_of_main 0144  
             ??_delay10ms 0022                _EN_AA_CURR 003D              _SSP1STATbits 000FC7  
            ??_portConfig 0020            nrfTXData@i_787 0025                _DYNPD_CURR 002D  
              _INTCONbits 000FF2               ??_nrfTXData 0024               ??_nrfConfig 002A  
                intlevel1 0000                  intlevel2 0000        __end_of_portConfig 0814  
             _spiConfig_1 03F2            spiTransfer@len 0023            spiTransfer@wrn 0026  
              _RF_CH_CURR 0030               _spiTransfer 055A              ___aldiv@sign 00A1  
       __CFG_T3CMX$PORTC0 000000              spiTransfer@i 0027  
