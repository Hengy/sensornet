

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Tue Sep 30 16:14:56 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F24K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    25  0000                     
    26                           	psect	idataCOMRAM
    27  003B1D                     __pidataCOMRAM:
    28                           	opt stack 0
    29                           
    30                           ;initializer for _CONFIG_CURR
    31  003B1D  4A                 	db	74
    32                           
    33                           ;initializer for _DYNPD_CURR
    34  003B1E  01                 	db	1
    35                           
    36                           ;initializer for _EN_RXADDR_CURR
    37  003B1F  01                 	db	1
    38                           
    39                           ;initializer for _FEATURE_CURR
    40  003B20  04                 	db	4
    41                           
    42                           ;initializer for _RF_CH_CURR
    43  003B21  69                 	db	105
    44                           
    45                           ;initializer for _RF_SETUP_CURR
    46  003B22  06                 	db	6
    47                           
    48                           ;initializer for _RX_PW_P0_CURR
    49  003B23  01                 	db	1
    50                           
    51                           ;initializer for _SETUP_AW_CURR
    52  003B24  02                 	db	2
    53                           
    54                           ;initializer for _SETUP_RETR_CURR
    55  003B25  20                 	db	32
    56                           
    57                           ;initializer for _RX_ADDRESS
    58  003B26  E7                 	db	231
    59  003B27  E7                 	db	231
    60  003B28  E7                 	db	231
    61  003B29  E7                 	db	231
    62                           
    63                           ;initializer for _TX_ADDRESS
    64  003B2A  E7                 	db	231
    65  003B2B  E7                 	db	231
    66  003B2C  E7                 	db	231
    67  003B2D  E7                 	db	231
    68  0000                     _LATA	set	3977
    69  0000                     _LATAbits	set	3977
    70  0000                     _LATB	set	3978
    71  0000                     _LATC	set	3979
    72  0000                     _SSP1ADD	set	4040
    73  0000                     _SSP1BUF	set	4041
    74  0000                     _SSP1CON1bits	set	4038
    75  0000                     _SSP1STATbits	set	4039
    76  0000                     _TRISA	set	3986
    77  0000                     _TRISB	set	3987
    78  0000                     _TRISC	set	3988
    79                           
    80                           ; #config settings
    81  0000                     
    82                           	psect	cinit
    83  003B82                     __pcinit:
    84                           	opt stack 0
    85  003B82                     start_initialization:
    86                           	opt stack 0
    87  003B82                     __initialization:
    88                           	opt stack 0
    89                           
    90                           ; Clear objects allocated to COMRAM (66 bytes)
    91  003B82  EE00  F001         	lfsr	0,__pbssCOMRAM
    92  003B86  0E42               	movlw	66
    93  003B88                     clear_0:
    94  003B88  6AEE               	clrf	postinc0,c
    95  003B8A  06E8               	decf	wreg,f,c
    96  003B8C  E1FD               	bnz	clear_0
    97                           
    98                           ; Initialize objects allocated to COMRAM (17 bytes)
    99                           ; load TBLPTR registers with __pidataCOMRAM
   100  003B8E  0E1D               	movlw	low __pidataCOMRAM
   101  003B90  6EF6               	movwf	tblptrl,c
   102  003B92  0E3B               	movlw	high __pidataCOMRAM
   103  003B94  6EF7               	movwf	tblptrh,c
   104  003B96  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   105  003B98  6EF8               	movwf	tblptru,c
   106  003B9A  EE00  F043         	lfsr	0,__pdataCOMRAM
   107  003B9E  EE10 F011          	lfsr	1,17
   108  003BA2                     copy_data0:
   109  003BA2  0009               	tblrd		*+
   110  003BA4  CFF5 FFEE          	movff	tablat,postinc0
   111  003BA8  50E5               	movf	postdec1,w,c
   112  003BAA  50E1               	movf	fsr1l,w,c
   113  003BAC  E1FA               	bnz	copy_data0
   114  003BAE                     end_of_initialization:
   115                           	opt stack 0
   116  003BAE                     __end_of__initialization:
   117                           	opt stack 0
   118  003BAE  0100               	movlb	0
   119  003BB0  EF88  F01F         	goto	_main	;jump to C main() function
   120                           tblptru	equ	0xFF8
   121                           tblptrh	equ	0xFF7
   122                           tblptrl	equ	0xFF6
   123                           tablat	equ	0xFF5
   124                           postinc0	equ	0xFEE
   125                           wreg	equ	0xFE8
   126                           postdec1	equ	0xFE5
   127                           fsr1l	equ	0xFE1
   128                           
   129                           	psect	bssCOMRAM
   130  000001                     __pbssCOMRAM:
   131                           	opt stack 0
   132  000001                     _dataBufIn:
   133                           	opt stack 0
   134  000001                     	ds	32
   135  000021                     _dataBufOut:
   136                           	opt stack 0
   137  000021                     	ds	32
   138  000041                     _EN_AA_CURR:
   139                           	opt stack 0
   140  000041                     	ds	1
   141  000042                     _nrfSTATUS:
   142                           	opt stack 0
   143  000042                     	ds	1
   144                           tblptru	equ	0xFF8
   145                           tblptrh	equ	0xFF7
   146                           tblptrl	equ	0xFF6
   147                           tablat	equ	0xFF5
   148                           postinc0	equ	0xFEE
   149                           wreg	equ	0xFE8
   150                           postdec1	equ	0xFE5
   151                           fsr1l	equ	0xFE1
   152                           
   153                           	psect	dataCOMRAM
   154  000043                     __pdataCOMRAM:
   155                           	opt stack 0
   156  000043                     _CONFIG_CURR:
   157                           	opt stack 0
   158  000043                     	ds	1
   159  000044                     _DYNPD_CURR:
   160                           	opt stack 0
   161  000044                     	ds	1
   162  000045                     _EN_RXADDR_CURR:
   163                           	opt stack 0
   164  000045                     	ds	1
   165  000046                     _FEATURE_CURR:
   166                           	opt stack 0
   167  000046                     	ds	1
   168  000047                     _RF_CH_CURR:
   169                           	opt stack 0
   170  000047                     	ds	1
   171  000048                     _RF_SETUP_CURR:
   172                           	opt stack 0
   173  000048                     	ds	1
   174  000049                     _RX_PW_P0_CURR:
   175                           	opt stack 0
   176  000049                     	ds	1
   177  00004A                     _SETUP_AW_CURR:
   178                           	opt stack 0
   179  00004A                     	ds	1
   180  00004B                     _SETUP_RETR_CURR:
   181                           	opt stack 0
   182  00004B                     	ds	1
   183  00004C                     _RX_ADDRESS:
   184                           	opt stack 0
   185  00004C                     	ds	4
   186  000050                     _TX_ADDRESS:
   187                           	opt stack 0
   188  000050                     	ds	4
   189                           tblptru	equ	0xFF8
   190                           tblptrh	equ	0xFF7
   191                           tblptrl	equ	0xFF6
   192                           tablat	equ	0xFF5
   193                           postinc0	equ	0xFEE
   194                           wreg	equ	0xFE8
   195                           postdec1	equ	0xFE5
   196                           fsr1l	equ	0xFE1
   197                           
   198                           	psect	cstackCOMRAM
   199  000054                     __pcstackCOMRAM:
   200                           	opt stack 0
   201  000054                     spiTransferByte@data:
   202                           	opt stack 0
   203  000054                     setCSN@level:
   204                           	opt stack 0
   205  000054                     delay10ms@ms_multi:
   206                           	opt stack 0
   207                           
   208                           ; 2 bytes @ 0x0
   209  000054                     	ds	2
   210  000056                     ??_delay10ms:
   211  000056                     nrfConfigReg@command:
   212                           	opt stack 0
   213  000056                     spiTransfer@command:
   214                           	opt stack 0
   215  000056                     nrfSetTXAddr@addr:
   216                           	opt stack 0
   217  000056                     nrfSetRXAddr@addr:
   218                           	opt stack 0
   219  000056                     nrfTXData@len:
   220                           	opt stack 0
   221                           
   222                           ; 2 bytes @ 0x2
   223  000056                     	ds	1
   224  000057                     nrfConfigReg@data:
   225                           	opt stack 0
   226  000057                     spiTransfer@len:
   227                           	opt stack 0
   228  000057                     delay10ms@i:
   229                           	opt stack 0
   230                           
   231                           ; 2 bytes @ 0x3
   232  000057                     	ds	1
   233  000058                     ??_nrfTXData:
   234  000058                     nrfConfigReg@wr:
   235                           	opt stack 0
   236  000058                     nrfSetTXAddr@len:
   237                           	opt stack 0
   238  000058                     nrfSetRXAddr@len:
   239                           	opt stack 0
   240                           
   241                           ; 2 bytes @ 0x4
   242  000058                     	ds	1
   243  000059                     ??_spiTransfer:
   244  000059                     nrfTXData@i_558:
   245                           	opt stack 0
   246                           
   247                           ; 2 bytes @ 0x5
   248  000059                     	ds	1
   249  00005A                     ??_nrfSetRXAddr:
   250  00005A                     ??_nrfSetTXAddr:
   251  00005A                     spiTransfer@i:
   252                           	opt stack 0
   253                           
   254                           ; 2 bytes @ 0x6
   255  00005A                     	ds	1
   256  00005B                     nrfSetRXAddr@pipe:
   257                           	opt stack 0
   258  00005B                     nrfSetTXAddr@i:
   259                           	opt stack 0
   260  00005B                     nrfTXData@i:
   261                           	opt stack 0
   262                           
   263                           ; 2 bytes @ 0x7
   264  00005B                     	ds	1
   265  00005C                     spiTransfer@wrn:
   266                           	opt stack 0
   267  00005C                     nrfSetRXAddr@i:
   268                           	opt stack 0
   269                           
   270                           ; 2 bytes @ 0x8
   271  00005C                     	ds	2
   272  00005E                     main@count:
   273                           	opt stack 0
   274                           
   275                           ; 2 bytes @ 0xA
   276  00005E                     	ds	2
   277                           tblptru	equ	0xFF8
   278                           tblptrh	equ	0xFF7
   279                           tblptrl	equ	0xFF6
   280                           tablat	equ	0xFF5
   281                           postinc0	equ	0xFEE
   282                           wreg	equ	0xFE8
   283                           postdec1	equ	0xFE5
   284                           fsr1l	equ	0xFE1
   285                           
   286 ;;
   287 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   288 ;;
   289 ;; *************** function _main *****************
   290 ;; Defined at:
   291 ;;		line 192 in file "main.c"
   292 ;; Parameters:    Size  Location     Type
   293 ;;		None
   294 ;; Auto vars:     Size  Location     Type
   295 ;;  count           2   10[COMRAM] int 
   296 ;; Return value:  Size  Location     Type
   297 ;;		None               void
   298 ;; Registers used:
   299 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   300 ;; Tracked objects:
   301 ;;		On entry : 0/0
   302 ;;		On exit  : 0/0
   303 ;;		Unchanged: 0/0
   304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   305 ;;      Params:         0       0       0       0
   306 ;;      Locals:         2       0       0       0
   307 ;;      Temps:          0       0       0       0
   308 ;;      Totals:         2       0       0       0
   309 ;;Total ram usage:        2 bytes
   310 ;; Hardware stack levels required when called:    3
   311 ;; This function calls:
   312 ;;		_delay10ms
   313 ;;		_nrfConfig
   314 ;;		_nrfGetStatus
   315 ;;		_nrfTXData
   316 ;;		_portConfig
   317 ;;		_spiConfig_1
   318 ;;		_spiTransfer
   319 ;; This function is called by:
   320 ;;		Startup code after reset
   321 ;; This function uses a non-reentrant model
   322 ;;
   323                           
   324                           	psect	text0
   325  003F10                     __ptext0:
   326                           	opt stack 0
   327  003F10                     _main:
   328                           	opt stack 28
   329                           
   330                           ;main.c: 195: portConfig();
   331                           
   332                           ;incstack = 0
   333  003F10  ECA3  F01D         	call	_portConfig	;wreg free
   334                           
   335                           ;main.c: 196: spiConfig_1();
   336  003F14  EC97  F01D         	call	_spiConfig_1	;wreg free
   337                           
   338                           ;main.c: 197: nrfConfig();
   339  003F18  EC1A  F01F         	call	_nrfConfig	;wreg free
   340                           
   341                           ;main.c: 199: delay10ms(1);
   342  003F1C  0E00               	movlw	0
   343  003F1E  6E55               	movwf	delay10ms@ms_multi+1,c
   344  003F20  0E01               	movlw	1
   345  003F22  6E54               	movwf	delay10ms@ms_multi,c
   346  003F24  ECDA  F01D         	call	_delay10ms	;wreg free
   347                           
   348                           ;main.c: 201: dataBufOut[1] = 0b01101010;
   349  003F28  0E6A               	movlw	106
   350  003F2A  6E22               	movwf	_dataBufOut+1,c
   351                           
   352                           ;main.c: 202: dataBufOut[2] = 0x3F;
   353  003F2C  0E3F               	movlw	63
   354  003F2E  6E23               	movwf	_dataBufOut+2,c
   355                           
   356                           ;main.c: 203: dataBufOut[3] = 182;
   357  003F30  0EB6               	movlw	182
   358  003F32  6E24               	movwf	_dataBufOut+3,c
   359                           
   360                           ;main.c: 204: dataBufOut[4] = 0b01101010;
   361  003F34  0E6A               	movlw	106
   362  003F36  6E25               	movwf	_dataBufOut+4,c
   363                           
   364                           ;main.c: 205: dataBufOut[5] = 0x3F;
   365  003F38  0E3F               	movlw	63
   366  003F3A  6E26               	movwf	_dataBufOut+5,c
   367                           
   368                           ;main.c: 206: dataBufOut[6] = 182;
   369  003F3C  0EB6               	movlw	182
   370  003F3E  6E27               	movwf	_dataBufOut+6,c
   371                           
   372                           ;main.c: 207: dataBufOut[7] = 0b01101010;
   373  003F40  0E6A               	movlw	106
   374  003F42  6E28               	movwf	_dataBufOut+7,c
   375                           
   376                           ;main.c: 208: dataBufOut[8] = 0x3F;
   377  003F44  0E3F               	movlw	63
   378  003F46  6E29               	movwf	_dataBufOut+8,c
   379                           
   380                           ;main.c: 209: dataBufOut[9] = 182;
   381  003F48  0EB6               	movlw	182
   382  003F4A  6E2A               	movwf	_dataBufOut+9,c
   383                           
   384                           ;main.c: 210: dataBufOut[10] = 0b01101010;
   385  003F4C  0E6A               	movlw	106
   386  003F4E  6E2B               	movwf	_dataBufOut+10,c
   387                           
   388                           ;main.c: 211: dataBufOut[11] = 0x3F;
   389  003F50  0E3F               	movlw	63
   390  003F52  6E2C               	movwf	_dataBufOut+11,c
   391                           
   392                           ;main.c: 212: dataBufOut[12] = 182;
   393  003F54  0EB6               	movlw	182
   394  003F56  6E2D               	movwf	_dataBufOut+12,c
   395                           
   396                           ;main.c: 213: dataBufOut[13] = 0b01101010;
   397  003F58  0E6A               	movlw	106
   398  003F5A  6E2E               	movwf	_dataBufOut+13,c
   399                           
   400                           ;main.c: 214: dataBufOut[14] = 0x3F;
   401  003F5C  0E3F               	movlw	63
   402  003F5E  6E2F               	movwf	_dataBufOut+14,c
   403                           
   404                           ;main.c: 215: dataBufOut[15] = 182;
   405  003F60  0EB6               	movlw	182
   406  003F62  6E30               	movwf	_dataBufOut+15,c
   407                           
   408                           ;main.c: 216: dataBufOut[16] = 0b01101010;
   409  003F64  0E6A               	movlw	106
   410  003F66  6E31               	movwf	_dataBufOut+16,c
   411                           
   412                           ;main.c: 217: dataBufOut[17] = 0x3F;
   413  003F68  0E3F               	movlw	63
   414  003F6A  6E32               	movwf	_dataBufOut+17,c
   415                           
   416                           ;main.c: 218: dataBufOut[18] = 182;
   417  003F6C  0EB6               	movlw	182
   418  003F6E  6E33               	movwf	_dataBufOut+18,c
   419                           
   420                           ;main.c: 219: dataBufOut[19] = 0b01101010;
   421  003F70  0E6A               	movlw	106
   422  003F72  6E34               	movwf	_dataBufOut+19,c
   423                           
   424                           ;main.c: 220: dataBufOut[20] = 0x3F;
   425  003F74  0E3F               	movlw	63
   426  003F76  6E35               	movwf	_dataBufOut+20,c
   427                           
   428                           ;main.c: 221: dataBufOut[21] = 182;
   429  003F78  0EB6               	movlw	182
   430  003F7A  6E36               	movwf	_dataBufOut+21,c
   431                           
   432                           ;main.c: 222: dataBufOut[22] = 0b01101010;
   433  003F7C  0E6A               	movlw	106
   434  003F7E  6E37               	movwf	_dataBufOut+22,c
   435                           
   436                           ;main.c: 223: dataBufOut[23] = 0x3F;
   437  003F80  0E3F               	movlw	63
   438  003F82  6E38               	movwf	_dataBufOut+23,c
   439                           
   440                           ;main.c: 224: dataBufOut[24] = 182;
   441  003F84  0EB6               	movlw	182
   442  003F86  6E39               	movwf	_dataBufOut+24,c
   443                           
   444                           ;main.c: 225: dataBufOut[25] = 0b01101010;
   445  003F88  0E6A               	movlw	106
   446  003F8A  6E3A               	movwf	_dataBufOut+25,c
   447                           
   448                           ;main.c: 226: dataBufOut[26] = 0x3F;
   449  003F8C  0E3F               	movlw	63
   450  003F8E  6E3B               	movwf	_dataBufOut+26,c
   451                           
   452                           ;main.c: 227: dataBufOut[27] = 182;
   453  003F90  0EB6               	movlw	182
   454  003F92  6E3C               	movwf	_dataBufOut+27,c
   455                           
   456                           ;main.c: 228: dataBufOut[28] = 182;
   457  003F94  0EB6               	movlw	182
   458  003F96  6E3D               	movwf	_dataBufOut+28,c
   459                           
   460                           ;main.c: 229: dataBufOut[29] = 0b01101010;
   461  003F98  0E6A               	movlw	106
   462  003F9A  6E3E               	movwf	_dataBufOut+29,c
   463                           
   464                           ;main.c: 230: dataBufOut[30] = 0x3F;
   465  003F9C  0E3F               	movlw	63
   466  003F9E  6E3F               	movwf	_dataBufOut+30,c
   467                           
   468                           ;main.c: 231: dataBufOut[31] = 182;
   469  003FA0  0EB6               	movlw	182
   470  003FA2  6E40               	movwf	_dataBufOut+31,c
   471                           
   472                           ;main.c: 234: int count = 1;
   473  003FA4  0E00               	movlw	0
   474  003FA6  6E5F               	movwf	main@count+1,c
   475  003FA8  0E01               	movlw	1
   476  003FAA  6E5E               	movwf	main@count,c
   477  003FAC                     l952:
   478                           
   479                           ;main.c: 237: dataBufOut[0] = count;
   480  003FAC  C05E  F021         	movff	main@count,_dataBufOut
   481                           
   482                           ;main.c: 238: nrfTXData(16);
   483  003FB0  0E00               	movlw	0
   484  003FB2  6E57               	movwf	nrfTXData@len+1,c
   485  003FB4  0E10               	movlw	16
   486  003FB6  6E56               	movwf	nrfTXData@len,c
   487  003FB8  ECC6  F01E         	call	_nrfTXData	;wreg free
   488                           
   489                           ;main.c: 239: count++;
   490  003FBC  4A5E               	infsnz	main@count,f,c
   491  003FBE  2A5F               	incf	main@count+1,f,c
   492                           
   493                           ;main.c: 241: nrfGetStatus();
   494  003FC0  ECB0  F01D         	call	_nrfGetStatus	;wreg free
   495                           
   496                           ;main.c: 243: if (nrfSTATUS != 0x0E) {
   497  003FC4  5042               	movf	_nrfSTATUS,w,c
   498  003FC6  0A0E               	xorlw	14
   499  003FC8  B4D8               	btfsc	status,2,c
   500  003FCA  D013               	goto	l972
   501                           
   502                           ;main.c: 245: LATAbits.LATA0 = 1;
   503  003FCC  8089               	bsf	3977,0,c	;volatile
   504                           
   505                           ;main.c: 248: dataBufOut[0] = 0b01110000;
   506  003FCE  0E70               	movlw	112
   507  003FD0  6E21               	movwf	_dataBufOut,c
   508                           
   509                           ;main.c: 249: spiTransfer('w',0x07,1);
   510  003FD2  0E07               	movlw	7
   511  003FD4  6E56               	movwf	spiTransfer@command,c
   512  003FD6  0E00               	movlw	0
   513  003FD8  6E58               	movwf	spiTransfer@len+1,c
   514  003FDA  0E01               	movlw	1
   515  003FDC  6E57               	movwf	spiTransfer@len,c
   516  003FDE  0E77               	movlw	119
   517  003FE0  EC7B  F01E         	call	_spiTransfer
   518                           
   519                           ;main.c: 251: delay10ms(10);
   520  003FE4  0E00               	movlw	0
   521  003FE6  6E55               	movwf	delay10ms@ms_multi+1,c
   522  003FE8  0E0A               	movlw	10
   523  003FEA  6E54               	movwf	delay10ms@ms_multi,c
   524  003FEC  ECDA  F01D         	call	_delay10ms	;wreg free
   525                           
   526                           ;main.c: 253: LATAbits.LATA0 = 0;
   527  003FF0  9089               	bcf	3977,0,c	;volatile
   528  003FF2                     l972:
   529                           
   530                           ;main.c: 254: }
   531                           ;main.c: 256: delay10ms(500);
   532  003FF2  0E01               	movlw	1
   533  003FF4  6E55               	movwf	delay10ms@ms_multi+1,c
   534  003FF6  0EF4               	movlw	244
   535  003FF8  6E54               	movwf	delay10ms@ms_multi,c
   536  003FFA  ECDA  F01D         	call	_delay10ms	;wreg free
   537                           
   538                           ;main.c: 257: }
   539  003FFE  D7D6               	goto	l952
   540  004000                     __end_of_main:
   541                           	opt stack 0
   542                           tblptru	equ	0xFF8
   543                           tblptrh	equ	0xFF7
   544                           tblptrl	equ	0xFF6
   545                           tablat	equ	0xFF5
   546                           postinc0	equ	0xFEE
   547                           wreg	equ	0xFE8
   548                           postdec1	equ	0xFE5
   549                           fsr1l	equ	0xFE1
   550                           status	equ	0xFD8
   551                           
   552 ;; *************** function _spiConfig_1 *****************
   553 ;; Defined at:
   554 ;;		line 277 in file "main.c"
   555 ;; Parameters:    Size  Location     Type
   556 ;;		None
   557 ;; Auto vars:     Size  Location     Type
   558 ;;		None
   559 ;; Return value:  Size  Location     Type
   560 ;;		None               void
   561 ;; Registers used:
   562 ;;		wreg, status,2
   563 ;; Tracked objects:
   564 ;;		On entry : 0/0
   565 ;;		On exit  : 0/0
   566 ;;		Unchanged: 0/0
   567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   568 ;;      Params:         0       0       0       0
   569 ;;      Locals:         0       0       0       0
   570 ;;      Temps:          0       0       0       0
   571 ;;      Totals:         0       0       0       0
   572 ;;Total ram usage:        0 bytes
   573 ;; Hardware stack levels used:    1
   574 ;; This function calls:
   575 ;;		Nothing
   576 ;; This function is called by:
   577 ;;		_main
   578 ;; This function uses a non-reentrant model
   579 ;;
   580                           
   581                           	psect	text1
   582  003B2E                     __ptext1:
   583                           	opt stack 0
   584  003B2E                     _spiConfig_1:
   585                           	opt stack 30
   586                           
   587                           ;main.c: 278: SSP1CON1bits.CKP = 0;
   588                           
   589                           ;incstack = 0
   590  003B2E  98C6               	bcf	4038,4,c	;volatile
   591                           
   592                           ;main.c: 279: SSP1STATbits.CKE = 1;
   593  003B30  8CC7               	bsf	4039,6,c	;volatile
   594                           
   595                           ;main.c: 280: SSP1STATbits.SMP = 1;
   596  003B32  8EC7               	bsf	4039,7,c	;volatile
   597                           
   598                           ;main.c: 281: SSP1ADD = 0b00011111;
   599  003B34  0E1F               	movlw	31
   600  003B36  6EC8               	movwf	4040,c	;volatile
   601                           
   602                           ;main.c: 282: SSP1CON1bits.SSPM = 0b1010;
   603  003B38  50C6               	movf	4038,w,c	;volatile
   604  003B3A  0BF0               	andlw	-16
   605  003B3C  090A               	iorlw	10
   606  003B3E  6EC6               	movwf	4038,c	;volatile
   607                           
   608                           ;main.c: 284: SSP1CON1bits.SSPEN = 1;
   609  003B40  8AC6               	bsf	4038,5,c	;volatile
   610                           
   611                           ;main.c: 285: LATAbits.LATA2 = 1;
   612  003B42  8489               	bsf	3977,2,c	;volatile
   613  003B44  0012               	return	
   614  003B46                     __end_of_spiConfig_1:
   615                           	opt stack 0
   616                           tblptru	equ	0xFF8
   617                           tblptrh	equ	0xFF7
   618                           tblptrl	equ	0xFF6
   619                           tablat	equ	0xFF5
   620                           postinc0	equ	0xFEE
   621                           wreg	equ	0xFE8
   622                           postdec1	equ	0xFE5
   623                           fsr1l	equ	0xFE1
   624                           status	equ	0xFD8
   625                           
   626 ;; *************** function _portConfig *****************
   627 ;; Defined at:
   628 ;;		line 263 in file "main.c"
   629 ;; Parameters:    Size  Location     Type
   630 ;;		None
   631 ;; Auto vars:     Size  Location     Type
   632 ;;		None
   633 ;; Return value:  Size  Location     Type
   634 ;;		None               void
   635 ;; Registers used:
   636 ;;		wreg, status,2
   637 ;; Tracked objects:
   638 ;;		On entry : 0/0
   639 ;;		On exit  : 0/0
   640 ;;		Unchanged: 0/0
   641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   642 ;;      Params:         0       0       0       0
   643 ;;      Locals:         0       0       0       0
   644 ;;      Temps:          0       0       0       0
   645 ;;      Totals:         0       0       0       0
   646 ;;Total ram usage:        0 bytes
   647 ;; Hardware stack levels used:    1
   648 ;; This function calls:
   649 ;;		Nothing
   650 ;; This function is called by:
   651 ;;		_main
   652 ;; This function uses a non-reentrant model
   653 ;;
   654                           
   655                           	psect	text2
   656  003B46                     __ptext2:
   657                           	opt stack 0
   658  003B46                     _portConfig:
   659                           	opt stack 30
   660                           
   661                           ;main.c: 264: TRISA = 0b00001000;
   662                           
   663                           ;incstack = 0
   664  003B46  0E08               	movlw	8
   665  003B48  6E92               	movwf	3986,c	;volatile
   666                           
   667                           ;main.c: 265: TRISB = 0b00000000;
   668  003B4A  0E00               	movlw	0
   669  003B4C  6E93               	movwf	3987,c	;volatile
   670                           
   671                           ;main.c: 266: TRISC = 0b00010000;
   672  003B4E  0E10               	movlw	16
   673  003B50  6E94               	movwf	3988,c	;volatile
   674                           
   675                           ;main.c: 268: LATA = 0b00000100;
   676  003B52  0E04               	movlw	4
   677  003B54  6E89               	movwf	3977,c	;volatile
   678                           
   679                           ;main.c: 269: LATB = 0x00;
   680  003B56  0E00               	movlw	0
   681  003B58  6E8A               	movwf	3978,c	;volatile
   682                           
   683                           ;main.c: 270: LATC = 0x00;
   684  003B5A  0E00               	movlw	0
   685  003B5C  6E8B               	movwf	3979,c	;volatile
   686  003B5E  0012               	return	
   687  003B60                     __end_of_portConfig:
   688                           	opt stack 0
   689                           tblptru	equ	0xFF8
   690                           tblptrh	equ	0xFF7
   691                           tblptrl	equ	0xFF6
   692                           tablat	equ	0xFF5
   693                           postinc0	equ	0xFEE
   694                           wreg	equ	0xFE8
   695                           postdec1	equ	0xFE5
   696                           fsr1l	equ	0xFE1
   697                           status	equ	0xFD8
   698                           
   699 ;; *************** function _nrfTXData *****************
   700 ;; Defined at:
   701 ;;		line 456 in file "main.c"
   702 ;; Parameters:    Size  Location     Type
   703 ;;  len             2    2[COMRAM] int 
   704 ;; Auto vars:     Size  Location     Type
   705 ;;  i               2    7[COMRAM] int 
   706 ;;  i               2    5[COMRAM] int 
   707 ;; Return value:  Size  Location     Type
   708 ;;		None               void
   709 ;; Registers used:
   710 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   711 ;; Tracked objects:
   712 ;;		On entry : 0/0
   713 ;;		On exit  : 0/0
   714 ;;		Unchanged: 0/0
   715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   716 ;;      Params:         2       0       0       0
   717 ;;      Locals:         4       0       0       0
   718 ;;      Temps:          1       0       0       0
   719 ;;      Totals:         7       0       0       0
   720 ;;Total ram usage:        7 bytes
   721 ;; Hardware stack levels used:    1
   722 ;; Hardware stack levels required when called:    1
   723 ;; This function calls:
   724 ;;		_setCSN
   725 ;;		_spiTransferByte
   726 ;; This function is called by:
   727 ;;		_main
   728 ;; This function uses a non-reentrant model
   729 ;;
   730                           
   731                           	psect	text3
   732  003D8C                     __ptext3:
   733                           	opt stack 0
   734  003D8C                     _nrfTXData:
   735                           	opt stack 29
   736                           
   737                           ;main.c: 458: setCSN(0);
   738                           
   739                           ;incstack = 0
   740  003D8C  0E00               	movlw	0
   741  003D8E  6E55               	movwf	setCSN@level+1,c
   742  003D90  0E00               	movlw	0
   743  003D92  6E54               	movwf	setCSN@level,c
   744  003D94  EC7E  F01D         	call	_setCSN	;wreg free
   745                           
   746                           ;main.c: 460: spiTransferByte(0xA0);
   747  003D98  0EA0               	movlw	160
   748  003D9A  EC86  F01D         	call	_spiTransferByte
   749                           
   750                           ;main.c: 462: if (len != 0) {
   751  003D9E  5057               	movf	nrfTXData@len+1,w,c
   752  003DA0  1056               	iorwf	nrfTXData@len,w,c
   753  003DA2  B4D8               	btfsc	status,2,c
   754  003DA4  D01A               	goto	l858
   755                           
   756                           ;main.c: 463: for (int i=0;i<len;i++) {
   757  003DA6  0E00               	movlw	0
   758  003DA8  6E5C               	movwf	nrfTXData@i+1,c
   759  003DAA  0E00               	movlw	0
   760  003DAC  6E5B               	movwf	nrfTXData@i,c
   761  003DAE  D00B               	goto	l856
   762  003DB0                     l852:
   763                           
   764                           ;main.c: 464: spiTransferByte(dataBufOut[i]);
   765  003DB0  0E21               	movlw	low _dataBufOut
   766  003DB2  245B               	addwf	nrfTXData@i,w,c
   767  003DB4  6ED9               	movwf	fsr2l,c
   768  003DB6  0E00               	movlw	high _dataBufOut
   769  003DB8  205C               	addwfc	nrfTXData@i+1,w,c
   770  003DBA  6EDA               	movwf	fsr2h,c
   771  003DBC  50DF               	movf	indf2,w,c
   772  003DBE  EC86  F01D         	call	_spiTransferByte
   773  003DC2  4A5B               	infsnz	nrfTXData@i,f,c
   774  003DC4  2A5C               	incf	nrfTXData@i+1,f,c
   775  003DC6                     l856:
   776  003DC6  505C               	movf	nrfTXData@i+1,w,c
   777  003DC8  0A80               	xorlw	128
   778  003DCA  6E58               	movwf	??_nrfTXData& (0+255),c
   779  003DCC  5056               	movf	nrfTXData@len,w,c
   780  003DCE  5C5B               	subwf	nrfTXData@i,w,c
   781  003DD0  5057               	movf	nrfTXData@len+1,w,c
   782  003DD2  0A80               	xorlw	128
   783  003DD4  5858               	subwfb	??_nrfTXData& (0+255),w,c
   784  003DD6  A0D8               	btfss	status,0,c
   785  003DD8  D7EB               	goto	l852
   786  003DDA                     l858:
   787                           
   788                           ;main.c: 465: }
   789                           ;main.c: 466: }
   790                           ;main.c: 468: _delay((unsigned long)((5)*(64000000/4000000.0)));
   791  003DDA  0E1A               	movlw	26
   792  003DDC                     u187:
   793  003DDC  2EE8               	decfsz	wreg,f,c
   794  003DDE  D7FE               	goto	u187
   795  003DE0  D000               	nop2		;nop
   796                           
   797                           ;main.c: 470: setCSN(1);
   798  003DE2  0E00               	movlw	0
   799  003DE4  6E55               	movwf	setCSN@level+1,c
   800  003DE6  0E01               	movlw	1
   801  003DE8  6E54               	movwf	setCSN@level,c
   802  003DEA  EC7E  F01D         	call	_setCSN	;wreg free
   803                           
   804                           ;main.c: 473: LATAbits.LATA1 = 1;
   805  003DEE  8289               	bsf	3977,1,c	;volatile
   806                           
   807                           ;main.c: 474: _delay((unsigned long)((12)*(64000000/4000000.0)));
   808  003DF0  0E40               	movlw	64
   809  003DF2                     u197:
   810  003DF2  2EE8               	decfsz	wreg,f,c
   811  003DF4  D7FE               	goto	u197
   812                           
   813                           ;main.c: 475: LATAbits.LATA1 = 0;
   814  003DF6  9289               	bcf	3977,1,c	;volatile
   815                           
   816                           ;main.c: 476: _delay((unsigned long)((180)*(64000000/4000000.0)));
   817  003DF8  0E04               	movlw	4
   818  003DFA  6E58               	movwf	??_nrfTXData& (0+255),c
   819  003DFC  0EBC               	movlw	188
   820  003DFE                     u207:
   821  003DFE  2EE8               	decfsz	wreg,f,c
   822  003E00  D7FE               	goto	u207
   823  003E02  2E58               	decfsz	??_nrfTXData& (0+255),f,c
   824  003E04  D7FC               	goto	u207
   825  003E06  D000               	nop2	
   826                           
   827                           ;main.c: 477: for (int i=0;i<len;i++) {
   828  003E08  0E00               	movlw	0
   829  003E0A  6E5A               	movwf	nrfTXData@i_558+1,c
   830  003E0C  0E00               	movlw	0
   831  003E0E  6E59               	movwf	nrfTXData@i_558,c
   832  003E10  D006               	goto	l141
   833  003E12                     l872:
   834                           
   835                           ;main.c: 478: _delay((unsigned long)((8)*(64000000/4000000.0)));
   836  003E12  0E2A               	movlw	42
   837  003E14                     u217:
   838  003E14  2EE8               	decfsz	wreg,f,c
   839  003E16  D7FE               	goto	u217
   840  003E18  D000               	nop2		;nop
   841  003E1A  4A59               	infsnz	nrfTXData@i_558,f,c
   842  003E1C  2A5A               	incf	nrfTXData@i_558+1,f,c
   843  003E1E                     l141:
   844  003E1E  505A               	movf	nrfTXData@i_558+1,w,c
   845  003E20  0A80               	xorlw	128
   846  003E22  6E58               	movwf	??_nrfTXData& (0+255),c
   847  003E24  5056               	movf	nrfTXData@len,w,c
   848  003E26  5C59               	subwf	nrfTXData@i_558,w,c
   849  003E28  5057               	movf	nrfTXData@len+1,w,c
   850  003E2A  0A80               	xorlw	128
   851  003E2C  5858               	subwfb	??_nrfTXData& (0+255),w,c
   852  003E2E  B0D8               	btfsc	status,0,c
   853  003E30  0012               	return	
   854  003E32  D7EF               	goto	l872
   855  003E34                     __end_of_nrfTXData:
   856                           	opt stack 0
   857                           tblptru	equ	0xFF8
   858                           tblptrh	equ	0xFF7
   859                           tblptrl	equ	0xFF6
   860                           tablat	equ	0xFF5
   861                           postinc0	equ	0xFEE
   862                           wreg	equ	0xFE8
   863                           postdec1	equ	0xFE5
   864                           fsr1l	equ	0xFE1
   865                           indf2	equ	0xFDF
   866                           fsr2h	equ	0xFDA
   867                           fsr2l	equ	0xFD9
   868                           status	equ	0xFD8
   869                           
   870 ;; *************** function _nrfGetStatus *****************
   871 ;; Defined at:
   872 ;;		line 339 in file "main.c"
   873 ;; Parameters:    Size  Location     Type
   874 ;;		None
   875 ;; Auto vars:     Size  Location     Type
   876 ;;		None
   877 ;; Return value:  Size  Location     Type
   878 ;;		None               void
   879 ;; Registers used:
   880 ;;		wreg, status,2, status,0, cstack
   881 ;; Tracked objects:
   882 ;;		On entry : 0/0
   883 ;;		On exit  : 0/0
   884 ;;		Unchanged: 0/0
   885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   886 ;;      Params:         0       0       0       0
   887 ;;      Locals:         0       0       0       0
   888 ;;      Temps:          0       0       0       0
   889 ;;      Totals:         0       0       0       0
   890 ;;Total ram usage:        0 bytes
   891 ;; Hardware stack levels used:    1
   892 ;; Hardware stack levels required when called:    1
   893 ;; This function calls:
   894 ;;		_setCSN
   895 ;;		_spiTransferByte
   896 ;; This function is called by:
   897 ;;		_main
   898 ;; This function uses a non-reentrant model
   899 ;;
   900                           
   901                           	psect	text4
   902  003B60                     __ptext4:
   903                           	opt stack 0
   904  003B60                     _nrfGetStatus:
   905                           	opt stack 29
   906                           
   907                           ;main.c: 341: setCSN(0);
   908                           
   909                           ;incstack = 0
   910  003B60  0E00               	movlw	0
   911  003B62  6E55               	movwf	setCSN@level+1,c
   912  003B64  0E00               	movlw	0
   913  003B66  6E54               	movwf	setCSN@level,c
   914  003B68  EC7E  F01D         	call	_setCSN	;wreg free
   915                           
   916                           ;main.c: 343: nrfSTATUS = spiTransferByte(0xFF);
   917  003B6C  0EFF               	movlw	255
   918  003B6E  EC86  F01D         	call	_spiTransferByte
   919  003B72  6E42               	movwf	_nrfSTATUS,c
   920                           
   921                           ;main.c: 345: setCSN(1);
   922  003B74  0E00               	movlw	0
   923  003B76  6E55               	movwf	setCSN@level+1,c
   924  003B78  0E01               	movlw	1
   925  003B7A  6E54               	movwf	setCSN@level,c
   926  003B7C  EC7E  F01D         	call	_setCSN	;wreg free
   927  003B80  0012               	return	
   928  003B82                     __end_of_nrfGetStatus:
   929                           	opt stack 0
   930                           tblptru	equ	0xFF8
   931                           tblptrh	equ	0xFF7
   932                           tblptrl	equ	0xFF6
   933                           tablat	equ	0xFF5
   934                           postinc0	equ	0xFEE
   935                           wreg	equ	0xFE8
   936                           postdec1	equ	0xFE5
   937                           fsr1l	equ	0xFE1
   938                           indf2	equ	0xFDF
   939                           fsr2h	equ	0xFDA
   940                           fsr2l	equ	0xFD9
   941                           status	equ	0xFD8
   942                           
   943 ;; *************** function _nrfConfig *****************
   944 ;; Defined at:
   945 ;;		line 291 in file "main.c"
   946 ;; Parameters:    Size  Location     Type
   947 ;;		None
   948 ;; Auto vars:     Size  Location     Type
   949 ;;		None
   950 ;; Return value:  Size  Location     Type
   951 ;;		None               void
   952 ;; Registers used:
   953 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   954 ;; Tracked objects:
   955 ;;		On entry : 0/0
   956 ;;		On exit  : 0/0
   957 ;;		Unchanged: 0/0
   958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   959 ;;      Params:         0       0       0       0
   960 ;;      Locals:         0       0       0       0
   961 ;;      Temps:          0       0       0       0
   962 ;;      Totals:         0       0       0       0
   963 ;;Total ram usage:        0 bytes
   964 ;; Hardware stack levels used:    1
   965 ;; Hardware stack levels required when called:    2
   966 ;; This function calls:
   967 ;;		_nrfConfigReg
   968 ;;		_nrfSetRXAddr
   969 ;;		_nrfSetTXAddr
   970 ;;		_spiTransfer
   971 ;; This function is called by:
   972 ;;		_main
   973 ;; This function uses a non-reentrant model
   974 ;;
   975                           
   976                           	psect	text5
   977  003E34                     __ptext5:
   978                           	opt stack 0
   979  003E34                     _nrfConfig:
   980                           	opt stack 28
   981                           
   982                           ;main.c: 294: nrfConfigReg('w',0x00,CONFIG_CURR);
   983                           
   984                           ;incstack = 0
   985  003E34  0E00               	movlw	0
   986  003E36  6E56               	movwf	nrfConfigReg@command,c
   987  003E38  C043  F057         	movff	_CONFIG_CURR,nrfConfigReg@data
   988  003E3C  0E77               	movlw	119
   989  003E3E  ECF8  F01D         	call	_nrfConfigReg
   990                           
   991                           ;main.c: 296: nrfConfigReg('w',0x01,EN_AA_CURR);
   992  003E42  0E01               	movlw	1
   993  003E44  6E56               	movwf	nrfConfigReg@command,c
   994  003E46  C041  F057         	movff	_EN_AA_CURR,nrfConfigReg@data
   995  003E4A  0E77               	movlw	119
   996  003E4C  ECF8  F01D         	call	_nrfConfigReg
   997                           
   998                           ;main.c: 298: nrfConfigReg('w',0x02,EN_RXADDR_CURR);
   999  003E50  0E02               	movlw	2
  1000  003E52  6E56               	movwf	nrfConfigReg@command,c
  1001  003E54  C045  F057         	movff	_EN_RXADDR_CURR,nrfConfigReg@data
  1002  003E58  0E77               	movlw	119
  1003  003E5A  ECF8  F01D         	call	_nrfConfigReg
  1004                           
  1005                           ;main.c: 300: nrfConfigReg('w',0x03,SETUP_AW_CURR);
  1006  003E5E  0E03               	movlw	3
  1007  003E60  6E56               	movwf	nrfConfigReg@command,c
  1008  003E62  C04A  F057         	movff	_SETUP_AW_CURR,nrfConfigReg@data
  1009  003E66  0E77               	movlw	119
  1010  003E68  ECF8  F01D         	call	_nrfConfigReg
  1011                           
  1012                           ;main.c: 302: nrfConfigReg('w',0x04,SETUP_RETR_CURR);
  1013  003E6C  0E04               	movlw	4
  1014  003E6E  6E56               	movwf	nrfConfigReg@command,c
  1015  003E70  C04B  F057         	movff	_SETUP_RETR_CURR,nrfConfigReg@data
  1016  003E74  0E77               	movlw	119
  1017  003E76  ECF8  F01D         	call	_nrfConfigReg
  1018                           
  1019                           ;main.c: 304: nrfConfigReg('w',0x05,RF_CH_CURR);
  1020  003E7A  0E05               	movlw	5
  1021  003E7C  6E56               	movwf	nrfConfigReg@command,c
  1022  003E7E  C047  F057         	movff	_RF_CH_CURR,nrfConfigReg@data
  1023  003E82  0E77               	movlw	119
  1024  003E84  ECF8  F01D         	call	_nrfConfigReg
  1025                           
  1026                           ;main.c: 306: nrfConfigReg('w',0x06,RF_SETUP_CURR);
  1027  003E88  0E06               	movlw	6
  1028  003E8A  6E56               	movwf	nrfConfigReg@command,c
  1029  003E8C  C048  F057         	movff	_RF_SETUP_CURR,nrfConfigReg@data
  1030  003E90  0E77               	movlw	119
  1031  003E92  ECF8  F01D         	call	_nrfConfigReg
  1032                           
  1033                           ;main.c: 308: nrfSetRXAddr(0x0A,RX_ADDRESS,4);
  1034  003E96  0E00               	movlw	high _RX_ADDRESS
  1035  003E98  6E57               	movwf	nrfSetRXAddr@addr+1,c
  1036  003E9A  0E4C               	movlw	low _RX_ADDRESS
  1037  003E9C  6E56               	movwf	nrfSetRXAddr@addr,c
  1038  003E9E  0E00               	movlw	0
  1039  003EA0  6E59               	movwf	nrfSetRXAddr@len+1,c
  1040  003EA2  0E04               	movlw	4
  1041  003EA4  6E58               	movwf	nrfSetRXAddr@len,c
  1042  003EA6  0E0A               	movlw	10
  1043  003EA8  EC4B  F01E         	call	_nrfSetRXAddr
  1044                           
  1045                           ;main.c: 310: nrfSetTXAddr(TX_ADDRESS,4);
  1046  003EAC  0E00               	movlw	high _TX_ADDRESS
  1047  003EAE  6E57               	movwf	nrfSetTXAddr@addr+1,c
  1048  003EB0  0E50               	movlw	low _TX_ADDRESS
  1049  003EB2  6E56               	movwf	nrfSetTXAddr@addr,c
  1050  003EB4  0E00               	movlw	0
  1051  003EB6  6E59               	movwf	nrfSetTXAddr@len+1,c
  1052  003EB8  0E04               	movlw	4
  1053  003EBA  6E58               	movwf	nrfSetTXAddr@len,c
  1054  003EBC  EC1D  F01E         	call	_nrfSetTXAddr	;wreg free
  1055                           
  1056                           ;main.c: 312: nrfConfigReg('w',0x11,RX_PW_P0_CURR);
  1057  003EC0  0E11               	movlw	17
  1058  003EC2  6E56               	movwf	nrfConfigReg@command,c
  1059  003EC4  C049  F057         	movff	_RX_PW_P0_CURR,nrfConfigReg@data
  1060  003EC8  0E77               	movlw	119
  1061  003ECA  ECF8  F01D         	call	_nrfConfigReg
  1062                           
  1063                           ;main.c: 314: nrfConfigReg('w',0x1C,DYNPD_CURR);
  1064  003ECE  0E1C               	movlw	28
  1065  003ED0  6E56               	movwf	nrfConfigReg@command,c
  1066  003ED2  C044  F057         	movff	_DYNPD_CURR,nrfConfigReg@data
  1067  003ED6  0E77               	movlw	119
  1068  003ED8  ECF8  F01D         	call	_nrfConfigReg
  1069                           
  1070                           ;main.c: 316: nrfConfigReg('w',0x1D,FEATURE_CURR);
  1071  003EDC  0E1D               	movlw	29
  1072  003EDE  6E56               	movwf	nrfConfigReg@command,c
  1073  003EE0  C046  F057         	movff	_FEATURE_CURR,nrfConfigReg@data
  1074  003EE4  0E77               	movlw	119
  1075  003EE6  ECF8  F01D         	call	_nrfConfigReg
  1076                           
  1077                           ;main.c: 318: spiTransfer('n',0xE1,0);
  1078  003EEA  0EE1               	movlw	225
  1079  003EEC  6E56               	movwf	spiTransfer@command,c
  1080  003EEE  0E00               	movlw	0
  1081  003EF0  6E58               	movwf	spiTransfer@len+1,c
  1082  003EF2  0E00               	movlw	0
  1083  003EF4  6E57               	movwf	spiTransfer@len,c
  1084  003EF6  0E6E               	movlw	110
  1085  003EF8  EC7B  F01E         	call	_spiTransfer
  1086                           
  1087                           ;main.c: 320: spiTransfer('n',0xE2,0);
  1088  003EFC  0EE2               	movlw	226
  1089  003EFE  6E56               	movwf	spiTransfer@command,c
  1090  003F00  0E00               	movlw	0
  1091  003F02  6E58               	movwf	spiTransfer@len+1,c
  1092  003F04  0E00               	movlw	0
  1093  003F06  6E57               	movwf	spiTransfer@len,c
  1094  003F08  0E6E               	movlw	110
  1095  003F0A  EC7B  F01E         	call	_spiTransfer
  1096  003F0E  0012               	return	
  1097  003F10                     __end_of_nrfConfig:
  1098                           	opt stack 0
  1099                           tblptru	equ	0xFF8
  1100                           tblptrh	equ	0xFF7
  1101                           tblptrl	equ	0xFF6
  1102                           tablat	equ	0xFF5
  1103                           postinc0	equ	0xFEE
  1104                           wreg	equ	0xFE8
  1105                           postdec1	equ	0xFE5
  1106                           fsr1l	equ	0xFE1
  1107                           indf2	equ	0xFDF
  1108                           fsr2h	equ	0xFDA
  1109                           fsr2l	equ	0xFD9
  1110                           status	equ	0xFD8
  1111                           
  1112 ;; *************** function _spiTransfer *****************
  1113 ;; Defined at:
  1114 ;;		line 419 in file "main.c"
  1115 ;; Parameters:    Size  Location     Type
  1116 ;;  wrn             1    wreg     unsigned char 
  1117 ;;  command         1    2[COMRAM] unsigned char 
  1118 ;;  len             2    3[COMRAM] int 
  1119 ;; Auto vars:     Size  Location     Type
  1120 ;;  wrn             1    8[COMRAM] unsigned char 
  1121 ;;  i               2    6[COMRAM] int 
  1122 ;; Return value:  Size  Location     Type
  1123 ;;		None               void
  1124 ;; Registers used:
  1125 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1126 ;; Tracked objects:
  1127 ;;		On entry : 0/0
  1128 ;;		On exit  : 0/0
  1129 ;;		Unchanged: 0/0
  1130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1131 ;;      Params:         3       0       0       0
  1132 ;;      Locals:         3       0       0       0
  1133 ;;      Temps:          1       0       0       0
  1134 ;;      Totals:         7       0       0       0
  1135 ;;Total ram usage:        7 bytes
  1136 ;; Hardware stack levels used:    1
  1137 ;; Hardware stack levels required when called:    1
  1138 ;; This function calls:
  1139 ;;		_setCSN
  1140 ;;		_spiTransferByte
  1141 ;; This function is called by:
  1142 ;;		_main
  1143 ;;		_nrfConfig
  1144 ;; This function uses a non-reentrant model
  1145 ;;
  1146                           
  1147                           	psect	text6
  1148  003CF6                     __ptext6:
  1149                           	opt stack 0
  1150  003CF6                     _spiTransfer:
  1151                           	opt stack 29
  1152                           
  1153                           ;incstack = 0
  1154                           ;spiTransfer@wrn stored from wreg
  1155  003CF6  6E5C               	movwf	spiTransfer@wrn,c
  1156                           
  1157                           ;main.c: 421: setCSN(0);
  1158  003CF8  0E00               	movlw	0
  1159  003CFA  6E55               	movwf	setCSN@level+1,c
  1160  003CFC  0E00               	movlw	0
  1161  003CFE  6E54               	movwf	setCSN@level,c
  1162  003D00  EC7E  F01D         	call	_setCSN	;wreg free
  1163                           
  1164                           ;main.c: 423: if (wrn == 'w') {
  1165  003D04  505C               	movf	spiTransfer@wrn,w,c
  1166  003D06  0A77               	xorlw	119
  1167  003D08  A4D8               	btfss	status,2,c
  1168  003D0A  D005               	goto	l752
  1169                           
  1170                           ;main.c: 424: spiTransferByte(0x20|command);
  1171  003D0C  5056               	movf	spiTransfer@command,w,c
  1172  003D0E  0920               	iorlw	32
  1173  003D10  EC86  F01D         	call	_spiTransferByte
  1174                           
  1175                           ;main.c: 425: } else if (wrn == 'r') {
  1176  003D14  D00F               	goto	l760
  1177  003D16                     l752:
  1178  003D16  505C               	movf	spiTransfer@wrn,w,c
  1179  003D18  0A72               	xorlw	114
  1180  003D1A  A4D8               	btfss	status,2,c
  1181  003D1C  D004               	goto	l756
  1182                           
  1183                           ;main.c: 426: spiTransferByte(0x00|command);
  1184  003D1E  5056               	movf	spiTransfer@command,w,c
  1185  003D20  EC86  F01D         	call	_spiTransferByte
  1186                           
  1187                           ;main.c: 427: } else if(wrn == 'n') {
  1188  003D24  D007               	goto	l760
  1189  003D26                     l756:
  1190  003D26  505C               	movf	spiTransfer@wrn,w,c
  1191  003D28  0A6E               	xorlw	110
  1192  003D2A  A4D8               	btfss	status,2,c
  1193  003D2C  D003               	goto	l760
  1194                           
  1195                           ;main.c: 428: spiTransferByte(command);
  1196  003D2E  5056               	movf	spiTransfer@command,w,c
  1197  003D30  EC86  F01D         	call	_spiTransferByte
  1198  003D34                     l760:
  1199                           
  1200                           ;main.c: 429: }
  1201                           ;main.c: 431: if (len != 0) {
  1202  003D34  5058               	movf	spiTransfer@len+1,w,c
  1203  003D36  1057               	iorwf	spiTransfer@len,w,c
  1204  003D38  B4D8               	btfsc	status,2,c
  1205  003D3A  D021               	goto	l770
  1206                           
  1207                           ;main.c: 432: for (int i=0;i<len;i++) {
  1208  003D3C  0E00               	movlw	0
  1209  003D3E  6E5B               	movwf	spiTransfer@i+1,c
  1210  003D40  0E00               	movlw	0
  1211  003D42  6E5A               	movwf	spiTransfer@i,c
  1212  003D44  D012               	goto	l768
  1213  003D46                     l764:
  1214                           
  1215                           ;main.c: 433: dataBufIn[i] = spiTransferByte(dataBufOut[i]);
  1216  003D46  0E01               	movlw	low _dataBufIn
  1217  003D48  245A               	addwf	spiTransfer@i,w,c
  1218  003D4A  6ED9               	movwf	fsr2l,c
  1219  003D4C  0E00               	movlw	high _dataBufIn
  1220  003D4E  205B               	addwfc	spiTransfer@i+1,w,c
  1221  003D50  6EDA               	movwf	fsr2h,c
  1222  003D52  0E21               	movlw	low _dataBufOut
  1223  003D54  245A               	addwf	spiTransfer@i,w,c
  1224  003D56  6EE1               	movwf	fsr1l,c
  1225  003D58  0E00               	movlw	high _dataBufOut
  1226  003D5A  205B               	addwfc	spiTransfer@i+1,w,c
  1227  003D5C  6EE2               	movwf	fsr1h,c
  1228  003D5E  50E7               	movf	indf1,w,c
  1229  003D60  EC86  F01D         	call	_spiTransferByte
  1230  003D64  6EDF               	movwf	indf2,c
  1231  003D66  4A5A               	infsnz	spiTransfer@i,f,c
  1232  003D68  2A5B               	incf	spiTransfer@i+1,f,c
  1233  003D6A                     l768:
  1234  003D6A  505B               	movf	spiTransfer@i+1,w,c
  1235  003D6C  0A80               	xorlw	128
  1236  003D6E  6E59               	movwf	??_spiTransfer& (0+255),c
  1237  003D70  5057               	movf	spiTransfer@len,w,c
  1238  003D72  5C5A               	subwf	spiTransfer@i,w,c
  1239  003D74  5058               	movf	spiTransfer@len+1,w,c
  1240  003D76  0A80               	xorlw	128
  1241  003D78  5859               	subwfb	??_spiTransfer& (0+255),w,c
  1242  003D7A  A0D8               	btfss	status,0,c
  1243  003D7C  D7E4               	goto	l764
  1244  003D7E                     l770:
  1245                           
  1246                           ;main.c: 434: }
  1247                           ;main.c: 435: }
  1248                           ;main.c: 437: setCSN(1);
  1249  003D7E  0E00               	movlw	0
  1250  003D80  6E55               	movwf	setCSN@level+1,c
  1251  003D82  0E01               	movlw	1
  1252  003D84  6E54               	movwf	setCSN@level,c
  1253  003D86  EC7E  F01D         	call	_setCSN	;wreg free
  1254  003D8A  0012               	return	
  1255  003D8C                     __end_of_spiTransfer:
  1256                           	opt stack 0
  1257                           tblptru	equ	0xFF8
  1258                           tblptrh	equ	0xFF7
  1259                           tblptrl	equ	0xFF6
  1260                           tablat	equ	0xFF5
  1261                           postinc0	equ	0xFEE
  1262                           wreg	equ	0xFE8
  1263                           indf1	equ	0xFE7
  1264                           postdec1	equ	0xFE5
  1265                           fsr1h	equ	0xFE2
  1266                           fsr1l	equ	0xFE1
  1267                           indf2	equ	0xFDF
  1268                           fsr2h	equ	0xFDA
  1269                           fsr2l	equ	0xFD9
  1270                           status	equ	0xFD8
  1271                           
  1272 ;; *************** function _nrfSetTXAddr *****************
  1273 ;; Defined at:
  1274 ;;		line 373 in file "main.c"
  1275 ;; Parameters:    Size  Location     Type
  1276 ;;  addr            2    2[COMRAM] PTR unsigned char 
  1277 ;;		 -> TX_ADDRESS(4), 
  1278 ;;  len             2    4[COMRAM] int 
  1279 ;; Auto vars:     Size  Location     Type
  1280 ;;  i               2    7[COMRAM] int 
  1281 ;; Return value:  Size  Location     Type
  1282 ;;		None               void
  1283 ;; Registers used:
  1284 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1285 ;; Tracked objects:
  1286 ;;		On entry : 0/0
  1287 ;;		On exit  : 0/0
  1288 ;;		Unchanged: 0/0
  1289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1290 ;;      Params:         4       0       0       0
  1291 ;;      Locals:         2       0       0       0
  1292 ;;      Temps:          1       0       0       0
  1293 ;;      Totals:         7       0       0       0
  1294 ;;Total ram usage:        7 bytes
  1295 ;; Hardware stack levels used:    1
  1296 ;; Hardware stack levels required when called:    1
  1297 ;; This function calls:
  1298 ;;		_setCSN
  1299 ;;		_spiTransferByte
  1300 ;; This function is called by:
  1301 ;;		_nrfConfig
  1302 ;; This function uses a non-reentrant model
  1303 ;;
  1304                           
  1305                           	psect	text7
  1306  003C3A                     __ptext7:
  1307                           	opt stack 0
  1308  003C3A                     _nrfSetTXAddr:
  1309                           	opt stack 28
  1310                           
  1311                           ;main.c: 375: setCSN(0);
  1312                           
  1313                           ;incstack = 0
  1314  003C3A  0E00               	movlw	0
  1315  003C3C  6E55               	movwf	setCSN@level+1,c
  1316  003C3E  0E00               	movlw	0
  1317  003C40  6E54               	movwf	setCSN@level,c
  1318  003C42  EC7E  F01D         	call	_setCSN	;wreg free
  1319                           
  1320                           ;main.c: 377: spiTransferByte(0x20|0x10);
  1321  003C46  0E30               	movlw	48
  1322  003C48  EC86  F01D         	call	_spiTransferByte
  1323                           
  1324                           ;main.c: 379: if (len != 0) {
  1325  003C4C  5059               	movf	nrfSetTXAddr@len+1,w,c
  1326  003C4E  1058               	iorwf	nrfSetTXAddr@len,w,c
  1327  003C50  B4D8               	btfsc	status,2,c
  1328  003C52  D01A               	goto	l816
  1329                           
  1330                           ;main.c: 381: for (int i=0;i<len;i++) {
  1331  003C54  0E00               	movlw	0
  1332  003C56  6E5C               	movwf	nrfSetTXAddr@i+1,c
  1333  003C58  0E00               	movlw	0
  1334  003C5A  6E5B               	movwf	nrfSetTXAddr@i,c
  1335  003C5C  D00B               	goto	l814
  1336  003C5E                     l810:
  1337                           
  1338                           ;main.c: 382: spiTransferByte(addr[i]);
  1339  003C5E  505B               	movf	nrfSetTXAddr@i,w,c
  1340  003C60  2456               	addwf	nrfSetTXAddr@addr,w,c
  1341  003C62  6ED9               	movwf	fsr2l,c
  1342  003C64  505C               	movf	nrfSetTXAddr@i+1,w,c
  1343  003C66  2057               	addwfc	nrfSetTXAddr@addr+1,w,c
  1344  003C68  6EDA               	movwf	fsr2h,c
  1345  003C6A  50DF               	movf	indf2,w,c
  1346  003C6C  EC86  F01D         	call	_spiTransferByte
  1347  003C70  4A5B               	infsnz	nrfSetTXAddr@i,f,c
  1348  003C72  2A5C               	incf	nrfSetTXAddr@i+1,f,c
  1349  003C74                     l814:
  1350  003C74  505C               	movf	nrfSetTXAddr@i+1,w,c
  1351  003C76  0A80               	xorlw	128
  1352  003C78  6E5A               	movwf	??_nrfSetTXAddr& (0+255),c
  1353  003C7A  5058               	movf	nrfSetTXAddr@len,w,c
  1354  003C7C  5C5B               	subwf	nrfSetTXAddr@i,w,c
  1355  003C7E  5059               	movf	nrfSetTXAddr@len+1,w,c
  1356  003C80  0A80               	xorlw	128
  1357  003C82  585A               	subwfb	??_nrfSetTXAddr& (0+255),w,c
  1358  003C84  A0D8               	btfss	status,0,c
  1359  003C86  D7EB               	goto	l810
  1360  003C88                     l816:
  1361                           
  1362                           ;main.c: 383: }
  1363                           ;main.c: 384: }
  1364                           ;main.c: 386: setCSN(1);
  1365  003C88  0E00               	movlw	0
  1366  003C8A  6E55               	movwf	setCSN@level+1,c
  1367  003C8C  0E01               	movlw	1
  1368  003C8E  6E54               	movwf	setCSN@level,c
  1369  003C90  EC7E  F01D         	call	_setCSN	;wreg free
  1370  003C94  0012               	return	
  1371  003C96                     __end_of_nrfSetTXAddr:
  1372                           	opt stack 0
  1373                           tblptru	equ	0xFF8
  1374                           tblptrh	equ	0xFF7
  1375                           tblptrl	equ	0xFF6
  1376                           tablat	equ	0xFF5
  1377                           postinc0	equ	0xFEE
  1378                           wreg	equ	0xFE8
  1379                           indf1	equ	0xFE7
  1380                           postdec1	equ	0xFE5
  1381                           fsr1h	equ	0xFE2
  1382                           fsr1l	equ	0xFE1
  1383                           indf2	equ	0xFDF
  1384                           fsr2h	equ	0xFDA
  1385                           fsr2l	equ	0xFD9
  1386                           status	equ	0xFD8
  1387                           
  1388 ;; *************** function _nrfSetRXAddr *****************
  1389 ;; Defined at:
  1390 ;;		line 395 in file "main.c"
  1391 ;; Parameters:    Size  Location     Type
  1392 ;;  pipe            1    wreg     unsigned char 
  1393 ;;  addr            2    2[COMRAM] PTR unsigned char 
  1394 ;;		 -> RX_ADDRESS(4), 
  1395 ;;  len             2    4[COMRAM] int 
  1396 ;; Auto vars:     Size  Location     Type
  1397 ;;  pipe            1    7[COMRAM] unsigned char 
  1398 ;;  i               2    8[COMRAM] int 
  1399 ;; Return value:  Size  Location     Type
  1400 ;;		None               void
  1401 ;; Registers used:
  1402 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1403 ;; Tracked objects:
  1404 ;;		On entry : 0/0
  1405 ;;		On exit  : 0/0
  1406 ;;		Unchanged: 0/0
  1407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1408 ;;      Params:         4       0       0       0
  1409 ;;      Locals:         3       0       0       0
  1410 ;;      Temps:          1       0       0       0
  1411 ;;      Totals:         8       0       0       0
  1412 ;;Total ram usage:        8 bytes
  1413 ;; Hardware stack levels used:    1
  1414 ;; Hardware stack levels required when called:    1
  1415 ;; This function calls:
  1416 ;;		_setCSN
  1417 ;;		_spiTransferByte
  1418 ;; This function is called by:
  1419 ;;		_nrfConfig
  1420 ;; This function uses a non-reentrant model
  1421 ;;
  1422                           
  1423                           	psect	text8
  1424  003C96                     __ptext8:
  1425                           	opt stack 0
  1426  003C96                     _nrfSetRXAddr:
  1427                           	opt stack 28
  1428                           
  1429                           ;incstack = 0
  1430                           ;nrfSetRXAddr@pipe stored from wreg
  1431  003C96  6E5B               	movwf	nrfSetRXAddr@pipe,c
  1432                           
  1433                           ;main.c: 397: setCSN(0);
  1434  003C98  0E00               	movlw	0
  1435  003C9A  6E55               	movwf	setCSN@level+1,c
  1436  003C9C  0E00               	movlw	0
  1437  003C9E  6E54               	movwf	setCSN@level,c
  1438  003CA0  EC7E  F01D         	call	_setCSN	;wreg free
  1439                           
  1440                           ;main.c: 399: spiTransferByte(0x20|pipe);
  1441  003CA4  505B               	movf	nrfSetRXAddr@pipe,w,c
  1442  003CA6  0920               	iorlw	32
  1443  003CA8  EC86  F01D         	call	_spiTransferByte
  1444                           
  1445                           ;main.c: 401: if (len != 0) {
  1446  003CAC  5059               	movf	nrfSetRXAddr@len+1,w,c
  1447  003CAE  1058               	iorwf	nrfSetRXAddr@len,w,c
  1448  003CB0  B4D8               	btfsc	status,2,c
  1449  003CB2  D01A               	goto	l800
  1450                           
  1451                           ;main.c: 403: for (int i=0;i<len;i++) {
  1452  003CB4  0E00               	movlw	0
  1453  003CB6  6E5D               	movwf	nrfSetRXAddr@i+1,c
  1454  003CB8  0E00               	movlw	0
  1455  003CBA  6E5C               	movwf	nrfSetRXAddr@i,c
  1456  003CBC  D00B               	goto	l798
  1457  003CBE                     l794:
  1458                           
  1459                           ;main.c: 404: spiTransferByte(addr[i]);
  1460  003CBE  505C               	movf	nrfSetRXAddr@i,w,c
  1461  003CC0  2456               	addwf	nrfSetRXAddr@addr,w,c
  1462  003CC2  6ED9               	movwf	fsr2l,c
  1463  003CC4  505D               	movf	nrfSetRXAddr@i+1,w,c
  1464  003CC6  2057               	addwfc	nrfSetRXAddr@addr+1,w,c
  1465  003CC8  6EDA               	movwf	fsr2h,c
  1466  003CCA  50DF               	movf	indf2,w,c
  1467  003CCC  EC86  F01D         	call	_spiTransferByte
  1468  003CD0  4A5C               	infsnz	nrfSetRXAddr@i,f,c
  1469  003CD2  2A5D               	incf	nrfSetRXAddr@i+1,f,c
  1470  003CD4                     l798:
  1471  003CD4  505D               	movf	nrfSetRXAddr@i+1,w,c
  1472  003CD6  0A80               	xorlw	128
  1473  003CD8  6E5A               	movwf	??_nrfSetRXAddr& (0+255),c
  1474  003CDA  5058               	movf	nrfSetRXAddr@len,w,c
  1475  003CDC  5C5C               	subwf	nrfSetRXAddr@i,w,c
  1476  003CDE  5059               	movf	nrfSetRXAddr@len+1,w,c
  1477  003CE0  0A80               	xorlw	128
  1478  003CE2  585A               	subwfb	??_nrfSetRXAddr& (0+255),w,c
  1479  003CE4  A0D8               	btfss	status,0,c
  1480  003CE6  D7EB               	goto	l794
  1481  003CE8                     l800:
  1482                           
  1483                           ;main.c: 405: }
  1484                           ;main.c: 406: }
  1485                           ;main.c: 408: setCSN(1);
  1486  003CE8  0E00               	movlw	0
  1487  003CEA  6E55               	movwf	setCSN@level+1,c
  1488  003CEC  0E01               	movlw	1
  1489  003CEE  6E54               	movwf	setCSN@level,c
  1490  003CF0  EC7E  F01D         	call	_setCSN	;wreg free
  1491  003CF4  0012               	return	
  1492  003CF6                     __end_of_nrfSetRXAddr:
  1493                           	opt stack 0
  1494                           tblptru	equ	0xFF8
  1495                           tblptrh	equ	0xFF7
  1496                           tblptrl	equ	0xFF6
  1497                           tablat	equ	0xFF5
  1498                           postinc0	equ	0xFEE
  1499                           wreg	equ	0xFE8
  1500                           indf1	equ	0xFE7
  1501                           postdec1	equ	0xFE5
  1502                           fsr1h	equ	0xFE2
  1503                           fsr1l	equ	0xFE1
  1504                           indf2	equ	0xFDF
  1505                           fsr2h	equ	0xFDA
  1506                           fsr2l	equ	0xFD9
  1507                           status	equ	0xFD8
  1508                           
  1509 ;; *************** function _nrfConfigReg *****************
  1510 ;; Defined at:
  1511 ;;		line 351 in file "main.c"
  1512 ;; Parameters:    Size  Location     Type
  1513 ;;  wr              1    wreg     unsigned char 
  1514 ;;  command         1    2[COMRAM] unsigned char 
  1515 ;;  data            1    3[COMRAM] unsigned char 
  1516 ;; Auto vars:     Size  Location     Type
  1517 ;;  wr              1    4[COMRAM] unsigned char 
  1518 ;; Return value:  Size  Location     Type
  1519 ;;                  1    wreg      unsigned char 
  1520 ;; Registers used:
  1521 ;;		wreg, status,2, status,0, cstack
  1522 ;; Tracked objects:
  1523 ;;		On entry : 0/0
  1524 ;;		On exit  : 0/0
  1525 ;;		Unchanged: 0/0
  1526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1527 ;;      Params:         2       0       0       0
  1528 ;;      Locals:         1       0       0       0
  1529 ;;      Temps:          0       0       0       0
  1530 ;;      Totals:         3       0       0       0
  1531 ;;Total ram usage:        3 bytes
  1532 ;; Hardware stack levels used:    1
  1533 ;; Hardware stack levels required when called:    1
  1534 ;; This function calls:
  1535 ;;		_setCSN
  1536 ;;		_spiTransferByte
  1537 ;; This function is called by:
  1538 ;;		_nrfConfig
  1539 ;; This function uses a non-reentrant model
  1540 ;;
  1541                           
  1542                           	psect	text9
  1543  003BF0                     __ptext9:
  1544                           	opt stack 0
  1545  003BF0                     _nrfConfigReg:
  1546                           	opt stack 28
  1547                           
  1548                           ;incstack = 0
  1549                           ;nrfConfigReg@wr stored from wreg
  1550  003BF0  6E58               	movwf	nrfConfigReg@wr,c
  1551                           
  1552                           ;main.c: 353: setCSN(0);
  1553  003BF2  0E00               	movlw	0
  1554  003BF4  6E55               	movwf	setCSN@level+1,c
  1555  003BF6  0E00               	movlw	0
  1556  003BF8  6E54               	movwf	setCSN@level,c
  1557  003BFA  EC7E  F01D         	call	_setCSN	;wreg free
  1558                           
  1559                           ;main.c: 355: if (wr == 'w') {
  1560  003BFE  5058               	movf	nrfConfigReg@wr,w,c
  1561  003C00  0A77               	xorlw	119
  1562  003C02  A4D8               	btfss	status,2,c
  1563  003C04  D008               	goto	l780
  1564                           
  1565                           ;main.c: 356: spiTransferByte(0x20|command);
  1566  003C06  5056               	movf	nrfConfigReg@command,w,c
  1567  003C08  0920               	iorlw	32
  1568  003C0A  EC86  F01D         	call	_spiTransferByte
  1569                           
  1570                           ;main.c: 357: spiTransferByte(data);
  1571  003C0E  5057               	movf	nrfConfigReg@data,w,c
  1572  003C10  EC86  F01D         	call	_spiTransferByte
  1573                           
  1574                           ;main.c: 358: } else if (wr == 'r') {
  1575  003C14  D00B               	goto	l784
  1576  003C16                     l780:
  1577  003C16  5058               	movf	nrfConfigReg@wr,w,c
  1578  003C18  0A72               	xorlw	114
  1579  003C1A  A4D8               	btfss	status,2,c
  1580  003C1C  D007               	goto	l784
  1581                           
  1582                           ;main.c: 359: spiTransferByte(0x00|command);
  1583  003C1E  5056               	movf	nrfConfigReg@command,w,c
  1584  003C20  EC86  F01D         	call	_spiTransferByte
  1585                           
  1586                           ;main.c: 360: data = spiTransferByte(0xFF);
  1587  003C24  0EFF               	movlw	255
  1588  003C26  EC86  F01D         	call	_spiTransferByte
  1589  003C2A  6E57               	movwf	nrfConfigReg@data,c
  1590  003C2C                     l784:
  1591                           
  1592                           ;main.c: 361: }
  1593                           ;main.c: 363: setCSN(1);
  1594  003C2C  0E00               	movlw	0
  1595  003C2E  6E55               	movwf	setCSN@level+1,c
  1596  003C30  0E01               	movlw	1
  1597  003C32  6E54               	movwf	setCSN@level,c
  1598  003C34  EC7E  F01D         	call	_setCSN	;wreg free
  1599  003C38  0012               	return	
  1600  003C3A                     __end_of_nrfConfigReg:
  1601                           	opt stack 0
  1602                           tblptru	equ	0xFF8
  1603                           tblptrh	equ	0xFF7
  1604                           tblptrl	equ	0xFF6
  1605                           tablat	equ	0xFF5
  1606                           postinc0	equ	0xFEE
  1607                           wreg	equ	0xFE8
  1608                           indf1	equ	0xFE7
  1609                           postdec1	equ	0xFE5
  1610                           fsr1h	equ	0xFE2
  1611                           fsr1l	equ	0xFE1
  1612                           indf2	equ	0xFDF
  1613                           fsr2h	equ	0xFDA
  1614                           fsr2l	equ	0xFD9
  1615                           status	equ	0xFD8
  1616                           
  1617 ;; *************** function _spiTransferByte *****************
  1618 ;; Defined at:
  1619 ;;		line 443 in file "main.c"
  1620 ;; Parameters:    Size  Location     Type
  1621 ;;  data            1    wreg     unsigned char 
  1622 ;; Auto vars:     Size  Location     Type
  1623 ;;  data            1    0[COMRAM] unsigned char 
  1624 ;; Return value:  Size  Location     Type
  1625 ;;                  1    wreg      unsigned char 
  1626 ;; Registers used:
  1627 ;;		wreg, status,2, cstack
  1628 ;; Tracked objects:
  1629 ;;		On entry : 0/0
  1630 ;;		On exit  : 0/0
  1631 ;;		Unchanged: 0/0
  1632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1633 ;;      Params:         0       0       0       0
  1634 ;;      Locals:         1       0       0       0
  1635 ;;      Temps:          0       0       0       0
  1636 ;;      Totals:         1       0       0       0
  1637 ;;Total ram usage:        1 bytes
  1638 ;; Hardware stack levels used:    1
  1639 ;; This function calls:
  1640 ;;		Nothing
  1641 ;; This function is called by:
  1642 ;;		_nrfGetStatus
  1643 ;;		_nrfConfigReg
  1644 ;;		_nrfSetTXAddr
  1645 ;;		_nrfSetRXAddr
  1646 ;;		_spiTransfer
  1647 ;;		_nrfTXData
  1648 ;; This function uses a non-reentrant model
  1649 ;;
  1650                           
  1651                           	psect	text10
  1652  003B0C                     __ptext10:
  1653                           	opt stack 0
  1654  003B0C                     _spiTransferByte:
  1655                           	opt stack 29
  1656                           
  1657                           ;incstack = 0
  1658                           ;spiTransferByte@data stored from wreg
  1659  003B0C  6E54               	movwf	spiTransferByte@data,c
  1660                           
  1661                           ;main.c: 445: SSP1BUF = data;
  1662  003B0E  C054  FFC9         	movff	spiTransferByte@data,4041	;volatile
  1663                           
  1664                           ;main.c: 447: _delay((unsigned long)((15)*(64000000/4000000.0)));
  1665  003B12  0E50               	movlw	80
  1666  003B14                     u227:
  1667  003B14  2EE8               	decfsz	wreg,f,c
  1668  003B16  D7FE               	goto	u227
  1669                           
  1670                           ;main.c: 449: return SSP1BUF;
  1671  003B18  50C9               	movf	4041,w,c	;volatile
  1672  003B1A  0012               	return	
  1673  003B1C                     __end_of_spiTransferByte:
  1674                           	opt stack 0
  1675                           tblptru	equ	0xFF8
  1676                           tblptrh	equ	0xFF7
  1677                           tblptrl	equ	0xFF6
  1678                           tablat	equ	0xFF5
  1679                           postinc0	equ	0xFEE
  1680                           wreg	equ	0xFE8
  1681                           indf1	equ	0xFE7
  1682                           postdec1	equ	0xFE5
  1683                           fsr1h	equ	0xFE2
  1684                           fsr1l	equ	0xFE1
  1685                           indf2	equ	0xFDF
  1686                           fsr2h	equ	0xFDA
  1687                           fsr2l	equ	0xFD9
  1688                           status	equ	0xFD8
  1689                           
  1690 ;; *************** function _setCSN *****************
  1691 ;; Defined at:
  1692 ;;		line 326 in file "main.c"
  1693 ;; Parameters:    Size  Location     Type
  1694 ;;  level           2    0[COMRAM] int 
  1695 ;; Auto vars:     Size  Location     Type
  1696 ;;		None
  1697 ;; Return value:  Size  Location     Type
  1698 ;;		None               void
  1699 ;; Registers used:
  1700 ;;		wreg, status,2, status,0
  1701 ;; Tracked objects:
  1702 ;;		On entry : 0/0
  1703 ;;		On exit  : 0/0
  1704 ;;		Unchanged: 0/0
  1705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1706 ;;      Params:         2       0       0       0
  1707 ;;      Locals:         0       0       0       0
  1708 ;;      Temps:          0       0       0       0
  1709 ;;      Totals:         2       0       0       0
  1710 ;;Total ram usage:        2 bytes
  1711 ;; Hardware stack levels used:    1
  1712 ;; This function calls:
  1713 ;;		Nothing
  1714 ;; This function is called by:
  1715 ;;		_nrfGetStatus
  1716 ;;		_nrfConfigReg
  1717 ;;		_nrfSetTXAddr
  1718 ;;		_nrfSetRXAddr
  1719 ;;		_spiTransfer
  1720 ;;		_nrfTXData
  1721 ;; This function uses a non-reentrant model
  1722 ;;
  1723                           
  1724                           	psect	text11
  1725  003AFC                     __ptext11:
  1726                           	opt stack 0
  1727  003AFC                     _setCSN:
  1728                           	opt stack 29
  1729                           
  1730                           ;main.c: 328: if (level == 1) {
  1731                           
  1732                           ;incstack = 0
  1733  003AFC  0454               	decf	setCSN@level,w,c
  1734  003AFE  1055               	iorwf	setCSN@level+1,w,c
  1735  003B00  A4D8               	btfss	status,2,c
  1736  003B02  D002               	goto	l94
  1737                           
  1738                           ;main.c: 329: LATAbits.LATA2 = 1;
  1739  003B04  8489               	bsf	3977,2,c	;volatile
  1740                           
  1741                           ;main.c: 330: } else {
  1742  003B06  0012               	return	
  1743  003B08                     l94:
  1744                           
  1745                           ;main.c: 331: LATAbits.LATA2 = 0;
  1746  003B08  9489               	bcf	3977,2,c	;volatile
  1747  003B0A  0012               	return	
  1748  003B0C                     __end_of_setCSN:
  1749                           	opt stack 0
  1750                           tblptru	equ	0xFF8
  1751                           tblptrh	equ	0xFF7
  1752                           tblptrl	equ	0xFF6
  1753                           tablat	equ	0xFF5
  1754                           postinc0	equ	0xFEE
  1755                           wreg	equ	0xFE8
  1756                           indf1	equ	0xFE7
  1757                           postdec1	equ	0xFE5
  1758                           fsr1h	equ	0xFE2
  1759                           fsr1l	equ	0xFE1
  1760                           indf2	equ	0xFDF
  1761                           fsr2h	equ	0xFDA
  1762                           fsr2l	equ	0xFD9
  1763                           status	equ	0xFD8
  1764                           
  1765 ;; *************** function _delay10ms *****************
  1766 ;; Defined at:
  1767 ;;		line 485 in file "main.c"
  1768 ;; Parameters:    Size  Location     Type
  1769 ;;  ms_multi        2    0[COMRAM] int 
  1770 ;; Auto vars:     Size  Location     Type
  1771 ;;  i               2    3[COMRAM] int 
  1772 ;; Return value:  Size  Location     Type
  1773 ;;		None               void
  1774 ;; Registers used:
  1775 ;;		wreg, status,2, status,0
  1776 ;; Tracked objects:
  1777 ;;		On entry : 0/0
  1778 ;;		On exit  : 0/0
  1779 ;;		Unchanged: 0/0
  1780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1781 ;;      Params:         2       0       0       0
  1782 ;;      Locals:         2       0       0       0
  1783 ;;      Temps:          1       0       0       0
  1784 ;;      Totals:         5       0       0       0
  1785 ;;Total ram usage:        5 bytes
  1786 ;; Hardware stack levels used:    1
  1787 ;; This function calls:
  1788 ;;		Nothing
  1789 ;; This function is called by:
  1790 ;;		_main
  1791 ;; This function uses a non-reentrant model
  1792 ;;
  1793                           
  1794                           	psect	text12
  1795  003BB4                     __ptext12:
  1796                           	opt stack 0
  1797  003BB4                     _delay10ms:
  1798                           	opt stack 30
  1799                           
  1800                           ;main.c: 486: int i = 0;
  1801                           
  1802                           ;incstack = 0
  1803  003BB4  0E00               	movlw	0
  1804  003BB6  6E58               	movwf	delay10ms@i+1,c
  1805  003BB8  0E00               	movlw	0
  1806  003BBA  6E57               	movwf	delay10ms@i,c
  1807                           
  1808                           ;main.c: 487: for (i=0;i<ms_multi;i++) {
  1809  003BBC  0E00               	movlw	0
  1810  003BBE  6E58               	movwf	delay10ms@i+1,c
  1811  003BC0  0E00               	movlw	0
  1812  003BC2  6E57               	movwf	delay10ms@i,c
  1813  003BC4  D00A               	goto	l147
  1814  003BC6                     l840:
  1815                           
  1816                           ;main.c: 488: _delay((unsigned long)((11)*(64000000/4000.0)));
  1817  003BC6  0EE5               	movlw	229
  1818  003BC8  6E56               	movwf	??_delay10ms& (0+255),c
  1819  003BCA  0E91               	movlw	145
  1820  003BCC                     u237:
  1821  003BCC  2EE8               	decfsz	wreg,f,c
  1822  003BCE  D7FE               	goto	u237
  1823  003BD0  2E56               	decfsz	??_delay10ms& (0+255),f,c
  1824  003BD2  D7FC               	goto	u237
  1825  003BD4  F000               	nop	
  1826  003BD6  4A57               	infsnz	delay10ms@i,f,c
  1827  003BD8  2A58               	incf	delay10ms@i+1,f,c
  1828  003BDA                     l147:
  1829  003BDA  5058               	movf	delay10ms@i+1,w,c
  1830  003BDC  0A80               	xorlw	128
  1831  003BDE  6E56               	movwf	??_delay10ms& (0+255),c
  1832  003BE0  5054               	movf	delay10ms@ms_multi,w,c
  1833  003BE2  5C57               	subwf	delay10ms@i,w,c
  1834  003BE4  5055               	movf	delay10ms@ms_multi+1,w,c
  1835  003BE6  0A80               	xorlw	128
  1836  003BE8  5856               	subwfb	??_delay10ms& (0+255),w,c
  1837  003BEA  B0D8               	btfsc	status,0,c
  1838  003BEC  0012               	return	
  1839  003BEE  D7EB               	goto	l840
  1840  003BF0                     __end_of_delay10ms:
  1841                           	opt stack 0
  1842  0000                     tblptru	equ	0xFF8
  1843                           tblptrh	equ	0xFF7
  1844                           tblptrl	equ	0xFF6
  1845                           tablat	equ	0xFF5
  1846                           postinc0	equ	0xFEE
  1847                           wreg	equ	0xFE8
  1848                           indf1	equ	0xFE7
  1849                           postdec1	equ	0xFE5
  1850                           fsr1h	equ	0xFE2
  1851                           fsr1l	equ	0xFE1
  1852                           indf2	equ	0xFDF
  1853                           fsr2h	equ	0xFDA
  1854                           fsr2l	equ	0xFD9
  1855                           status	equ	0xFD8
  1856                           tblptru	equ	0xFF8
  1857                           tblptrh	equ	0xFF7
  1858                           tblptrl	equ	0xFF6
  1859                           tablat	equ	0xFF5
  1860                           postinc0	equ	0xFEE
  1861                           wreg	equ	0xFE8
  1862                           indf1	equ	0xFE7
  1863                           postdec1	equ	0xFE5
  1864                           fsr1h	equ	0xFE2
  1865                           fsr1l	equ	0xFE1
  1866                           indf2	equ	0xFDF
  1867                           fsr2h	equ	0xFDA
  1868                           fsr2l	equ	0xFD9
  1869                           status	equ	0xFD8
  1870                           
  1871                           	psect	rparam
  1872  0000                     tblptru	equ	0xFF8
  1873                           tblptrh	equ	0xFF7
  1874                           tblptrl	equ	0xFF6
  1875                           tablat	equ	0xFF5
  1876                           postinc0	equ	0xFEE
  1877                           wreg	equ	0xFE8
  1878                           indf1	equ	0xFE7
  1879                           postdec1	equ	0xFE5
  1880                           fsr1h	equ	0xFE2
  1881                           fsr1l	equ	0xFE1
  1882                           indf2	equ	0xFDF
  1883                           fsr2h	equ	0xFDA
  1884                           fsr2l	equ	0xFD9
  1885                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        17
    BSS         66
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     12      95
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    nrfSetRXAddr@addr	PTR unsigned char  size(2) Largest target is 4
		 -> RX_ADDRESS(COMRAM[4]), 

    nrfSetTXAddr@addr	PTR unsigned char  size(2) Largest target is 4
		 -> TX_ADDRESS(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _nrfTXData->_setCSN
    _nrfGetStatus->_setCSN
    _nrfConfig->_nrfSetRXAddr
    _spiTransfer->_setCSN
    _nrfSetTXAddr->_setCSN
    _nrfSetRXAddr->_setCSN
    _nrfConfigReg->_setCSN

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    6252
                                             10 COMRAM     2     2      0
                          _delay10ms
                          _nrfConfig
                       _nrfGetStatus
                          _nrfTXData
                         _portConfig
                        _spiConfig_1
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiConfig_1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _portConfig                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _nrfTXData                                            7     5      2     679
                                              2 COMRAM     7     5      2
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (1) _nrfGetStatus                                         0     0      0     546
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (1) _nrfConfig                                            0     0      0    3884
                       _nrfConfigReg
                       _nrfSetRXAddr
                       _nrfSetTXAddr
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiTransfer                                          7     4      3     969
                                              2 COMRAM     7     4      3
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfSetTXAddr                                         7     3      4     707
                                              2 COMRAM     7     3      4
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfSetRXAddr                                         8     4      4     722
                                              2 COMRAM     8     4      4
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfConfigReg                                         3     1      2    1486
                                              2 COMRAM     3     1      2
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _spiTransferByte                                      1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setCSN                                               2     0      2     531
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _delay10ms                                            5     3      2     159
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay10ms
   _nrfConfig
     _nrfConfigReg
       _setCSN
       _spiTransferByte
     _nrfSetRXAddr
       _setCSN
       _spiTransferByte
     _nrfSetTXAddr
       _setCSN
       _spiTransferByte
     _spiTransfer
       _setCSN
       _spiTransferByte
   _nrfGetStatus
     _setCSN
     _spiTransferByte
   _nrfTXData
     _setCSN
     _spiTransferByte
   _portConfig
   _spiConfig_1
   _spiTransfer
     _setCSN
     _spiTransferByte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       6        0.0%
BANK2              100      0       0       7        0.0%
BITBANK1           100      0       0       9        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      C      5F       1      100.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5F       8        0.0%
DATA                 0      0      5F      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Tue Sep 30 16:14:56 2014

__size_of_spiTransferByte 0010                        l94 3B08                _RX_ADDRESS 004C  
             __CFG_LVP$ON 000000                       l141 3E1E                       l147 3BDA  
                     l800 3CE8                       l810 3C5E                       l814 3C74  
                     l840 3BC6                       l816 3C88                       l760 3D34  
                     l752 3D16                       l770 3D7E                       l780 3C16  
                     l764 3D46                       l756 3D26                       l852 3DB0  
                     l784 3C2C                       l768 3D6A                       l872 3E12  
                     l856 3DC6                       l952 3FAC                       l794 3CBE  
                     l858 3DDA                       l972 3FF2                       l798 3CD4  
                     u207 3DFE                       u217 3E14                       u227 3B14  
                     u237 3BCC                       u187 3DDC                       u197 3DF2  
                     wreg 000FE8                _TX_ADDRESS 0050                      _LATA 000F89  
                    _LATB 000F8A                      _LATC 000F8B        spiTransfer@command 0056  
                    _main 3F10                      indf1 000FE7                      fsr1l 000FE1  
                    indf2 000FDF                      fsr2l 000FD9             __CFG_BORV$190 000000  
                    start 0000             __CFG_IESO$OFF 000000            nrfConfigReg@wr 0058  
                   ?_main 0054                     _TRISA 000F92                     _TRISB 000F93  
                   _TRISC 000F94            __CFG_FCMEN$OFF 000000        __CFG_MCLRE$EXTMCLR 000000  
                   tablat 000FF5                     status 000FD8            __CFG_HFOFST$ON 000000  
          __CFG_FOSC$HSHP 000000           __initialization 3B82              __end_of_main 4000  
     spiTransferByte@data 0054                    ??_main 005E             __activetblptr 000000  
       ??_spiTransferByte 0054            __CFG_PLLCFG$ON 000000             nrfSetRXAddr@i 005C  
           nrfSetTXAddr@i 005B            __CFG_WDTEN$OFF 000000              ?_spiConfig_1 0054  
          __CFG_PWRTEN$ON 000000            __CFG_XINST$OFF 000000            __CFG_STVREN$ON 000000  
                  _setCSN 3AFC                    clear_0 3B88               setCSN@level 0054  
           ?_nrfGetStatus 0054             ?_nrfConfigReg 0056              _FEATURE_CURR 0046  
            __pdataCOMRAM 0043              ?_spiTransfer 0056                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8                __accesstop 0060  
 __end_of__initialization 3BAE           __CFG_PBADEN$OFF 000000             ?_nrfSetRXAddr 0056  
           ?_nrfSetTXAddr 0056            __pcstackCOMRAM 0054        __size_of_delay10ms 003C  
          ??_nrfGetStatus 0056            _EN_RXADDR_CURR 0045            ??_nrfConfigReg 0058  
        nrfConfigReg@data 0057                _dataBufOut 0021            ??_nrfSetRXAddr 005A  
          ??_nrfSetTXAddr 005A        __size_of_nrfTXData 00A8        __size_of_nrfConfig 00DC  
     nrfConfigReg@command 0056        __CFG_CCP2MX$PORTC1 000000        __CFG_CCP3MX$PORTB5 000000  
                 ?_setCSN 0054                   _SSP1ADD 000FC8                   _SSP1BUF 000FC9  
       __end_of_delay10ms 3BF0          nrfSetRXAddr@addr 0056          nrfSetRXAddr@pipe 005B  
                 __Hparam 0000                   __Lparam 0000      __size_of_spiConfig_1 0018  
         _spiTransferByte 3B0C                delay10ms@i 0057             _RX_PW_P0_CURR 0049  
                 __pcinit 3B82           __size_of_setCSN 0010          nrfSetTXAddr@addr 0056  
                 __ramtop 0300                   __ptext0 3F10                   __ptext1 3B2E  
                 __ptext2 3B46                   __ptext3 3D8C                   __ptext4 3B60  
                 __ptext5 3E34                   __ptext6 3CF6                   __ptext7 3C3A  
                 __ptext8 3C96                   __ptext9 3BF0         __end_of_nrfTXData 3E34  
       __end_of_nrfConfig 3F10      __size_of_spiTransfer 0096      end_of_initialization 3BAE  
    __end_of_nrfGetStatus 3B82      __end_of_nrfConfigReg 3C3A                   postdec1 000FE5  
                 postinc0 000FEE              nrfTXData@len 0056                _portConfig 3B46  
    __end_of_nrfSetRXAddr 3CF6      __end_of_nrfSetTXAddr 3C96   __end_of_spiTransferByte 3B1C  
           __pidataCOMRAM 3B1D            __end_of_setCSN 3B0C       start_initialization 3B82  
                ??_setCSN 0056               ?_portConfig 0054                nrfTXData@i 005B  
             __pbssCOMRAM 0001     __size_of_nrfGetStatus 0022     __size_of_nrfConfigReg 004A  
               _dataBufIn 0001          ?_spiTransferByte 0054                 _delay10ms 3BB4  
             _CONFIG_CURR 0043             _SETUP_AW_CURR 004A     __size_of_nrfSetRXAddr 0060  
   __size_of_nrfSetTXAddr 005C           _SETUP_RETR_CURR 004B          __CFG_PRICLKEN$ON 000000  
            _nrfGetStatus 3B60              _nrfConfigReg 3BF0           nrfSetRXAddr@len 0058  
               _nrfSTATUS 0042                 _nrfTXData 3D8C           nrfSetTXAddr@len 0058  
               _nrfConfig 3E34       __size_of_portConfig 001A                  _LATAbits 000F89  
              ?_delay10ms 0054             ??_spiConfig_1 0054              _nrfSetRXAddr 3C96  
            _nrfSetTXAddr 3C3A          __CFG_WDTPS$32768 000000             _RF_SETUP_CURR 0048  
       delay10ms@ms_multi 0054             ??_spiTransfer 0059                 main@count 005E  
              ?_nrfTXData 0056                 copy_data0 3BA2                ?_nrfConfig 0054  
                __Hrparam 0000                  __Lrparam 0000        __CFG_BOREN$SBORDIS 000000  
       __CFG_P2BMX$PORTB5 000000       __end_of_spiConfig_1 3B46                  __ptext10 3B0C  
                __ptext11 3AFC                  __ptext12 3BB4              _SSP1CON1bits 000FC6  
     __end_of_spiTransfer 3D8C             __size_of_main 00F0               ??_delay10ms 0056  
              _EN_AA_CURR 0041              _SSP1STATbits 000FC7              ??_portConfig 0054  
          nrfTXData@i_558 0059                _DYNPD_CURR 0044               ??_nrfTXData 0058  
             ??_nrfConfig 005E        __end_of_portConfig 3B60               _spiConfig_1 3B2E  
          spiTransfer@len 0057            spiTransfer@wrn 005C                _RF_CH_CURR 0047  
             _spiTransfer 3CF6         __CFG_T3CMX$PORTC0 000000              spiTransfer@i 005A  
