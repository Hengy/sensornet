

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Thu Oct 02 10:04:30 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F24K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    31  0000                     
    32                           	psect	idataCOMRAM
    33  0007F4                     __pidataCOMRAM:
    34                           	opt stack 0
    35                           
    36                           ;initializer for _CONFIG_CURR
    37  0007F4  5A                 	db	90
    38                           
    39                           ;initializer for _DYNPD_CURR
    40  0007F5  01                 	db	1
    41                           
    42                           ;initializer for _EN_RXADDR_CURR
    43  0007F6  01                 	db	1
    44                           
    45                           ;initializer for _FEATURE_CURR
    46  0007F7  04                 	db	4
    47                           
    48                           ;initializer for _RF_CH_CURR
    49  0007F8  69                 	db	105
    50                           
    51                           ;initializer for _RF_SETUP_CURR
    52  0007F9  06                 	db	6
    53                           
    54                           ;initializer for _RX_PW_P0_CURR
    55  0007FA  01                 	db	1
    56                           
    57                           ;initializer for _SETUP_AW_CURR
    58  0007FB  02                 	db	2
    59                           
    60                           ;initializer for _SETUP_RETR_CURR
    61  0007FC  21                 	db	33
    62                           
    63                           ;initializer for _RX_ADDRESS
    64  0007FD  E7                 	db	231
    65  0007FE  E7                 	db	231
    66  0007FF  E7                 	db	231
    67  000800  E7                 	db	231
    68                           
    69                           ;initializer for _TX_ADDRESS
    70  000801  E7                 	db	231
    71  000802  E7                 	db	231
    72  000803  E7                 	db	231
    73  000804  E7                 	db	231
    74  0000                     _INTCON2bits	set	4081
    75  0000                     _INTCONbits	set	4082
    76  0000                     _IOCBbits	set	3938
    77  0000                     _LATA	set	3977
    78  0000                     _LATAbits	set	3977
    79  0000                     _LATB	set	3978
    80  0000                     _LATC	set	3979
    81  0000                     _PIR1bits	set	3998
    82  0000                     _PORTBbits	set	3969
    83  0000                     _RCONbits	set	4048
    84  0000                     _SSP1ADD	set	4040
    85  0000                     _SSP1BUF	set	4041
    86  0000                     _SSP1CON1bits	set	4038
    87  0000                     _SSP1STATbits	set	4039
    88  0000                     _TRISA	set	3986
    89  0000                     _TRISB	set	3987
    90  0000                     _TRISC	set	3988
    91                           
    92                           ; #config settings
    93  0000                     
    94                           	psect	cinit
    95  000750                     __pcinit:
    96                           	opt stack 0
    97  000750                     start_initialization:
    98                           	opt stack 0
    99  000750                     __initialization:
   100                           	opt stack 0
   101                           
   102                           ; Clear objects allocated to BANK0 (64 bytes)
   103  000750  EE00  F060         	lfsr	0,__pbssBANK0
   104  000754  0E40               	movlw	64
   105  000756                     clear_0:
   106  000756  6AEE               	clrf	postinc0,c
   107  000758  06E8               	decf	wreg,f,c
   108  00075A  E1FD               	bnz	clear_0
   109                           
   110                           ; Clear objects allocated to COMRAM (5 bytes)
   111  00075C  6A3F               	clrf	(__pbssCOMRAM+4)& (0+255),c
   112  00075E  6A3E               	clrf	(__pbssCOMRAM+3)& (0+255),c
   113  000760  6A3D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   114  000762  6A3C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   115  000764  6A3B               	clrf	__pbssCOMRAM& (0+255),c
   116                           
   117                           ; Initialize objects allocated to COMRAM (17 bytes)
   118                           ; load TBLPTR registers with __pidataCOMRAM
   119  000766  0EF4               	movlw	low __pidataCOMRAM
   120  000768  6EF6               	movwf	tblptrl,c
   121  00076A  0E07               	movlw	high __pidataCOMRAM
   122  00076C  6EF7               	movwf	tblptrh,c
   123  00076E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   124  000770  6EF8               	movwf	tblptru,c
   125  000772  EE00  F02A         	lfsr	0,__pdataCOMRAM
   126  000776  EE10 F011          	lfsr	1,17
   127  00077A                     copy_data0:
   128  00077A  0009               	tblrd		*+
   129  00077C  CFF5 FFEE          	movff	tablat,postinc0
   130  000780  50E5               	movf	postdec1,w,c
   131  000782  50E1               	movf	fsr1l,w,c
   132  000784  E1FA               	bnz	copy_data0
   133  000786                     end_of_initialization:
   134                           	opt stack 0
   135  000786                     __end_of__initialization:
   136                           	opt stack 0
   137  000786  0100               	movlb	0
   138  000788  EF53  F000         	goto	_main	;jump to C main() function
   139                           tblptru	equ	0xFF8
   140                           tblptrh	equ	0xFF7
   141                           tblptrl	equ	0xFF6
   142                           tablat	equ	0xFF5
   143                           postinc0	equ	0xFEE
   144                           wreg	equ	0xFE8
   145                           postdec1	equ	0xFE5
   146                           fsr1l	equ	0xFE1
   147                           
   148                           	psect	bssCOMRAM
   149  00003B                     __pbssCOMRAM:
   150                           	opt stack 0
   151  00003B                     _EN_AA_CURR:
   152                           	opt stack 0
   153  00003B                     	ds	1
   154  00003C                     _nrfBusy:
   155                           	opt stack 0
   156  00003C                     	ds	1
   157  00003D                     _nrfInterrupt:
   158                           	opt stack 0
   159  00003D                     	ds	1
   160  00003E                     _nrfSTATUS:
   161                           	opt stack 0
   162  00003E                     	ds	1
   163  00003F                     _spiTXFlag:
   164                           	opt stack 0
   165  00003F                     	ds	1
   166                           tblptru	equ	0xFF8
   167                           tblptrh	equ	0xFF7
   168                           tblptrl	equ	0xFF6
   169                           tablat	equ	0xFF5
   170                           postinc0	equ	0xFEE
   171                           wreg	equ	0xFE8
   172                           postdec1	equ	0xFE5
   173                           fsr1l	equ	0xFE1
   174                           
   175                           	psect	dataCOMRAM
   176  00002A                     __pdataCOMRAM:
   177                           	opt stack 0
   178  00002A                     _CONFIG_CURR:
   179                           	opt stack 0
   180  00002A                     	ds	1
   181  00002B                     _DYNPD_CURR:
   182                           	opt stack 0
   183  00002B                     	ds	1
   184  00002C                     _EN_RXADDR_CURR:
   185                           	opt stack 0
   186  00002C                     	ds	1
   187  00002D                     _FEATURE_CURR:
   188                           	opt stack 0
   189  00002D                     	ds	1
   190  00002E                     _RF_CH_CURR:
   191                           	opt stack 0
   192  00002E                     	ds	1
   193  00002F                     _RF_SETUP_CURR:
   194                           	opt stack 0
   195  00002F                     	ds	1
   196  000030                     _RX_PW_P0_CURR:
   197                           	opt stack 0
   198  000030                     	ds	1
   199  000031                     _SETUP_AW_CURR:
   200                           	opt stack 0
   201  000031                     	ds	1
   202  000032                     _SETUP_RETR_CURR:
   203                           	opt stack 0
   204  000032                     	ds	1
   205  000033                     _RX_ADDRESS:
   206                           	opt stack 0
   207  000033                     	ds	4
   208  000037                     _TX_ADDRESS:
   209                           	opt stack 0
   210  000037                     	ds	4
   211                           tblptru	equ	0xFF8
   212                           tblptrh	equ	0xFF7
   213                           tblptrl	equ	0xFF6
   214                           tablat	equ	0xFF5
   215                           postinc0	equ	0xFEE
   216                           wreg	equ	0xFE8
   217                           postdec1	equ	0xFE5
   218                           fsr1l	equ	0xFE1
   219                           
   220                           	psect	bssBANK0
   221  000060                     __pbssBANK0:
   222                           	opt stack 0
   223  000060                     _dataBufIn:
   224                           	opt stack 0
   225  000060                     	ds	32
   226  000080                     _dataBufOut:
   227                           	opt stack 0
   228  000080                     	ds	32
   229                           tblptru	equ	0xFF8
   230                           tblptrh	equ	0xFF7
   231                           tblptrl	equ	0xFF6
   232                           tablat	equ	0xFF5
   233                           postinc0	equ	0xFEE
   234                           wreg	equ	0xFE8
   235                           postdec1	equ	0xFE5
   236                           fsr1l	equ	0xFE1
   237                           
   238                           	psect	cstackBANK0
   239  0000A0                     __pcstackBANK0:
   240                           	opt stack 0
   241  0000A0                     ___aldiv@counter:
   242                           	opt stack 0
   243                           
   244                           ; 1 bytes @ 0x0
   245  0000A0                     	ds	1
   246  0000A1                     ___aldiv@sign:
   247                           	opt stack 0
   248                           
   249                           ; 1 bytes @ 0x1
   250  0000A1                     	ds	1
   251  0000A2                     ___aldiv@quotient:
   252                           	opt stack 0
   253                           
   254                           ; 4 bytes @ 0x2
   255  0000A2                     	ds	4
   256  0000A6                     ??_spiConfig_1:
   257                           
   258                           ; 0 bytes @ 0x6
   259  0000A6                     	ds	4
   260  0000AA                     _spiConfig_1$1492:
   261                           	opt stack 0
   262                           
   263                           ; 4 bytes @ 0xA
   264  0000AA                     	ds	4
   265  0000AE                     spiConfig_1@sspAddVal:
   266                           	opt stack 0
   267                           
   268                           ; 2 bytes @ 0xE
   269  0000AE                     	ds	2
   270  0000B0                     main@count:
   271                           	opt stack 0
   272                           
   273                           ; 2 bytes @ 0x10
   274  0000B0                     	ds	2
   275  0000B2                     main@TXtime:
   276                           	opt stack 0
   277                           
   278                           ; 2 bytes @ 0x12
   279  0000B2                     	ds	2
   280                           tblptru	equ	0xFF8
   281                           tblptrh	equ	0xFF7
   282                           tblptrl	equ	0xFF6
   283                           tablat	equ	0xFF5
   284                           postinc0	equ	0xFEE
   285                           wreg	equ	0xFE8
   286                           postdec1	equ	0xFE5
   287                           fsr1l	equ	0xFE1
   288                           
   289                           	psect	cstackCOMRAM
   290  000001                     __pcstackCOMRAM:
   291                           	opt stack 0
   292  000001                     ??_lowISR:
   293  000001                     
   294                           ; 1 bytes @ 0x0
   295  000001                     	ds	17
   296  000012                     ??_highISR:
   297                           
   298                           ; 0 bytes @ 0x11
   299  000012                     	ds	14
   300  000020                     ?___aldiv:
   301                           	opt stack 0
   302  000020                     spiTransferByte@data:
   303                           	opt stack 0
   304  000020                     setCSN@level:
   305                           	opt stack 0
   306  000020                     delay10ms@ms_multi:
   307                           	opt stack 0
   308  000020                     ___aldiv@dividend:
   309                           	opt stack 0
   310                           
   311                           ; 4 bytes @ 0x1F
   312  000020                     	ds	2
   313  000022                     ??_delay10ms:
   314  000022                     nrfConfigReg@command:
   315                           	opt stack 0
   316  000022                     spiTransfer@command:
   317                           	opt stack 0
   318  000022                     nrfSetTXAddr@addr:
   319                           	opt stack 0
   320  000022                     nrfSetRXAddr@addr:
   321                           	opt stack 0
   322  000022                     nrfTXData@len:
   323                           	opt stack 0
   324                           
   325                           ; 2 bytes @ 0x21
   326  000022                     	ds	1
   327  000023                     nrfConfigReg@data:
   328                           	opt stack 0
   329  000023                     spiTransfer@len:
   330                           	opt stack 0
   331  000023                     delay10ms@i:
   332                           	opt stack 0
   333                           
   334                           ; 2 bytes @ 0x22
   335  000023                     	ds	1
   336  000024                     ??_nrfTXData:
   337  000024                     nrfConfigReg@wr:
   338                           	opt stack 0
   339  000024                     nrfSetTXAddr@len:
   340                           	opt stack 0
   341  000024                     nrfSetRXAddr@len:
   342                           	opt stack 0
   343  000024                     ___aldiv@divisor:
   344                           	opt stack 0
   345                           
   346                           ; 4 bytes @ 0x23
   347  000024                     	ds	1
   348  000025                     ??_spiTransfer:
   349  000025                     nrfTXData@i:
   350                           	opt stack 0
   351                           
   352                           ; 2 bytes @ 0x24
   353  000025                     	ds	1
   354  000026                     ??_nrfSetRXAddr:
   355  000026                     ??_nrfSetTXAddr:
   356  000026                     spiTransfer@wrn:
   357                           	opt stack 0
   358                           
   359                           ; 1 bytes @ 0x25
   360  000026                     	ds	1
   361  000027                     nrfSetRXAddr@pipe:
   362                           	opt stack 0
   363  000027                     nrfSetTXAddr@i:
   364                           	opt stack 0
   365  000027                     spiTransfer@i:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0x26
   369  000027                     	ds	1
   370  000028                     spiConfig_1@spiSpeed:
   371                           	opt stack 0
   372  000028                     nrfSetRXAddr@i:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0x27
   376  000028                     	ds	2
   377  00002A                     tblptru	equ	0xFF8
   378                           tblptrh	equ	0xFF7
   379                           tblptrl	equ	0xFF6
   380                           tablat	equ	0xFF5
   381                           postinc0	equ	0xFEE
   382                           wreg	equ	0xFE8
   383                           postdec1	equ	0xFE5
   384                           fsr1l	equ	0xFE1
   385                           
   386                           ; 0 bytes @ 0x29
   387 ;;
   388 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   389 ;;
   390 ;; *************** function _main *****************
   391 ;; Defined at:
   392 ;;		line 202 in file "main.c"
   393 ;; Parameters:    Size  Location     Type
   394 ;;		None
   395 ;; Auto vars:     Size  Location     Type
   396 ;;  TXtime          2   18[BANK0 ] unsigned int 
   397 ;;  count           2   16[BANK0 ] int 
   398 ;; Return value:  Size  Location     Type
   399 ;;		None               void
   400 ;; Registers used:
   401 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   402 ;; Tracked objects:
   403 ;;		On entry : 0/0
   404 ;;		On exit  : 0/0
   405 ;;		Unchanged: 0/0
   406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   407 ;;      Params:         0       0       0       0
   408 ;;      Locals:         0       4       0       0
   409 ;;      Temps:          0       0       0       0
   410 ;;      Totals:         0       4       0       0
   411 ;;Total ram usage:        4 bytes
   412 ;; Hardware stack levels required when called:    5
   413 ;; This function calls:
   414 ;;		_delay10ms
   415 ;;		_intConfig
   416 ;;		_nrfConfig
   417 ;;		_nrfTXData
   418 ;;		_portConfig
   419 ;;		_spiConfig_1
   420 ;;		_spiTransfer
   421 ;; This function is called by:
   422 ;;		Startup code after reset
   423 ;; This function uses a non-reentrant model
   424 ;;
   425                           
   426                           	psect	text0
   427  0000A6                     __ptext0:
   428                           	opt stack 0
   429  0000A6                     _main:
   430                           	opt stack 26
   431                           
   432                           ;main.c: 205: portConfig();
   433                           
   434                           ;incstack = 0
   435  0000A6  ECE4  F003         	call	_portConfig	;wreg free
   436                           
   437                           ;main.c: 206: spiConfig_1(40);
   438  0000AA  0E00               	movlw	0
   439  0000AC  6E29               	movwf	spiConfig_1@spiSpeed+1,c
   440  0000AE  0E28               	movlw	40
   441  0000B0  6E28               	movwf	spiConfig_1@spiSpeed,c
   442  0000B2  EC6C  F002         	call	_spiConfig_1	;wreg free
   443                           
   444                           ;main.c: 207: nrfConfig();
   445  0000B6  ECAF  F001         	call	_nrfConfig	;wreg free
   446                           
   447                           ;main.c: 208: intConfig();
   448  0000BA  ECF1  F003         	call	_intConfig	;wreg free
   449                           
   450                           ;main.c: 210: delay10ms(1);
   451  0000BE  0E00               	movlw	0
   452  0000C0  6E21               	movwf	delay10ms@ms_multi+1,c
   453  0000C2  0E01               	movlw	1
   454  0000C4  6E20               	movwf	delay10ms@ms_multi,c
   455  0000C6  ECC6  F003         	call	_delay10ms	;wreg free
   456                           
   457                           ;main.c: 212: dataBufOut[1] = 0x48;
   458  0000CA  0E48               	movlw	72
   459  0000CC  0100               	movlb	0	; () banked
   460  0000CE  6F81               	movwf	(_dataBufOut+1)& (0+255),b
   461                           
   462                           ; BSR set to: 0
   463                           ;main.c: 213: dataBufOut[2] = 0x4F;
   464  0000D0  0E4F               	movlw	79
   465  0000D2  0100               	movlb	0	; () banked
   466  0000D4  6F82               	movwf	(_dataBufOut+2)& (0+255),b
   467                           
   468                           ; BSR set to: 0
   469                           ;main.c: 214: dataBufOut[3] = 88;
   470  0000D6  0E58               	movlw	88
   471  0000D8  0100               	movlb	0	; () banked
   472  0000DA  6F83               	movwf	(_dataBufOut+3)& (0+255),b
   473                           
   474                           ; BSR set to: 0
   475                           ;main.c: 215: dataBufOut[4] = 0x49;
   476  0000DC  0E49               	movlw	73
   477  0000DE  0100               	movlb	0	; () banked
   478  0000E0  6F84               	movwf	(_dataBufOut+4)& (0+255),b
   479                           
   480                           ; BSR set to: 0
   481                           ;main.c: 216: dataBufOut[5] = 0x5F;
   482  0000E2  0E5F               	movlw	95
   483  0000E4  0100               	movlb	0	; () banked
   484  0000E6  6F85               	movwf	(_dataBufOut+5)& (0+255),b
   485                           
   486                           ; BSR set to: 0
   487                           ;main.c: 217: dataBufOut[6] = 47;
   488  0000E8  0E2F               	movlw	47
   489  0000EA  0100               	movlb	0	; () banked
   490  0000EC  6F86               	movwf	(_dataBufOut+6)& (0+255),b
   491                           
   492                           ; BSR set to: 0
   493                           ;main.c: 218: dataBufOut[7] = 0x74;
   494  0000EE  0E74               	movlw	116
   495  0000F0  0100               	movlb	0	; () banked
   496  0000F2  6F87               	movwf	(_dataBufOut+7)& (0+255),b
   497                           
   498                           ; BSR set to: 0
   499                           ;main.c: 219: dataBufOut[8] = 0x6F;
   500  0000F4  0E6F               	movlw	111
   501  0000F6  0100               	movlb	0	; () banked
   502  0000F8  6F88               	movwf	(_dataBufOut+8)& (0+255),b
   503                           
   504                           ; BSR set to: 0
   505                           ;main.c: 220: dataBufOut[9] = 58;
   506  0000FA  0E3A               	movlw	58
   507  0000FC  0100               	movlb	0	; () banked
   508  0000FE  6F89               	movwf	(_dataBufOut+9)& (0+255),b
   509                           
   510                           ; BSR set to: 0
   511                           ;main.c: 221: dataBufOut[10] = 0xA8;
   512  000100  0EA8               	movlw	168
   513  000102  0100               	movlb	0	; () banked
   514  000104  6F8A               	movwf	(_dataBufOut+10)& (0+255),b
   515                           
   516                           ; BSR set to: 0
   517                           ;main.c: 222: dataBufOut[11] = 0x6F;
   518  000106  0E6F               	movlw	111
   519  000108  0100               	movlb	0	; () banked
   520  00010A  6F8B               	movwf	(_dataBufOut+11)& (0+255),b
   521                           
   522                           ; BSR set to: 0
   523                           ;main.c: 223: dataBufOut[12] = 99;
   524  00010C  0E63               	movlw	99
   525  00010E  0100               	movlb	0	; () banked
   526  000110  6F8C               	movwf	(_dataBufOut+12)& (0+255),b
   527                           
   528                           ; BSR set to: 0
   529                           ;main.c: 224: dataBufOut[13] = 0x88;
   530  000112  0E88               	movlw	136
   531  000114  0100               	movlb	0	; () banked
   532  000116  6F8D               	movwf	(_dataBufOut+13)& (0+255),b
   533                           
   534                           ; BSR set to: 0
   535                           ;main.c: 225: dataBufOut[14] = 0x5F;
   536  000118  0E5F               	movlw	95
   537  00011A  0100               	movlb	0	; () banked
   538  00011C  6F8E               	movwf	(_dataBufOut+14)& (0+255),b
   539                           
   540                           ; BSR set to: 0
   541                           ;main.c: 226: dataBufOut[15] = 72;
   542  00011E  0E48               	movlw	72
   543  000120  0100               	movlb	0	; () banked
   544  000122  6F8F               	movwf	(_dataBufOut+15)& (0+255),b
   545                           
   546                           ; BSR set to: 0
   547                           ;main.c: 227: dataBufOut[16] = 0x98;
   548  000124  0E98               	movlw	152
   549  000126  0100               	movlb	0	; () banked
   550  000128  6F90               	movwf	(_dataBufOut+16)& (0+255),b
   551                           
   552                           ; BSR set to: 0
   553                           ;main.c: 228: dataBufOut[17] = 0x6F;
   554  00012A  0E6F               	movlw	111
   555  00012C  0100               	movlb	0	; () banked
   556  00012E  6F91               	movwf	(_dataBufOut+17)& (0+255),b
   557                           
   558                           ; BSR set to: 0
   559                           ;main.c: 229: dataBufOut[18] = 92;
   560  000130  0E5C               	movlw	92
   561  000132  0100               	movlb	0	; () banked
   562  000134  6F92               	movwf	(_dataBufOut+18)& (0+255),b
   563                           
   564                           ; BSR set to: 0
   565                           ;main.c: 230: dataBufOut[19] = 0x4A;
   566  000136  0E4A               	movlw	74
   567  000138  0100               	movlb	0	; () banked
   568  00013A  6F93               	movwf	(_dataBufOut+19)& (0+255),b
   569                           
   570                           ; BSR set to: 0
   571                           ;main.c: 231: dataBufOut[20] = 0x6F;
   572  00013C  0E6F               	movlw	111
   573  00013E  0100               	movlb	0	; () banked
   574  000140  6F94               	movwf	(_dataBufOut+20)& (0+255),b
   575                           
   576                           ; BSR set to: 0
   577                           ;main.c: 232: dataBufOut[21] = 62;
   578  000142  0E3E               	movlw	62
   579  000144  0100               	movlb	0	; () banked
   580  000146  6F95               	movwf	(_dataBufOut+21)& (0+255),b
   581                           
   582                           ; BSR set to: 0
   583                           ;main.c: 233: dataBufOut[22] = 0x62;
   584  000148  0E62               	movlw	98
   585  00014A  0100               	movlb	0	; () banked
   586  00014C  6F96               	movwf	(_dataBufOut+22)& (0+255),b
   587                           
   588                           ; BSR set to: 0
   589                           ;main.c: 234: dataBufOut[23] = 0x6F;
   590  00014E  0E6F               	movlw	111
   591  000150  0100               	movlb	0	; () banked
   592  000152  6F97               	movwf	(_dataBufOut+23)& (0+255),b
   593                           
   594                           ; BSR set to: 0
   595                           ;main.c: 235: dataBufOut[24] = 82;
   596  000154  0E52               	movlw	82
   597  000156  0100               	movlb	0	; () banked
   598  000158  6F98               	movwf	(_dataBufOut+24)& (0+255),b
   599                           
   600                           ; BSR set to: 0
   601                           ;main.c: 236: dataBufOut[25] = 0x86;
   602  00015A  0E86               	movlw	134
   603  00015C  0100               	movlb	0	; () banked
   604  00015E  6F99               	movwf	(_dataBufOut+25)& (0+255),b
   605                           
   606                           ; BSR set to: 0
   607                           ;main.c: 237: dataBufOut[26] = 0x7F;
   608  000160  0E7F               	movlw	127
   609  000162  0100               	movlb	0	; () banked
   610  000164  6F9A               	movwf	(_dataBufOut+26)& (0+255),b
   611                           
   612                           ; BSR set to: 0
   613                           ;main.c: 238: dataBufOut[27] = 72;
   614  000166  0E48               	movlw	72
   615  000168  0100               	movlb	0	; () banked
   616  00016A  6F9B               	movwf	(_dataBufOut+27)& (0+255),b
   617                           
   618                           ; BSR set to: 0
   619                           ;main.c: 239: dataBufOut[28] = 102;
   620  00016C  0E66               	movlw	102
   621  00016E  0100               	movlb	0	; () banked
   622  000170  6F9C               	movwf	(_dataBufOut+28)& (0+255),b
   623                           
   624                           ; BSR set to: 0
   625                           ;main.c: 240: dataBufOut[29] = 0xC0;
   626  000172  0EC0               	movlw	192
   627  000174  0100               	movlb	0	; () banked
   628  000176  6F9D               	movwf	(_dataBufOut+29)& (0+255),b
   629                           
   630                           ; BSR set to: 0
   631                           ;main.c: 241: dataBufOut[30] = 0x5F;
   632  000178  0E5F               	movlw	95
   633  00017A  0100               	movlb	0	; () banked
   634  00017C  6F9E               	movwf	(_dataBufOut+30)& (0+255),b
   635                           
   636                           ; BSR set to: 0
   637                           ;main.c: 242: dataBufOut[31] = 122;
   638  00017E  0E7A               	movlw	122
   639  000180  0100               	movlb	0	; () banked
   640  000182  6F9F               	movwf	(_dataBufOut+31)& (0+255),b
   641                           
   642                           ; BSR set to: 0
   643                           ;main.c: 245: int count = 1;
   644  000184  0E00               	movlw	0
   645  000186  0100               	movlb	0	; () banked
   646  000188  6FB1               	movwf	(main@count+1)& (0+255),b
   647  00018A  0E01               	movlw	1
   648  00018C  0100               	movlb	0	; () banked
   649  00018E  6FB0               	movwf	main@count& (0+255),b
   650                           
   651                           ; BSR set to: 0
   652                           ;main.c: 246: unsigned int TXtime = 20000;
   653  000190  0E4E               	movlw	78
   654  000192  0100               	movlb	0	; () banked
   655  000194  6FB3               	movwf	(main@TXtime+1)& (0+255),b
   656  000196  0E20               	movlw	32
   657  000198  0100               	movlb	0	; () banked
   658  00019A  6FB2               	movwf	main@TXtime& (0+255),b
   659                           
   660                           ; BSR set to: 0
   661                           ;main.c: 249: dataBufOut[0] = 0b00110000;
   662  00019C  0E30               	movlw	48
   663  00019E  0100               	movlb	0	; () banked
   664  0001A0  6F80               	movwf	_dataBufOut& (0+255),b
   665                           
   666                           ; BSR set to: 0
   667                           ;main.c: 250: spiTransfer('w',0x07,1);
   668  0001A2  0E07               	movlw	7
   669  0001A4  6E22               	movwf	spiTransfer@command,c
   670  0001A6  0E00               	movlw	0
   671  0001A8  6E24               	movwf	spiTransfer@len+1,c
   672  0001AA  0E01               	movlw	1
   673  0001AC  6E23               	movwf	spiTransfer@len,c
   674  0001AE  0E77               	movlw	119
   675  0001B0  EC1D  F002         	call	_spiTransfer
   676  0001B4                     l97:
   677                           
   678                           ;main.c: 254: if (nrfInterrupt) {
   679  0001B4  503D               	movf	_nrfInterrupt,w,c	;volatile
   680  0001B6  B4D8               	btfsc	status,2,c
   681  0001B8  D010               	goto	l1624
   682                           
   683                           ;main.c: 257: dataBufOut[0] = 0b00110000;
   684  0001BA  0E30               	movlw	48
   685  0001BC  0100               	movlb	0	; () banked
   686  0001BE  6F80               	movwf	_dataBufOut& (0+255),b
   687                           
   688                           ; BSR set to: 0
   689                           ;main.c: 258: spiTransfer('w',0x07,1);
   690  0001C0  0E07               	movlw	7
   691  0001C2  6E22               	movwf	spiTransfer@command,c
   692  0001C4  0E00               	movlw	0
   693  0001C6  6E24               	movwf	spiTransfer@len+1,c
   694  0001C8  0E01               	movlw	1
   695  0001CA  6E23               	movwf	spiTransfer@len,c
   696  0001CC  0E77               	movlw	119
   697  0001CE  EC1D  F002         	call	_spiTransfer
   698                           
   699                           ;main.c: 260: nrfBusy = 0;
   700  0001D2  0E00               	movlw	0
   701  0001D4  6E3C               	movwf	_nrfBusy,c
   702                           
   703                           ;main.c: 261: nrfInterrupt = 0;
   704  0001D6  0E00               	movlw	0
   705  0001D8  6E3D               	movwf	_nrfInterrupt,c	;volatile
   706  0001DA                     l1624:
   707                           
   708                           ;main.c: 262: }
   709                           ;main.c: 264: if ((TXtime >= 12800) && (!nrfBusy)) {
   710  0001DA  0E00               	movlw	0
   711  0001DC  0100               	movlb	0	; () banked
   712  0001DE  5DB2               	subwf	main@TXtime& (0+255),w,b
   713  0001E0  0E32               	movlw	50
   714  0001E2  0100               	movlb	0	; () banked
   715  0001E4  59B3               	subwfb	(main@TXtime+1)& (0+255),w,b
   716  0001E6  A0D8               	btfss	status,0,c
   717  0001E8  D014               	goto	l99
   718                           
   719                           ; BSR set to: 0
   720  0001EA  663C               	tstfsz	_nrfBusy,c
   721  0001EC  D012               	goto	l99
   722                           
   723                           ; BSR set to: 0
   724                           ;main.c: 266: dataBufOut[0] = count;
   725  0001EE  C0B0  F080         	movff	main@count,_dataBufOut
   726                           
   727                           ; BSR set to: 0
   728                           ;main.c: 267: nrfTXData(5);
   729  0001F2  0E00               	movlw	0
   730  0001F4  6E23               	movwf	nrfTXData@len+1,c
   731  0001F6  0E05               	movlw	5
   732  0001F8  6E22               	movwf	nrfTXData@len,c
   733  0001FA  ECEE  F002         	call	_nrfTXData	;wreg free
   734                           
   735                           ;main.c: 268: count++;
   736  0001FE  0100               	movlb	0	; () banked
   737  000200  4BB0               	infsnz	main@count& (0+255),f,b
   738  000202  2BB1               	incf	(main@count+1)& (0+255),f,b
   739                           
   740                           ; BSR set to: 0
   741                           ;main.c: 269: TXtime = 0;
   742  000204  0E00               	movlw	0
   743  000206  0100               	movlb	0	; () banked
   744  000208  6FB3               	movwf	(main@TXtime+1)& (0+255),b
   745  00020A  0E00               	movlw	0
   746  00020C  0100               	movlb	0	; () banked
   747  00020E  6FB2               	movwf	main@TXtime& (0+255),b
   748                           
   749                           ;main.c: 270: } else if (!nrfBusy) {
   750  000210  D008               	goto	l100
   751  000212                     l99:
   752                           
   753                           ; BSR set to: 0
   754  000212  663C               	tstfsz	_nrfBusy,c
   755  000214  D006               	goto	l100
   756                           
   757                           ; BSR set to: 0
   758                           ;main.c: 272: LATAbits.LATA0 = 1;
   759  000216  8089               	bsf	3977,0,c	;volatile
   760                           
   761                           ; BSR set to: 0
   762                           ;main.c: 273: _delay((unsigned long)((20)*(64000000/4000000.0)));
   763  000218  0E6A               	movlw	106
   764  00021A                     u817:
   765  00021A  2EE8               	decfsz	wreg,f,c
   766  00021C  D7FE               	goto	u817
   767  00021E  D000               	nop2		;nop
   768                           
   769                           ;main.c: 274: LATAbits.LATA0 = 0;
   770  000220  9089               	bcf	3977,0,c	;volatile
   771  000222                     l100:
   772                           
   773                           ;main.c: 275: }
   774                           ;main.c: 277: _delay((unsigned long)((50)*(64000000/4000000.0)));
   775  000222  0EC8               	movlw	200
   776  000224                     u827:
   777  000224  F000               	nop	
   778  000226  2EE8               	decfsz	wreg,f,c
   779  000228  D7FD               	goto	u827
   780                           
   781                           ;main.c: 278: TXtime++;
   782  00022A  0100               	movlb	0	; () banked
   783  00022C  4BB2               	infsnz	main@TXtime& (0+255),f,b
   784  00022E  2BB3               	incf	(main@TXtime+1)& (0+255),f,b
   785                           
   786                           ;main.c: 279: }
   787  000230  D7C1               	goto	l97
   788  000232                     __end_of_main:
   789                           	opt stack 0
   790                           tblptru	equ	0xFF8
   791                           tblptrh	equ	0xFF7
   792                           tblptrl	equ	0xFF6
   793                           tablat	equ	0xFF5
   794                           postinc0	equ	0xFEE
   795                           wreg	equ	0xFE8
   796                           postdec1	equ	0xFE5
   797                           fsr1l	equ	0xFE1
   798                           status	equ	0xFD8
   799                           
   800 ;; *************** function _spiConfig_1 *****************
   801 ;; Defined at:
   802 ;;		line 343 in file "main.c"
   803 ;; Parameters:    Size  Location     Type
   804 ;;  spiSpeed        2   39[COMRAM] unsigned int 
   805 ;; Auto vars:     Size  Location     Type
   806 ;;  sspAddVal       2   14[BANK0 ] unsigned int 
   807 ;; Return value:  Size  Location     Type
   808 ;;		None               void
   809 ;; Registers used:
   810 ;;		wreg, status,2, status,0, cstack
   811 ;; Tracked objects:
   812 ;;		On entry : 0/0
   813 ;;		On exit  : 0/0
   814 ;;		Unchanged: 0/0
   815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   816 ;;      Params:         2       0       0       0
   817 ;;      Locals:         0       6       0       0
   818 ;;      Temps:          0       4       0       0
   819 ;;      Totals:         2      10       0       0
   820 ;;Total ram usage:       12 bytes
   821 ;; Hardware stack levels used:    1
   822 ;; Hardware stack levels required when called:    3
   823 ;; This function calls:
   824 ;;		___aldiv
   825 ;; This function is called by:
   826 ;;		_main
   827 ;; This function uses a non-reentrant model
   828 ;;
   829                           
   830                           	psect	text1
   831  0004D8                     __ptext1:
   832                           	opt stack 0
   833  0004D8                     _spiConfig_1:
   834                           	opt stack 27
   835                           
   836                           ;main.c: 345: SSP1CON1bits.CKP = 0;
   837                           
   838                           ; BSR set to: 0
   839                           ;incstack = 0
   840  0004D8  98C6               	bcf	4038,4,c	;volatile
   841                           
   842                           ;main.c: 346: SSP1STATbits.CKE = 1;
   843  0004DA  8CC7               	bsf	4039,6,c	;volatile
   844                           
   845                           ;main.c: 347: SSP1STATbits.SMP = 1;
   846  0004DC  8EC7               	bsf	4039,7,c	;volatile
   847                           
   848                           ;main.c: 350: unsigned int sspAddVal = (((64000000/100000)/spiSpeed)/4)-1;
   849  0004DE  C028  F024         	movff	spiConfig_1@spiSpeed,___aldiv@divisor
   850  0004E2  C029  F025         	movff	spiConfig_1@spiSpeed+1,___aldiv@divisor+1
   851  0004E6  6A26               	clrf	___aldiv@divisor+2,c
   852  0004E8  6A27               	clrf	___aldiv@divisor+3,c
   853  0004EA  0E80               	movlw	128
   854  0004EC  6E20               	movwf	___aldiv@dividend,c
   855  0004EE  0E02               	movlw	2
   856  0004F0  6E21               	movwf	___aldiv@dividend+1,c
   857  0004F2  0E00               	movlw	0
   858  0004F4  6E22               	movwf	___aldiv@dividend+2,c
   859  0004F6  0E00               	movlw	0
   860  0004F8  6E23               	movwf	___aldiv@dividend+3,c
   861  0004FA  EC19  F001         	call	___aldiv	;wreg free
   862  0004FE  C020  F0AA         	movff	?___aldiv,_spiConfig_1$1492
   863  000502  C021  F0AB         	movff	?___aldiv+1,_spiConfig_1$1492+1
   864  000506  C022  F0AC         	movff	?___aldiv+2,_spiConfig_1$1492+2
   865  00050A  C023  F0AD         	movff	?___aldiv+3,_spiConfig_1$1492+3
   866                           
   867                           ;main.c: 350: unsigned int sspAddVal = (((64000000/100000)/spiSpeed)/4)-1;
   868  00050E  C0AA  F020         	movff	_spiConfig_1$1492,___aldiv@dividend
   869  000512  C0AB  F021         	movff	_spiConfig_1$1492+1,___aldiv@dividend+1
   870  000516  C0AC  F022         	movff	_spiConfig_1$1492+2,___aldiv@dividend+2
   871  00051A  C0AD  F023         	movff	_spiConfig_1$1492+3,___aldiv@dividend+3
   872  00051E  0E04               	movlw	4
   873  000520  6E24               	movwf	___aldiv@divisor,c
   874  000522  0E00               	movlw	0
   875  000524  6E25               	movwf	___aldiv@divisor+1,c
   876  000526  0E00               	movlw	0
   877  000528  6E26               	movwf	___aldiv@divisor+2,c
   878  00052A  0E00               	movlw	0
   879  00052C  6E27               	movwf	___aldiv@divisor+3,c
   880  00052E  EC19  F001         	call	___aldiv	;wreg free
   881  000532  C020  F0A6         	movff	?___aldiv,??_spiConfig_1
   882  000536  C021  F0A7         	movff	?___aldiv+1,??_spiConfig_1+1
   883  00053A  C022  F0A8         	movff	?___aldiv+2,??_spiConfig_1+2
   884  00053E  C023  F0A9         	movff	?___aldiv+3,??_spiConfig_1+3
   885  000542  0EFF               	movlw	255
   886  000544  0100               	movlb	0	; () banked
   887  000546  25A6               	addwf	??_spiConfig_1& (0+255),w,b
   888  000548  0100               	movlb	0	; () banked
   889  00054A  6FAE               	movwf	spiConfig_1@sspAddVal& (0+255),b
   890  00054C  0EFF               	movlw	255
   891  00054E  0100               	movlb	0	; () banked
   892  000550  21A7               	addwfc	(??_spiConfig_1+1)& (0+255),w,b
   893  000552  0100               	movlb	0	; () banked
   894  000554  6FAF               	movwf	(spiConfig_1@sspAddVal+1)& (0+255),b
   895                           
   896                           ; BSR set to: 0
   897                           ;main.c: 351: SSP1ADD = sspAddVal;
   898  000556  C0AE  FFC8         	movff	spiConfig_1@sspAddVal,4040	;volatile
   899                           
   900                           ; BSR set to: 0
   901                           ;main.c: 352: SSP1CON1bits.SSPM = 0b1010;
   902  00055A  50C6               	movf	4038,w,c	;volatile
   903  00055C  0BF0               	andlw	-16
   904  00055E  090A               	iorlw	10
   905  000560  6EC6               	movwf	4038,c	;volatile
   906                           
   907                           ; BSR set to: 0
   908                           ;main.c: 354: SSP1CON1bits.SSPEN = 1;
   909  000562  8AC6               	bsf	4038,5,c	;volatile
   910                           
   911                           ; BSR set to: 0
   912                           ;main.c: 356: LATAbits.LATA2 = 1;
   913  000564  8489               	bsf	3977,2,c	;volatile
   914                           
   915                           ; BSR set to: 0
   916  000566  0012               	return	
   917  000568                     __end_of_spiConfig_1:
   918                           	opt stack 0
   919                           tblptru	equ	0xFF8
   920                           tblptrh	equ	0xFF7
   921                           tblptrl	equ	0xFF6
   922                           tablat	equ	0xFF5
   923                           postinc0	equ	0xFEE
   924                           wreg	equ	0xFE8
   925                           postdec1	equ	0xFE5
   926                           fsr1l	equ	0xFE1
   927                           status	equ	0xFD8
   928                           
   929 ;; *************** function ___aldiv *****************
   930 ;; Defined at:
   931 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\aldiv.c"
   932 ;; Parameters:    Size  Location     Type
   933 ;;  dividend        4   31[COMRAM] long 
   934 ;;  divisor         4   35[COMRAM] long 
   935 ;; Auto vars:     Size  Location     Type
   936 ;;  quotient        4    2[BANK0 ] long 
   937 ;;  sign            1    1[BANK0 ] unsigned char 
   938 ;;  counter         1    0[BANK0 ] unsigned char 
   939 ;; Return value:  Size  Location     Type
   940 ;;                  4   31[COMRAM] long 
   941 ;; Registers used:
   942 ;;		wreg, status,2, status,0
   943 ;; Tracked objects:
   944 ;;		On entry : 0/0
   945 ;;		On exit  : 0/0
   946 ;;		Unchanged: 0/0
   947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   948 ;;      Params:         8       0       0       0
   949 ;;      Locals:         0       6       0       0
   950 ;;      Temps:          0       0       0       0
   951 ;;      Totals:         8       6       0       0
   952 ;;Total ram usage:       14 bytes
   953 ;; Hardware stack levels used:    1
   954 ;; Hardware stack levels required when called:    2
   955 ;; This function calls:
   956 ;;		Nothing
   957 ;; This function is called by:
   958 ;;		_spiConfig_1
   959 ;; This function uses a non-reentrant model
   960 ;;
   961                           
   962                           	psect	text2
   963  000232                     __ptext2:
   964                           	opt stack 0
   965  000232                     ___aldiv:
   966                           	opt stack 27
   967                           
   968                           ; BSR set to: 0
   969                           ;incstack = 0
   970  000232  0E00               	movlw	0
   971  000234  0100               	movlb	0	; () banked
   972  000236  6FA1               	movwf	___aldiv@sign& (0+255),b
   973                           
   974                           ; BSR set to: 0
   975  000238  5027               	movf	___aldiv@divisor+3,w,c
   976  00023A  0A80               	xorlw	128
   977  00023C  0F80               	addlw	128
   978  00023E  E108               	bnz	u685
   979  000240  0E00               	movlw	0
   980  000242  5C26               	subwf	___aldiv@divisor+2,w,c
   981  000244  E105               	bnz	u685
   982  000246  0E00               	movlw	0
   983  000248  5C25               	subwf	___aldiv@divisor+1,w,c
   984  00024A  E102               	bnz	u685
   985  00024C  0E00               	movlw	0
   986  00024E  5C24               	subwf	___aldiv@divisor,w,c
   987  000250                     u685:
   988  000250  B0D8               	btfsc	status,0,c
   989  000252  D00B               	goto	l1444
   990                           
   991                           ; BSR set to: 0
   992  000254  1E27               	comf	___aldiv@divisor+3,f,c
   993  000256  1E26               	comf	___aldiv@divisor+2,f,c
   994  000258  1E25               	comf	___aldiv@divisor+1,f,c
   995  00025A  6C24               	negf	___aldiv@divisor,c
   996  00025C  0E00               	movlw	0
   997  00025E  2225               	addwfc	___aldiv@divisor+1,f,c
   998  000260  2226               	addwfc	___aldiv@divisor+2,f,c
   999  000262  2227               	addwfc	___aldiv@divisor+3,f,c
  1000                           
  1001                           ; BSR set to: 0
  1002  000264  0E01               	movlw	1
  1003  000266  0100               	movlb	0	; () banked
  1004  000268  6FA1               	movwf	___aldiv@sign& (0+255),b
  1005  00026A                     l1444:
  1006                           
  1007                           ; BSR set to: 0
  1008  00026A  5023               	movf	___aldiv@dividend+3,w,c
  1009  00026C  0A80               	xorlw	128
  1010  00026E  0F80               	addlw	128
  1011  000270  E108               	bnz	u695
  1012  000272  0E00               	movlw	0
  1013  000274  5C22               	subwf	___aldiv@dividend+2,w,c
  1014  000276  E105               	bnz	u695
  1015  000278  0E00               	movlw	0
  1016  00027A  5C21               	subwf	___aldiv@dividend+1,w,c
  1017  00027C  E102               	bnz	u695
  1018  00027E  0E00               	movlw	0
  1019  000280  5C20               	subwf	___aldiv@dividend,w,c
  1020  000282                     u695:
  1021  000282  B0D8               	btfsc	status,0,c
  1022  000284  D00B               	goto	l1450
  1023                           
  1024                           ; BSR set to: 0
  1025  000286  1E23               	comf	___aldiv@dividend+3,f,c
  1026  000288  1E22               	comf	___aldiv@dividend+2,f,c
  1027  00028A  1E21               	comf	___aldiv@dividend+1,f,c
  1028  00028C  6C20               	negf	___aldiv@dividend,c
  1029  00028E  0E00               	movlw	0
  1030  000290  2221               	addwfc	___aldiv@dividend+1,f,c
  1031  000292  2222               	addwfc	___aldiv@dividend+2,f,c
  1032  000294  2223               	addwfc	___aldiv@dividend+3,f,c
  1033                           
  1034                           ; BSR set to: 0
  1035  000296  0E01               	movlw	1
  1036  000298  0100               	movlb	0	; () banked
  1037  00029A  1BA1               	xorwf	___aldiv@sign& (0+255),f,b
  1038  00029C                     l1450:
  1039                           
  1040                           ; BSR set to: 0
  1041  00029C  0E00               	movlw	0
  1042  00029E  0100               	movlb	0	; () banked
  1043  0002A0  6FA2               	movwf	___aldiv@quotient& (0+255),b
  1044  0002A2  0E00               	movlw	0
  1045  0002A4  0100               	movlb	0	; () banked
  1046  0002A6  6FA3               	movwf	(___aldiv@quotient+1)& (0+255),b
  1047  0002A8  0E00               	movlw	0
  1048  0002AA  0100               	movlb	0	; () banked
  1049  0002AC  6FA4               	movwf	(___aldiv@quotient+2)& (0+255),b
  1050  0002AE  0E00               	movlw	0
  1051  0002B0  0100               	movlb	0	; () banked
  1052  0002B2  6FA5               	movwf	(___aldiv@quotient+3)& (0+255),b
  1053                           
  1054                           ; BSR set to: 0
  1055  0002B4  5027               	movf	___aldiv@divisor+3,w,c
  1056  0002B6  1024               	iorwf	___aldiv@divisor,w,c
  1057  0002B8  1025               	iorwf	___aldiv@divisor+1,w,c
  1058  0002BA  1026               	iorwf	___aldiv@divisor+2,w,c
  1059  0002BC  B4D8               	btfsc	status,2,c
  1060  0002BE  D033               	goto	l1472
  1061                           
  1062                           ; BSR set to: 0
  1063  0002C0  0E01               	movlw	1
  1064  0002C2  0100               	movlb	0	; () banked
  1065  0002C4  6FA0               	movwf	___aldiv@counter& (0+255),b
  1066  0002C6  D007               	goto	l1458
  1067  0002C8                     l1456:
  1068                           
  1069                           ; BSR set to: 0
  1070  0002C8  90D8               	bcf	status,0,c
  1071  0002CA  3624               	rlcf	___aldiv@divisor,f,c
  1072  0002CC  3625               	rlcf	___aldiv@divisor+1,f,c
  1073  0002CE  3626               	rlcf	___aldiv@divisor+2,f,c
  1074  0002D0  3627               	rlcf	___aldiv@divisor+3,f,c
  1075  0002D2  0100               	movlb	0	; () banked
  1076  0002D4  2BA0               	incf	___aldiv@counter& (0+255),f,b
  1077  0002D6                     l1458:
  1078                           
  1079                           ; BSR set to: 0
  1080  0002D6  AE27               	btfss	___aldiv@divisor+3,7,c
  1081  0002D8  D7F7               	goto	l1456
  1082  0002DA                     l1460:
  1083                           
  1084                           ; BSR set to: 0
  1085  0002DA  0100               	movlb	0	; () banked
  1086  0002DC  90D8               	bcf	status,0,c
  1087  0002DE  0100               	movlb	0	; () banked
  1088  0002E0  37A2               	rlcf	___aldiv@quotient& (0+255),f,b
  1089  0002E2  0100               	movlb	0	; () banked
  1090  0002E4  37A3               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  1091  0002E6  0100               	movlb	0	; () banked
  1092  0002E8  37A4               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  1093  0002EA  0100               	movlb	0	; () banked
  1094  0002EC  37A5               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  1095                           
  1096                           ; BSR set to: 0
  1097  0002EE  5024               	movf	___aldiv@divisor,w,c
  1098  0002F0  5C20               	subwf	___aldiv@dividend,w,c
  1099  0002F2  5025               	movf	___aldiv@divisor+1,w,c
  1100  0002F4  5821               	subwfb	___aldiv@dividend+1,w,c
  1101  0002F6  5026               	movf	___aldiv@divisor+2,w,c
  1102  0002F8  5822               	subwfb	___aldiv@dividend+2,w,c
  1103  0002FA  5027               	movf	___aldiv@divisor+3,w,c
  1104  0002FC  5823               	subwfb	___aldiv@dividend+3,w,c
  1105  0002FE  A0D8               	btfss	status,0,c
  1106  000300  D00A               	goto	l1468
  1107                           
  1108                           ; BSR set to: 0
  1109  000302  5024               	movf	___aldiv@divisor,w,c
  1110  000304  5E20               	subwf	___aldiv@dividend,f,c
  1111  000306  5025               	movf	___aldiv@divisor+1,w,c
  1112  000308  5A21               	subwfb	___aldiv@dividend+1,f,c
  1113  00030A  5026               	movf	___aldiv@divisor+2,w,c
  1114  00030C  5A22               	subwfb	___aldiv@dividend+2,f,c
  1115  00030E  5027               	movf	___aldiv@divisor+3,w,c
  1116  000310  5A23               	subwfb	___aldiv@dividend+3,f,c
  1117                           
  1118                           ; BSR set to: 0
  1119  000312  0100               	movlb	0	; () banked
  1120  000314  81A2               	bsf	___aldiv@quotient& (0+255),0,b
  1121  000316                     l1468:
  1122                           
  1123                           ; BSR set to: 0
  1124  000316  90D8               	bcf	status,0,c
  1125  000318  3227               	rrcf	___aldiv@divisor+3,f,c
  1126  00031A  3226               	rrcf	___aldiv@divisor+2,f,c
  1127  00031C  3225               	rrcf	___aldiv@divisor+1,f,c
  1128  00031E  3224               	rrcf	___aldiv@divisor,f,c
  1129                           
  1130                           ; BSR set to: 0
  1131  000320  0100               	movlb	0	; () banked
  1132  000322  2FA0               	decfsz	___aldiv@counter& (0+255),f,b
  1133  000324  D7DA               	goto	l1460
  1134  000326                     l1472:
  1135                           
  1136                           ; BSR set to: 0
  1137  000326  0100               	movlb	0	; () banked
  1138  000328  51A1               	movf	___aldiv@sign& (0+255),w,b
  1139  00032A  B4D8               	btfsc	status,2,c
  1140  00032C  D00F               	goto	l1476
  1141                           
  1142                           ; BSR set to: 0
  1143  00032E  0100               	movlb	0	; () banked
  1144  000330  1FA5               	comf	(___aldiv@quotient+3)& (0+255),f,b
  1145  000332  0100               	movlb	0	; () banked
  1146  000334  1FA4               	comf	(___aldiv@quotient+2)& (0+255),f,b
  1147  000336  0100               	movlb	0	; () banked
  1148  000338  1FA3               	comf	(___aldiv@quotient+1)& (0+255),f,b
  1149  00033A  0100               	movlb	0	; () banked
  1150  00033C  6DA2               	negf	___aldiv@quotient& (0+255),b
  1151  00033E  0E00               	movlw	0
  1152  000340  0100               	movlb	0	; () banked
  1153  000342  23A3               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  1154  000344  0100               	movlb	0	; () banked
  1155  000346  23A4               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  1156  000348  0100               	movlb	0	; () banked
  1157  00034A  23A5               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  1158  00034C                     l1476:
  1159                           
  1160                           ; BSR set to: 0
  1161  00034C  C0A2  F020         	movff	___aldiv@quotient,?___aldiv
  1162  000350  C0A3  F021         	movff	___aldiv@quotient+1,?___aldiv+1
  1163  000354  C0A4  F022         	movff	___aldiv@quotient+2,?___aldiv+2
  1164  000358  C0A5  F023         	movff	___aldiv@quotient+3,?___aldiv+3
  1165  00035C  0012               	return	
  1166  00035E                     __end_of___aldiv:
  1167                           	opt stack 0
  1168                           tblptru	equ	0xFF8
  1169                           tblptrh	equ	0xFF7
  1170                           tblptrl	equ	0xFF6
  1171                           tablat	equ	0xFF5
  1172                           postinc0	equ	0xFEE
  1173                           wreg	equ	0xFE8
  1174                           postdec1	equ	0xFE5
  1175                           fsr1l	equ	0xFE1
  1176                           status	equ	0xFD8
  1177                           
  1178 ;; *************** function _portConfig *****************
  1179 ;; Defined at:
  1180 ;;		line 327 in file "main.c"
  1181 ;; Parameters:    Size  Location     Type
  1182 ;;		None
  1183 ;; Auto vars:     Size  Location     Type
  1184 ;;		None
  1185 ;; Return value:  Size  Location     Type
  1186 ;;		None               void
  1187 ;; Registers used:
  1188 ;;		wreg, status,2
  1189 ;; Tracked objects:
  1190 ;;		On entry : 0/0
  1191 ;;		On exit  : 0/0
  1192 ;;		Unchanged: 0/0
  1193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1194 ;;      Params:         0       0       0       0
  1195 ;;      Locals:         0       0       0       0
  1196 ;;      Temps:          0       0       0       0
  1197 ;;      Totals:         0       0       0       0
  1198 ;;Total ram usage:        0 bytes
  1199 ;; Hardware stack levels used:    1
  1200 ;; Hardware stack levels required when called:    2
  1201 ;; This function calls:
  1202 ;;		Nothing
  1203 ;; This function is called by:
  1204 ;;		_main
  1205 ;; This function uses a non-reentrant model
  1206 ;;
  1207                           
  1208                           	psect	text3
  1209  0007C8                     __ptext3:
  1210                           	opt stack 0
  1211  0007C8                     _portConfig:
  1212                           	opt stack 28
  1213                           
  1214                           ;main.c: 328: TRISA = 0b00000000;
  1215                           
  1216                           ; BSR set to: 0
  1217                           ;incstack = 0
  1218  0007C8  0E00               	movlw	0
  1219  0007CA  6E92               	movwf	3986,c	;volatile
  1220                           
  1221                           ;main.c: 329: TRISB = 0b00010000;
  1222  0007CC  0E10               	movlw	16
  1223  0007CE  6E93               	movwf	3987,c	;volatile
  1224                           
  1225                           ;main.c: 330: TRISC = 0b00010000;
  1226  0007D0  0E10               	movlw	16
  1227  0007D2  6E94               	movwf	3988,c	;volatile
  1228                           
  1229                           ;main.c: 332: LATA = 0b00000100;
  1230  0007D4  0E04               	movlw	4
  1231  0007D6  6E89               	movwf	3977,c	;volatile
  1232                           
  1233                           ;main.c: 333: LATB = 0x00;
  1234  0007D8  0E00               	movlw	0
  1235  0007DA  6E8A               	movwf	3978,c	;volatile
  1236                           
  1237                           ;main.c: 334: LATC = 0x00;
  1238  0007DC  0E00               	movlw	0
  1239  0007DE  6E8B               	movwf	3979,c	;volatile
  1240  0007E0  0012               	return	
  1241  0007E2                     __end_of_portConfig:
  1242                           	opt stack 0
  1243                           tblptru	equ	0xFF8
  1244                           tblptrh	equ	0xFF7
  1245                           tblptrl	equ	0xFF6
  1246                           tablat	equ	0xFF5
  1247                           postinc0	equ	0xFEE
  1248                           wreg	equ	0xFE8
  1249                           postdec1	equ	0xFE5
  1250                           fsr1l	equ	0xFE1
  1251                           status	equ	0xFD8
  1252                           
  1253 ;; *************** function _nrfTXData *****************
  1254 ;; Defined at:
  1255 ;;		line 528 in file "main.c"
  1256 ;; Parameters:    Size  Location     Type
  1257 ;;  len             2   33[COMRAM] int 
  1258 ;; Auto vars:     Size  Location     Type
  1259 ;;  i               2   36[COMRAM] int 
  1260 ;; Return value:  Size  Location     Type
  1261 ;;		None               void
  1262 ;; Registers used:
  1263 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1264 ;; Tracked objects:
  1265 ;;		On entry : 0/0
  1266 ;;		On exit  : 0/0
  1267 ;;		Unchanged: 0/0
  1268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1269 ;;      Params:         2       0       0       0
  1270 ;;      Locals:         2       0       0       0
  1271 ;;      Temps:          1       0       0       0
  1272 ;;      Totals:         5       0       0       0
  1273 ;;Total ram usage:        5 bytes
  1274 ;; Hardware stack levels used:    1
  1275 ;; Hardware stack levels required when called:    3
  1276 ;; This function calls:
  1277 ;;		_setCSN
  1278 ;;		_spiTransferByte
  1279 ;; This function is called by:
  1280 ;;		_main
  1281 ;; This function uses a non-reentrant model
  1282 ;;
  1283                           
  1284                           	psect	text4
  1285  0005DC                     __ptext4:
  1286                           	opt stack 0
  1287  0005DC                     _nrfTXData:
  1288                           	opt stack 27
  1289                           
  1290                           ;main.c: 530: setCSN(0);
  1291                           
  1292                           ;incstack = 0
  1293  0005DC  0E00               	movlw	0
  1294  0005DE  6E21               	movwf	setCSN@level+1,c
  1295  0005E0  0E00               	movlw	0
  1296  0005E2  6E20               	movwf	setCSN@level,c
  1297  0005E4  EC0B  F004         	call	_setCSN	;wreg free
  1298                           
  1299                           ;main.c: 532: spiTransferByte(0xA0);
  1300  0005E8  0EA0               	movlw	160
  1301  0005EA  EC03  F004         	call	_spiTransferByte
  1302                           
  1303                           ;main.c: 534: if (len != 0) {
  1304  0005EE  5023               	movf	nrfTXData@len+1,w,c
  1305  0005F0  1022               	iorwf	nrfTXData@len,w,c
  1306  0005F2  B4D8               	btfsc	status,2,c
  1307  0005F4  D01C               	goto	l1526
  1308                           
  1309                           ;main.c: 535: for (int i=0;i<len;i++) {
  1310  0005F6  0E00               	movlw	0
  1311  0005F8  6E26               	movwf	nrfTXData@i+1,c
  1312  0005FA  0E00               	movlw	0
  1313  0005FC  6E25               	movwf	nrfTXData@i,c
  1314  0005FE  D00D               	goto	l1524
  1315  000600                     l1520:
  1316                           
  1317                           ;main.c: 536: spiTransferByte(dataBufOut[i]);
  1318  000600  0100               	movlb	0	; () banked
  1319  000602  0E80               	movlw	low _dataBufOut
  1320  000604  2425               	addwf	nrfTXData@i,w,c
  1321  000606  6ED9               	movwf	fsr2l,c
  1322  000608  0100               	movlb	0	; () banked
  1323  00060A  0E00               	movlw	high _dataBufOut
  1324  00060C  2026               	addwfc	nrfTXData@i+1,w,c
  1325  00060E  6EDA               	movwf	fsr2h,c
  1326  000610  50DF               	movf	indf2,w,c
  1327  000612  EC03  F004         	call	_spiTransferByte
  1328  000616  4A25               	infsnz	nrfTXData@i,f,c
  1329  000618  2A26               	incf	nrfTXData@i+1,f,c
  1330  00061A                     l1524:
  1331  00061A  5026               	movf	nrfTXData@i+1,w,c
  1332  00061C  0A80               	xorlw	128
  1333  00061E  6E24               	movwf	??_nrfTXData& (0+255),c
  1334  000620  5022               	movf	nrfTXData@len,w,c
  1335  000622  5C25               	subwf	nrfTXData@i,w,c
  1336  000624  5023               	movf	nrfTXData@len+1,w,c
  1337  000626  0A80               	xorlw	128
  1338  000628  5824               	subwfb	??_nrfTXData& (0+255),w,c
  1339  00062A  A0D8               	btfss	status,0,c
  1340  00062C  D7E9               	goto	l1520
  1341  00062E                     l1526:
  1342                           
  1343                           ;main.c: 537: }
  1344                           ;main.c: 538: }
  1345                           ;main.c: 540: setCSN(1);
  1346  00062E  0E00               	movlw	0
  1347  000630  6E21               	movwf	setCSN@level+1,c
  1348  000632  0E01               	movlw	1
  1349  000634  6E20               	movwf	setCSN@level,c
  1350  000636  EC0B  F004         	call	_setCSN	;wreg free
  1351                           
  1352                           ;main.c: 543: LATAbits.LATA1 = 1;
  1353  00063A  8289               	bsf	3977,1,c	;volatile
  1354                           
  1355                           ;main.c: 544: _delay((unsigned long)((12)*(64000000/4000000.0)));
  1356  00063C  0E40               	movlw	64
  1357  00063E                     u837:
  1358  00063E  2EE8               	decfsz	wreg,f,c
  1359  000640  D7FE               	goto	u837
  1360                           
  1361                           ;main.c: 545: LATAbits.LATA1 = 0;
  1362  000642  9289               	bcf	3977,1,c	;volatile
  1363                           
  1364                           ;main.c: 551: nrfBusy = 1;
  1365  000644  0E01               	movlw	1
  1366  000646  6E3C               	movwf	_nrfBusy,c
  1367  000648  0012               	return	
  1368  00064A                     __end_of_nrfTXData:
  1369                           	opt stack 0
  1370                           tblptru	equ	0xFF8
  1371                           tblptrh	equ	0xFF7
  1372                           tblptrl	equ	0xFF6
  1373                           tablat	equ	0xFF5
  1374                           postinc0	equ	0xFEE
  1375                           wreg	equ	0xFE8
  1376                           postdec1	equ	0xFE5
  1377                           fsr1l	equ	0xFE1
  1378                           indf2	equ	0xFDF
  1379                           fsr2h	equ	0xFDA
  1380                           fsr2l	equ	0xFD9
  1381                           status	equ	0xFD8
  1382                           
  1383 ;; *************** function _nrfConfig *****************
  1384 ;; Defined at:
  1385 ;;		line 362 in file "main.c"
  1386 ;; Parameters:    Size  Location     Type
  1387 ;;		None
  1388 ;; Auto vars:     Size  Location     Type
  1389 ;;		None
  1390 ;; Return value:  Size  Location     Type
  1391 ;;		None               void
  1392 ;; Registers used:
  1393 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1394 ;; Tracked objects:
  1395 ;;		On entry : 0/0
  1396 ;;		On exit  : 0/0
  1397 ;;		Unchanged: 0/0
  1398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1399 ;;      Params:         0       0       0       0
  1400 ;;      Locals:         0       0       0       0
  1401 ;;      Temps:          0       0       0       0
  1402 ;;      Totals:         0       0       0       0
  1403 ;;Total ram usage:        0 bytes
  1404 ;; Hardware stack levels used:    1
  1405 ;; Hardware stack levels required when called:    4
  1406 ;; This function calls:
  1407 ;;		_nrfConfigReg
  1408 ;;		_nrfSetRXAddr
  1409 ;;		_nrfSetTXAddr
  1410 ;;		_spiTransfer
  1411 ;; This function is called by:
  1412 ;;		_main
  1413 ;; This function uses a non-reentrant model
  1414 ;;
  1415                           
  1416                           	psect	text5
  1417  00035E                     __ptext5:
  1418                           	opt stack 0
  1419  00035E                     _nrfConfig:
  1420                           	opt stack 26
  1421                           
  1422                           ;main.c: 365: nrfConfigReg('w',0x00,CONFIG_CURR);
  1423                           
  1424                           ;incstack = 0
  1425  00035E  0E00               	movlw	0
  1426  000360  6E22               	movwf	nrfConfigReg@command,c
  1427  000362  C02A  F023         	movff	_CONFIG_CURR,nrfConfigReg@data
  1428  000366  0E77               	movlw	119
  1429  000368  EC83  F003         	call	_nrfConfigReg
  1430                           
  1431                           ;main.c: 367: nrfConfigReg('w',0x01,EN_AA_CURR);
  1432  00036C  0E01               	movlw	1
  1433  00036E  6E22               	movwf	nrfConfigReg@command,c
  1434  000370  C03B  F023         	movff	_EN_AA_CURR,nrfConfigReg@data
  1435  000374  0E77               	movlw	119
  1436  000376  EC83  F003         	call	_nrfConfigReg
  1437                           
  1438                           ;main.c: 369: nrfConfigReg('w',0x02,EN_RXADDR_CURR);
  1439  00037A  0E02               	movlw	2
  1440  00037C  6E22               	movwf	nrfConfigReg@command,c
  1441  00037E  C02C  F023         	movff	_EN_RXADDR_CURR,nrfConfigReg@data
  1442  000382  0E77               	movlw	119
  1443  000384  EC83  F003         	call	_nrfConfigReg
  1444                           
  1445                           ;main.c: 371: nrfConfigReg('w',0x03,SETUP_AW_CURR);
  1446  000388  0E03               	movlw	3
  1447  00038A  6E22               	movwf	nrfConfigReg@command,c
  1448  00038C  C031  F023         	movff	_SETUP_AW_CURR,nrfConfigReg@data
  1449  000390  0E77               	movlw	119
  1450  000392  EC83  F003         	call	_nrfConfigReg
  1451                           
  1452                           ;main.c: 373: nrfConfigReg('w',0x04,SETUP_RETR_CURR);
  1453  000396  0E04               	movlw	4
  1454  000398  6E22               	movwf	nrfConfigReg@command,c
  1455  00039A  C032  F023         	movff	_SETUP_RETR_CURR,nrfConfigReg@data
  1456  00039E  0E77               	movlw	119
  1457  0003A0  EC83  F003         	call	_nrfConfigReg
  1458                           
  1459                           ;main.c: 375: nrfConfigReg('w',0x05,RF_CH_CURR);
  1460  0003A4  0E05               	movlw	5
  1461  0003A6  6E22               	movwf	nrfConfigReg@command,c
  1462  0003A8  C02E  F023         	movff	_RF_CH_CURR,nrfConfigReg@data
  1463  0003AC  0E77               	movlw	119
  1464  0003AE  EC83  F003         	call	_nrfConfigReg
  1465                           
  1466                           ;main.c: 377: nrfConfigReg('w',0x06,RF_SETUP_CURR);
  1467  0003B2  0E06               	movlw	6
  1468  0003B4  6E22               	movwf	nrfConfigReg@command,c
  1469  0003B6  C02F  F023         	movff	_RF_SETUP_CURR,nrfConfigReg@data
  1470  0003BA  0E77               	movlw	119
  1471  0003BC  EC83  F003         	call	_nrfConfigReg
  1472                           
  1473                           ;main.c: 379: nrfSetRXAddr(0x0A,RX_ADDRESS,4);
  1474  0003C0  0E00               	movlw	high _RX_ADDRESS
  1475  0003C2  6E23               	movwf	nrfSetRXAddr@addr+1,c
  1476  0003C4  0E33               	movlw	low _RX_ADDRESS
  1477  0003C6  6E22               	movwf	nrfSetRXAddr@addr,c
  1478  0003C8  0E00               	movlw	0
  1479  0003CA  6E25               	movwf	nrfSetRXAddr@len+1,c
  1480  0003CC  0E04               	movlw	4
  1481  0003CE  6E24               	movwf	nrfSetRXAddr@len,c
  1482  0003D0  0E0A               	movlw	10
  1483  0003D2  EC25  F003         	call	_nrfSetRXAddr
  1484                           
  1485                           ;main.c: 381: nrfSetTXAddr(TX_ADDRESS,4);
  1486  0003D6  0E00               	movlw	high _TX_ADDRESS
  1487  0003D8  6E23               	movwf	nrfSetTXAddr@addr+1,c
  1488  0003DA  0E37               	movlw	low _TX_ADDRESS
  1489  0003DC  6E22               	movwf	nrfSetTXAddr@addr,c
  1490  0003DE  0E00               	movlw	0
  1491  0003E0  6E25               	movwf	nrfSetTXAddr@len+1,c
  1492  0003E2  0E04               	movlw	4
  1493  0003E4  6E24               	movwf	nrfSetTXAddr@len,c
  1494  0003E6  EC55  F003         	call	_nrfSetTXAddr	;wreg free
  1495                           
  1496                           ;main.c: 383: nrfConfigReg('w',0x11,RX_PW_P0_CURR);
  1497  0003EA  0E11               	movlw	17
  1498  0003EC  6E22               	movwf	nrfConfigReg@command,c
  1499  0003EE  C030  F023         	movff	_RX_PW_P0_CURR,nrfConfigReg@data
  1500  0003F2  0E77               	movlw	119
  1501  0003F4  EC83  F003         	call	_nrfConfigReg
  1502                           
  1503                           ;main.c: 385: nrfConfigReg('w',0x1C,DYNPD_CURR);
  1504  0003F8  0E1C               	movlw	28
  1505  0003FA  6E22               	movwf	nrfConfigReg@command,c
  1506  0003FC  C02B  F023         	movff	_DYNPD_CURR,nrfConfigReg@data
  1507  000400  0E77               	movlw	119
  1508  000402  EC83  F003         	call	_nrfConfigReg
  1509                           
  1510                           ;main.c: 387: nrfConfigReg('w',0x1D,FEATURE_CURR);
  1511  000406  0E1D               	movlw	29
  1512  000408  6E22               	movwf	nrfConfigReg@command,c
  1513  00040A  C02D  F023         	movff	_FEATURE_CURR,nrfConfigReg@data
  1514  00040E  0E77               	movlw	119
  1515  000410  EC83  F003         	call	_nrfConfigReg
  1516                           
  1517                           ;main.c: 389: spiTransfer('n',0xE1,0);
  1518  000414  0EE1               	movlw	225
  1519  000416  6E22               	movwf	spiTransfer@command,c
  1520  000418  0E00               	movlw	0
  1521  00041A  6E24               	movwf	spiTransfer@len+1,c
  1522  00041C  0E00               	movlw	0
  1523  00041E  6E23               	movwf	spiTransfer@len,c
  1524  000420  0E6E               	movlw	110
  1525  000422  EC1D  F002         	call	_spiTransfer
  1526                           
  1527                           ;main.c: 391: spiTransfer('n',0xE2,0);
  1528  000426  0EE2               	movlw	226
  1529  000428  6E22               	movwf	spiTransfer@command,c
  1530  00042A  0E00               	movlw	0
  1531  00042C  6E24               	movwf	spiTransfer@len+1,c
  1532  00042E  0E00               	movlw	0
  1533  000430  6E23               	movwf	spiTransfer@len,c
  1534  000432  0E6E               	movlw	110
  1535  000434  EC1D  F002         	call	_spiTransfer
  1536  000438  0012               	return	
  1537  00043A                     __end_of_nrfConfig:
  1538                           	opt stack 0
  1539                           tblptru	equ	0xFF8
  1540                           tblptrh	equ	0xFF7
  1541                           tblptrl	equ	0xFF6
  1542                           tablat	equ	0xFF5
  1543                           postinc0	equ	0xFEE
  1544                           wreg	equ	0xFE8
  1545                           postdec1	equ	0xFE5
  1546                           fsr1l	equ	0xFE1
  1547                           indf2	equ	0xFDF
  1548                           fsr2h	equ	0xFDA
  1549                           fsr2l	equ	0xFD9
  1550                           status	equ	0xFD8
  1551                           
  1552 ;; *************** function _spiTransfer *****************
  1553 ;; Defined at:
  1554 ;;		line 490 in file "main.c"
  1555 ;; Parameters:    Size  Location     Type
  1556 ;;  wrn             1    wreg     unsigned char 
  1557 ;;  command         1   33[COMRAM] unsigned char 
  1558 ;;  len             2   34[COMRAM] int 
  1559 ;; Auto vars:     Size  Location     Type
  1560 ;;  wrn             1   37[COMRAM] unsigned char 
  1561 ;;  i               2   38[COMRAM] int 
  1562 ;; Return value:  Size  Location     Type
  1563 ;;		None               void
  1564 ;; Registers used:
  1565 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1566 ;; Tracked objects:
  1567 ;;		On entry : 0/0
  1568 ;;		On exit  : 0/0
  1569 ;;		Unchanged: 0/0
  1570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1571 ;;      Params:         3       0       0       0
  1572 ;;      Locals:         3       0       0       0
  1573 ;;      Temps:          1       0       0       0
  1574 ;;      Totals:         7       0       0       0
  1575 ;;Total ram usage:        7 bytes
  1576 ;; Hardware stack levels used:    1
  1577 ;; Hardware stack levels required when called:    3
  1578 ;; This function calls:
  1579 ;;		_setCSN
  1580 ;;		_spiTransferByte
  1581 ;; This function is called by:
  1582 ;;		_main
  1583 ;;		_nrfConfig
  1584 ;; This function uses a non-reentrant model
  1585 ;;
  1586                           
  1587                           	psect	text6
  1588  00043A                     __ptext6:
  1589                           	opt stack 0
  1590  00043A                     _spiTransfer:
  1591                           	opt stack 27
  1592                           
  1593                           ;incstack = 0
  1594                           ;spiTransfer@wrn stored from wreg
  1595  00043A  6E26               	movwf	spiTransfer@wrn,c
  1596                           
  1597                           ;main.c: 492: setCSN(0);
  1598  00043C  0E00               	movlw	0
  1599  00043E  6E21               	movwf	setCSN@level+1,c
  1600  000440  0E00               	movlw	0
  1601  000442  6E20               	movwf	setCSN@level,c
  1602  000444  EC0B  F004         	call	_setCSN	;wreg free
  1603                           
  1604                           ;main.c: 494: if (wrn == 'w') {
  1605  000448  5026               	movf	spiTransfer@wrn,w,c
  1606  00044A  0A77               	xorlw	119
  1607  00044C  A4D8               	btfss	status,2,c
  1608  00044E  D005               	goto	l1370
  1609                           
  1610                           ;main.c: 495: spiTransferByte(0x20|command);
  1611  000450  5022               	movf	spiTransfer@command,w,c
  1612  000452  0920               	iorlw	32
  1613  000454  EC03  F004         	call	_spiTransferByte
  1614                           
  1615                           ;main.c: 496: } else if (wrn == 'r') {
  1616  000458  D00F               	goto	l1378
  1617  00045A                     l1370:
  1618  00045A  5026               	movf	spiTransfer@wrn,w,c
  1619  00045C  0A72               	xorlw	114
  1620  00045E  A4D8               	btfss	status,2,c
  1621  000460  D004               	goto	l1374
  1622                           
  1623                           ;main.c: 497: spiTransferByte(0x00|command);
  1624  000462  5022               	movf	spiTransfer@command,w,c
  1625  000464  EC03  F004         	call	_spiTransferByte
  1626                           
  1627                           ;main.c: 498: } else if(wrn == 'n') {
  1628  000468  D007               	goto	l1378
  1629  00046A                     l1374:
  1630  00046A  5026               	movf	spiTransfer@wrn,w,c
  1631  00046C  0A6E               	xorlw	110
  1632  00046E  A4D8               	btfss	status,2,c
  1633  000470  D003               	goto	l1378
  1634                           
  1635                           ;main.c: 499: spiTransferByte(command);
  1636  000472  5022               	movf	spiTransfer@command,w,c
  1637  000474  EC03  F004         	call	_spiTransferByte
  1638  000478                     l1378:
  1639                           
  1640                           ;main.c: 500: }
  1641                           ;main.c: 502: if (len != 0) {
  1642  000478  5024               	movf	spiTransfer@len+1,w,c
  1643  00047A  1023               	iorwf	spiTransfer@len,w,c
  1644  00047C  B4D8               	btfsc	status,2,c
  1645  00047E  D025               	goto	l1388
  1646                           
  1647                           ;main.c: 503: for (int i=0;i<len;i++) {
  1648  000480  0E00               	movlw	0
  1649  000482  6E28               	movwf	spiTransfer@i+1,c
  1650  000484  0E00               	movlw	0
  1651  000486  6E27               	movwf	spiTransfer@i,c
  1652  000488  D016               	goto	l1386
  1653  00048A                     l1382:
  1654                           
  1655                           ;main.c: 504: dataBufIn[i] = spiTransferByte(dataBufOut[i]);
  1656  00048A  0100               	movlb	0	; () banked
  1657  00048C  0E60               	movlw	low _dataBufIn
  1658  00048E  2427               	addwf	spiTransfer@i,w,c
  1659  000490  6ED9               	movwf	fsr2l,c
  1660  000492  0100               	movlb	0	; () banked
  1661  000494  0E00               	movlw	high _dataBufIn
  1662  000496  2028               	addwfc	spiTransfer@i+1,w,c
  1663  000498  6EDA               	movwf	fsr2h,c
  1664  00049A  0100               	movlb	0	; () banked
  1665  00049C  0E80               	movlw	low _dataBufOut
  1666  00049E  2427               	addwf	spiTransfer@i,w,c
  1667  0004A0  6EE1               	movwf	fsr1l,c
  1668  0004A2  0100               	movlb	0	; () banked
  1669  0004A4  0E00               	movlw	high _dataBufOut
  1670  0004A6  2028               	addwfc	spiTransfer@i+1,w,c
  1671  0004A8  6EE2               	movwf	fsr1h,c
  1672  0004AA  50E7               	movf	indf1,w,c
  1673  0004AC  EC03  F004         	call	_spiTransferByte
  1674  0004B0  6EDF               	movwf	indf2,c
  1675  0004B2  4A27               	infsnz	spiTransfer@i,f,c
  1676  0004B4  2A28               	incf	spiTransfer@i+1,f,c
  1677  0004B6                     l1386:
  1678  0004B6  5028               	movf	spiTransfer@i+1,w,c
  1679  0004B8  0A80               	xorlw	128
  1680  0004BA  6E25               	movwf	??_spiTransfer& (0+255),c
  1681  0004BC  5023               	movf	spiTransfer@len,w,c
  1682  0004BE  5C27               	subwf	spiTransfer@i,w,c
  1683  0004C0  5024               	movf	spiTransfer@len+1,w,c
  1684  0004C2  0A80               	xorlw	128
  1685  0004C4  5825               	subwfb	??_spiTransfer& (0+255),w,c
  1686  0004C6  A0D8               	btfss	status,0,c
  1687  0004C8  D7E0               	goto	l1382
  1688  0004CA                     l1388:
  1689                           
  1690                           ;main.c: 505: }
  1691                           ;main.c: 506: }
  1692                           ;main.c: 508: setCSN(1);
  1693  0004CA  0E00               	movlw	0
  1694  0004CC  6E21               	movwf	setCSN@level+1,c
  1695  0004CE  0E01               	movlw	1
  1696  0004D0  6E20               	movwf	setCSN@level,c
  1697  0004D2  EC0B  F004         	call	_setCSN	;wreg free
  1698  0004D6  0012               	return	
  1699  0004D8                     __end_of_spiTransfer:
  1700                           	opt stack 0
  1701                           tblptru	equ	0xFF8
  1702                           tblptrh	equ	0xFF7
  1703                           tblptrl	equ	0xFF6
  1704                           tablat	equ	0xFF5
  1705                           postinc0	equ	0xFEE
  1706                           wreg	equ	0xFE8
  1707                           indf1	equ	0xFE7
  1708                           postdec1	equ	0xFE5
  1709                           fsr1h	equ	0xFE2
  1710                           fsr1l	equ	0xFE1
  1711                           indf2	equ	0xFDF
  1712                           fsr2h	equ	0xFDA
  1713                           fsr2l	equ	0xFD9
  1714                           status	equ	0xFD8
  1715                           
  1716 ;; *************** function _nrfSetTXAddr *****************
  1717 ;; Defined at:
  1718 ;;		line 444 in file "main.c"
  1719 ;; Parameters:    Size  Location     Type
  1720 ;;  addr            2   33[COMRAM] PTR unsigned char 
  1721 ;;		 -> TX_ADDRESS(4), 
  1722 ;;  len             2   35[COMRAM] int 
  1723 ;; Auto vars:     Size  Location     Type
  1724 ;;  i               2   38[COMRAM] int 
  1725 ;; Return value:  Size  Location     Type
  1726 ;;		None               void
  1727 ;; Registers used:
  1728 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1729 ;; Tracked objects:
  1730 ;;		On entry : 0/0
  1731 ;;		On exit  : 0/0
  1732 ;;		Unchanged: 0/0
  1733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1734 ;;      Params:         4       0       0       0
  1735 ;;      Locals:         2       0       0       0
  1736 ;;      Temps:          1       0       0       0
  1737 ;;      Totals:         7       0       0       0
  1738 ;;Total ram usage:        7 bytes
  1739 ;; Hardware stack levels used:    1
  1740 ;; Hardware stack levels required when called:    3
  1741 ;; This function calls:
  1742 ;;		_setCSN
  1743 ;;		_spiTransferByte
  1744 ;; This function is called by:
  1745 ;;		_nrfConfig
  1746 ;; This function uses a non-reentrant model
  1747 ;;
  1748                           
  1749                           	psect	text7
  1750  0006AA                     __ptext7:
  1751                           	opt stack 0
  1752  0006AA                     _nrfSetTXAddr:
  1753                           	opt stack 26
  1754                           
  1755                           ;main.c: 446: setCSN(0);
  1756                           
  1757                           ;incstack = 0
  1758  0006AA  0E00               	movlw	0
  1759  0006AC  6E21               	movwf	setCSN@level+1,c
  1760  0006AE  0E00               	movlw	0
  1761  0006B0  6E20               	movwf	setCSN@level,c
  1762  0006B2  EC0B  F004         	call	_setCSN	;wreg free
  1763                           
  1764                           ;main.c: 448: spiTransferByte(0x20|0x10);
  1765  0006B6  0E30               	movlw	48
  1766  0006B8  EC03  F004         	call	_spiTransferByte
  1767                           
  1768                           ;main.c: 450: if (len != 0) {
  1769  0006BC  5025               	movf	nrfSetTXAddr@len+1,w,c
  1770  0006BE  1024               	iorwf	nrfSetTXAddr@len,w,c
  1771  0006C0  B4D8               	btfsc	status,2,c
  1772  0006C2  D01A               	goto	l1434
  1773                           
  1774                           ;main.c: 452: for (int i=0;i<len;i++) {
  1775  0006C4  0E00               	movlw	0
  1776  0006C6  6E28               	movwf	nrfSetTXAddr@i+1,c
  1777  0006C8  0E00               	movlw	0
  1778  0006CA  6E27               	movwf	nrfSetTXAddr@i,c
  1779  0006CC  D00B               	goto	l1432
  1780  0006CE                     l1428:
  1781                           
  1782                           ;main.c: 453: spiTransferByte(addr[i]);
  1783  0006CE  5027               	movf	nrfSetTXAddr@i,w,c
  1784  0006D0  2422               	addwf	nrfSetTXAddr@addr,w,c
  1785  0006D2  6ED9               	movwf	fsr2l,c
  1786  0006D4  5028               	movf	nrfSetTXAddr@i+1,w,c
  1787  0006D6  2023               	addwfc	nrfSetTXAddr@addr+1,w,c
  1788  0006D8  6EDA               	movwf	fsr2h,c
  1789  0006DA  50DF               	movf	indf2,w,c
  1790  0006DC  EC03  F004         	call	_spiTransferByte
  1791  0006E0  4A27               	infsnz	nrfSetTXAddr@i,f,c
  1792  0006E2  2A28               	incf	nrfSetTXAddr@i+1,f,c
  1793  0006E4                     l1432:
  1794  0006E4  5028               	movf	nrfSetTXAddr@i+1,w,c
  1795  0006E6  0A80               	xorlw	128
  1796  0006E8  6E26               	movwf	??_nrfSetTXAddr& (0+255),c
  1797  0006EA  5024               	movf	nrfSetTXAddr@len,w,c
  1798  0006EC  5C27               	subwf	nrfSetTXAddr@i,w,c
  1799  0006EE  5025               	movf	nrfSetTXAddr@len+1,w,c
  1800  0006F0  0A80               	xorlw	128
  1801  0006F2  5826               	subwfb	??_nrfSetTXAddr& (0+255),w,c
  1802  0006F4  A0D8               	btfss	status,0,c
  1803  0006F6  D7EB               	goto	l1428
  1804  0006F8                     l1434:
  1805                           
  1806                           ;main.c: 454: }
  1807                           ;main.c: 455: }
  1808                           ;main.c: 457: setCSN(1);
  1809  0006F8  0E00               	movlw	0
  1810  0006FA  6E21               	movwf	setCSN@level+1,c
  1811  0006FC  0E01               	movlw	1
  1812  0006FE  6E20               	movwf	setCSN@level,c
  1813  000700  EC0B  F004         	call	_setCSN	;wreg free
  1814  000704  0012               	return	
  1815  000706                     __end_of_nrfSetTXAddr:
  1816                           	opt stack 0
  1817                           tblptru	equ	0xFF8
  1818                           tblptrh	equ	0xFF7
  1819                           tblptrl	equ	0xFF6
  1820                           tablat	equ	0xFF5
  1821                           postinc0	equ	0xFEE
  1822                           wreg	equ	0xFE8
  1823                           indf1	equ	0xFE7
  1824                           postdec1	equ	0xFE5
  1825                           fsr1h	equ	0xFE2
  1826                           fsr1l	equ	0xFE1
  1827                           indf2	equ	0xFDF
  1828                           fsr2h	equ	0xFDA
  1829                           fsr2l	equ	0xFD9
  1830                           status	equ	0xFD8
  1831                           
  1832 ;; *************** function _nrfSetRXAddr *****************
  1833 ;; Defined at:
  1834 ;;		line 466 in file "main.c"
  1835 ;; Parameters:    Size  Location     Type
  1836 ;;  pipe            1    wreg     unsigned char 
  1837 ;;  addr            2   33[COMRAM] PTR unsigned char 
  1838 ;;		 -> RX_ADDRESS(4), 
  1839 ;;  len             2   35[COMRAM] int 
  1840 ;; Auto vars:     Size  Location     Type
  1841 ;;  pipe            1   38[COMRAM] unsigned char 
  1842 ;;  i               2   39[COMRAM] int 
  1843 ;; Return value:  Size  Location     Type
  1844 ;;		None               void
  1845 ;; Registers used:
  1846 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1847 ;; Tracked objects:
  1848 ;;		On entry : 0/0
  1849 ;;		On exit  : 0/0
  1850 ;;		Unchanged: 0/0
  1851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1852 ;;      Params:         4       0       0       0
  1853 ;;      Locals:         3       0       0       0
  1854 ;;      Temps:          1       0       0       0
  1855 ;;      Totals:         8       0       0       0
  1856 ;;Total ram usage:        8 bytes
  1857 ;; Hardware stack levels used:    1
  1858 ;; Hardware stack levels required when called:    3
  1859 ;; This function calls:
  1860 ;;		_setCSN
  1861 ;;		_spiTransferByte
  1862 ;; This function is called by:
  1863 ;;		_nrfConfig
  1864 ;; This function uses a non-reentrant model
  1865 ;;
  1866                           
  1867                           	psect	text8
  1868  00064A                     __ptext8:
  1869                           	opt stack 0
  1870  00064A                     _nrfSetRXAddr:
  1871                           	opt stack 26
  1872                           
  1873                           ;incstack = 0
  1874                           ;nrfSetRXAddr@pipe stored from wreg
  1875  00064A  6E27               	movwf	nrfSetRXAddr@pipe,c
  1876                           
  1877                           ;main.c: 468: setCSN(0);
  1878  00064C  0E00               	movlw	0
  1879  00064E  6E21               	movwf	setCSN@level+1,c
  1880  000650  0E00               	movlw	0
  1881  000652  6E20               	movwf	setCSN@level,c
  1882  000654  EC0B  F004         	call	_setCSN	;wreg free
  1883                           
  1884                           ;main.c: 470: spiTransferByte(0x20|pipe);
  1885  000658  5027               	movf	nrfSetRXAddr@pipe,w,c
  1886  00065A  0920               	iorlw	32
  1887  00065C  EC03  F004         	call	_spiTransferByte
  1888                           
  1889                           ;main.c: 472: if (len != 0) {
  1890  000660  5025               	movf	nrfSetRXAddr@len+1,w,c
  1891  000662  1024               	iorwf	nrfSetRXAddr@len,w,c
  1892  000664  B4D8               	btfsc	status,2,c
  1893  000666  D01A               	goto	l1418
  1894                           
  1895                           ;main.c: 474: for (int i=0;i<len;i++) {
  1896  000668  0E00               	movlw	0
  1897  00066A  6E29               	movwf	nrfSetRXAddr@i+1,c
  1898  00066C  0E00               	movlw	0
  1899  00066E  6E28               	movwf	nrfSetRXAddr@i,c
  1900  000670  D00B               	goto	l1416
  1901  000672                     l1412:
  1902                           
  1903                           ;main.c: 475: spiTransferByte(addr[i]);
  1904  000672  5028               	movf	nrfSetRXAddr@i,w,c
  1905  000674  2422               	addwf	nrfSetRXAddr@addr,w,c
  1906  000676  6ED9               	movwf	fsr2l,c
  1907  000678  5029               	movf	nrfSetRXAddr@i+1,w,c
  1908  00067A  2023               	addwfc	nrfSetRXAddr@addr+1,w,c
  1909  00067C  6EDA               	movwf	fsr2h,c
  1910  00067E  50DF               	movf	indf2,w,c
  1911  000680  EC03  F004         	call	_spiTransferByte
  1912  000684  4A28               	infsnz	nrfSetRXAddr@i,f,c
  1913  000686  2A29               	incf	nrfSetRXAddr@i+1,f,c
  1914  000688                     l1416:
  1915  000688  5029               	movf	nrfSetRXAddr@i+1,w,c
  1916  00068A  0A80               	xorlw	128
  1917  00068C  6E26               	movwf	??_nrfSetRXAddr& (0+255),c
  1918  00068E  5024               	movf	nrfSetRXAddr@len,w,c
  1919  000690  5C28               	subwf	nrfSetRXAddr@i,w,c
  1920  000692  5025               	movf	nrfSetRXAddr@len+1,w,c
  1921  000694  0A80               	xorlw	128
  1922  000696  5826               	subwfb	??_nrfSetRXAddr& (0+255),w,c
  1923  000698  A0D8               	btfss	status,0,c
  1924  00069A  D7EB               	goto	l1412
  1925  00069C                     l1418:
  1926                           
  1927                           ;main.c: 476: }
  1928                           ;main.c: 477: }
  1929                           ;main.c: 479: setCSN(1);
  1930  00069C  0E00               	movlw	0
  1931  00069E  6E21               	movwf	setCSN@level+1,c
  1932  0006A0  0E01               	movlw	1
  1933  0006A2  6E20               	movwf	setCSN@level,c
  1934  0006A4  EC0B  F004         	call	_setCSN	;wreg free
  1935  0006A8  0012               	return	
  1936  0006AA                     __end_of_nrfSetRXAddr:
  1937                           	opt stack 0
  1938                           tblptru	equ	0xFF8
  1939                           tblptrh	equ	0xFF7
  1940                           tblptrl	equ	0xFF6
  1941                           tablat	equ	0xFF5
  1942                           postinc0	equ	0xFEE
  1943                           wreg	equ	0xFE8
  1944                           indf1	equ	0xFE7
  1945                           postdec1	equ	0xFE5
  1946                           fsr1h	equ	0xFE2
  1947                           fsr1l	equ	0xFE1
  1948                           indf2	equ	0xFDF
  1949                           fsr2h	equ	0xFDA
  1950                           fsr2l	equ	0xFD9
  1951                           status	equ	0xFD8
  1952                           
  1953 ;; *************** function _nrfConfigReg *****************
  1954 ;; Defined at:
  1955 ;;		line 422 in file "main.c"
  1956 ;; Parameters:    Size  Location     Type
  1957 ;;  wr              1    wreg     unsigned char 
  1958 ;;  command         1   33[COMRAM] unsigned char 
  1959 ;;  data            1   34[COMRAM] unsigned char 
  1960 ;; Auto vars:     Size  Location     Type
  1961 ;;  wr              1   35[COMRAM] unsigned char 
  1962 ;; Return value:  Size  Location     Type
  1963 ;;                  1    wreg      unsigned char 
  1964 ;; Registers used:
  1965 ;;		wreg, status,2, status,0, cstack
  1966 ;; Tracked objects:
  1967 ;;		On entry : 0/0
  1968 ;;		On exit  : 0/0
  1969 ;;		Unchanged: 0/0
  1970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1971 ;;      Params:         2       0       0       0
  1972 ;;      Locals:         1       0       0       0
  1973 ;;      Temps:          0       0       0       0
  1974 ;;      Totals:         3       0       0       0
  1975 ;;Total ram usage:        3 bytes
  1976 ;; Hardware stack levels used:    1
  1977 ;; Hardware stack levels required when called:    3
  1978 ;; This function calls:
  1979 ;;		_setCSN
  1980 ;;		_spiTransferByte
  1981 ;; This function is called by:
  1982 ;;		_nrfConfig
  1983 ;; This function uses a non-reentrant model
  1984 ;;
  1985                           
  1986                           	psect	text9
  1987  000706                     __ptext9:
  1988                           	opt stack 0
  1989  000706                     _nrfConfigReg:
  1990                           	opt stack 26
  1991                           
  1992                           ;incstack = 0
  1993                           ;nrfConfigReg@wr stored from wreg
  1994  000706  6E24               	movwf	nrfConfigReg@wr,c
  1995                           
  1996                           ;main.c: 424: setCSN(0);
  1997  000708  0E00               	movlw	0
  1998  00070A  6E21               	movwf	setCSN@level+1,c
  1999  00070C  0E00               	movlw	0
  2000  00070E  6E20               	movwf	setCSN@level,c
  2001  000710  EC0B  F004         	call	_setCSN	;wreg free
  2002                           
  2003                           ;main.c: 426: if (wr == 'w') {
  2004  000714  5024               	movf	nrfConfigReg@wr,w,c
  2005  000716  0A77               	xorlw	119
  2006  000718  A4D8               	btfss	status,2,c
  2007  00071A  D008               	goto	l1398
  2008                           
  2009                           ;main.c: 427: spiTransferByte(0x20|command);
  2010  00071C  5022               	movf	nrfConfigReg@command,w,c
  2011  00071E  0920               	iorlw	32
  2012  000720  EC03  F004         	call	_spiTransferByte
  2013                           
  2014                           ;main.c: 428: spiTransferByte(data);
  2015  000724  5023               	movf	nrfConfigReg@data,w,c
  2016  000726  EC03  F004         	call	_spiTransferByte
  2017                           
  2018                           ;main.c: 429: } else if (wr == 'r') {
  2019  00072A  D00B               	goto	l1402
  2020  00072C                     l1398:
  2021  00072C  5024               	movf	nrfConfigReg@wr,w,c
  2022  00072E  0A72               	xorlw	114
  2023  000730  A4D8               	btfss	status,2,c
  2024  000732  D007               	goto	l1402
  2025                           
  2026                           ;main.c: 430: spiTransferByte(0x00|command);
  2027  000734  5022               	movf	nrfConfigReg@command,w,c
  2028  000736  EC03  F004         	call	_spiTransferByte
  2029                           
  2030                           ;main.c: 431: data = spiTransferByte(0xFF);
  2031  00073A  0EFF               	movlw	255
  2032  00073C  EC03  F004         	call	_spiTransferByte
  2033  000740  6E23               	movwf	nrfConfigReg@data,c
  2034  000742                     l1402:
  2035                           
  2036                           ;main.c: 432: }
  2037                           ;main.c: 434: setCSN(1);
  2038  000742  0E00               	movlw	0
  2039  000744  6E21               	movwf	setCSN@level+1,c
  2040  000746  0E01               	movlw	1
  2041  000748  6E20               	movwf	setCSN@level,c
  2042  00074A  EC0B  F004         	call	_setCSN	;wreg free
  2043  00074E  0012               	return	
  2044  000750                     __end_of_nrfConfigReg:
  2045                           	opt stack 0
  2046                           tblptru	equ	0xFF8
  2047                           tblptrh	equ	0xFF7
  2048                           tblptrl	equ	0xFF6
  2049                           tablat	equ	0xFF5
  2050                           postinc0	equ	0xFEE
  2051                           wreg	equ	0xFE8
  2052                           indf1	equ	0xFE7
  2053                           postdec1	equ	0xFE5
  2054                           fsr1h	equ	0xFE2
  2055                           fsr1l	equ	0xFE1
  2056                           indf2	equ	0xFDF
  2057                           fsr2h	equ	0xFDA
  2058                           fsr2l	equ	0xFD9
  2059                           status	equ	0xFD8
  2060                           
  2061 ;; *************** function _spiTransferByte *****************
  2062 ;; Defined at:
  2063 ;;		line 514 in file "main.c"
  2064 ;; Parameters:    Size  Location     Type
  2065 ;;  data            1    wreg     unsigned char 
  2066 ;; Auto vars:     Size  Location     Type
  2067 ;;  data            1   31[COMRAM] unsigned char 
  2068 ;; Return value:  Size  Location     Type
  2069 ;;                  1    wreg      unsigned char 
  2070 ;; Registers used:
  2071 ;;		wreg, status,2
  2072 ;; Tracked objects:
  2073 ;;		On entry : 0/0
  2074 ;;		On exit  : 0/0
  2075 ;;		Unchanged: 0/0
  2076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2077 ;;      Params:         0       0       0       0
  2078 ;;      Locals:         1       0       0       0
  2079 ;;      Temps:          0       0       0       0
  2080 ;;      Totals:         1       0       0       0
  2081 ;;Total ram usage:        1 bytes
  2082 ;; Hardware stack levels used:    1
  2083 ;; Hardware stack levels required when called:    2
  2084 ;; This function calls:
  2085 ;;		Nothing
  2086 ;; This function is called by:
  2087 ;;		_nrfConfigReg
  2088 ;;		_nrfSetTXAddr
  2089 ;;		_nrfSetRXAddr
  2090 ;;		_spiTransfer
  2091 ;;		_nrfTXData
  2092 ;;		_nrfGetStatus
  2093 ;; This function uses a non-reentrant model
  2094 ;;
  2095                           
  2096                           	psect	text10
  2097  000806                     __ptext10:
  2098                           	opt stack 0
  2099  000806                     _spiTransferByte:
  2100                           	opt stack 27
  2101                           
  2102                           ;incstack = 0
  2103                           ;spiTransferByte@data stored from wreg
  2104  000806  6E20               	movwf	spiTransferByte@data,c
  2105                           
  2106                           ;main.c: 516: SSP1BUF = data;
  2107  000808  C020  FFC9         	movff	spiTransferByte@data,4041	;volatile
  2108  00080C                     l166:
  2109  00080C  A69E               	btfss	3998,3,c	;volatile
  2110  00080E  D7FE               	goto	l166
  2111                           
  2112                           ;main.c: 519: PIR1bits.SSP1IF = 0;
  2113  000810  969E               	bcf	3998,3,c	;volatile
  2114                           
  2115                           ;main.c: 521: return SSP1BUF;
  2116  000812  50C9               	movf	4041,w,c	;volatile
  2117  000814  0012               	return	
  2118  000816                     __end_of_spiTransferByte:
  2119                           	opt stack 0
  2120                           tblptru	equ	0xFF8
  2121                           tblptrh	equ	0xFF7
  2122                           tblptrl	equ	0xFF6
  2123                           tablat	equ	0xFF5
  2124                           postinc0	equ	0xFEE
  2125                           wreg	equ	0xFE8
  2126                           indf1	equ	0xFE7
  2127                           postdec1	equ	0xFE5
  2128                           fsr1h	equ	0xFE2
  2129                           fsr1l	equ	0xFE1
  2130                           indf2	equ	0xFDF
  2131                           fsr2h	equ	0xFDA
  2132                           fsr2l	equ	0xFD9
  2133                           status	equ	0xFD8
  2134                           
  2135 ;; *************** function _setCSN *****************
  2136 ;; Defined at:
  2137 ;;		line 397 in file "main.c"
  2138 ;; Parameters:    Size  Location     Type
  2139 ;;  level           2   31[COMRAM] int 
  2140 ;; Auto vars:     Size  Location     Type
  2141 ;;		None
  2142 ;; Return value:  Size  Location     Type
  2143 ;;		None               void
  2144 ;; Registers used:
  2145 ;;		wreg, status,2, status,0
  2146 ;; Tracked objects:
  2147 ;;		On entry : 0/0
  2148 ;;		On exit  : 0/0
  2149 ;;		Unchanged: 0/0
  2150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2151 ;;      Params:         2       0       0       0
  2152 ;;      Locals:         0       0       0       0
  2153 ;;      Temps:          0       0       0       0
  2154 ;;      Totals:         2       0       0       0
  2155 ;;Total ram usage:        2 bytes
  2156 ;; Hardware stack levels used:    1
  2157 ;; Hardware stack levels required when called:    2
  2158 ;; This function calls:
  2159 ;;		Nothing
  2160 ;; This function is called by:
  2161 ;;		_nrfConfigReg
  2162 ;;		_nrfSetTXAddr
  2163 ;;		_nrfSetRXAddr
  2164 ;;		_spiTransfer
  2165 ;;		_nrfTXData
  2166 ;;		_nrfGetStatus
  2167 ;; This function uses a non-reentrant model
  2168 ;;
  2169                           
  2170                           	psect	text11
  2171  000816                     __ptext11:
  2172                           	opt stack 0
  2173  000816                     _setCSN:
  2174                           	opt stack 27
  2175                           
  2176                           ;main.c: 399: if (level == 1) {
  2177                           
  2178                           ;incstack = 0
  2179  000816  0420               	decf	setCSN@level,w,c
  2180  000818  1021               	iorwf	setCSN@level+1,w,c
  2181  00081A  A4D8               	btfss	status,2,c
  2182  00081C  D002               	goto	l126
  2183                           
  2184                           ;main.c: 400: LATAbits.LATA2 = 1;
  2185  00081E  8489               	bsf	3977,2,c	;volatile
  2186                           
  2187                           ;main.c: 401: } else {
  2188  000820  0012               	return	
  2189  000822                     l126:
  2190                           
  2191                           ;main.c: 402: LATAbits.LATA2 = 0;
  2192  000822  9489               	bcf	3977,2,c	;volatile
  2193  000824  0012               	return	
  2194  000826                     __end_of_setCSN:
  2195                           	opt stack 0
  2196                           tblptru	equ	0xFF8
  2197                           tblptrh	equ	0xFF7
  2198                           tblptrl	equ	0xFF6
  2199                           tablat	equ	0xFF5
  2200                           postinc0	equ	0xFEE
  2201                           wreg	equ	0xFE8
  2202                           indf1	equ	0xFE7
  2203                           postdec1	equ	0xFE5
  2204                           fsr1h	equ	0xFE2
  2205                           fsr1l	equ	0xFE1
  2206                           indf2	equ	0xFDF
  2207                           fsr2h	equ	0xFDA
  2208                           fsr2l	equ	0xFD9
  2209                           status	equ	0xFD8
  2210                           
  2211 ;; *************** function _intConfig *****************
  2212 ;; Defined at:
  2213 ;;		line 307 in file "main.c"
  2214 ;; Parameters:    Size  Location     Type
  2215 ;;		None
  2216 ;; Auto vars:     Size  Location     Type
  2217 ;;		None
  2218 ;; Return value:  Size  Location     Type
  2219 ;;		None               void
  2220 ;; Registers used:
  2221 ;;		None
  2222 ;; Tracked objects:
  2223 ;;		On entry : 0/0
  2224 ;;		On exit  : 0/0
  2225 ;;		Unchanged: 0/0
  2226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2227 ;;      Params:         0       0       0       0
  2228 ;;      Locals:         0       0       0       0
  2229 ;;      Temps:          0       0       0       0
  2230 ;;      Totals:         0       0       0       0
  2231 ;;Total ram usage:        0 bytes
  2232 ;; Hardware stack levels used:    1
  2233 ;; Hardware stack levels required when called:    2
  2234 ;; This function calls:
  2235 ;;		Nothing
  2236 ;; This function is called by:
  2237 ;;		_main
  2238 ;; This function uses a non-reentrant model
  2239 ;;
  2240                           
  2241                           	psect	text12
  2242  0007E2                     __ptext12:
  2243                           	opt stack 0
  2244  0007E2                     _intConfig:
  2245                           	opt stack 28
  2246                           
  2247                           ;main.c: 310: PIR1bits.SSP1IF = 0;
  2248                           
  2249                           ;incstack = 0
  2250  0007E2  969E               	bcf	3998,3,c	;volatile
  2251                           
  2252                           ;main.c: 313: IOCBbits.IOCB4 = 1;
  2253  0007E4  8862               	bsf	3938,4,c	;volatile
  2254                           
  2255                           ;main.c: 314: INTCONbits.RBIF = 0;
  2256  0007E6  90F2               	bcf	intcon,0,c	;volatile
  2257                           
  2258                           ;main.c: 315: INTCON2bits.RBIP = 1;
  2259  0007E8  80F1               	bsf	intcon2,0,c	;volatile
  2260                           
  2261                           ;main.c: 316: INTCONbits.RBIE = 1;
  2262  0007EA  86F2               	bsf	intcon,3,c	;volatile
  2263                           
  2264                           ;main.c: 319: RCONbits.IPEN = 1;
  2265  0007EC  8ED0               	bsf	4048,7,c	;volatile
  2266                           
  2267                           ;main.c: 320: INTCONbits.GIEH = 1;
  2268  0007EE  8EF2               	bsf	intcon,7,c	;volatile
  2269                           
  2270                           ;main.c: 321: INTCONbits.GIEL = 1;
  2271  0007F0  8CF2               	bsf	intcon,6,c	;volatile
  2272  0007F2  0012               	return	
  2273  0007F4                     __end_of_intConfig:
  2274                           	opt stack 0
  2275                           tblptru	equ	0xFF8
  2276                           tblptrh	equ	0xFF7
  2277                           tblptrl	equ	0xFF6
  2278                           tablat	equ	0xFF5
  2279                           intcon	equ	0xFF2
  2280                           intcon2	equ	0xFF1
  2281                           postinc0	equ	0xFEE
  2282                           wreg	equ	0xFE8
  2283                           indf1	equ	0xFE7
  2284                           postdec1	equ	0xFE5
  2285                           fsr1h	equ	0xFE2
  2286                           fsr1l	equ	0xFE1
  2287                           indf2	equ	0xFDF
  2288                           fsr2h	equ	0xFDA
  2289                           fsr2l	equ	0xFD9
  2290                           status	equ	0xFD8
  2291                           
  2292 ;; *************** function _delay10ms *****************
  2293 ;; Defined at:
  2294 ;;		line 557 in file "main.c"
  2295 ;; Parameters:    Size  Location     Type
  2296 ;;  ms_multi        2   31[COMRAM] int 
  2297 ;; Auto vars:     Size  Location     Type
  2298 ;;  i               2   34[COMRAM] int 
  2299 ;; Return value:  Size  Location     Type
  2300 ;;		None               void
  2301 ;; Registers used:
  2302 ;;		wreg, status,2, status,0
  2303 ;; Tracked objects:
  2304 ;;		On entry : 0/0
  2305 ;;		On exit  : 0/0
  2306 ;;		Unchanged: 0/0
  2307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2308 ;;      Params:         2       0       0       0
  2309 ;;      Locals:         2       0       0       0
  2310 ;;      Temps:          1       0       0       0
  2311 ;;      Totals:         5       0       0       0
  2312 ;;Total ram usage:        5 bytes
  2313 ;; Hardware stack levels used:    1
  2314 ;; Hardware stack levels required when called:    2
  2315 ;; This function calls:
  2316 ;;		Nothing
  2317 ;; This function is called by:
  2318 ;;		_main
  2319 ;; This function uses a non-reentrant model
  2320 ;;
  2321                           
  2322                           	psect	text13
  2323  00078C                     __ptext13:
  2324                           	opt stack 0
  2325  00078C                     _delay10ms:
  2326                           	opt stack 28
  2327                           
  2328                           ;main.c: 558: int i = 0;
  2329                           
  2330                           ;incstack = 0
  2331  00078C  0E00               	movlw	0
  2332  00078E  6E24               	movwf	delay10ms@i+1,c
  2333  000790  0E00               	movlw	0
  2334  000792  6E23               	movwf	delay10ms@i,c
  2335                           
  2336                           ;main.c: 559: for (i=0;i<ms_multi;i++) {
  2337  000794  0E00               	movlw	0
  2338  000796  6E24               	movwf	delay10ms@i+1,c
  2339  000798  0E00               	movlw	0
  2340  00079A  6E23               	movwf	delay10ms@i,c
  2341  00079C  D00A               	goto	l179
  2342  00079E                     l1508:
  2343                           
  2344                           ;main.c: 560: _delay((unsigned long)((11)*(64000000/4000.0)));
  2345  00079E  0EE5               	movlw	229
  2346  0007A0  6E22               	movwf	??_delay10ms& (0+255),c
  2347  0007A2  0E91               	movlw	145
  2348  0007A4                     u847:
  2349  0007A4  2EE8               	decfsz	wreg,f,c
  2350  0007A6  D7FE               	goto	u847
  2351  0007A8  2E22               	decfsz	??_delay10ms& (0+255),f,c
  2352  0007AA  D7FC               	goto	u847
  2353  0007AC  F000               	nop	
  2354  0007AE  4A23               	infsnz	delay10ms@i,f,c
  2355  0007B0  2A24               	incf	delay10ms@i+1,f,c
  2356  0007B2                     l179:
  2357  0007B2  5024               	movf	delay10ms@i+1,w,c
  2358  0007B4  0A80               	xorlw	128
  2359  0007B6  6E22               	movwf	??_delay10ms& (0+255),c
  2360  0007B8  5020               	movf	delay10ms@ms_multi,w,c
  2361  0007BA  5C23               	subwf	delay10ms@i,w,c
  2362  0007BC  5021               	movf	delay10ms@ms_multi+1,w,c
  2363  0007BE  0A80               	xorlw	128
  2364  0007C0  5822               	subwfb	??_delay10ms& (0+255),w,c
  2365  0007C2  B0D8               	btfsc	status,0,c
  2366  0007C4  0012               	return	
  2367  0007C6  D7EB               	goto	l1508
  2368  0007C8                     __end_of_delay10ms:
  2369                           	opt stack 0
  2370                           tblptru	equ	0xFF8
  2371                           tblptrh	equ	0xFF7
  2372                           tblptrl	equ	0xFF6
  2373                           tablat	equ	0xFF5
  2374                           intcon	equ	0xFF2
  2375                           intcon2	equ	0xFF1
  2376                           postinc0	equ	0xFEE
  2377                           wreg	equ	0xFE8
  2378                           indf1	equ	0xFE7
  2379                           postdec1	equ	0xFE5
  2380                           fsr1h	equ	0xFE2
  2381                           fsr1l	equ	0xFE1
  2382                           indf2	equ	0xFDF
  2383                           fsr2h	equ	0xFDA
  2384                           fsr2l	equ	0xFD9
  2385                           status	equ	0xFD8
  2386                           
  2387 ;; *************** function _lowISR *****************
  2388 ;; Defined at:
  2389 ;;		line 300 in file "main.c"
  2390 ;; Parameters:    Size  Location     Type
  2391 ;;		None
  2392 ;; Auto vars:     Size  Location     Type
  2393 ;;		None
  2394 ;; Return value:  Size  Location     Type
  2395 ;;		None               void
  2396 ;; Registers used:
  2397 ;;		None
  2398 ;; Tracked objects:
  2399 ;;		On entry : 0/0
  2400 ;;		On exit  : 0/0
  2401 ;;		Unchanged: 0/0
  2402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2403 ;;      Params:         0       0       0       0
  2404 ;;      Locals:         0       0       0       0
  2405 ;;      Temps:         17       0       0       0
  2406 ;;      Totals:        17       0       0       0
  2407 ;;Total ram usage:       17 bytes
  2408 ;; Hardware stack levels used:    1
  2409 ;; Hardware stack levels required when called:    1
  2410 ;; This function calls:
  2411 ;;		Nothing
  2412 ;; This function is called by:
  2413 ;;		Interrupt level 1
  2414 ;; This function uses a non-reentrant model
  2415 ;;
  2416                           
  2417                           	psect	intcodelo
  2418  000018                     __pintcodelo:
  2419                           	opt stack 0
  2420  000018                     _lowISR:
  2421                           	opt stack 26
  2422                           
  2423                           ;incstack = 0
  2424  000018  CFD8 F001          	movff	status,??_lowISR
  2425  00001C  CFE8 F002          	movff	wreg,??_lowISR+1
  2426  000020  CFE0 F003          	movff	bsr,??_lowISR+2
  2427  000024  CFFA F004          	movff	pclath,??_lowISR+3
  2428  000028  CFFB F005          	movff	pclatu,??_lowISR+4
  2429  00002C  CFE9 F006          	movff	fsr0l,??_lowISR+5
  2430  000030  CFEA F007          	movff	fsr0h,??_lowISR+6
  2431  000034  CFE1 F008          	movff	fsr1l,??_lowISR+7
  2432  000038  CFE2 F009          	movff	fsr1h,??_lowISR+8
  2433  00003C  CFD9 F00A          	movff	fsr2l,??_lowISR+9
  2434  000040  CFDA F00B          	movff	fsr2h,??_lowISR+10
  2435  000044  CFF3 F00C          	movff	prodl,??_lowISR+11
  2436  000048  CFF4 F00D          	movff	prodh,??_lowISR+12
  2437  00004C  CFF6 F00E          	movff	tblptrl,??_lowISR+13
  2438  000050  CFF7 F00F          	movff	tblptrh,??_lowISR+14
  2439  000054  CFF8 F010          	movff	tblptru,??_lowISR+15
  2440  000058  CFF5 F011          	movff	tablat,??_lowISR+16
  2441  00005C  C011  FFF5         	movff	??_lowISR+16,tablat
  2442  000060  C010  FFF8         	movff	??_lowISR+15,tblptru
  2443  000064  C00F  FFF7         	movff	??_lowISR+14,tblptrh
  2444  000068  C00E  FFF6         	movff	??_lowISR+13,tblptrl
  2445  00006C  C00D  FFF4         	movff	??_lowISR+12,prodh
  2446  000070  C00C  FFF3         	movff	??_lowISR+11,prodl
  2447  000074  C00B  FFDA         	movff	??_lowISR+10,fsr2h
  2448  000078  C00A  FFD9         	movff	??_lowISR+9,fsr2l
  2449  00007C  C009  FFE2         	movff	??_lowISR+8,fsr1h
  2450  000080  C008  FFE1         	movff	??_lowISR+7,fsr1l
  2451  000084  C007  FFEA         	movff	??_lowISR+6,fsr0h
  2452  000088  C006  FFE9         	movff	??_lowISR+5,fsr0l
  2453  00008C  C005  FFFB         	movff	??_lowISR+4,pclatu
  2454  000090  C004  FFFA         	movff	??_lowISR+3,pclath
  2455  000094  C003  FFE0         	movff	??_lowISR+2,bsr
  2456  000098  C002  FFE8         	movff	??_lowISR+1,wreg
  2457  00009C  C001  FFD8         	movff	??_lowISR,status
  2458  0000A0  0010               	retfie	
  2459  0000A2                     __end_of_lowISR:
  2460                           	opt stack 0
  2461                           pclatu	equ	0xFFB
  2462                           pclath	equ	0xFFA
  2463                           tblptru	equ	0xFF8
  2464                           tblptrh	equ	0xFF7
  2465                           tblptrl	equ	0xFF6
  2466                           tablat	equ	0xFF5
  2467                           prodh	equ	0xFF4
  2468                           prodl	equ	0xFF3
  2469                           intcon	equ	0xFF2
  2470                           intcon2	equ	0xFF1
  2471                           postinc0	equ	0xFEE
  2472                           fsr0h	equ	0xFEA
  2473                           fsr0l	equ	0xFE9
  2474                           wreg	equ	0xFE8
  2475                           indf1	equ	0xFE7
  2476                           postdec1	equ	0xFE5
  2477                           fsr1h	equ	0xFE2
  2478                           fsr1l	equ	0xFE1
  2479                           bsr	equ	0xFE0
  2480                           indf2	equ	0xFDF
  2481                           fsr2h	equ	0xFDA
  2482                           fsr2l	equ	0xFD9
  2483                           status	equ	0xFD8
  2484                           
  2485 ;; *************** function _highISR *****************
  2486 ;; Defined at:
  2487 ;;		line 285 in file "main.c"
  2488 ;; Parameters:    Size  Location     Type
  2489 ;;		None
  2490 ;; Auto vars:     Size  Location     Type
  2491 ;;		None
  2492 ;; Return value:  Size  Location     Type
  2493 ;;		None               void
  2494 ;; Registers used:
  2495 ;;		wreg, status,2
  2496 ;; Tracked objects:
  2497 ;;		On entry : 0/0
  2498 ;;		On exit  : 0/0
  2499 ;;		Unchanged: 0/0
  2500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2501 ;;      Params:         0       0       0       0
  2502 ;;      Locals:         0       0       0       0
  2503 ;;      Temps:         14       0       0       0
  2504 ;;      Totals:        14       0       0       0
  2505 ;;Total ram usage:       14 bytes
  2506 ;; Hardware stack levels used:    1
  2507 ;; This function calls:
  2508 ;;		Nothing
  2509 ;; This function is called by:
  2510 ;;		Interrupt level 2
  2511 ;; This function uses a non-reentrant model
  2512 ;;
  2513                           
  2514                           	psect	intcode
  2515  000008                     __pintcode:
  2516                           	opt stack 0
  2517  000008                     _highISR:
  2518                           	opt stack 26
  2519                           
  2520                           ;incstack = 0
  2521  000008  CFFA F012          	movff	pclath,??_highISR
  2522  00000C  CFFB F013          	movff	pclatu,??_highISR+1
  2523  000010  CFE9 F014          	movff	fsr0l,??_highISR+2
  2524  000014  EFB4  F002         	goto	int_func
  2525                           pclatu	equ	0xFFB
  2526                           pclath	equ	0xFFA
  2527                           tblptru	equ	0xFF8
  2528                           tblptrh	equ	0xFF7
  2529                           tblptrl	equ	0xFF6
  2530                           tablat	equ	0xFF5
  2531                           prodh	equ	0xFF4
  2532                           prodl	equ	0xFF3
  2533                           intcon	equ	0xFF2
  2534                           intcon2	equ	0xFF1
  2535                           postinc0	equ	0xFEE
  2536                           fsr0h	equ	0xFEA
  2537                           fsr0l	equ	0xFE9
  2538                           wreg	equ	0xFE8
  2539                           indf1	equ	0xFE7
  2540                           postdec1	equ	0xFE5
  2541                           fsr1h	equ	0xFE2
  2542                           fsr1l	equ	0xFE1
  2543                           bsr	equ	0xFE0
  2544                           indf2	equ	0xFDF
  2545                           fsr2h	equ	0xFDA
  2546                           fsr2l	equ	0xFD9
  2547                           status	equ	0xFD8
  2548                           
  2549                           	psect	intcode_body
  2550  000568                     __pintcode_body:
  2551                           	opt stack 26
  2552  000568                     int_func:
  2553                           	opt stack 26
  2554  000568  CFEA F015          	movff	fsr0h,??_highISR+3
  2555  00056C  CFE1 F016          	movff	fsr1l,??_highISR+4
  2556  000570  CFE2 F017          	movff	fsr1h,??_highISR+5
  2557  000574  CFD9 F018          	movff	fsr2l,??_highISR+6
  2558  000578  CFDA F019          	movff	fsr2h,??_highISR+7
  2559  00057C  CFF3 F01A          	movff	prodl,??_highISR+8
  2560  000580  CFF4 F01B          	movff	prodh,??_highISR+9
  2561  000584  CFF6 F01C          	movff	tblptrl,??_highISR+10
  2562  000588  CFF7 F01D          	movff	tblptrh,??_highISR+11
  2563  00058C  CFF8 F01E          	movff	tblptru,??_highISR+12
  2564  000590  CFF5 F01F          	movff	tablat,??_highISR+13
  2565                           
  2566                           ;main.c: 287: if (INTCONbits.RBIF) {
  2567  000594  A0F2               	btfss	intcon,0,c	;volatile
  2568  000596  D005               	goto	i2l108
  2569                           
  2570                           ;main.c: 289: if (PORTBbits.RB4 == 0) {
  2571  000598  B881               	btfsc	3969,4,c	;volatile
  2572  00059A  D002               	goto	i2l1058
  2573                           
  2574                           ;main.c: 290: nrfInterrupt = 1;
  2575  00059C  0E01               	movlw	1
  2576  00059E  6E3D               	movwf	_nrfInterrupt,c	;volatile
  2577  0005A0                     i2l1058:
  2578                           
  2579                           ;main.c: 291: }
  2580                           ;main.c: 293: INTCONbits.RBIF = 0;
  2581  0005A0  90F2               	bcf	intcon,0,c	;volatile
  2582  0005A2                     i2l108:
  2583  0005A2  C01F  FFF5         	movff	??_highISR+13,tablat
  2584  0005A6  C01E  FFF8         	movff	??_highISR+12,tblptru
  2585  0005AA  C01D  FFF7         	movff	??_highISR+11,tblptrh
  2586  0005AE  C01C  FFF6         	movff	??_highISR+10,tblptrl
  2587  0005B2  C01B  FFF4         	movff	??_highISR+9,prodh
  2588  0005B6  C01A  FFF3         	movff	??_highISR+8,prodl
  2589  0005BA  C019  FFDA         	movff	??_highISR+7,fsr2h
  2590  0005BE  C018  FFD9         	movff	??_highISR+6,fsr2l
  2591  0005C2  C017  FFE2         	movff	??_highISR+5,fsr1h
  2592  0005C6  C016  FFE1         	movff	??_highISR+4,fsr1l
  2593  0005CA  C015  FFEA         	movff	??_highISR+3,fsr0h
  2594  0005CE  C014  FFE9         	movff	??_highISR+2,fsr0l
  2595  0005D2  C013  FFFB         	movff	??_highISR+1,pclatu
  2596  0005D6  C012  FFFA         	movff	??_highISR,pclath
  2597  0005DA  0011               	retfie		f
  2598  0005DC                     __end_of_highISR:
  2599                           	opt stack 0
  2600  0000                     pclatu	equ	0xFFB
  2601                           pclath	equ	0xFFA
  2602                           tblptru	equ	0xFF8
  2603                           tblptrh	equ	0xFF7
  2604                           tblptrl	equ	0xFF6
  2605                           tablat	equ	0xFF5
  2606                           prodh	equ	0xFF4
  2607                           prodl	equ	0xFF3
  2608                           intcon	equ	0xFF2
  2609                           intcon2	equ	0xFF1
  2610                           postinc0	equ	0xFEE
  2611                           fsr0h	equ	0xFEA
  2612                           fsr0l	equ	0xFE9
  2613                           wreg	equ	0xFE8
  2614                           indf1	equ	0xFE7
  2615                           postdec1	equ	0xFE5
  2616                           fsr1h	equ	0xFE2
  2617                           fsr1l	equ	0xFE1
  2618                           bsr	equ	0xFE0
  2619                           indf2	equ	0xFDF
  2620                           fsr2h	equ	0xFDA
  2621                           fsr2l	equ	0xFD9
  2622                           status	equ	0xFD8
  2623                           pclatu	equ	0xFFB
  2624                           pclath	equ	0xFFA
  2625                           tblptru	equ	0xFF8
  2626                           tblptrh	equ	0xFF7
  2627                           tblptrl	equ	0xFF6
  2628                           tablat	equ	0xFF5
  2629                           prodh	equ	0xFF4
  2630                           prodl	equ	0xFF3
  2631                           intcon	equ	0xFF2
  2632                           intcon2	equ	0xFF1
  2633                           postinc0	equ	0xFEE
  2634                           fsr0h	equ	0xFEA
  2635                           fsr0l	equ	0xFE9
  2636                           wreg	equ	0xFE8
  2637                           indf1	equ	0xFE7
  2638                           postdec1	equ	0xFE5
  2639                           fsr1h	equ	0xFE2
  2640                           fsr1l	equ	0xFE1
  2641                           bsr	equ	0xFE0
  2642                           indf2	equ	0xFDF
  2643                           fsr2h	equ	0xFDA
  2644                           fsr2l	equ	0xFD9
  2645                           status	equ	0xFD8
  2646                           
  2647                           	psect	rparam
  2648  0000                     pclatu	equ	0xFFB
  2649                           pclath	equ	0xFFA
  2650                           tblptru	equ	0xFF8
  2651                           tblptrh	equ	0xFF7
  2652                           tblptrl	equ	0xFF6
  2653                           tablat	equ	0xFF5
  2654                           prodh	equ	0xFF4
  2655                           prodl	equ	0xFF3
  2656                           intcon	equ	0xFF2
  2657                           intcon2	equ	0xFF1
  2658                           postinc0	equ	0xFEE
  2659                           fsr0h	equ	0xFEA
  2660                           fsr0l	equ	0xFE9
  2661                           wreg	equ	0xFE8
  2662                           indf1	equ	0xFE7
  2663                           postdec1	equ	0xFE5
  2664                           fsr1h	equ	0xFE2
  2665                           fsr1l	equ	0xFE1
  2666                           bsr	equ	0xFE0
  2667                           indf2	equ	0xFDF
  2668                           fsr2h	equ	0xFDA
  2669                           fsr2l	equ	0xFD9
  2670                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        17
    BSS         69
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     41      63
    BANK0           160     20      84
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    nrfSetRXAddr@addr	PTR unsigned char  size(2) Largest target is 4
		 -> RX_ADDRESS(COMRAM[4]), 

    nrfSetTXAddr@addr	PTR unsigned char  size(2) Largest target is 4
		 -> TX_ADDRESS(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->_spiConfig_1
    _spiConfig_1->___aldiv
    _nrfTXData->_setCSN
    _nrfConfig->_nrfSetRXAddr
    _spiTransfer->_setCSN
    _nrfSetTXAddr->_setCSN
    _nrfSetRXAddr->_setCSN
    _nrfConfigReg->_setCSN

Critical Paths under _highISR in COMRAM

    None.

Critical Paths under _lowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_spiConfig_1
    _spiConfig_1->___aldiv

Critical Paths under _highISR in BANK0

    None.

Critical Paths under _lowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _highISR in BANK1

    None.

Critical Paths under _lowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _highISR in BANK2

    None.

Critical Paths under _lowISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   10141
                                             16 BANK0      4     4      0
                          _delay10ms
                          _intConfig
                          _nrfConfig
                          _nrfTXData
                         _portConfig
                        _spiConfig_1
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiConfig_1                                         12    10      2     869
                                             39 COMRAM     2     0      2
                                              6 BANK0     10    10      0
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     705
                                             31 COMRAM     8     0      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _portConfig                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _nrfTXData                                            5     3      2    1037
                                             33 COMRAM     5     3      2
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (1) _nrfConfig                                            0     0      0    6313
                       _nrfConfigReg
                       _nrfSetRXAddr
                       _nrfSetTXAddr
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiTransfer                                          7     4      3    1709
                                             33 COMRAM     7     4      3
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfSetTXAddr                                         7     3      4    1133
                                             33 COMRAM     7     3      4
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfSetRXAddr                                         8     4      4    1164
                                             33 COMRAM     8     4      4
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfConfigReg                                         3     1      2    2307
                                             33 COMRAM     3     1      2
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _spiTransferByte                                      1     1      0      31
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setCSN                                               2     0      2     811
                                             31 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _intConfig                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _delay10ms                                            5     3      2     136
                                             31 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _lowISR                                              17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _highISR                                             14    14      0       0
                                             17 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay10ms
   _intConfig
   _nrfConfig
     _nrfConfigReg
       _setCSN
       _spiTransferByte
     _nrfSetRXAddr
       _setCSN
       _spiTransferByte
     _nrfSetTXAddr
       _setCSN
       _spiTransferByte
     _spiTransfer
       _setCSN
       _spiTransferByte
   _nrfTXData
     _setCSN
     _spiTransferByte
   _portConfig
   _spiConfig_1
     ___aldiv
   _spiTransfer
     _setCSN
     _spiTransferByte

 _lowISR (ROOT)

 _highISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       6        0.0%
BANK2              100      0       0       7        0.0%
BITBANK1           100      0       0       9        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     14      54       4       52.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     29      3F       1       66.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      93       8        0.0%
DATA                 0      0      93      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Thu Oct 02 10:04:30 2014

__size_of_spiTransferByte 0010                        l97 01B4                        l99 0212  
                      bsr 000FE0                _RX_ADDRESS 0033               __CFG_LVP$ON 000000  
                     l100 0222                       l126 0822                       l166 080C  
                     l179 07B2                       u817 021A                       u827 0224  
                     u837 063E                       u685 0250                       u847 07A4  
                     u695 0282                       wreg 000FE8                _TX_ADDRESS 0037  
                    l1402 0742                      l1412 0672                      l1416 0688  
                    l1432 06E4                      l1520 0600                      l1418 069C  
                    l1434 06F8                      l1370 045A                      l1450 029C  
                    l1508 079E                      l1428 06CE                      l1524 061A  
                    l1460 02DA                      l1444 026A                      l1382 048A  
                    l1374 046A                      l1526 062E                      l1456 02C8  
                    l1472 0326                      l1624 01DA                      l1386 04B6  
                    l1378 0478                      l1458 02D6                      l1388 04CA  
                    l1476 034C                      l1468 0316                      l1398 072C  
                    _LATA 000F89                      _LATB 000F8A                      _LATC 000F8B  
      spiTransfer@command 0022                      _main 00A6                      fsr0h 000FEA  
                    fsr1h 000FE2                      fsr0l 000FE9                      fsr2h 000FDA  
                    indf1 000FE7                      fsr1l 000FE1                      indf2 000FDF  
                    fsr2l 000FD9             __CFG_BORV$190 000000                      pclat 000FFA  
                    prodh 000FF4                      prodl 000FF3                      start 00A2  
           __CFG_IESO$OFF 000000            nrfConfigReg@wr 0024           __end_of___aldiv 035E  
                   ?_main 0001                     i2l108 05A2                     _TRISA 000F92  
                   _TRISB 000F93                     _TRISC 000F94           __end_of_highISR 05DC  
          __CFG_FCMEN$OFF 000000        __CFG_MCLRE$EXTMCLR 000000                     tablat 000FF5  
                   status 000FD8            __CFG_HFOFST$ON 000000            __CFG_FOSC$HSHP 000000  
         __initialization 0750              __end_of_main 0232       spiTransferByte@data 0020  
                  ??_main 002A             __activetblptr 000000         ??_spiTransferByte 0020  
          __CFG_PLLCFG$ON 000000             nrfSetRXAddr@i 0028             nrfSetTXAddr@i 0027  
                  i2l1058 05A0            __CFG_WDTEN$OFF 000000              ?_spiConfig_1 0028  
          __CFG_PWRTEN$ON 000000            __CFG_XINST$OFF 000000                 ??___aldiv 0028  
          __CFG_STVREN$ON 000000                    _lowISR 0018                    _setCSN 0816  
                  clear_0 0756               setCSN@level 0020                 ??_highISR 0012  
           ?_nrfConfigReg 0022              _FEATURE_CURR 002D       spiConfig_1@spiSpeed 0028  
            __pdataCOMRAM 002A              ?_spiTransfer 0022                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8                __accesstop 0060  
 __end_of__initialization 0786           __CFG_PBADEN$OFF 000000             ?_nrfSetRXAddr 0022  
           ?_nrfSetTXAddr 0022            __pcstackCOMRAM 0001        __size_of_delay10ms 003C  
          _EN_RXADDR_CURR 002C            ??_nrfConfigReg 0024          nrfConfigReg@data 0023  
              _dataBufOut 0080                __pbssBANK0 0060        __size_of_intConfig 0012  
          ??_nrfSetRXAddr 0026            ??_nrfSetTXAddr 0026        __size_of_nrfTXData 006E  
      __size_of_nrfConfig 00DC       nrfConfigReg@command 0022        __CFG_CCP2MX$PORTC1 000000  
      __CFG_CCP3MX$PORTB5 000000                   ?_lowISR 0001                   ?_setCSN 0020  
                 _SSP1ADD 000FC8                   _SSP1BUF 000FC9         __end_of_delay10ms 07C8  
        nrfSetRXAddr@addr 0022          nrfSetRXAddr@pipe 0027                   __Hparam 0000  
                 __Lparam 0000      __size_of_spiConfig_1 0090           _spiTransferByte 0806  
              delay10ms@i 0023                   ___aldiv 0232             _RX_PW_P0_CURR 0030  
                 __pcinit 0750           __size_of_lowISR 008A           __size_of_setCSN 0010  
        nrfSetTXAddr@addr 0022                   __ramtop 0300         __end_of_intConfig 07F4  
                 _highISR 0008                   __ptext0 00A6                   __ptext1 04D8  
                 __ptext2 0232                   __ptext3 07C8                   __ptext4 05DC  
                 __ptext5 035E                   __ptext6 043A                   __ptext7 06AA  
                 __ptext8 064A                   __ptext9 0706                   _nrfBusy 003C  
       __end_of_nrfTXData 064A          ___aldiv@dividend 0020         __end_of_nrfConfig 043A  
    __size_of_spiTransfer 009E            __pintcode_body 0568      end_of_initialization 0786  
    spiConfig_1@sspAddVal 00AE                   int_func 0568      __end_of_nrfConfigReg 0750  
        ___aldiv@quotient 00A2                   postdec1 000FE5                   postinc0 000FEE  
            nrfTXData@len 0022                _portConfig 07C8                 _PORTBbits 000F81  
    __end_of_nrfSetRXAddr 06AA      __end_of_nrfSetTXAddr 0706                main@TXtime 00B2  
 __end_of_spiTransferByte 0816             __pidataCOMRAM 07F4            __end_of_lowISR 00A2  
          __end_of_setCSN 0826       start_initialization 0750          _spiConfig_1$1492 00AA  
                ??_lowISR 0001                  ??_setCSN 0022               ?_portConfig 0001  
              nrfTXData@i 0025               __pbssCOMRAM 003B             __pcstackBANK0 00A0  
   __size_of_nrfConfigReg 004A                 _dataBufIn 0060          ?_spiTransferByte 0001  
               _delay10ms 078C               _CONFIG_CURR 002A             _SETUP_AW_CURR 0031  
               __pintcode 0008                  ?___aldiv 0020     __size_of_nrfSetRXAddr 0060  
   __size_of_nrfSetTXAddr 005C           _SETUP_RETR_CURR 0032               __pintcodelo 0018  
        __CFG_PRICLKEN$ON 000000                  ?_highISR 0001              _nrfConfigReg 0706  
         nrfSetRXAddr@len 0024                 _intConfig 07E2                 _nrfSTATUS 003E  
               _nrfTXData 05DC           nrfSetTXAddr@len 0024                 _nrfConfig 035E  
         ___aldiv@divisor 0024           ___aldiv@counter 00A0                  _IOCBbits 000F62  
     __size_of_portConfig 001A                  _LATAbits 000F89                ?_delay10ms 0020  
           ??_spiConfig_1 00A6              _nrfSetRXAddr 064A              _nrfSetTXAddr 06AA  
            _nrfInterrupt 003D                 _spiTXFlag 003F                  _PIR1bits 000F9E  
                _RCONbits 000FD0          __CFG_WDTPS$32768 000000             _RF_SETUP_CURR 002F  
       delay10ms@ms_multi 0020             ??_spiTransfer 0025                 main@count 00B0  
              ?_intConfig 0001               _INTCON2bits 000FF1                ?_nrfTXData 0022  
               copy_data0 077A                ?_nrfConfig 0001                  __Hrparam 0000  
                __Lrparam 0000        __CFG_BOREN$SBORDIS 000000         __CFG_P2BMX$PORTB5 000000  
     __end_of_spiConfig_1 0568          __size_of___aldiv 012C          __size_of_highISR 05D4  
                __ptext10 0806                  __ptext11 0816                  __ptext12 07E2  
                __ptext13 078C              _SSP1CON1bits 000FC6       __end_of_spiTransfer 04D8  
           __size_of_main 018C               ??_delay10ms 0022                _EN_AA_CURR 003B  
            _SSP1STATbits 000FC7              ??_portConfig 0020                _DYNPD_CURR 002B  
              _INTCONbits 000FF2               ??_intConfig 0020               ??_nrfTXData 0024  
             ??_nrfConfig 002A                  intlevel1 0000                  intlevel2 0000  
      __end_of_portConfig 07E2               _spiConfig_1 04D8            spiTransfer@len 0023  
          spiTransfer@wrn 0026                _RF_CH_CURR 002E               _spiTransfer 043A  
            ___aldiv@sign 00A1         __CFG_T3CMX$PORTC0 000000              spiTransfer@i 0027  
