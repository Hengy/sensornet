

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Thu Oct 02 09:50:03 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F24K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    31  0000                     
    32                           	psect	idataCOMRAM
    33  0007F2                     __pidataCOMRAM:
    34                           	opt stack 0
    35                           
    36                           ;initializer for _CONFIG_CURR
    37  0007F2  5A                 	db	90
    38                           
    39                           ;initializer for _DYNPD_CURR
    40  0007F3  01                 	db	1
    41                           
    42                           ;initializer for _EN_RXADDR_CURR
    43  0007F4  01                 	db	1
    44                           
    45                           ;initializer for _FEATURE_CURR
    46  0007F5  04                 	db	4
    47                           
    48                           ;initializer for _RF_CH_CURR
    49  0007F6  69                 	db	105
    50                           
    51                           ;initializer for _RF_SETUP_CURR
    52  0007F7  06                 	db	6
    53                           
    54                           ;initializer for _RX_PW_P0_CURR
    55  0007F8  01                 	db	1
    56                           
    57                           ;initializer for _SETUP_AW_CURR
    58  0007F9  02                 	db	2
    59                           
    60                           ;initializer for _SETUP_RETR_CURR
    61  0007FA  21                 	db	33
    62                           
    63                           ;initializer for _RX_ADDRESS
    64  0007FB  E7                 	db	231
    65  0007FC  E7                 	db	231
    66  0007FD  E7                 	db	231
    67  0007FE  E7                 	db	231
    68                           
    69                           ;initializer for _TX_ADDRESS
    70  0007FF  E7                 	db	231
    71  000800  E7                 	db	231
    72  000801  E7                 	db	231
    73  000802  E7                 	db	231
    74  0000                     _INTCON2bits	set	4081
    75  0000                     _INTCONbits	set	4082
    76  0000                     _IOCBbits	set	3938
    77  0000                     _LATA	set	3977
    78  0000                     _LATAbits	set	3977
    79  0000                     _LATB	set	3978
    80  0000                     _LATC	set	3979
    81  0000                     _PIR1bits	set	3998
    82  0000                     _PORTBbits	set	3969
    83  0000                     _RCONbits	set	4048
    84  0000                     _SSP1ADD	set	4040
    85  0000                     _SSP1BUF	set	4041
    86  0000                     _SSP1CON1bits	set	4038
    87  0000                     _SSP1STATbits	set	4039
    88  0000                     _TRISA	set	3986
    89  0000                     _TRISB	set	3987
    90  0000                     _TRISC	set	3988
    91                           
    92                           ; #config settings
    93  0000                     
    94                           	psect	cinit
    95  00074E                     __pcinit:
    96                           	opt stack 0
    97  00074E                     start_initialization:
    98                           	opt stack 0
    99  00074E                     __initialization:
   100                           	opt stack 0
   101                           
   102                           ; Clear objects allocated to BANK0 (64 bytes)
   103  00074E  EE00  F060         	lfsr	0,__pbssBANK0
   104  000752  0E40               	movlw	64
   105  000754                     clear_0:
   106  000754  6AEE               	clrf	postinc0,c
   107  000756  06E8               	decf	wreg,f,c
   108  000758  E1FD               	bnz	clear_0
   109                           
   110                           ; Clear objects allocated to COMRAM (5 bytes)
   111  00075A  6A3F               	clrf	(__pbssCOMRAM+4)& (0+255),c
   112  00075C  6A3E               	clrf	(__pbssCOMRAM+3)& (0+255),c
   113  00075E  6A3D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   114  000760  6A3C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   115  000762  6A3B               	clrf	__pbssCOMRAM& (0+255),c
   116                           
   117                           ; Initialize objects allocated to COMRAM (17 bytes)
   118                           ; load TBLPTR registers with __pidataCOMRAM
   119  000764  0EF2               	movlw	low __pidataCOMRAM
   120  000766  6EF6               	movwf	tblptrl,c
   121  000768  0E07               	movlw	high __pidataCOMRAM
   122  00076A  6EF7               	movwf	tblptrh,c
   123  00076C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   124  00076E  6EF8               	movwf	tblptru,c
   125  000770  EE00  F02A         	lfsr	0,__pdataCOMRAM
   126  000774  EE10 F011          	lfsr	1,17
   127  000778                     copy_data0:
   128  000778  0009               	tblrd		*+
   129  00077A  CFF5 FFEE          	movff	tablat,postinc0
   130  00077E  50E5               	movf	postdec1,w,c
   131  000780  50E1               	movf	fsr1l,w,c
   132  000782  E1FA               	bnz	copy_data0
   133  000784                     end_of_initialization:
   134                           	opt stack 0
   135  000784                     __end_of__initialization:
   136                           	opt stack 0
   137  000784  0100               	movlb	0
   138  000786  EF53  F000         	goto	_main	;jump to C main() function
   139                           tblptru	equ	0xFF8
   140                           tblptrh	equ	0xFF7
   141                           tblptrl	equ	0xFF6
   142                           tablat	equ	0xFF5
   143                           postinc0	equ	0xFEE
   144                           wreg	equ	0xFE8
   145                           postdec1	equ	0xFE5
   146                           fsr1l	equ	0xFE1
   147                           
   148                           	psect	bssCOMRAM
   149  00003B                     __pbssCOMRAM:
   150                           	opt stack 0
   151  00003B                     _EN_AA_CURR:
   152                           	opt stack 0
   153  00003B                     	ds	1
   154  00003C                     _nrfBusy:
   155                           	opt stack 0
   156  00003C                     	ds	1
   157  00003D                     _nrfInterrupt:
   158                           	opt stack 0
   159  00003D                     	ds	1
   160  00003E                     _nrfSTATUS:
   161                           	opt stack 0
   162  00003E                     	ds	1
   163  00003F                     _spiTXFlag:
   164                           	opt stack 0
   165  00003F                     	ds	1
   166                           tblptru	equ	0xFF8
   167                           tblptrh	equ	0xFF7
   168                           tblptrl	equ	0xFF6
   169                           tablat	equ	0xFF5
   170                           postinc0	equ	0xFEE
   171                           wreg	equ	0xFE8
   172                           postdec1	equ	0xFE5
   173                           fsr1l	equ	0xFE1
   174                           
   175                           	psect	dataCOMRAM
   176  00002A                     __pdataCOMRAM:
   177                           	opt stack 0
   178  00002A                     _CONFIG_CURR:
   179                           	opt stack 0
   180  00002A                     	ds	1
   181  00002B                     _DYNPD_CURR:
   182                           	opt stack 0
   183  00002B                     	ds	1
   184  00002C                     _EN_RXADDR_CURR:
   185                           	opt stack 0
   186  00002C                     	ds	1
   187  00002D                     _FEATURE_CURR:
   188                           	opt stack 0
   189  00002D                     	ds	1
   190  00002E                     _RF_CH_CURR:
   191                           	opt stack 0
   192  00002E                     	ds	1
   193  00002F                     _RF_SETUP_CURR:
   194                           	opt stack 0
   195  00002F                     	ds	1
   196  000030                     _RX_PW_P0_CURR:
   197                           	opt stack 0
   198  000030                     	ds	1
   199  000031                     _SETUP_AW_CURR:
   200                           	opt stack 0
   201  000031                     	ds	1
   202  000032                     _SETUP_RETR_CURR:
   203                           	opt stack 0
   204  000032                     	ds	1
   205  000033                     _RX_ADDRESS:
   206                           	opt stack 0
   207  000033                     	ds	4
   208  000037                     _TX_ADDRESS:
   209                           	opt stack 0
   210  000037                     	ds	4
   211                           tblptru	equ	0xFF8
   212                           tblptrh	equ	0xFF7
   213                           tblptrl	equ	0xFF6
   214                           tablat	equ	0xFF5
   215                           postinc0	equ	0xFEE
   216                           wreg	equ	0xFE8
   217                           postdec1	equ	0xFE5
   218                           fsr1l	equ	0xFE1
   219                           
   220                           	psect	bssBANK0
   221  000060                     __pbssBANK0:
   222                           	opt stack 0
   223  000060                     _dataBufIn:
   224                           	opt stack 0
   225  000060                     	ds	32
   226  000080                     _dataBufOut:
   227                           	opt stack 0
   228  000080                     	ds	32
   229                           tblptru	equ	0xFF8
   230                           tblptrh	equ	0xFF7
   231                           tblptrl	equ	0xFF6
   232                           tablat	equ	0xFF5
   233                           postinc0	equ	0xFEE
   234                           wreg	equ	0xFE8
   235                           postdec1	equ	0xFE5
   236                           fsr1l	equ	0xFE1
   237                           
   238                           	psect	cstackBANK0
   239  0000A0                     __pcstackBANK0:
   240                           	opt stack 0
   241  0000A0                     ___aldiv@counter:
   242                           	opt stack 0
   243                           
   244                           ; 1 bytes @ 0x0
   245  0000A0                     	ds	1
   246  0000A1                     ___aldiv@sign:
   247                           	opt stack 0
   248                           
   249                           ; 1 bytes @ 0x1
   250  0000A1                     	ds	1
   251  0000A2                     ___aldiv@quotient:
   252                           	opt stack 0
   253                           
   254                           ; 4 bytes @ 0x2
   255  0000A2                     	ds	4
   256  0000A6                     ??_spiConfig_1:
   257                           
   258                           ; 0 bytes @ 0x6
   259  0000A6                     	ds	4
   260  0000AA                     _spiConfig_1$1492:
   261                           	opt stack 0
   262                           
   263                           ; 4 bytes @ 0xA
   264  0000AA                     	ds	4
   265  0000AE                     spiConfig_1@sspAddVal:
   266                           	opt stack 0
   267                           
   268                           ; 2 bytes @ 0xE
   269  0000AE                     	ds	2
   270  0000B0                     main@count:
   271                           	opt stack 0
   272                           
   273                           ; 2 bytes @ 0x10
   274  0000B0                     	ds	2
   275  0000B2                     main@TXtime:
   276                           	opt stack 0
   277                           
   278                           ; 2 bytes @ 0x12
   279  0000B2                     	ds	2
   280                           tblptru	equ	0xFF8
   281                           tblptrh	equ	0xFF7
   282                           tblptrl	equ	0xFF6
   283                           tablat	equ	0xFF5
   284                           postinc0	equ	0xFEE
   285                           wreg	equ	0xFE8
   286                           postdec1	equ	0xFE5
   287                           fsr1l	equ	0xFE1
   288                           
   289                           	psect	cstackCOMRAM
   290  000001                     __pcstackCOMRAM:
   291                           	opt stack 0
   292  000001                     ??_lowISR:
   293  000001                     
   294                           ; 1 bytes @ 0x0
   295  000001                     	ds	17
   296  000012                     ??_highISR:
   297                           
   298                           ; 0 bytes @ 0x11
   299  000012                     	ds	14
   300  000020                     ?___aldiv:
   301                           	opt stack 0
   302  000020                     spiTransferByte@data:
   303                           	opt stack 0
   304  000020                     setCSN@level:
   305                           	opt stack 0
   306  000020                     delay10ms@ms_multi:
   307                           	opt stack 0
   308  000020                     ___aldiv@dividend:
   309                           	opt stack 0
   310                           
   311                           ; 4 bytes @ 0x1F
   312  000020                     	ds	2
   313  000022                     ??_delay10ms:
   314  000022                     nrfConfigReg@command:
   315                           	opt stack 0
   316  000022                     spiTransfer@command:
   317                           	opt stack 0
   318  000022                     nrfSetTXAddr@addr:
   319                           	opt stack 0
   320  000022                     nrfSetRXAddr@addr:
   321                           	opt stack 0
   322  000022                     nrfTXData@len:
   323                           	opt stack 0
   324                           
   325                           ; 2 bytes @ 0x21
   326  000022                     	ds	1
   327  000023                     nrfConfigReg@data:
   328                           	opt stack 0
   329  000023                     spiTransfer@len:
   330                           	opt stack 0
   331  000023                     delay10ms@i:
   332                           	opt stack 0
   333                           
   334                           ; 2 bytes @ 0x22
   335  000023                     	ds	1
   336  000024                     ??_nrfTXData:
   337  000024                     nrfConfigReg@wr:
   338                           	opt stack 0
   339  000024                     nrfSetTXAddr@len:
   340                           	opt stack 0
   341  000024                     nrfSetRXAddr@len:
   342                           	opt stack 0
   343  000024                     ___aldiv@divisor:
   344                           	opt stack 0
   345                           
   346                           ; 4 bytes @ 0x23
   347  000024                     	ds	1
   348  000025                     ??_spiTransfer:
   349  000025                     nrfTXData@i:
   350                           	opt stack 0
   351                           
   352                           ; 2 bytes @ 0x24
   353  000025                     	ds	1
   354  000026                     ??_nrfSetRXAddr:
   355  000026                     ??_nrfSetTXAddr:
   356  000026                     spiTransfer@wrn:
   357                           	opt stack 0
   358                           
   359                           ; 1 bytes @ 0x25
   360  000026                     	ds	1
   361  000027                     nrfSetRXAddr@pipe:
   362                           	opt stack 0
   363  000027                     nrfSetTXAddr@i:
   364                           	opt stack 0
   365  000027                     spiTransfer@i:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0x26
   369  000027                     	ds	1
   370  000028                     spiConfig_1@spiSpeed:
   371                           	opt stack 0
   372  000028                     nrfSetRXAddr@i:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0x27
   376  000028                     	ds	2
   377  00002A                     tblptru	equ	0xFF8
   378                           tblptrh	equ	0xFF7
   379                           tblptrl	equ	0xFF6
   380                           tablat	equ	0xFF5
   381                           postinc0	equ	0xFEE
   382                           wreg	equ	0xFE8
   383                           postdec1	equ	0xFE5
   384                           fsr1l	equ	0xFE1
   385                           
   386                           ; 0 bytes @ 0x29
   387 ;;
   388 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   389 ;;
   390 ;; *************** function _main *****************
   391 ;; Defined at:
   392 ;;		line 202 in file "main.c"
   393 ;; Parameters:    Size  Location     Type
   394 ;;		None
   395 ;; Auto vars:     Size  Location     Type
   396 ;;  TXtime          2   18[BANK0 ] unsigned int 
   397 ;;  count           2   16[BANK0 ] int 
   398 ;; Return value:  Size  Location     Type
   399 ;;		None               void
   400 ;; Registers used:
   401 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   402 ;; Tracked objects:
   403 ;;		On entry : 0/0
   404 ;;		On exit  : 0/0
   405 ;;		Unchanged: 0/0
   406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   407 ;;      Params:         0       0       0       0
   408 ;;      Locals:         0       4       0       0
   409 ;;      Temps:          0       0       0       0
   410 ;;      Totals:         0       4       0       0
   411 ;;Total ram usage:        4 bytes
   412 ;; Hardware stack levels required when called:    5
   413 ;; This function calls:
   414 ;;		_delay10ms
   415 ;;		_intConfig
   416 ;;		_nrfConfig
   417 ;;		_nrfTXData
   418 ;;		_portConfig
   419 ;;		_spiConfig_1
   420 ;;		_spiTransfer
   421 ;; This function is called by:
   422 ;;		Startup code after reset
   423 ;; This function uses a non-reentrant model
   424 ;;
   425                           
   426                           	psect	text0
   427  0000A6                     __ptext0:
   428                           	opt stack 0
   429  0000A6                     _main:
   430                           	opt stack 26
   431                           
   432                           ;main.c: 205: portConfig();
   433                           
   434                           ;incstack = 0
   435  0000A6  ECE3  F003         	call	_portConfig	;wreg free
   436                           
   437                           ;main.c: 206: spiConfig_1(40);
   438  0000AA  0E00               	movlw	0
   439  0000AC  6E29               	movwf	spiConfig_1@spiSpeed+1,c
   440  0000AE  0E28               	movlw	40
   441  0000B0  6E28               	movwf	spiConfig_1@spiSpeed,c
   442  0000B2  EC6B  F002         	call	_spiConfig_1	;wreg free
   443                           
   444                           ;main.c: 207: nrfConfig();
   445  0000B6  ECAE  F001         	call	_nrfConfig	;wreg free
   446                           
   447                           ;main.c: 208: intConfig();
   448  0000BA  ECF0  F003         	call	_intConfig	;wreg free
   449                           
   450                           ;main.c: 210: delay10ms(1);
   451  0000BE  0E00               	movlw	0
   452  0000C0  6E21               	movwf	delay10ms@ms_multi+1,c
   453  0000C2  0E01               	movlw	1
   454  0000C4  6E20               	movwf	delay10ms@ms_multi,c
   455  0000C6  ECC5  F003         	call	_delay10ms	;wreg free
   456                           
   457                           ;main.c: 212: dataBufOut[1] = 0x48;
   458  0000CA  0E48               	movlw	72
   459  0000CC  0100               	movlb	0	; () banked
   460  0000CE  6F81               	movwf	(_dataBufOut+1)& (0+255),b
   461                           
   462                           ; BSR set to: 0
   463                           ;main.c: 213: dataBufOut[2] = 0x4F;
   464  0000D0  0E4F               	movlw	79
   465  0000D2  0100               	movlb	0	; () banked
   466  0000D4  6F82               	movwf	(_dataBufOut+2)& (0+255),b
   467                           
   468                           ; BSR set to: 0
   469                           ;main.c: 214: dataBufOut[3] = 88;
   470  0000D6  0E58               	movlw	88
   471  0000D8  0100               	movlb	0	; () banked
   472  0000DA  6F83               	movwf	(_dataBufOut+3)& (0+255),b
   473                           
   474                           ; BSR set to: 0
   475                           ;main.c: 215: dataBufOut[4] = 0x49;
   476  0000DC  0E49               	movlw	73
   477  0000DE  0100               	movlb	0	; () banked
   478  0000E0  6F84               	movwf	(_dataBufOut+4)& (0+255),b
   479                           
   480                           ; BSR set to: 0
   481                           ;main.c: 216: dataBufOut[5] = 0x5F;
   482  0000E2  0E5F               	movlw	95
   483  0000E4  0100               	movlb	0	; () banked
   484  0000E6  6F85               	movwf	(_dataBufOut+5)& (0+255),b
   485                           
   486                           ; BSR set to: 0
   487                           ;main.c: 217: dataBufOut[6] = 47;
   488  0000E8  0E2F               	movlw	47
   489  0000EA  0100               	movlb	0	; () banked
   490  0000EC  6F86               	movwf	(_dataBufOut+6)& (0+255),b
   491                           
   492                           ; BSR set to: 0
   493                           ;main.c: 218: dataBufOut[7] = 0x74;
   494  0000EE  0E74               	movlw	116
   495  0000F0  0100               	movlb	0	; () banked
   496  0000F2  6F87               	movwf	(_dataBufOut+7)& (0+255),b
   497                           
   498                           ; BSR set to: 0
   499                           ;main.c: 219: dataBufOut[8] = 0x6F;
   500  0000F4  0E6F               	movlw	111
   501  0000F6  0100               	movlb	0	; () banked
   502  0000F8  6F88               	movwf	(_dataBufOut+8)& (0+255),b
   503                           
   504                           ; BSR set to: 0
   505                           ;main.c: 220: dataBufOut[9] = 58;
   506  0000FA  0E3A               	movlw	58
   507  0000FC  0100               	movlb	0	; () banked
   508  0000FE  6F89               	movwf	(_dataBufOut+9)& (0+255),b
   509                           
   510                           ; BSR set to: 0
   511                           ;main.c: 221: dataBufOut[10] = 0xA8;
   512  000100  0EA8               	movlw	168
   513  000102  0100               	movlb	0	; () banked
   514  000104  6F8A               	movwf	(_dataBufOut+10)& (0+255),b
   515                           
   516                           ; BSR set to: 0
   517                           ;main.c: 222: dataBufOut[11] = 0x6F;
   518  000106  0E6F               	movlw	111
   519  000108  0100               	movlb	0	; () banked
   520  00010A  6F8B               	movwf	(_dataBufOut+11)& (0+255),b
   521                           
   522                           ; BSR set to: 0
   523                           ;main.c: 223: dataBufOut[12] = 99;
   524  00010C  0E63               	movlw	99
   525  00010E  0100               	movlb	0	; () banked
   526  000110  6F8C               	movwf	(_dataBufOut+12)& (0+255),b
   527                           
   528                           ; BSR set to: 0
   529                           ;main.c: 224: dataBufOut[13] = 0x88;
   530  000112  0E88               	movlw	136
   531  000114  0100               	movlb	0	; () banked
   532  000116  6F8D               	movwf	(_dataBufOut+13)& (0+255),b
   533                           
   534                           ; BSR set to: 0
   535                           ;main.c: 225: dataBufOut[14] = 0x5F;
   536  000118  0E5F               	movlw	95
   537  00011A  0100               	movlb	0	; () banked
   538  00011C  6F8E               	movwf	(_dataBufOut+14)& (0+255),b
   539                           
   540                           ; BSR set to: 0
   541                           ;main.c: 226: dataBufOut[15] = 72;
   542  00011E  0E48               	movlw	72
   543  000120  0100               	movlb	0	; () banked
   544  000122  6F8F               	movwf	(_dataBufOut+15)& (0+255),b
   545                           
   546                           ; BSR set to: 0
   547                           ;main.c: 227: dataBufOut[16] = 0x98;
   548  000124  0E98               	movlw	152
   549  000126  0100               	movlb	0	; () banked
   550  000128  6F90               	movwf	(_dataBufOut+16)& (0+255),b
   551                           
   552                           ; BSR set to: 0
   553                           ;main.c: 228: dataBufOut[17] = 0x6F;
   554  00012A  0E6F               	movlw	111
   555  00012C  0100               	movlb	0	; () banked
   556  00012E  6F91               	movwf	(_dataBufOut+17)& (0+255),b
   557                           
   558                           ; BSR set to: 0
   559                           ;main.c: 229: dataBufOut[18] = 92;
   560  000130  0E5C               	movlw	92
   561  000132  0100               	movlb	0	; () banked
   562  000134  6F92               	movwf	(_dataBufOut+18)& (0+255),b
   563                           
   564                           ; BSR set to: 0
   565                           ;main.c: 230: dataBufOut[19] = 0x4A;
   566  000136  0E4A               	movlw	74
   567  000138  0100               	movlb	0	; () banked
   568  00013A  6F93               	movwf	(_dataBufOut+19)& (0+255),b
   569                           
   570                           ; BSR set to: 0
   571                           ;main.c: 231: dataBufOut[20] = 0x6F;
   572  00013C  0E6F               	movlw	111
   573  00013E  0100               	movlb	0	; () banked
   574  000140  6F94               	movwf	(_dataBufOut+20)& (0+255),b
   575                           
   576                           ; BSR set to: 0
   577                           ;main.c: 232: dataBufOut[21] = 62;
   578  000142  0E3E               	movlw	62
   579  000144  0100               	movlb	0	; () banked
   580  000146  6F95               	movwf	(_dataBufOut+21)& (0+255),b
   581                           
   582                           ; BSR set to: 0
   583                           ;main.c: 233: dataBufOut[22] = 0x62;
   584  000148  0E62               	movlw	98
   585  00014A  0100               	movlb	0	; () banked
   586  00014C  6F96               	movwf	(_dataBufOut+22)& (0+255),b
   587                           
   588                           ; BSR set to: 0
   589                           ;main.c: 234: dataBufOut[23] = 0x6F;
   590  00014E  0E6F               	movlw	111
   591  000150  0100               	movlb	0	; () banked
   592  000152  6F97               	movwf	(_dataBufOut+23)& (0+255),b
   593                           
   594                           ; BSR set to: 0
   595                           ;main.c: 235: dataBufOut[24] = 82;
   596  000154  0E52               	movlw	82
   597  000156  0100               	movlb	0	; () banked
   598  000158  6F98               	movwf	(_dataBufOut+24)& (0+255),b
   599                           
   600                           ; BSR set to: 0
   601                           ;main.c: 236: dataBufOut[25] = 0x86;
   602  00015A  0E86               	movlw	134
   603  00015C  0100               	movlb	0	; () banked
   604  00015E  6F99               	movwf	(_dataBufOut+25)& (0+255),b
   605                           
   606                           ; BSR set to: 0
   607                           ;main.c: 237: dataBufOut[26] = 0x7F;
   608  000160  0E7F               	movlw	127
   609  000162  0100               	movlb	0	; () banked
   610  000164  6F9A               	movwf	(_dataBufOut+26)& (0+255),b
   611                           
   612                           ; BSR set to: 0
   613                           ;main.c: 238: dataBufOut[27] = 72;
   614  000166  0E48               	movlw	72
   615  000168  0100               	movlb	0	; () banked
   616  00016A  6F9B               	movwf	(_dataBufOut+27)& (0+255),b
   617                           
   618                           ; BSR set to: 0
   619                           ;main.c: 239: dataBufOut[28] = 102;
   620  00016C  0E66               	movlw	102
   621  00016E  0100               	movlb	0	; () banked
   622  000170  6F9C               	movwf	(_dataBufOut+28)& (0+255),b
   623                           
   624                           ; BSR set to: 0
   625                           ;main.c: 240: dataBufOut[29] = 0xC0;
   626  000172  0EC0               	movlw	192
   627  000174  0100               	movlb	0	; () banked
   628  000176  6F9D               	movwf	(_dataBufOut+29)& (0+255),b
   629                           
   630                           ; BSR set to: 0
   631                           ;main.c: 241: dataBufOut[30] = 0x5F;
   632  000178  0E5F               	movlw	95
   633  00017A  0100               	movlb	0	; () banked
   634  00017C  6F9E               	movwf	(_dataBufOut+30)& (0+255),b
   635                           
   636                           ; BSR set to: 0
   637                           ;main.c: 242: dataBufOut[31] = 122;
   638  00017E  0E7A               	movlw	122
   639  000180  0100               	movlb	0	; () banked
   640  000182  6F9F               	movwf	(_dataBufOut+31)& (0+255),b
   641                           
   642                           ; BSR set to: 0
   643                           ;main.c: 245: int count = 1;
   644  000184  0E00               	movlw	0
   645  000186  0100               	movlb	0	; () banked
   646  000188  6FB1               	movwf	(main@count+1)& (0+255),b
   647  00018A  0E01               	movlw	1
   648  00018C  0100               	movlb	0	; () banked
   649  00018E  6FB0               	movwf	main@count& (0+255),b
   650                           
   651                           ; BSR set to: 0
   652                           ;main.c: 246: unsigned int TXtime = 20000;
   653  000190  0E4E               	movlw	78
   654  000192  0100               	movlb	0	; () banked
   655  000194  6FB3               	movwf	(main@TXtime+1)& (0+255),b
   656  000196  0E20               	movlw	32
   657  000198  0100               	movlb	0	; () banked
   658  00019A  6FB2               	movwf	main@TXtime& (0+255),b
   659                           
   660                           ; BSR set to: 0
   661                           ;main.c: 249: dataBufOut[0] = 0b00110000;
   662  00019C  0E30               	movlw	48
   663  00019E  0100               	movlb	0	; () banked
   664  0001A0  6F80               	movwf	_dataBufOut& (0+255),b
   665                           
   666                           ; BSR set to: 0
   667                           ;main.c: 250: spiTransfer('w',0x07,1);
   668  0001A2  0E07               	movlw	7
   669  0001A4  6E22               	movwf	spiTransfer@command,c
   670  0001A6  0E00               	movlw	0
   671  0001A8  6E24               	movwf	spiTransfer@len+1,c
   672  0001AA  0E01               	movlw	1
   673  0001AC  6E23               	movwf	spiTransfer@len,c
   674  0001AE  0E77               	movlw	119
   675  0001B0  EC1C  F002         	call	_spiTransfer
   676  0001B4                     l97:
   677                           
   678                           ;main.c: 254: if (nrfInterrupt) {
   679  0001B4  503D               	movf	_nrfInterrupt,w,c	;volatile
   680  0001B6  B4D8               	btfsc	status,2,c
   681  0001B8  D010               	goto	l1627
   682                           
   683                           ;main.c: 257: dataBufOut[0] = 0b00110000;
   684  0001BA  0E30               	movlw	48
   685  0001BC  0100               	movlb	0	; () banked
   686  0001BE  6F80               	movwf	_dataBufOut& (0+255),b
   687                           
   688                           ; BSR set to: 0
   689                           ;main.c: 258: spiTransfer('w',0x07,1);
   690  0001C0  0E07               	movlw	7
   691  0001C2  6E22               	movwf	spiTransfer@command,c
   692  0001C4  0E00               	movlw	0
   693  0001C6  6E24               	movwf	spiTransfer@len+1,c
   694  0001C8  0E01               	movlw	1
   695  0001CA  6E23               	movwf	spiTransfer@len,c
   696  0001CC  0E77               	movlw	119
   697  0001CE  EC1C  F002         	call	_spiTransfer
   698                           
   699                           ;main.c: 260: nrfBusy = 0;
   700  0001D2  0E00               	movlw	0
   701  0001D4  6E3C               	movwf	_nrfBusy,c
   702                           
   703                           ;main.c: 261: nrfInterrupt = 0;
   704  0001D6  0E00               	movlw	0
   705  0001D8  6E3D               	movwf	_nrfInterrupt,c	;volatile
   706  0001DA                     l1627:
   707                           
   708                           ;main.c: 262: }
   709                           ;main.c: 264: if ((TXtime >= 12800) && (!nrfBusy)) {
   710  0001DA  0E00               	movlw	0
   711  0001DC  0100               	movlb	0	; () banked
   712  0001DE  5DB2               	subwf	main@TXtime& (0+255),w,b
   713  0001E0  0E32               	movlw	50
   714  0001E2  0100               	movlb	0	; () banked
   715  0001E4  59B3               	subwfb	(main@TXtime+1)& (0+255),w,b
   716  0001E6  A0D8               	btfss	status,0,c
   717  0001E8  D013               	goto	l1639
   718                           
   719                           ; BSR set to: 0
   720  0001EA  663C               	tstfsz	_nrfBusy,c
   721  0001EC  D011               	goto	l1639
   722                           
   723                           ; BSR set to: 0
   724                           ;main.c: 265: dataBufOut[0] = count;
   725  0001EE  C0B0  F080         	movff	main@count,_dataBufOut
   726                           
   727                           ; BSR set to: 0
   728                           ;main.c: 266: nrfTXData(5);
   729  0001F2  0E00               	movlw	0
   730  0001F4  6E23               	movwf	nrfTXData@len+1,c
   731  0001F6  0E05               	movlw	5
   732  0001F8  6E22               	movwf	nrfTXData@len,c
   733  0001FA  ECED  F002         	call	_nrfTXData	;wreg free
   734                           
   735                           ;main.c: 267: count++;
   736  0001FE  0100               	movlb	0	; () banked
   737  000200  4BB0               	infsnz	main@count& (0+255),f,b
   738  000202  2BB1               	incf	(main@count+1)& (0+255),f,b
   739                           
   740                           ; BSR set to: 0
   741                           ;main.c: 268: TXtime = 0;
   742  000204  0E00               	movlw	0
   743  000206  0100               	movlb	0	; () banked
   744  000208  6FB3               	movwf	(main@TXtime+1)& (0+255),b
   745  00020A  0E00               	movlw	0
   746  00020C  0100               	movlb	0	; () banked
   747  00020E  6FB2               	movwf	main@TXtime& (0+255),b
   748  000210                     l1639:
   749                           
   750                           ; BSR set to: 0
   751                           ;main.c: 269: }
   752                           ;main.c: 271: if (!nrfBusy) {
   753  000210  663C               	tstfsz	_nrfBusy,c
   754  000212  D006               	goto	l100
   755                           
   756                           ; BSR set to: 0
   757                           ;main.c: 272: LATAbits.LATA0 = 1;
   758  000214  8089               	bsf	3977,0,c	;volatile
   759                           
   760                           ; BSR set to: 0
   761                           ;main.c: 273: _delay((unsigned long)((20)*(64000000/4000000.0)));
   762  000216  0E6A               	movlw	106
   763  000218                     u817:
   764  000218  2EE8               	decfsz	wreg,f,c
   765  00021A  D7FE               	goto	u817
   766  00021C  D000               	nop2		;nop
   767                           
   768                           ;main.c: 274: LATAbits.LATA0 = 0;
   769  00021E  9089               	bcf	3977,0,c	;volatile
   770  000220                     l100:
   771                           
   772                           ;main.c: 275: }
   773                           ;main.c: 277: _delay((unsigned long)((50)*(64000000/4000000.0)));
   774  000220  0EC8               	movlw	200
   775  000222                     u827:
   776  000222  F000               	nop	
   777  000224  2EE8               	decfsz	wreg,f,c
   778  000226  D7FD               	goto	u827
   779                           
   780                           ;main.c: 278: TXtime++;
   781  000228  0100               	movlb	0	; () banked
   782  00022A  4BB2               	infsnz	main@TXtime& (0+255),f,b
   783  00022C  2BB3               	incf	(main@TXtime+1)& (0+255),f,b
   784                           
   785                           ;main.c: 279: }
   786  00022E  D7C2               	goto	l97
   787  000230                     __end_of_main:
   788                           	opt stack 0
   789                           tblptru	equ	0xFF8
   790                           tblptrh	equ	0xFF7
   791                           tblptrl	equ	0xFF6
   792                           tablat	equ	0xFF5
   793                           postinc0	equ	0xFEE
   794                           wreg	equ	0xFE8
   795                           postdec1	equ	0xFE5
   796                           fsr1l	equ	0xFE1
   797                           status	equ	0xFD8
   798                           
   799 ;; *************** function _spiConfig_1 *****************
   800 ;; Defined at:
   801 ;;		line 343 in file "main.c"
   802 ;; Parameters:    Size  Location     Type
   803 ;;  spiSpeed        2   39[COMRAM] unsigned int 
   804 ;; Auto vars:     Size  Location     Type
   805 ;;  sspAddVal       2   14[BANK0 ] unsigned int 
   806 ;; Return value:  Size  Location     Type
   807 ;;		None               void
   808 ;; Registers used:
   809 ;;		wreg, status,2, status,0, cstack
   810 ;; Tracked objects:
   811 ;;		On entry : 0/0
   812 ;;		On exit  : 0/0
   813 ;;		Unchanged: 0/0
   814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   815 ;;      Params:         2       0       0       0
   816 ;;      Locals:         0       6       0       0
   817 ;;      Temps:          0       4       0       0
   818 ;;      Totals:         2      10       0       0
   819 ;;Total ram usage:       12 bytes
   820 ;; Hardware stack levels used:    1
   821 ;; Hardware stack levels required when called:    3
   822 ;; This function calls:
   823 ;;		___aldiv
   824 ;; This function is called by:
   825 ;;		_main
   826 ;; This function uses a non-reentrant model
   827 ;;
   828                           
   829                           	psect	text1
   830  0004D6                     __ptext1:
   831                           	opt stack 0
   832  0004D6                     _spiConfig_1:
   833                           	opt stack 27
   834                           
   835                           ;main.c: 345: SSP1CON1bits.CKP = 0;
   836                           
   837                           ; BSR set to: 0
   838                           ;incstack = 0
   839  0004D6  98C6               	bcf	4038,4,c	;volatile
   840                           
   841                           ;main.c: 346: SSP1STATbits.CKE = 1;
   842  0004D8  8CC7               	bsf	4039,6,c	;volatile
   843                           
   844                           ;main.c: 347: SSP1STATbits.SMP = 1;
   845  0004DA  8EC7               	bsf	4039,7,c	;volatile
   846                           
   847                           ;main.c: 350: unsigned int sspAddVal = (((64000000/100000)/spiSpeed)/4)-1;
   848  0004DC  C028  F024         	movff	spiConfig_1@spiSpeed,___aldiv@divisor
   849  0004E0  C029  F025         	movff	spiConfig_1@spiSpeed+1,___aldiv@divisor+1
   850  0004E4  6A26               	clrf	___aldiv@divisor+2,c
   851  0004E6  6A27               	clrf	___aldiv@divisor+3,c
   852  0004E8  0E80               	movlw	128
   853  0004EA  6E20               	movwf	___aldiv@dividend,c
   854  0004EC  0E02               	movlw	2
   855  0004EE  6E21               	movwf	___aldiv@dividend+1,c
   856  0004F0  0E00               	movlw	0
   857  0004F2  6E22               	movwf	___aldiv@dividend+2,c
   858  0004F4  0E00               	movlw	0
   859  0004F6  6E23               	movwf	___aldiv@dividend+3,c
   860  0004F8  EC18  F001         	call	___aldiv	;wreg free
   861  0004FC  C020  F0AA         	movff	?___aldiv,_spiConfig_1$1492
   862  000500  C021  F0AB         	movff	?___aldiv+1,_spiConfig_1$1492+1
   863  000504  C022  F0AC         	movff	?___aldiv+2,_spiConfig_1$1492+2
   864  000508  C023  F0AD         	movff	?___aldiv+3,_spiConfig_1$1492+3
   865                           
   866                           ;main.c: 350: unsigned int sspAddVal = (((64000000/100000)/spiSpeed)/4)-1;
   867  00050C  C0AA  F020         	movff	_spiConfig_1$1492,___aldiv@dividend
   868  000510  C0AB  F021         	movff	_spiConfig_1$1492+1,___aldiv@dividend+1
   869  000514  C0AC  F022         	movff	_spiConfig_1$1492+2,___aldiv@dividend+2
   870  000518  C0AD  F023         	movff	_spiConfig_1$1492+3,___aldiv@dividend+3
   871  00051C  0E04               	movlw	4
   872  00051E  6E24               	movwf	___aldiv@divisor,c
   873  000520  0E00               	movlw	0
   874  000522  6E25               	movwf	___aldiv@divisor+1,c
   875  000524  0E00               	movlw	0
   876  000526  6E26               	movwf	___aldiv@divisor+2,c
   877  000528  0E00               	movlw	0
   878  00052A  6E27               	movwf	___aldiv@divisor+3,c
   879  00052C  EC18  F001         	call	___aldiv	;wreg free
   880  000530  C020  F0A6         	movff	?___aldiv,??_spiConfig_1
   881  000534  C021  F0A7         	movff	?___aldiv+1,??_spiConfig_1+1
   882  000538  C022  F0A8         	movff	?___aldiv+2,??_spiConfig_1+2
   883  00053C  C023  F0A9         	movff	?___aldiv+3,??_spiConfig_1+3
   884  000540  0EFF               	movlw	255
   885  000542  0100               	movlb	0	; () banked
   886  000544  25A6               	addwf	??_spiConfig_1& (0+255),w,b
   887  000546  0100               	movlb	0	; () banked
   888  000548  6FAE               	movwf	spiConfig_1@sspAddVal& (0+255),b
   889  00054A  0EFF               	movlw	255
   890  00054C  0100               	movlb	0	; () banked
   891  00054E  21A7               	addwfc	(??_spiConfig_1+1)& (0+255),w,b
   892  000550  0100               	movlb	0	; () banked
   893  000552  6FAF               	movwf	(spiConfig_1@sspAddVal+1)& (0+255),b
   894                           
   895                           ; BSR set to: 0
   896                           ;main.c: 351: SSP1ADD = sspAddVal;
   897  000554  C0AE  FFC8         	movff	spiConfig_1@sspAddVal,4040	;volatile
   898                           
   899                           ; BSR set to: 0
   900                           ;main.c: 352: SSP1CON1bits.SSPM = 0b1010;
   901  000558  50C6               	movf	4038,w,c	;volatile
   902  00055A  0BF0               	andlw	-16
   903  00055C  090A               	iorlw	10
   904  00055E  6EC6               	movwf	4038,c	;volatile
   905                           
   906                           ; BSR set to: 0
   907                           ;main.c: 354: SSP1CON1bits.SSPEN = 1;
   908  000560  8AC6               	bsf	4038,5,c	;volatile
   909                           
   910                           ; BSR set to: 0
   911                           ;main.c: 356: LATAbits.LATA2 = 1;
   912  000562  8489               	bsf	3977,2,c	;volatile
   913                           
   914                           ; BSR set to: 0
   915  000564  0012               	return	
   916  000566                     __end_of_spiConfig_1:
   917                           	opt stack 0
   918                           tblptru	equ	0xFF8
   919                           tblptrh	equ	0xFF7
   920                           tblptrl	equ	0xFF6
   921                           tablat	equ	0xFF5
   922                           postinc0	equ	0xFEE
   923                           wreg	equ	0xFE8
   924                           postdec1	equ	0xFE5
   925                           fsr1l	equ	0xFE1
   926                           status	equ	0xFD8
   927                           
   928 ;; *************** function ___aldiv *****************
   929 ;; Defined at:
   930 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\aldiv.c"
   931 ;; Parameters:    Size  Location     Type
   932 ;;  dividend        4   31[COMRAM] long 
   933 ;;  divisor         4   35[COMRAM] long 
   934 ;; Auto vars:     Size  Location     Type
   935 ;;  quotient        4    2[BANK0 ] long 
   936 ;;  sign            1    1[BANK0 ] unsigned char 
   937 ;;  counter         1    0[BANK0 ] unsigned char 
   938 ;; Return value:  Size  Location     Type
   939 ;;                  4   31[COMRAM] long 
   940 ;; Registers used:
   941 ;;		wreg, status,2, status,0
   942 ;; Tracked objects:
   943 ;;		On entry : 0/0
   944 ;;		On exit  : 0/0
   945 ;;		Unchanged: 0/0
   946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   947 ;;      Params:         8       0       0       0
   948 ;;      Locals:         0       6       0       0
   949 ;;      Temps:          0       0       0       0
   950 ;;      Totals:         8       6       0       0
   951 ;;Total ram usage:       14 bytes
   952 ;; Hardware stack levels used:    1
   953 ;; Hardware stack levels required when called:    2
   954 ;; This function calls:
   955 ;;		Nothing
   956 ;; This function is called by:
   957 ;;		_spiConfig_1
   958 ;; This function uses a non-reentrant model
   959 ;;
   960                           
   961                           	psect	text2
   962  000230                     __ptext2:
   963                           	opt stack 0
   964  000230                     ___aldiv:
   965                           	opt stack 27
   966                           
   967                           ; BSR set to: 0
   968                           ;incstack = 0
   969  000230  0E00               	movlw	0
   970  000232  0100               	movlb	0	; () banked
   971  000234  6FA1               	movwf	___aldiv@sign& (0+255),b
   972                           
   973                           ; BSR set to: 0
   974  000236  5027               	movf	___aldiv@divisor+3,w,c
   975  000238  0A80               	xorlw	128
   976  00023A  0F80               	addlw	128
   977  00023C  E108               	bnz	u685
   978  00023E  0E00               	movlw	0
   979  000240  5C26               	subwf	___aldiv@divisor+2,w,c
   980  000242  E105               	bnz	u685
   981  000244  0E00               	movlw	0
   982  000246  5C25               	subwf	___aldiv@divisor+1,w,c
   983  000248  E102               	bnz	u685
   984  00024A  0E00               	movlw	0
   985  00024C  5C24               	subwf	___aldiv@divisor,w,c
   986  00024E                     u685:
   987  00024E  B0D8               	btfsc	status,0,c
   988  000250  D00B               	goto	l1447
   989                           
   990                           ; BSR set to: 0
   991  000252  1E27               	comf	___aldiv@divisor+3,f,c
   992  000254  1E26               	comf	___aldiv@divisor+2,f,c
   993  000256  1E25               	comf	___aldiv@divisor+1,f,c
   994  000258  6C24               	negf	___aldiv@divisor,c
   995  00025A  0E00               	movlw	0
   996  00025C  2225               	addwfc	___aldiv@divisor+1,f,c
   997  00025E  2226               	addwfc	___aldiv@divisor+2,f,c
   998  000260  2227               	addwfc	___aldiv@divisor+3,f,c
   999                           
  1000                           ; BSR set to: 0
  1001  000262  0E01               	movlw	1
  1002  000264  0100               	movlb	0	; () banked
  1003  000266  6FA1               	movwf	___aldiv@sign& (0+255),b
  1004  000268                     l1447:
  1005                           
  1006                           ; BSR set to: 0
  1007  000268  5023               	movf	___aldiv@dividend+3,w,c
  1008  00026A  0A80               	xorlw	128
  1009  00026C  0F80               	addlw	128
  1010  00026E  E108               	bnz	u695
  1011  000270  0E00               	movlw	0
  1012  000272  5C22               	subwf	___aldiv@dividend+2,w,c
  1013  000274  E105               	bnz	u695
  1014  000276  0E00               	movlw	0
  1015  000278  5C21               	subwf	___aldiv@dividend+1,w,c
  1016  00027A  E102               	bnz	u695
  1017  00027C  0E00               	movlw	0
  1018  00027E  5C20               	subwf	___aldiv@dividend,w,c
  1019  000280                     u695:
  1020  000280  B0D8               	btfsc	status,0,c
  1021  000282  D00B               	goto	l1453
  1022                           
  1023                           ; BSR set to: 0
  1024  000284  1E23               	comf	___aldiv@dividend+3,f,c
  1025  000286  1E22               	comf	___aldiv@dividend+2,f,c
  1026  000288  1E21               	comf	___aldiv@dividend+1,f,c
  1027  00028A  6C20               	negf	___aldiv@dividend,c
  1028  00028C  0E00               	movlw	0
  1029  00028E  2221               	addwfc	___aldiv@dividend+1,f,c
  1030  000290  2222               	addwfc	___aldiv@dividend+2,f,c
  1031  000292  2223               	addwfc	___aldiv@dividend+3,f,c
  1032                           
  1033                           ; BSR set to: 0
  1034  000294  0E01               	movlw	1
  1035  000296  0100               	movlb	0	; () banked
  1036  000298  1BA1               	xorwf	___aldiv@sign& (0+255),f,b
  1037  00029A                     l1453:
  1038                           
  1039                           ; BSR set to: 0
  1040  00029A  0E00               	movlw	0
  1041  00029C  0100               	movlb	0	; () banked
  1042  00029E  6FA2               	movwf	___aldiv@quotient& (0+255),b
  1043  0002A0  0E00               	movlw	0
  1044  0002A2  0100               	movlb	0	; () banked
  1045  0002A4  6FA3               	movwf	(___aldiv@quotient+1)& (0+255),b
  1046  0002A6  0E00               	movlw	0
  1047  0002A8  0100               	movlb	0	; () banked
  1048  0002AA  6FA4               	movwf	(___aldiv@quotient+2)& (0+255),b
  1049  0002AC  0E00               	movlw	0
  1050  0002AE  0100               	movlb	0	; () banked
  1051  0002B0  6FA5               	movwf	(___aldiv@quotient+3)& (0+255),b
  1052                           
  1053                           ; BSR set to: 0
  1054  0002B2  5027               	movf	___aldiv@divisor+3,w,c
  1055  0002B4  1024               	iorwf	___aldiv@divisor,w,c
  1056  0002B6  1025               	iorwf	___aldiv@divisor+1,w,c
  1057  0002B8  1026               	iorwf	___aldiv@divisor+2,w,c
  1058  0002BA  B4D8               	btfsc	status,2,c
  1059  0002BC  D033               	goto	l1475
  1060                           
  1061                           ; BSR set to: 0
  1062  0002BE  0E01               	movlw	1
  1063  0002C0  0100               	movlb	0	; () banked
  1064  0002C2  6FA0               	movwf	___aldiv@counter& (0+255),b
  1065  0002C4  D007               	goto	l1461
  1066  0002C6                     l1459:
  1067                           
  1068                           ; BSR set to: 0
  1069  0002C6  90D8               	bcf	status,0,c
  1070  0002C8  3624               	rlcf	___aldiv@divisor,f,c
  1071  0002CA  3625               	rlcf	___aldiv@divisor+1,f,c
  1072  0002CC  3626               	rlcf	___aldiv@divisor+2,f,c
  1073  0002CE  3627               	rlcf	___aldiv@divisor+3,f,c
  1074  0002D0  0100               	movlb	0	; () banked
  1075  0002D2  2BA0               	incf	___aldiv@counter& (0+255),f,b
  1076  0002D4                     l1461:
  1077                           
  1078                           ; BSR set to: 0
  1079  0002D4  AE27               	btfss	___aldiv@divisor+3,7,c
  1080  0002D6  D7F7               	goto	l1459
  1081  0002D8                     l1463:
  1082                           
  1083                           ; BSR set to: 0
  1084  0002D8  0100               	movlb	0	; () banked
  1085  0002DA  90D8               	bcf	status,0,c
  1086  0002DC  0100               	movlb	0	; () banked
  1087  0002DE  37A2               	rlcf	___aldiv@quotient& (0+255),f,b
  1088  0002E0  0100               	movlb	0	; () banked
  1089  0002E2  37A3               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  1090  0002E4  0100               	movlb	0	; () banked
  1091  0002E6  37A4               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  1092  0002E8  0100               	movlb	0	; () banked
  1093  0002EA  37A5               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  1094                           
  1095                           ; BSR set to: 0
  1096  0002EC  5024               	movf	___aldiv@divisor,w,c
  1097  0002EE  5C20               	subwf	___aldiv@dividend,w,c
  1098  0002F0  5025               	movf	___aldiv@divisor+1,w,c
  1099  0002F2  5821               	subwfb	___aldiv@dividend+1,w,c
  1100  0002F4  5026               	movf	___aldiv@divisor+2,w,c
  1101  0002F6  5822               	subwfb	___aldiv@dividend+2,w,c
  1102  0002F8  5027               	movf	___aldiv@divisor+3,w,c
  1103  0002FA  5823               	subwfb	___aldiv@dividend+3,w,c
  1104  0002FC  A0D8               	btfss	status,0,c
  1105  0002FE  D00A               	goto	l1471
  1106                           
  1107                           ; BSR set to: 0
  1108  000300  5024               	movf	___aldiv@divisor,w,c
  1109  000302  5E20               	subwf	___aldiv@dividend,f,c
  1110  000304  5025               	movf	___aldiv@divisor+1,w,c
  1111  000306  5A21               	subwfb	___aldiv@dividend+1,f,c
  1112  000308  5026               	movf	___aldiv@divisor+2,w,c
  1113  00030A  5A22               	subwfb	___aldiv@dividend+2,f,c
  1114  00030C  5027               	movf	___aldiv@divisor+3,w,c
  1115  00030E  5A23               	subwfb	___aldiv@dividend+3,f,c
  1116                           
  1117                           ; BSR set to: 0
  1118  000310  0100               	movlb	0	; () banked
  1119  000312  81A2               	bsf	___aldiv@quotient& (0+255),0,b
  1120  000314                     l1471:
  1121                           
  1122                           ; BSR set to: 0
  1123  000314  90D8               	bcf	status,0,c
  1124  000316  3227               	rrcf	___aldiv@divisor+3,f,c
  1125  000318  3226               	rrcf	___aldiv@divisor+2,f,c
  1126  00031A  3225               	rrcf	___aldiv@divisor+1,f,c
  1127  00031C  3224               	rrcf	___aldiv@divisor,f,c
  1128                           
  1129                           ; BSR set to: 0
  1130  00031E  0100               	movlb	0	; () banked
  1131  000320  2FA0               	decfsz	___aldiv@counter& (0+255),f,b
  1132  000322  D7DA               	goto	l1463
  1133  000324                     l1475:
  1134                           
  1135                           ; BSR set to: 0
  1136  000324  0100               	movlb	0	; () banked
  1137  000326  51A1               	movf	___aldiv@sign& (0+255),w,b
  1138  000328  B4D8               	btfsc	status,2,c
  1139  00032A  D00F               	goto	l1479
  1140                           
  1141                           ; BSR set to: 0
  1142  00032C  0100               	movlb	0	; () banked
  1143  00032E  1FA5               	comf	(___aldiv@quotient+3)& (0+255),f,b
  1144  000330  0100               	movlb	0	; () banked
  1145  000332  1FA4               	comf	(___aldiv@quotient+2)& (0+255),f,b
  1146  000334  0100               	movlb	0	; () banked
  1147  000336  1FA3               	comf	(___aldiv@quotient+1)& (0+255),f,b
  1148  000338  0100               	movlb	0	; () banked
  1149  00033A  6DA2               	negf	___aldiv@quotient& (0+255),b
  1150  00033C  0E00               	movlw	0
  1151  00033E  0100               	movlb	0	; () banked
  1152  000340  23A3               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  1153  000342  0100               	movlb	0	; () banked
  1154  000344  23A4               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  1155  000346  0100               	movlb	0	; () banked
  1156  000348  23A5               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  1157  00034A                     l1479:
  1158                           
  1159                           ; BSR set to: 0
  1160  00034A  C0A2  F020         	movff	___aldiv@quotient,?___aldiv
  1161  00034E  C0A3  F021         	movff	___aldiv@quotient+1,?___aldiv+1
  1162  000352  C0A4  F022         	movff	___aldiv@quotient+2,?___aldiv+2
  1163  000356  C0A5  F023         	movff	___aldiv@quotient+3,?___aldiv+3
  1164  00035A  0012               	return	
  1165  00035C                     __end_of___aldiv:
  1166                           	opt stack 0
  1167                           tblptru	equ	0xFF8
  1168                           tblptrh	equ	0xFF7
  1169                           tblptrl	equ	0xFF6
  1170                           tablat	equ	0xFF5
  1171                           postinc0	equ	0xFEE
  1172                           wreg	equ	0xFE8
  1173                           postdec1	equ	0xFE5
  1174                           fsr1l	equ	0xFE1
  1175                           status	equ	0xFD8
  1176                           
  1177 ;; *************** function _portConfig *****************
  1178 ;; Defined at:
  1179 ;;		line 327 in file "main.c"
  1180 ;; Parameters:    Size  Location     Type
  1181 ;;		None
  1182 ;; Auto vars:     Size  Location     Type
  1183 ;;		None
  1184 ;; Return value:  Size  Location     Type
  1185 ;;		None               void
  1186 ;; Registers used:
  1187 ;;		wreg, status,2
  1188 ;; Tracked objects:
  1189 ;;		On entry : 0/0
  1190 ;;		On exit  : 0/0
  1191 ;;		Unchanged: 0/0
  1192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1193 ;;      Params:         0       0       0       0
  1194 ;;      Locals:         0       0       0       0
  1195 ;;      Temps:          0       0       0       0
  1196 ;;      Totals:         0       0       0       0
  1197 ;;Total ram usage:        0 bytes
  1198 ;; Hardware stack levels used:    1
  1199 ;; Hardware stack levels required when called:    2
  1200 ;; This function calls:
  1201 ;;		Nothing
  1202 ;; This function is called by:
  1203 ;;		_main
  1204 ;; This function uses a non-reentrant model
  1205 ;;
  1206                           
  1207                           	psect	text3
  1208  0007C6                     __ptext3:
  1209                           	opt stack 0
  1210  0007C6                     _portConfig:
  1211                           	opt stack 28
  1212                           
  1213                           ;main.c: 328: TRISA = 0b00000000;
  1214                           
  1215                           ; BSR set to: 0
  1216                           ;incstack = 0
  1217  0007C6  0E00               	movlw	0
  1218  0007C8  6E92               	movwf	3986,c	;volatile
  1219                           
  1220                           ;main.c: 329: TRISB = 0b00010000;
  1221  0007CA  0E10               	movlw	16
  1222  0007CC  6E93               	movwf	3987,c	;volatile
  1223                           
  1224                           ;main.c: 330: TRISC = 0b00010000;
  1225  0007CE  0E10               	movlw	16
  1226  0007D0  6E94               	movwf	3988,c	;volatile
  1227                           
  1228                           ;main.c: 332: LATA = 0b00000100;
  1229  0007D2  0E04               	movlw	4
  1230  0007D4  6E89               	movwf	3977,c	;volatile
  1231                           
  1232                           ;main.c: 333: LATB = 0x00;
  1233  0007D6  0E00               	movlw	0
  1234  0007D8  6E8A               	movwf	3978,c	;volatile
  1235                           
  1236                           ;main.c: 334: LATC = 0x00;
  1237  0007DA  0E00               	movlw	0
  1238  0007DC  6E8B               	movwf	3979,c	;volatile
  1239  0007DE  0012               	return	
  1240  0007E0                     __end_of_portConfig:
  1241                           	opt stack 0
  1242                           tblptru	equ	0xFF8
  1243                           tblptrh	equ	0xFF7
  1244                           tblptrl	equ	0xFF6
  1245                           tablat	equ	0xFF5
  1246                           postinc0	equ	0xFEE
  1247                           wreg	equ	0xFE8
  1248                           postdec1	equ	0xFE5
  1249                           fsr1l	equ	0xFE1
  1250                           status	equ	0xFD8
  1251                           
  1252 ;; *************** function _nrfTXData *****************
  1253 ;; Defined at:
  1254 ;;		line 528 in file "main.c"
  1255 ;; Parameters:    Size  Location     Type
  1256 ;;  len             2   33[COMRAM] int 
  1257 ;; Auto vars:     Size  Location     Type
  1258 ;;  i               2   36[COMRAM] int 
  1259 ;; Return value:  Size  Location     Type
  1260 ;;		None               void
  1261 ;; Registers used:
  1262 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1263 ;; Tracked objects:
  1264 ;;		On entry : 0/0
  1265 ;;		On exit  : 0/0
  1266 ;;		Unchanged: 0/0
  1267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1268 ;;      Params:         2       0       0       0
  1269 ;;      Locals:         2       0       0       0
  1270 ;;      Temps:          1       0       0       0
  1271 ;;      Totals:         5       0       0       0
  1272 ;;Total ram usage:        5 bytes
  1273 ;; Hardware stack levels used:    1
  1274 ;; Hardware stack levels required when called:    3
  1275 ;; This function calls:
  1276 ;;		_setCSN
  1277 ;;		_spiTransferByte
  1278 ;; This function is called by:
  1279 ;;		_main
  1280 ;; This function uses a non-reentrant model
  1281 ;;
  1282                           
  1283                           	psect	text4
  1284  0005DA                     __ptext4:
  1285                           	opt stack 0
  1286  0005DA                     _nrfTXData:
  1287                           	opt stack 27
  1288                           
  1289                           ;main.c: 530: setCSN(0);
  1290                           
  1291                           ;incstack = 0
  1292  0005DA  0E00               	movlw	0
  1293  0005DC  6E21               	movwf	setCSN@level+1,c
  1294  0005DE  0E00               	movlw	0
  1295  0005E0  6E20               	movwf	setCSN@level,c
  1296  0005E2  EC0A  F004         	call	_setCSN	;wreg free
  1297                           
  1298                           ;main.c: 532: spiTransferByte(0xA0);
  1299  0005E6  0EA0               	movlw	160
  1300  0005E8  EC02  F004         	call	_spiTransferByte
  1301                           
  1302                           ;main.c: 534: if (len != 0) {
  1303  0005EC  5023               	movf	nrfTXData@len+1,w,c
  1304  0005EE  1022               	iorwf	nrfTXData@len,w,c
  1305  0005F0  B4D8               	btfsc	status,2,c
  1306  0005F2  D01C               	goto	l1529
  1307                           
  1308                           ;main.c: 535: for (int i=0;i<len;i++) {
  1309  0005F4  0E00               	movlw	0
  1310  0005F6  6E26               	movwf	nrfTXData@i+1,c
  1311  0005F8  0E00               	movlw	0
  1312  0005FA  6E25               	movwf	nrfTXData@i,c
  1313  0005FC  D00D               	goto	l1527
  1314  0005FE                     l1523:
  1315                           
  1316                           ;main.c: 536: spiTransferByte(dataBufOut[i]);
  1317  0005FE  0100               	movlb	0	; () banked
  1318  000600  0E80               	movlw	low _dataBufOut
  1319  000602  2425               	addwf	nrfTXData@i,w,c
  1320  000604  6ED9               	movwf	fsr2l,c
  1321  000606  0100               	movlb	0	; () banked
  1322  000608  0E00               	movlw	high _dataBufOut
  1323  00060A  2026               	addwfc	nrfTXData@i+1,w,c
  1324  00060C  6EDA               	movwf	fsr2h,c
  1325  00060E  50DF               	movf	indf2,w,c
  1326  000610  EC02  F004         	call	_spiTransferByte
  1327  000614  4A25               	infsnz	nrfTXData@i,f,c
  1328  000616  2A26               	incf	nrfTXData@i+1,f,c
  1329  000618                     l1527:
  1330  000618  5026               	movf	nrfTXData@i+1,w,c
  1331  00061A  0A80               	xorlw	128
  1332  00061C  6E24               	movwf	??_nrfTXData& (0+255),c
  1333  00061E  5022               	movf	nrfTXData@len,w,c
  1334  000620  5C25               	subwf	nrfTXData@i,w,c
  1335  000622  5023               	movf	nrfTXData@len+1,w,c
  1336  000624  0A80               	xorlw	128
  1337  000626  5824               	subwfb	??_nrfTXData& (0+255),w,c
  1338  000628  A0D8               	btfss	status,0,c
  1339  00062A  D7E9               	goto	l1523
  1340  00062C                     l1529:
  1341                           
  1342                           ;main.c: 537: }
  1343                           ;main.c: 538: }
  1344                           ;main.c: 540: setCSN(1);
  1345  00062C  0E00               	movlw	0
  1346  00062E  6E21               	movwf	setCSN@level+1,c
  1347  000630  0E01               	movlw	1
  1348  000632  6E20               	movwf	setCSN@level,c
  1349  000634  EC0A  F004         	call	_setCSN	;wreg free
  1350                           
  1351                           ;main.c: 543: LATAbits.LATA1 = 1;
  1352  000638  8289               	bsf	3977,1,c	;volatile
  1353                           
  1354                           ;main.c: 544: _delay((unsigned long)((12)*(64000000/4000000.0)));
  1355  00063A  0E40               	movlw	64
  1356  00063C                     u837:
  1357  00063C  2EE8               	decfsz	wreg,f,c
  1358  00063E  D7FE               	goto	u837
  1359                           
  1360                           ;main.c: 545: LATAbits.LATA1 = 0;
  1361  000640  9289               	bcf	3977,1,c	;volatile
  1362                           
  1363                           ;main.c: 551: nrfBusy = 1;
  1364  000642  0E01               	movlw	1
  1365  000644  6E3C               	movwf	_nrfBusy,c
  1366  000646  0012               	return	
  1367  000648                     __end_of_nrfTXData:
  1368                           	opt stack 0
  1369                           tblptru	equ	0xFF8
  1370                           tblptrh	equ	0xFF7
  1371                           tblptrl	equ	0xFF6
  1372                           tablat	equ	0xFF5
  1373                           postinc0	equ	0xFEE
  1374                           wreg	equ	0xFE8
  1375                           postdec1	equ	0xFE5
  1376                           fsr1l	equ	0xFE1
  1377                           indf2	equ	0xFDF
  1378                           fsr2h	equ	0xFDA
  1379                           fsr2l	equ	0xFD9
  1380                           status	equ	0xFD8
  1381                           
  1382 ;; *************** function _nrfConfig *****************
  1383 ;; Defined at:
  1384 ;;		line 362 in file "main.c"
  1385 ;; Parameters:    Size  Location     Type
  1386 ;;		None
  1387 ;; Auto vars:     Size  Location     Type
  1388 ;;		None
  1389 ;; Return value:  Size  Location     Type
  1390 ;;		None               void
  1391 ;; Registers used:
  1392 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1393 ;; Tracked objects:
  1394 ;;		On entry : 0/0
  1395 ;;		On exit  : 0/0
  1396 ;;		Unchanged: 0/0
  1397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1398 ;;      Params:         0       0       0       0
  1399 ;;      Locals:         0       0       0       0
  1400 ;;      Temps:          0       0       0       0
  1401 ;;      Totals:         0       0       0       0
  1402 ;;Total ram usage:        0 bytes
  1403 ;; Hardware stack levels used:    1
  1404 ;; Hardware stack levels required when called:    4
  1405 ;; This function calls:
  1406 ;;		_nrfConfigReg
  1407 ;;		_nrfSetRXAddr
  1408 ;;		_nrfSetTXAddr
  1409 ;;		_spiTransfer
  1410 ;; This function is called by:
  1411 ;;		_main
  1412 ;; This function uses a non-reentrant model
  1413 ;;
  1414                           
  1415                           	psect	text5
  1416  00035C                     __ptext5:
  1417                           	opt stack 0
  1418  00035C                     _nrfConfig:
  1419                           	opt stack 26
  1420                           
  1421                           ;main.c: 365: nrfConfigReg('w',0x00,CONFIG_CURR);
  1422                           
  1423                           ;incstack = 0
  1424  00035C  0E00               	movlw	0
  1425  00035E  6E22               	movwf	nrfConfigReg@command,c
  1426  000360  C02A  F023         	movff	_CONFIG_CURR,nrfConfigReg@data
  1427  000364  0E77               	movlw	119
  1428  000366  EC82  F003         	call	_nrfConfigReg
  1429                           
  1430                           ;main.c: 367: nrfConfigReg('w',0x01,EN_AA_CURR);
  1431  00036A  0E01               	movlw	1
  1432  00036C  6E22               	movwf	nrfConfigReg@command,c
  1433  00036E  C03B  F023         	movff	_EN_AA_CURR,nrfConfigReg@data
  1434  000372  0E77               	movlw	119
  1435  000374  EC82  F003         	call	_nrfConfigReg
  1436                           
  1437                           ;main.c: 369: nrfConfigReg('w',0x02,EN_RXADDR_CURR);
  1438  000378  0E02               	movlw	2
  1439  00037A  6E22               	movwf	nrfConfigReg@command,c
  1440  00037C  C02C  F023         	movff	_EN_RXADDR_CURR,nrfConfigReg@data
  1441  000380  0E77               	movlw	119
  1442  000382  EC82  F003         	call	_nrfConfigReg
  1443                           
  1444                           ;main.c: 371: nrfConfigReg('w',0x03,SETUP_AW_CURR);
  1445  000386  0E03               	movlw	3
  1446  000388  6E22               	movwf	nrfConfigReg@command,c
  1447  00038A  C031  F023         	movff	_SETUP_AW_CURR,nrfConfigReg@data
  1448  00038E  0E77               	movlw	119
  1449  000390  EC82  F003         	call	_nrfConfigReg
  1450                           
  1451                           ;main.c: 373: nrfConfigReg('w',0x04,SETUP_RETR_CURR);
  1452  000394  0E04               	movlw	4
  1453  000396  6E22               	movwf	nrfConfigReg@command,c
  1454  000398  C032  F023         	movff	_SETUP_RETR_CURR,nrfConfigReg@data
  1455  00039C  0E77               	movlw	119
  1456  00039E  EC82  F003         	call	_nrfConfigReg
  1457                           
  1458                           ;main.c: 375: nrfConfigReg('w',0x05,RF_CH_CURR);
  1459  0003A2  0E05               	movlw	5
  1460  0003A4  6E22               	movwf	nrfConfigReg@command,c
  1461  0003A6  C02E  F023         	movff	_RF_CH_CURR,nrfConfigReg@data
  1462  0003AA  0E77               	movlw	119
  1463  0003AC  EC82  F003         	call	_nrfConfigReg
  1464                           
  1465                           ;main.c: 377: nrfConfigReg('w',0x06,RF_SETUP_CURR);
  1466  0003B0  0E06               	movlw	6
  1467  0003B2  6E22               	movwf	nrfConfigReg@command,c
  1468  0003B4  C02F  F023         	movff	_RF_SETUP_CURR,nrfConfigReg@data
  1469  0003B8  0E77               	movlw	119
  1470  0003BA  EC82  F003         	call	_nrfConfigReg
  1471                           
  1472                           ;main.c: 379: nrfSetRXAddr(0x0A,RX_ADDRESS,4);
  1473  0003BE  0E00               	movlw	high _RX_ADDRESS
  1474  0003C0  6E23               	movwf	nrfSetRXAddr@addr+1,c
  1475  0003C2  0E33               	movlw	low _RX_ADDRESS
  1476  0003C4  6E22               	movwf	nrfSetRXAddr@addr,c
  1477  0003C6  0E00               	movlw	0
  1478  0003C8  6E25               	movwf	nrfSetRXAddr@len+1,c
  1479  0003CA  0E04               	movlw	4
  1480  0003CC  6E24               	movwf	nrfSetRXAddr@len,c
  1481  0003CE  0E0A               	movlw	10
  1482  0003D0  EC24  F003         	call	_nrfSetRXAddr
  1483                           
  1484                           ;main.c: 381: nrfSetTXAddr(TX_ADDRESS,4);
  1485  0003D4  0E00               	movlw	high _TX_ADDRESS
  1486  0003D6  6E23               	movwf	nrfSetTXAddr@addr+1,c
  1487  0003D8  0E37               	movlw	low _TX_ADDRESS
  1488  0003DA  6E22               	movwf	nrfSetTXAddr@addr,c
  1489  0003DC  0E00               	movlw	0
  1490  0003DE  6E25               	movwf	nrfSetTXAddr@len+1,c
  1491  0003E0  0E04               	movlw	4
  1492  0003E2  6E24               	movwf	nrfSetTXAddr@len,c
  1493  0003E4  EC54  F003         	call	_nrfSetTXAddr	;wreg free
  1494                           
  1495                           ;main.c: 383: nrfConfigReg('w',0x11,RX_PW_P0_CURR);
  1496  0003E8  0E11               	movlw	17
  1497  0003EA  6E22               	movwf	nrfConfigReg@command,c
  1498  0003EC  C030  F023         	movff	_RX_PW_P0_CURR,nrfConfigReg@data
  1499  0003F0  0E77               	movlw	119
  1500  0003F2  EC82  F003         	call	_nrfConfigReg
  1501                           
  1502                           ;main.c: 385: nrfConfigReg('w',0x1C,DYNPD_CURR);
  1503  0003F6  0E1C               	movlw	28
  1504  0003F8  6E22               	movwf	nrfConfigReg@command,c
  1505  0003FA  C02B  F023         	movff	_DYNPD_CURR,nrfConfigReg@data
  1506  0003FE  0E77               	movlw	119
  1507  000400  EC82  F003         	call	_nrfConfigReg
  1508                           
  1509                           ;main.c: 387: nrfConfigReg('w',0x1D,FEATURE_CURR);
  1510  000404  0E1D               	movlw	29
  1511  000406  6E22               	movwf	nrfConfigReg@command,c
  1512  000408  C02D  F023         	movff	_FEATURE_CURR,nrfConfigReg@data
  1513  00040C  0E77               	movlw	119
  1514  00040E  EC82  F003         	call	_nrfConfigReg
  1515                           
  1516                           ;main.c: 389: spiTransfer('n',0xE1,0);
  1517  000412  0EE1               	movlw	225
  1518  000414  6E22               	movwf	spiTransfer@command,c
  1519  000416  0E00               	movlw	0
  1520  000418  6E24               	movwf	spiTransfer@len+1,c
  1521  00041A  0E00               	movlw	0
  1522  00041C  6E23               	movwf	spiTransfer@len,c
  1523  00041E  0E6E               	movlw	110
  1524  000420  EC1C  F002         	call	_spiTransfer
  1525                           
  1526                           ;main.c: 391: spiTransfer('n',0xE2,0);
  1527  000424  0EE2               	movlw	226
  1528  000426  6E22               	movwf	spiTransfer@command,c
  1529  000428  0E00               	movlw	0
  1530  00042A  6E24               	movwf	spiTransfer@len+1,c
  1531  00042C  0E00               	movlw	0
  1532  00042E  6E23               	movwf	spiTransfer@len,c
  1533  000430  0E6E               	movlw	110
  1534  000432  EC1C  F002         	call	_spiTransfer
  1535  000436  0012               	return	
  1536  000438                     __end_of_nrfConfig:
  1537                           	opt stack 0
  1538                           tblptru	equ	0xFF8
  1539                           tblptrh	equ	0xFF7
  1540                           tblptrl	equ	0xFF6
  1541                           tablat	equ	0xFF5
  1542                           postinc0	equ	0xFEE
  1543                           wreg	equ	0xFE8
  1544                           postdec1	equ	0xFE5
  1545                           fsr1l	equ	0xFE1
  1546                           indf2	equ	0xFDF
  1547                           fsr2h	equ	0xFDA
  1548                           fsr2l	equ	0xFD9
  1549                           status	equ	0xFD8
  1550                           
  1551 ;; *************** function _spiTransfer *****************
  1552 ;; Defined at:
  1553 ;;		line 490 in file "main.c"
  1554 ;; Parameters:    Size  Location     Type
  1555 ;;  wrn             1    wreg     unsigned char 
  1556 ;;  command         1   33[COMRAM] unsigned char 
  1557 ;;  len             2   34[COMRAM] int 
  1558 ;; Auto vars:     Size  Location     Type
  1559 ;;  wrn             1   37[COMRAM] unsigned char 
  1560 ;;  i               2   38[COMRAM] int 
  1561 ;; Return value:  Size  Location     Type
  1562 ;;		None               void
  1563 ;; Registers used:
  1564 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1565 ;; Tracked objects:
  1566 ;;		On entry : 0/0
  1567 ;;		On exit  : 0/0
  1568 ;;		Unchanged: 0/0
  1569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1570 ;;      Params:         3       0       0       0
  1571 ;;      Locals:         3       0       0       0
  1572 ;;      Temps:          1       0       0       0
  1573 ;;      Totals:         7       0       0       0
  1574 ;;Total ram usage:        7 bytes
  1575 ;; Hardware stack levels used:    1
  1576 ;; Hardware stack levels required when called:    3
  1577 ;; This function calls:
  1578 ;;		_setCSN
  1579 ;;		_spiTransferByte
  1580 ;; This function is called by:
  1581 ;;		_main
  1582 ;;		_nrfConfig
  1583 ;; This function uses a non-reentrant model
  1584 ;;
  1585                           
  1586                           	psect	text6
  1587  000438                     __ptext6:
  1588                           	opt stack 0
  1589  000438                     _spiTransfer:
  1590                           	opt stack 27
  1591                           
  1592                           ;incstack = 0
  1593                           ;spiTransfer@wrn stored from wreg
  1594  000438  6E26               	movwf	spiTransfer@wrn,c
  1595                           
  1596                           ;main.c: 492: setCSN(0);
  1597  00043A  0E00               	movlw	0
  1598  00043C  6E21               	movwf	setCSN@level+1,c
  1599  00043E  0E00               	movlw	0
  1600  000440  6E20               	movwf	setCSN@level,c
  1601  000442  EC0A  F004         	call	_setCSN	;wreg free
  1602                           
  1603                           ;main.c: 494: if (wrn == 'w') {
  1604  000446  5026               	movf	spiTransfer@wrn,w,c
  1605  000448  0A77               	xorlw	119
  1606  00044A  A4D8               	btfss	status,2,c
  1607  00044C  D005               	goto	l1373
  1608                           
  1609                           ;main.c: 495: spiTransferByte(0x20|command);
  1610  00044E  5022               	movf	spiTransfer@command,w,c
  1611  000450  0920               	iorlw	32
  1612  000452  EC02  F004         	call	_spiTransferByte
  1613                           
  1614                           ;main.c: 496: } else if (wrn == 'r') {
  1615  000456  D00F               	goto	l1381
  1616  000458                     l1373:
  1617  000458  5026               	movf	spiTransfer@wrn,w,c
  1618  00045A  0A72               	xorlw	114
  1619  00045C  A4D8               	btfss	status,2,c
  1620  00045E  D004               	goto	l1377
  1621                           
  1622                           ;main.c: 497: spiTransferByte(0x00|command);
  1623  000460  5022               	movf	spiTransfer@command,w,c
  1624  000462  EC02  F004         	call	_spiTransferByte
  1625                           
  1626                           ;main.c: 498: } else if(wrn == 'n') {
  1627  000466  D007               	goto	l1381
  1628  000468                     l1377:
  1629  000468  5026               	movf	spiTransfer@wrn,w,c
  1630  00046A  0A6E               	xorlw	110
  1631  00046C  A4D8               	btfss	status,2,c
  1632  00046E  D003               	goto	l1381
  1633                           
  1634                           ;main.c: 499: spiTransferByte(command);
  1635  000470  5022               	movf	spiTransfer@command,w,c
  1636  000472  EC02  F004         	call	_spiTransferByte
  1637  000476                     l1381:
  1638                           
  1639                           ;main.c: 500: }
  1640                           ;main.c: 502: if (len != 0) {
  1641  000476  5024               	movf	spiTransfer@len+1,w,c
  1642  000478  1023               	iorwf	spiTransfer@len,w,c
  1643  00047A  B4D8               	btfsc	status,2,c
  1644  00047C  D025               	goto	l1391
  1645                           
  1646                           ;main.c: 503: for (int i=0;i<len;i++) {
  1647  00047E  0E00               	movlw	0
  1648  000480  6E28               	movwf	spiTransfer@i+1,c
  1649  000482  0E00               	movlw	0
  1650  000484  6E27               	movwf	spiTransfer@i,c
  1651  000486  D016               	goto	l1389
  1652  000488                     l1385:
  1653                           
  1654                           ;main.c: 504: dataBufIn[i] = spiTransferByte(dataBufOut[i]);
  1655  000488  0100               	movlb	0	; () banked
  1656  00048A  0E60               	movlw	low _dataBufIn
  1657  00048C  2427               	addwf	spiTransfer@i,w,c
  1658  00048E  6ED9               	movwf	fsr2l,c
  1659  000490  0100               	movlb	0	; () banked
  1660  000492  0E00               	movlw	high _dataBufIn
  1661  000494  2028               	addwfc	spiTransfer@i+1,w,c
  1662  000496  6EDA               	movwf	fsr2h,c
  1663  000498  0100               	movlb	0	; () banked
  1664  00049A  0E80               	movlw	low _dataBufOut
  1665  00049C  2427               	addwf	spiTransfer@i,w,c
  1666  00049E  6EE1               	movwf	fsr1l,c
  1667  0004A0  0100               	movlb	0	; () banked
  1668  0004A2  0E00               	movlw	high _dataBufOut
  1669  0004A4  2028               	addwfc	spiTransfer@i+1,w,c
  1670  0004A6  6EE2               	movwf	fsr1h,c
  1671  0004A8  50E7               	movf	indf1,w,c
  1672  0004AA  EC02  F004         	call	_spiTransferByte
  1673  0004AE  6EDF               	movwf	indf2,c
  1674  0004B0  4A27               	infsnz	spiTransfer@i,f,c
  1675  0004B2  2A28               	incf	spiTransfer@i+1,f,c
  1676  0004B4                     l1389:
  1677  0004B4  5028               	movf	spiTransfer@i+1,w,c
  1678  0004B6  0A80               	xorlw	128
  1679  0004B8  6E25               	movwf	??_spiTransfer& (0+255),c
  1680  0004BA  5023               	movf	spiTransfer@len,w,c
  1681  0004BC  5C27               	subwf	spiTransfer@i,w,c
  1682  0004BE  5024               	movf	spiTransfer@len+1,w,c
  1683  0004C0  0A80               	xorlw	128
  1684  0004C2  5825               	subwfb	??_spiTransfer& (0+255),w,c
  1685  0004C4  A0D8               	btfss	status,0,c
  1686  0004C6  D7E0               	goto	l1385
  1687  0004C8                     l1391:
  1688                           
  1689                           ;main.c: 505: }
  1690                           ;main.c: 506: }
  1691                           ;main.c: 508: setCSN(1);
  1692  0004C8  0E00               	movlw	0
  1693  0004CA  6E21               	movwf	setCSN@level+1,c
  1694  0004CC  0E01               	movlw	1
  1695  0004CE  6E20               	movwf	setCSN@level,c
  1696  0004D0  EC0A  F004         	call	_setCSN	;wreg free
  1697  0004D4  0012               	return	
  1698  0004D6                     __end_of_spiTransfer:
  1699                           	opt stack 0
  1700                           tblptru	equ	0xFF8
  1701                           tblptrh	equ	0xFF7
  1702                           tblptrl	equ	0xFF6
  1703                           tablat	equ	0xFF5
  1704                           postinc0	equ	0xFEE
  1705                           wreg	equ	0xFE8
  1706                           indf1	equ	0xFE7
  1707                           postdec1	equ	0xFE5
  1708                           fsr1h	equ	0xFE2
  1709                           fsr1l	equ	0xFE1
  1710                           indf2	equ	0xFDF
  1711                           fsr2h	equ	0xFDA
  1712                           fsr2l	equ	0xFD9
  1713                           status	equ	0xFD8
  1714                           
  1715 ;; *************** function _nrfSetTXAddr *****************
  1716 ;; Defined at:
  1717 ;;		line 444 in file "main.c"
  1718 ;; Parameters:    Size  Location     Type
  1719 ;;  addr            2   33[COMRAM] PTR unsigned char 
  1720 ;;		 -> TX_ADDRESS(4), 
  1721 ;;  len             2   35[COMRAM] int 
  1722 ;; Auto vars:     Size  Location     Type
  1723 ;;  i               2   38[COMRAM] int 
  1724 ;; Return value:  Size  Location     Type
  1725 ;;		None               void
  1726 ;; Registers used:
  1727 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1728 ;; Tracked objects:
  1729 ;;		On entry : 0/0
  1730 ;;		On exit  : 0/0
  1731 ;;		Unchanged: 0/0
  1732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1733 ;;      Params:         4       0       0       0
  1734 ;;      Locals:         2       0       0       0
  1735 ;;      Temps:          1       0       0       0
  1736 ;;      Totals:         7       0       0       0
  1737 ;;Total ram usage:        7 bytes
  1738 ;; Hardware stack levels used:    1
  1739 ;; Hardware stack levels required when called:    3
  1740 ;; This function calls:
  1741 ;;		_setCSN
  1742 ;;		_spiTransferByte
  1743 ;; This function is called by:
  1744 ;;		_nrfConfig
  1745 ;; This function uses a non-reentrant model
  1746 ;;
  1747                           
  1748                           	psect	text7
  1749  0006A8                     __ptext7:
  1750                           	opt stack 0
  1751  0006A8                     _nrfSetTXAddr:
  1752                           	opt stack 26
  1753                           
  1754                           ;main.c: 446: setCSN(0);
  1755                           
  1756                           ;incstack = 0
  1757  0006A8  0E00               	movlw	0
  1758  0006AA  6E21               	movwf	setCSN@level+1,c
  1759  0006AC  0E00               	movlw	0
  1760  0006AE  6E20               	movwf	setCSN@level,c
  1761  0006B0  EC0A  F004         	call	_setCSN	;wreg free
  1762                           
  1763                           ;main.c: 448: spiTransferByte(0x20|0x10);
  1764  0006B4  0E30               	movlw	48
  1765  0006B6  EC02  F004         	call	_spiTransferByte
  1766                           
  1767                           ;main.c: 450: if (len != 0) {
  1768  0006BA  5025               	movf	nrfSetTXAddr@len+1,w,c
  1769  0006BC  1024               	iorwf	nrfSetTXAddr@len,w,c
  1770  0006BE  B4D8               	btfsc	status,2,c
  1771  0006C0  D01A               	goto	l1437
  1772                           
  1773                           ;main.c: 452: for (int i=0;i<len;i++) {
  1774  0006C2  0E00               	movlw	0
  1775  0006C4  6E28               	movwf	nrfSetTXAddr@i+1,c
  1776  0006C6  0E00               	movlw	0
  1777  0006C8  6E27               	movwf	nrfSetTXAddr@i,c
  1778  0006CA  D00B               	goto	l1435
  1779  0006CC                     l1431:
  1780                           
  1781                           ;main.c: 453: spiTransferByte(addr[i]);
  1782  0006CC  5027               	movf	nrfSetTXAddr@i,w,c
  1783  0006CE  2422               	addwf	nrfSetTXAddr@addr,w,c
  1784  0006D0  6ED9               	movwf	fsr2l,c
  1785  0006D2  5028               	movf	nrfSetTXAddr@i+1,w,c
  1786  0006D4  2023               	addwfc	nrfSetTXAddr@addr+1,w,c
  1787  0006D6  6EDA               	movwf	fsr2h,c
  1788  0006D8  50DF               	movf	indf2,w,c
  1789  0006DA  EC02  F004         	call	_spiTransferByte
  1790  0006DE  4A27               	infsnz	nrfSetTXAddr@i,f,c
  1791  0006E0  2A28               	incf	nrfSetTXAddr@i+1,f,c
  1792  0006E2                     l1435:
  1793  0006E2  5028               	movf	nrfSetTXAddr@i+1,w,c
  1794  0006E4  0A80               	xorlw	128
  1795  0006E6  6E26               	movwf	??_nrfSetTXAddr& (0+255),c
  1796  0006E8  5024               	movf	nrfSetTXAddr@len,w,c
  1797  0006EA  5C27               	subwf	nrfSetTXAddr@i,w,c
  1798  0006EC  5025               	movf	nrfSetTXAddr@len+1,w,c
  1799  0006EE  0A80               	xorlw	128
  1800  0006F0  5826               	subwfb	??_nrfSetTXAddr& (0+255),w,c
  1801  0006F2  A0D8               	btfss	status,0,c
  1802  0006F4  D7EB               	goto	l1431
  1803  0006F6                     l1437:
  1804                           
  1805                           ;main.c: 454: }
  1806                           ;main.c: 455: }
  1807                           ;main.c: 457: setCSN(1);
  1808  0006F6  0E00               	movlw	0
  1809  0006F8  6E21               	movwf	setCSN@level+1,c
  1810  0006FA  0E01               	movlw	1
  1811  0006FC  6E20               	movwf	setCSN@level,c
  1812  0006FE  EC0A  F004         	call	_setCSN	;wreg free
  1813  000702  0012               	return	
  1814  000704                     __end_of_nrfSetTXAddr:
  1815                           	opt stack 0
  1816                           tblptru	equ	0xFF8
  1817                           tblptrh	equ	0xFF7
  1818                           tblptrl	equ	0xFF6
  1819                           tablat	equ	0xFF5
  1820                           postinc0	equ	0xFEE
  1821                           wreg	equ	0xFE8
  1822                           indf1	equ	0xFE7
  1823                           postdec1	equ	0xFE5
  1824                           fsr1h	equ	0xFE2
  1825                           fsr1l	equ	0xFE1
  1826                           indf2	equ	0xFDF
  1827                           fsr2h	equ	0xFDA
  1828                           fsr2l	equ	0xFD9
  1829                           status	equ	0xFD8
  1830                           
  1831 ;; *************** function _nrfSetRXAddr *****************
  1832 ;; Defined at:
  1833 ;;		line 466 in file "main.c"
  1834 ;; Parameters:    Size  Location     Type
  1835 ;;  pipe            1    wreg     unsigned char 
  1836 ;;  addr            2   33[COMRAM] PTR unsigned char 
  1837 ;;		 -> RX_ADDRESS(4), 
  1838 ;;  len             2   35[COMRAM] int 
  1839 ;; Auto vars:     Size  Location     Type
  1840 ;;  pipe            1   38[COMRAM] unsigned char 
  1841 ;;  i               2   39[COMRAM] int 
  1842 ;; Return value:  Size  Location     Type
  1843 ;;		None               void
  1844 ;; Registers used:
  1845 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1846 ;; Tracked objects:
  1847 ;;		On entry : 0/0
  1848 ;;		On exit  : 0/0
  1849 ;;		Unchanged: 0/0
  1850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1851 ;;      Params:         4       0       0       0
  1852 ;;      Locals:         3       0       0       0
  1853 ;;      Temps:          1       0       0       0
  1854 ;;      Totals:         8       0       0       0
  1855 ;;Total ram usage:        8 bytes
  1856 ;; Hardware stack levels used:    1
  1857 ;; Hardware stack levels required when called:    3
  1858 ;; This function calls:
  1859 ;;		_setCSN
  1860 ;;		_spiTransferByte
  1861 ;; This function is called by:
  1862 ;;		_nrfConfig
  1863 ;; This function uses a non-reentrant model
  1864 ;;
  1865                           
  1866                           	psect	text8
  1867  000648                     __ptext8:
  1868                           	opt stack 0
  1869  000648                     _nrfSetRXAddr:
  1870                           	opt stack 26
  1871                           
  1872                           ;incstack = 0
  1873                           ;nrfSetRXAddr@pipe stored from wreg
  1874  000648  6E27               	movwf	nrfSetRXAddr@pipe,c
  1875                           
  1876                           ;main.c: 468: setCSN(0);
  1877  00064A  0E00               	movlw	0
  1878  00064C  6E21               	movwf	setCSN@level+1,c
  1879  00064E  0E00               	movlw	0
  1880  000650  6E20               	movwf	setCSN@level,c
  1881  000652  EC0A  F004         	call	_setCSN	;wreg free
  1882                           
  1883                           ;main.c: 470: spiTransferByte(0x20|pipe);
  1884  000656  5027               	movf	nrfSetRXAddr@pipe,w,c
  1885  000658  0920               	iorlw	32
  1886  00065A  EC02  F004         	call	_spiTransferByte
  1887                           
  1888                           ;main.c: 472: if (len != 0) {
  1889  00065E  5025               	movf	nrfSetRXAddr@len+1,w,c
  1890  000660  1024               	iorwf	nrfSetRXAddr@len,w,c
  1891  000662  B4D8               	btfsc	status,2,c
  1892  000664  D01A               	goto	l1421
  1893                           
  1894                           ;main.c: 474: for (int i=0;i<len;i++) {
  1895  000666  0E00               	movlw	0
  1896  000668  6E29               	movwf	nrfSetRXAddr@i+1,c
  1897  00066A  0E00               	movlw	0
  1898  00066C  6E28               	movwf	nrfSetRXAddr@i,c
  1899  00066E  D00B               	goto	l1419
  1900  000670                     l1415:
  1901                           
  1902                           ;main.c: 475: spiTransferByte(addr[i]);
  1903  000670  5028               	movf	nrfSetRXAddr@i,w,c
  1904  000672  2422               	addwf	nrfSetRXAddr@addr,w,c
  1905  000674  6ED9               	movwf	fsr2l,c
  1906  000676  5029               	movf	nrfSetRXAddr@i+1,w,c
  1907  000678  2023               	addwfc	nrfSetRXAddr@addr+1,w,c
  1908  00067A  6EDA               	movwf	fsr2h,c
  1909  00067C  50DF               	movf	indf2,w,c
  1910  00067E  EC02  F004         	call	_spiTransferByte
  1911  000682  4A28               	infsnz	nrfSetRXAddr@i,f,c
  1912  000684  2A29               	incf	nrfSetRXAddr@i+1,f,c
  1913  000686                     l1419:
  1914  000686  5029               	movf	nrfSetRXAddr@i+1,w,c
  1915  000688  0A80               	xorlw	128
  1916  00068A  6E26               	movwf	??_nrfSetRXAddr& (0+255),c
  1917  00068C  5024               	movf	nrfSetRXAddr@len,w,c
  1918  00068E  5C28               	subwf	nrfSetRXAddr@i,w,c
  1919  000690  5025               	movf	nrfSetRXAddr@len+1,w,c
  1920  000692  0A80               	xorlw	128
  1921  000694  5826               	subwfb	??_nrfSetRXAddr& (0+255),w,c
  1922  000696  A0D8               	btfss	status,0,c
  1923  000698  D7EB               	goto	l1415
  1924  00069A                     l1421:
  1925                           
  1926                           ;main.c: 476: }
  1927                           ;main.c: 477: }
  1928                           ;main.c: 479: setCSN(1);
  1929  00069A  0E00               	movlw	0
  1930  00069C  6E21               	movwf	setCSN@level+1,c
  1931  00069E  0E01               	movlw	1
  1932  0006A0  6E20               	movwf	setCSN@level,c
  1933  0006A2  EC0A  F004         	call	_setCSN	;wreg free
  1934  0006A6  0012               	return	
  1935  0006A8                     __end_of_nrfSetRXAddr:
  1936                           	opt stack 0
  1937                           tblptru	equ	0xFF8
  1938                           tblptrh	equ	0xFF7
  1939                           tblptrl	equ	0xFF6
  1940                           tablat	equ	0xFF5
  1941                           postinc0	equ	0xFEE
  1942                           wreg	equ	0xFE8
  1943                           indf1	equ	0xFE7
  1944                           postdec1	equ	0xFE5
  1945                           fsr1h	equ	0xFE2
  1946                           fsr1l	equ	0xFE1
  1947                           indf2	equ	0xFDF
  1948                           fsr2h	equ	0xFDA
  1949                           fsr2l	equ	0xFD9
  1950                           status	equ	0xFD8
  1951                           
  1952 ;; *************** function _nrfConfigReg *****************
  1953 ;; Defined at:
  1954 ;;		line 422 in file "main.c"
  1955 ;; Parameters:    Size  Location     Type
  1956 ;;  wr              1    wreg     unsigned char 
  1957 ;;  command         1   33[COMRAM] unsigned char 
  1958 ;;  data            1   34[COMRAM] unsigned char 
  1959 ;; Auto vars:     Size  Location     Type
  1960 ;;  wr              1   35[COMRAM] unsigned char 
  1961 ;; Return value:  Size  Location     Type
  1962 ;;                  1    wreg      unsigned char 
  1963 ;; Registers used:
  1964 ;;		wreg, status,2, status,0, cstack
  1965 ;; Tracked objects:
  1966 ;;		On entry : 0/0
  1967 ;;		On exit  : 0/0
  1968 ;;		Unchanged: 0/0
  1969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1970 ;;      Params:         2       0       0       0
  1971 ;;      Locals:         1       0       0       0
  1972 ;;      Temps:          0       0       0       0
  1973 ;;      Totals:         3       0       0       0
  1974 ;;Total ram usage:        3 bytes
  1975 ;; Hardware stack levels used:    1
  1976 ;; Hardware stack levels required when called:    3
  1977 ;; This function calls:
  1978 ;;		_setCSN
  1979 ;;		_spiTransferByte
  1980 ;; This function is called by:
  1981 ;;		_nrfConfig
  1982 ;; This function uses a non-reentrant model
  1983 ;;
  1984                           
  1985                           	psect	text9
  1986  000704                     __ptext9:
  1987                           	opt stack 0
  1988  000704                     _nrfConfigReg:
  1989                           	opt stack 26
  1990                           
  1991                           ;incstack = 0
  1992                           ;nrfConfigReg@wr stored from wreg
  1993  000704  6E24               	movwf	nrfConfigReg@wr,c
  1994                           
  1995                           ;main.c: 424: setCSN(0);
  1996  000706  0E00               	movlw	0
  1997  000708  6E21               	movwf	setCSN@level+1,c
  1998  00070A  0E00               	movlw	0
  1999  00070C  6E20               	movwf	setCSN@level,c
  2000  00070E  EC0A  F004         	call	_setCSN	;wreg free
  2001                           
  2002                           ;main.c: 426: if (wr == 'w') {
  2003  000712  5024               	movf	nrfConfigReg@wr,w,c
  2004  000714  0A77               	xorlw	119
  2005  000716  A4D8               	btfss	status,2,c
  2006  000718  D008               	goto	l1401
  2007                           
  2008                           ;main.c: 427: spiTransferByte(0x20|command);
  2009  00071A  5022               	movf	nrfConfigReg@command,w,c
  2010  00071C  0920               	iorlw	32
  2011  00071E  EC02  F004         	call	_spiTransferByte
  2012                           
  2013                           ;main.c: 428: spiTransferByte(data);
  2014  000722  5023               	movf	nrfConfigReg@data,w,c
  2015  000724  EC02  F004         	call	_spiTransferByte
  2016                           
  2017                           ;main.c: 429: } else if (wr == 'r') {
  2018  000728  D00B               	goto	l1405
  2019  00072A                     l1401:
  2020  00072A  5024               	movf	nrfConfigReg@wr,w,c
  2021  00072C  0A72               	xorlw	114
  2022  00072E  A4D8               	btfss	status,2,c
  2023  000730  D007               	goto	l1405
  2024                           
  2025                           ;main.c: 430: spiTransferByte(0x00|command);
  2026  000732  5022               	movf	nrfConfigReg@command,w,c
  2027  000734  EC02  F004         	call	_spiTransferByte
  2028                           
  2029                           ;main.c: 431: data = spiTransferByte(0xFF);
  2030  000738  0EFF               	movlw	255
  2031  00073A  EC02  F004         	call	_spiTransferByte
  2032  00073E  6E23               	movwf	nrfConfigReg@data,c
  2033  000740                     l1405:
  2034                           
  2035                           ;main.c: 432: }
  2036                           ;main.c: 434: setCSN(1);
  2037  000740  0E00               	movlw	0
  2038  000742  6E21               	movwf	setCSN@level+1,c
  2039  000744  0E01               	movlw	1
  2040  000746  6E20               	movwf	setCSN@level,c
  2041  000748  EC0A  F004         	call	_setCSN	;wreg free
  2042  00074C  0012               	return	
  2043  00074E                     __end_of_nrfConfigReg:
  2044                           	opt stack 0
  2045                           tblptru	equ	0xFF8
  2046                           tblptrh	equ	0xFF7
  2047                           tblptrl	equ	0xFF6
  2048                           tablat	equ	0xFF5
  2049                           postinc0	equ	0xFEE
  2050                           wreg	equ	0xFE8
  2051                           indf1	equ	0xFE7
  2052                           postdec1	equ	0xFE5
  2053                           fsr1h	equ	0xFE2
  2054                           fsr1l	equ	0xFE1
  2055                           indf2	equ	0xFDF
  2056                           fsr2h	equ	0xFDA
  2057                           fsr2l	equ	0xFD9
  2058                           status	equ	0xFD8
  2059                           
  2060 ;; *************** function _spiTransferByte *****************
  2061 ;; Defined at:
  2062 ;;		line 514 in file "main.c"
  2063 ;; Parameters:    Size  Location     Type
  2064 ;;  data            1    wreg     unsigned char 
  2065 ;; Auto vars:     Size  Location     Type
  2066 ;;  data            1   31[COMRAM] unsigned char 
  2067 ;; Return value:  Size  Location     Type
  2068 ;;                  1    wreg      unsigned char 
  2069 ;; Registers used:
  2070 ;;		wreg, status,2
  2071 ;; Tracked objects:
  2072 ;;		On entry : 0/0
  2073 ;;		On exit  : 0/0
  2074 ;;		Unchanged: 0/0
  2075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2076 ;;      Params:         0       0       0       0
  2077 ;;      Locals:         1       0       0       0
  2078 ;;      Temps:          0       0       0       0
  2079 ;;      Totals:         1       0       0       0
  2080 ;;Total ram usage:        1 bytes
  2081 ;; Hardware stack levels used:    1
  2082 ;; Hardware stack levels required when called:    2
  2083 ;; This function calls:
  2084 ;;		Nothing
  2085 ;; This function is called by:
  2086 ;;		_nrfConfigReg
  2087 ;;		_nrfSetTXAddr
  2088 ;;		_nrfSetRXAddr
  2089 ;;		_spiTransfer
  2090 ;;		_nrfTXData
  2091 ;;		_nrfGetStatus
  2092 ;; This function uses a non-reentrant model
  2093 ;;
  2094                           
  2095                           	psect	text10
  2096  000804                     __ptext10:
  2097                           	opt stack 0
  2098  000804                     _spiTransferByte:
  2099                           	opt stack 27
  2100                           
  2101                           ;incstack = 0
  2102                           ;spiTransferByte@data stored from wreg
  2103  000804  6E20               	movwf	spiTransferByte@data,c
  2104                           
  2105                           ;main.c: 516: SSP1BUF = data;
  2106  000806  C020  FFC9         	movff	spiTransferByte@data,4041	;volatile
  2107  00080A                     l165:
  2108  00080A  A69E               	btfss	3998,3,c	;volatile
  2109  00080C  D7FE               	goto	l165
  2110                           
  2111                           ;main.c: 519: PIR1bits.SSP1IF = 0;
  2112  00080E  969E               	bcf	3998,3,c	;volatile
  2113                           
  2114                           ;main.c: 521: return SSP1BUF;
  2115  000810  50C9               	movf	4041,w,c	;volatile
  2116  000812  0012               	return	
  2117  000814                     __end_of_spiTransferByte:
  2118                           	opt stack 0
  2119                           tblptru	equ	0xFF8
  2120                           tblptrh	equ	0xFF7
  2121                           tblptrl	equ	0xFF6
  2122                           tablat	equ	0xFF5
  2123                           postinc0	equ	0xFEE
  2124                           wreg	equ	0xFE8
  2125                           indf1	equ	0xFE7
  2126                           postdec1	equ	0xFE5
  2127                           fsr1h	equ	0xFE2
  2128                           fsr1l	equ	0xFE1
  2129                           indf2	equ	0xFDF
  2130                           fsr2h	equ	0xFDA
  2131                           fsr2l	equ	0xFD9
  2132                           status	equ	0xFD8
  2133                           
  2134 ;; *************** function _setCSN *****************
  2135 ;; Defined at:
  2136 ;;		line 397 in file "main.c"
  2137 ;; Parameters:    Size  Location     Type
  2138 ;;  level           2   31[COMRAM] int 
  2139 ;; Auto vars:     Size  Location     Type
  2140 ;;		None
  2141 ;; Return value:  Size  Location     Type
  2142 ;;		None               void
  2143 ;; Registers used:
  2144 ;;		wreg, status,2, status,0
  2145 ;; Tracked objects:
  2146 ;;		On entry : 0/0
  2147 ;;		On exit  : 0/0
  2148 ;;		Unchanged: 0/0
  2149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2150 ;;      Params:         2       0       0       0
  2151 ;;      Locals:         0       0       0       0
  2152 ;;      Temps:          0       0       0       0
  2153 ;;      Totals:         2       0       0       0
  2154 ;;Total ram usage:        2 bytes
  2155 ;; Hardware stack levels used:    1
  2156 ;; Hardware stack levels required when called:    2
  2157 ;; This function calls:
  2158 ;;		Nothing
  2159 ;; This function is called by:
  2160 ;;		_nrfConfigReg
  2161 ;;		_nrfSetTXAddr
  2162 ;;		_nrfSetRXAddr
  2163 ;;		_spiTransfer
  2164 ;;		_nrfTXData
  2165 ;;		_nrfGetStatus
  2166 ;; This function uses a non-reentrant model
  2167 ;;
  2168                           
  2169                           	psect	text11
  2170  000814                     __ptext11:
  2171                           	opt stack 0
  2172  000814                     _setCSN:
  2173                           	opt stack 27
  2174                           
  2175                           ;main.c: 399: if (level == 1) {
  2176                           
  2177                           ;incstack = 0
  2178  000814  0420               	decf	setCSN@level,w,c
  2179  000816  1021               	iorwf	setCSN@level+1,w,c
  2180  000818  A4D8               	btfss	status,2,c
  2181  00081A  D002               	goto	l125
  2182                           
  2183                           ;main.c: 400: LATAbits.LATA2 = 1;
  2184  00081C  8489               	bsf	3977,2,c	;volatile
  2185                           
  2186                           ;main.c: 401: } else {
  2187  00081E  0012               	return	
  2188  000820                     l125:
  2189                           
  2190                           ;main.c: 402: LATAbits.LATA2 = 0;
  2191  000820  9489               	bcf	3977,2,c	;volatile
  2192  000822  0012               	return	
  2193  000824                     __end_of_setCSN:
  2194                           	opt stack 0
  2195                           tblptru	equ	0xFF8
  2196                           tblptrh	equ	0xFF7
  2197                           tblptrl	equ	0xFF6
  2198                           tablat	equ	0xFF5
  2199                           postinc0	equ	0xFEE
  2200                           wreg	equ	0xFE8
  2201                           indf1	equ	0xFE7
  2202                           postdec1	equ	0xFE5
  2203                           fsr1h	equ	0xFE2
  2204                           fsr1l	equ	0xFE1
  2205                           indf2	equ	0xFDF
  2206                           fsr2h	equ	0xFDA
  2207                           fsr2l	equ	0xFD9
  2208                           status	equ	0xFD8
  2209                           
  2210 ;; *************** function _intConfig *****************
  2211 ;; Defined at:
  2212 ;;		line 307 in file "main.c"
  2213 ;; Parameters:    Size  Location     Type
  2214 ;;		None
  2215 ;; Auto vars:     Size  Location     Type
  2216 ;;		None
  2217 ;; Return value:  Size  Location     Type
  2218 ;;		None               void
  2219 ;; Registers used:
  2220 ;;		None
  2221 ;; Tracked objects:
  2222 ;;		On entry : 0/0
  2223 ;;		On exit  : 0/0
  2224 ;;		Unchanged: 0/0
  2225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2226 ;;      Params:         0       0       0       0
  2227 ;;      Locals:         0       0       0       0
  2228 ;;      Temps:          0       0       0       0
  2229 ;;      Totals:         0       0       0       0
  2230 ;;Total ram usage:        0 bytes
  2231 ;; Hardware stack levels used:    1
  2232 ;; Hardware stack levels required when called:    2
  2233 ;; This function calls:
  2234 ;;		Nothing
  2235 ;; This function is called by:
  2236 ;;		_main
  2237 ;; This function uses a non-reentrant model
  2238 ;;
  2239                           
  2240                           	psect	text12
  2241  0007E0                     __ptext12:
  2242                           	opt stack 0
  2243  0007E0                     _intConfig:
  2244                           	opt stack 28
  2245                           
  2246                           ;main.c: 310: PIR1bits.SSP1IF = 0;
  2247                           
  2248                           ;incstack = 0
  2249  0007E0  969E               	bcf	3998,3,c	;volatile
  2250                           
  2251                           ;main.c: 313: IOCBbits.IOCB4 = 1;
  2252  0007E2  8862               	bsf	3938,4,c	;volatile
  2253                           
  2254                           ;main.c: 314: INTCONbits.RBIF = 0;
  2255  0007E4  90F2               	bcf	intcon,0,c	;volatile
  2256                           
  2257                           ;main.c: 315: INTCON2bits.RBIP = 1;
  2258  0007E6  80F1               	bsf	intcon2,0,c	;volatile
  2259                           
  2260                           ;main.c: 316: INTCONbits.RBIE = 1;
  2261  0007E8  86F2               	bsf	intcon,3,c	;volatile
  2262                           
  2263                           ;main.c: 319: RCONbits.IPEN = 1;
  2264  0007EA  8ED0               	bsf	4048,7,c	;volatile
  2265                           
  2266                           ;main.c: 320: INTCONbits.GIEH = 1;
  2267  0007EC  8EF2               	bsf	intcon,7,c	;volatile
  2268                           
  2269                           ;main.c: 321: INTCONbits.GIEL = 1;
  2270  0007EE  8CF2               	bsf	intcon,6,c	;volatile
  2271  0007F0  0012               	return	
  2272  0007F2                     __end_of_intConfig:
  2273                           	opt stack 0
  2274                           tblptru	equ	0xFF8
  2275                           tblptrh	equ	0xFF7
  2276                           tblptrl	equ	0xFF6
  2277                           tablat	equ	0xFF5
  2278                           intcon	equ	0xFF2
  2279                           intcon2	equ	0xFF1
  2280                           postinc0	equ	0xFEE
  2281                           wreg	equ	0xFE8
  2282                           indf1	equ	0xFE7
  2283                           postdec1	equ	0xFE5
  2284                           fsr1h	equ	0xFE2
  2285                           fsr1l	equ	0xFE1
  2286                           indf2	equ	0xFDF
  2287                           fsr2h	equ	0xFDA
  2288                           fsr2l	equ	0xFD9
  2289                           status	equ	0xFD8
  2290                           
  2291 ;; *************** function _delay10ms *****************
  2292 ;; Defined at:
  2293 ;;		line 557 in file "main.c"
  2294 ;; Parameters:    Size  Location     Type
  2295 ;;  ms_multi        2   31[COMRAM] int 
  2296 ;; Auto vars:     Size  Location     Type
  2297 ;;  i               2   34[COMRAM] int 
  2298 ;; Return value:  Size  Location     Type
  2299 ;;		None               void
  2300 ;; Registers used:
  2301 ;;		wreg, status,2, status,0
  2302 ;; Tracked objects:
  2303 ;;		On entry : 0/0
  2304 ;;		On exit  : 0/0
  2305 ;;		Unchanged: 0/0
  2306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2307 ;;      Params:         2       0       0       0
  2308 ;;      Locals:         2       0       0       0
  2309 ;;      Temps:          1       0       0       0
  2310 ;;      Totals:         5       0       0       0
  2311 ;;Total ram usage:        5 bytes
  2312 ;; Hardware stack levels used:    1
  2313 ;; Hardware stack levels required when called:    2
  2314 ;; This function calls:
  2315 ;;		Nothing
  2316 ;; This function is called by:
  2317 ;;		_main
  2318 ;; This function uses a non-reentrant model
  2319 ;;
  2320                           
  2321                           	psect	text13
  2322  00078A                     __ptext13:
  2323                           	opt stack 0
  2324  00078A                     _delay10ms:
  2325                           	opt stack 28
  2326                           
  2327                           ;main.c: 558: int i = 0;
  2328                           
  2329                           ;incstack = 0
  2330  00078A  0E00               	movlw	0
  2331  00078C  6E24               	movwf	delay10ms@i+1,c
  2332  00078E  0E00               	movlw	0
  2333  000790  6E23               	movwf	delay10ms@i,c
  2334                           
  2335                           ;main.c: 559: for (i=0;i<ms_multi;i++) {
  2336  000792  0E00               	movlw	0
  2337  000794  6E24               	movwf	delay10ms@i+1,c
  2338  000796  0E00               	movlw	0
  2339  000798  6E23               	movwf	delay10ms@i,c
  2340  00079A  D00A               	goto	l178
  2341  00079C                     l1511:
  2342                           
  2343                           ;main.c: 560: _delay((unsigned long)((11)*(64000000/4000.0)));
  2344  00079C  0EE5               	movlw	229
  2345  00079E  6E22               	movwf	??_delay10ms& (0+255),c
  2346  0007A0  0E91               	movlw	145
  2347  0007A2                     u847:
  2348  0007A2  2EE8               	decfsz	wreg,f,c
  2349  0007A4  D7FE               	goto	u847
  2350  0007A6  2E22               	decfsz	??_delay10ms& (0+255),f,c
  2351  0007A8  D7FC               	goto	u847
  2352  0007AA  F000               	nop	
  2353  0007AC  4A23               	infsnz	delay10ms@i,f,c
  2354  0007AE  2A24               	incf	delay10ms@i+1,f,c
  2355  0007B0                     l178:
  2356  0007B0  5024               	movf	delay10ms@i+1,w,c
  2357  0007B2  0A80               	xorlw	128
  2358  0007B4  6E22               	movwf	??_delay10ms& (0+255),c
  2359  0007B6  5020               	movf	delay10ms@ms_multi,w,c
  2360  0007B8  5C23               	subwf	delay10ms@i,w,c
  2361  0007BA  5021               	movf	delay10ms@ms_multi+1,w,c
  2362  0007BC  0A80               	xorlw	128
  2363  0007BE  5822               	subwfb	??_delay10ms& (0+255),w,c
  2364  0007C0  B0D8               	btfsc	status,0,c
  2365  0007C2  0012               	return	
  2366  0007C4  D7EB               	goto	l1511
  2367  0007C6                     __end_of_delay10ms:
  2368                           	opt stack 0
  2369                           tblptru	equ	0xFF8
  2370                           tblptrh	equ	0xFF7
  2371                           tblptrl	equ	0xFF6
  2372                           tablat	equ	0xFF5
  2373                           intcon	equ	0xFF2
  2374                           intcon2	equ	0xFF1
  2375                           postinc0	equ	0xFEE
  2376                           wreg	equ	0xFE8
  2377                           indf1	equ	0xFE7
  2378                           postdec1	equ	0xFE5
  2379                           fsr1h	equ	0xFE2
  2380                           fsr1l	equ	0xFE1
  2381                           indf2	equ	0xFDF
  2382                           fsr2h	equ	0xFDA
  2383                           fsr2l	equ	0xFD9
  2384                           status	equ	0xFD8
  2385                           
  2386 ;; *************** function _lowISR *****************
  2387 ;; Defined at:
  2388 ;;		line 300 in file "main.c"
  2389 ;; Parameters:    Size  Location     Type
  2390 ;;		None
  2391 ;; Auto vars:     Size  Location     Type
  2392 ;;		None
  2393 ;; Return value:  Size  Location     Type
  2394 ;;		None               void
  2395 ;; Registers used:
  2396 ;;		None
  2397 ;; Tracked objects:
  2398 ;;		On entry : 0/0
  2399 ;;		On exit  : 0/0
  2400 ;;		Unchanged: 0/0
  2401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2402 ;;      Params:         0       0       0       0
  2403 ;;      Locals:         0       0       0       0
  2404 ;;      Temps:         17       0       0       0
  2405 ;;      Totals:        17       0       0       0
  2406 ;;Total ram usage:       17 bytes
  2407 ;; Hardware stack levels used:    1
  2408 ;; Hardware stack levels required when called:    1
  2409 ;; This function calls:
  2410 ;;		Nothing
  2411 ;; This function is called by:
  2412 ;;		Interrupt level 1
  2413 ;; This function uses a non-reentrant model
  2414 ;;
  2415                           
  2416                           	psect	intcodelo
  2417  000018                     __pintcodelo:
  2418                           	opt stack 0
  2419  000018                     _lowISR:
  2420                           	opt stack 26
  2421                           
  2422                           ;incstack = 0
  2423  000018  CFD8 F001          	movff	status,??_lowISR
  2424  00001C  CFE8 F002          	movff	wreg,??_lowISR+1
  2425  000020  CFE0 F003          	movff	bsr,??_lowISR+2
  2426  000024  CFFA F004          	movff	pclath,??_lowISR+3
  2427  000028  CFFB F005          	movff	pclatu,??_lowISR+4
  2428  00002C  CFE9 F006          	movff	fsr0l,??_lowISR+5
  2429  000030  CFEA F007          	movff	fsr0h,??_lowISR+6
  2430  000034  CFE1 F008          	movff	fsr1l,??_lowISR+7
  2431  000038  CFE2 F009          	movff	fsr1h,??_lowISR+8
  2432  00003C  CFD9 F00A          	movff	fsr2l,??_lowISR+9
  2433  000040  CFDA F00B          	movff	fsr2h,??_lowISR+10
  2434  000044  CFF3 F00C          	movff	prodl,??_lowISR+11
  2435  000048  CFF4 F00D          	movff	prodh,??_lowISR+12
  2436  00004C  CFF6 F00E          	movff	tblptrl,??_lowISR+13
  2437  000050  CFF7 F00F          	movff	tblptrh,??_lowISR+14
  2438  000054  CFF8 F010          	movff	tblptru,??_lowISR+15
  2439  000058  CFF5 F011          	movff	tablat,??_lowISR+16
  2440  00005C  C011  FFF5         	movff	??_lowISR+16,tablat
  2441  000060  C010  FFF8         	movff	??_lowISR+15,tblptru
  2442  000064  C00F  FFF7         	movff	??_lowISR+14,tblptrh
  2443  000068  C00E  FFF6         	movff	??_lowISR+13,tblptrl
  2444  00006C  C00D  FFF4         	movff	??_lowISR+12,prodh
  2445  000070  C00C  FFF3         	movff	??_lowISR+11,prodl
  2446  000074  C00B  FFDA         	movff	??_lowISR+10,fsr2h
  2447  000078  C00A  FFD9         	movff	??_lowISR+9,fsr2l
  2448  00007C  C009  FFE2         	movff	??_lowISR+8,fsr1h
  2449  000080  C008  FFE1         	movff	??_lowISR+7,fsr1l
  2450  000084  C007  FFEA         	movff	??_lowISR+6,fsr0h
  2451  000088  C006  FFE9         	movff	??_lowISR+5,fsr0l
  2452  00008C  C005  FFFB         	movff	??_lowISR+4,pclatu
  2453  000090  C004  FFFA         	movff	??_lowISR+3,pclath
  2454  000094  C003  FFE0         	movff	??_lowISR+2,bsr
  2455  000098  C002  FFE8         	movff	??_lowISR+1,wreg
  2456  00009C  C001  FFD8         	movff	??_lowISR,status
  2457  0000A0  0010               	retfie	
  2458  0000A2                     __end_of_lowISR:
  2459                           	opt stack 0
  2460                           pclatu	equ	0xFFB
  2461                           pclath	equ	0xFFA
  2462                           tblptru	equ	0xFF8
  2463                           tblptrh	equ	0xFF7
  2464                           tblptrl	equ	0xFF6
  2465                           tablat	equ	0xFF5
  2466                           prodh	equ	0xFF4
  2467                           prodl	equ	0xFF3
  2468                           intcon	equ	0xFF2
  2469                           intcon2	equ	0xFF1
  2470                           postinc0	equ	0xFEE
  2471                           fsr0h	equ	0xFEA
  2472                           fsr0l	equ	0xFE9
  2473                           wreg	equ	0xFE8
  2474                           indf1	equ	0xFE7
  2475                           postdec1	equ	0xFE5
  2476                           fsr1h	equ	0xFE2
  2477                           fsr1l	equ	0xFE1
  2478                           bsr	equ	0xFE0
  2479                           indf2	equ	0xFDF
  2480                           fsr2h	equ	0xFDA
  2481                           fsr2l	equ	0xFD9
  2482                           status	equ	0xFD8
  2483                           
  2484 ;; *************** function _highISR *****************
  2485 ;; Defined at:
  2486 ;;		line 285 in file "main.c"
  2487 ;; Parameters:    Size  Location     Type
  2488 ;;		None
  2489 ;; Auto vars:     Size  Location     Type
  2490 ;;		None
  2491 ;; Return value:  Size  Location     Type
  2492 ;;		None               void
  2493 ;; Registers used:
  2494 ;;		wreg, status,2
  2495 ;; Tracked objects:
  2496 ;;		On entry : 0/0
  2497 ;;		On exit  : 0/0
  2498 ;;		Unchanged: 0/0
  2499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2500 ;;      Params:         0       0       0       0
  2501 ;;      Locals:         0       0       0       0
  2502 ;;      Temps:         14       0       0       0
  2503 ;;      Totals:        14       0       0       0
  2504 ;;Total ram usage:       14 bytes
  2505 ;; Hardware stack levels used:    1
  2506 ;; This function calls:
  2507 ;;		Nothing
  2508 ;; This function is called by:
  2509 ;;		Interrupt level 2
  2510 ;; This function uses a non-reentrant model
  2511 ;;
  2512                           
  2513                           	psect	intcode
  2514  000008                     __pintcode:
  2515                           	opt stack 0
  2516  000008                     _highISR:
  2517                           	opt stack 26
  2518                           
  2519                           ;incstack = 0
  2520  000008  CFFA F012          	movff	pclath,??_highISR
  2521  00000C  CFFB F013          	movff	pclatu,??_highISR+1
  2522  000010  CFE9 F014          	movff	fsr0l,??_highISR+2
  2523  000014  EFB3  F002         	goto	int_func
  2524                           pclatu	equ	0xFFB
  2525                           pclath	equ	0xFFA
  2526                           tblptru	equ	0xFF8
  2527                           tblptrh	equ	0xFF7
  2528                           tblptrl	equ	0xFF6
  2529                           tablat	equ	0xFF5
  2530                           prodh	equ	0xFF4
  2531                           prodl	equ	0xFF3
  2532                           intcon	equ	0xFF2
  2533                           intcon2	equ	0xFF1
  2534                           postinc0	equ	0xFEE
  2535                           fsr0h	equ	0xFEA
  2536                           fsr0l	equ	0xFE9
  2537                           wreg	equ	0xFE8
  2538                           indf1	equ	0xFE7
  2539                           postdec1	equ	0xFE5
  2540                           fsr1h	equ	0xFE2
  2541                           fsr1l	equ	0xFE1
  2542                           bsr	equ	0xFE0
  2543                           indf2	equ	0xFDF
  2544                           fsr2h	equ	0xFDA
  2545                           fsr2l	equ	0xFD9
  2546                           status	equ	0xFD8
  2547                           
  2548                           	psect	intcode_body
  2549  000566                     __pintcode_body:
  2550                           	opt stack 26
  2551  000566                     int_func:
  2552                           	opt stack 26
  2553  000566  CFEA F015          	movff	fsr0h,??_highISR+3
  2554  00056A  CFE1 F016          	movff	fsr1l,??_highISR+4
  2555  00056E  CFE2 F017          	movff	fsr1h,??_highISR+5
  2556  000572  CFD9 F018          	movff	fsr2l,??_highISR+6
  2557  000576  CFDA F019          	movff	fsr2h,??_highISR+7
  2558  00057A  CFF3 F01A          	movff	prodl,??_highISR+8
  2559  00057E  CFF4 F01B          	movff	prodh,??_highISR+9
  2560  000582  CFF6 F01C          	movff	tblptrl,??_highISR+10
  2561  000586  CFF7 F01D          	movff	tblptrh,??_highISR+11
  2562  00058A  CFF8 F01E          	movff	tblptru,??_highISR+12
  2563  00058E  CFF5 F01F          	movff	tablat,??_highISR+13
  2564                           
  2565                           ;main.c: 287: if (INTCONbits.RBIF) {
  2566  000592  A0F2               	btfss	intcon,0,c	;volatile
  2567  000594  D005               	goto	i2l107
  2568                           
  2569                           ;main.c: 289: if (PORTBbits.RB4 == 0) {
  2570  000596  B881               	btfsc	3969,4,c	;volatile
  2571  000598  D002               	goto	i2l1059
  2572                           
  2573                           ;main.c: 290: nrfInterrupt = 1;
  2574  00059A  0E01               	movlw	1
  2575  00059C  6E3D               	movwf	_nrfInterrupt,c	;volatile
  2576  00059E                     i2l1059:
  2577                           
  2578                           ;main.c: 291: }
  2579                           ;main.c: 293: INTCONbits.RBIF = 0;
  2580  00059E  90F2               	bcf	intcon,0,c	;volatile
  2581  0005A0                     i2l107:
  2582  0005A0  C01F  FFF5         	movff	??_highISR+13,tablat
  2583  0005A4  C01E  FFF8         	movff	??_highISR+12,tblptru
  2584  0005A8  C01D  FFF7         	movff	??_highISR+11,tblptrh
  2585  0005AC  C01C  FFF6         	movff	??_highISR+10,tblptrl
  2586  0005B0  C01B  FFF4         	movff	??_highISR+9,prodh
  2587  0005B4  C01A  FFF3         	movff	??_highISR+8,prodl
  2588  0005B8  C019  FFDA         	movff	??_highISR+7,fsr2h
  2589  0005BC  C018  FFD9         	movff	??_highISR+6,fsr2l
  2590  0005C0  C017  FFE2         	movff	??_highISR+5,fsr1h
  2591  0005C4  C016  FFE1         	movff	??_highISR+4,fsr1l
  2592  0005C8  C015  FFEA         	movff	??_highISR+3,fsr0h
  2593  0005CC  C014  FFE9         	movff	??_highISR+2,fsr0l
  2594  0005D0  C013  FFFB         	movff	??_highISR+1,pclatu
  2595  0005D4  C012  FFFA         	movff	??_highISR,pclath
  2596  0005D8  0011               	retfie		f
  2597  0005DA                     __end_of_highISR:
  2598                           	opt stack 0
  2599  0000                     pclatu	equ	0xFFB
  2600                           pclath	equ	0xFFA
  2601                           tblptru	equ	0xFF8
  2602                           tblptrh	equ	0xFF7
  2603                           tblptrl	equ	0xFF6
  2604                           tablat	equ	0xFF5
  2605                           prodh	equ	0xFF4
  2606                           prodl	equ	0xFF3
  2607                           intcon	equ	0xFF2
  2608                           intcon2	equ	0xFF1
  2609                           postinc0	equ	0xFEE
  2610                           fsr0h	equ	0xFEA
  2611                           fsr0l	equ	0xFE9
  2612                           wreg	equ	0xFE8
  2613                           indf1	equ	0xFE7
  2614                           postdec1	equ	0xFE5
  2615                           fsr1h	equ	0xFE2
  2616                           fsr1l	equ	0xFE1
  2617                           bsr	equ	0xFE0
  2618                           indf2	equ	0xFDF
  2619                           fsr2h	equ	0xFDA
  2620                           fsr2l	equ	0xFD9
  2621                           status	equ	0xFD8
  2622                           pclatu	equ	0xFFB
  2623                           pclath	equ	0xFFA
  2624                           tblptru	equ	0xFF8
  2625                           tblptrh	equ	0xFF7
  2626                           tblptrl	equ	0xFF6
  2627                           tablat	equ	0xFF5
  2628                           prodh	equ	0xFF4
  2629                           prodl	equ	0xFF3
  2630                           intcon	equ	0xFF2
  2631                           intcon2	equ	0xFF1
  2632                           postinc0	equ	0xFEE
  2633                           fsr0h	equ	0xFEA
  2634                           fsr0l	equ	0xFE9
  2635                           wreg	equ	0xFE8
  2636                           indf1	equ	0xFE7
  2637                           postdec1	equ	0xFE5
  2638                           fsr1h	equ	0xFE2
  2639                           fsr1l	equ	0xFE1
  2640                           bsr	equ	0xFE0
  2641                           indf2	equ	0xFDF
  2642                           fsr2h	equ	0xFDA
  2643                           fsr2l	equ	0xFD9
  2644                           status	equ	0xFD8
  2645                           
  2646                           	psect	rparam
  2647  0000                     pclatu	equ	0xFFB
  2648                           pclath	equ	0xFFA
  2649                           tblptru	equ	0xFF8
  2650                           tblptrh	equ	0xFF7
  2651                           tblptrl	equ	0xFF6
  2652                           tablat	equ	0xFF5
  2653                           prodh	equ	0xFF4
  2654                           prodl	equ	0xFF3
  2655                           intcon	equ	0xFF2
  2656                           intcon2	equ	0xFF1
  2657                           postinc0	equ	0xFEE
  2658                           fsr0h	equ	0xFEA
  2659                           fsr0l	equ	0xFE9
  2660                           wreg	equ	0xFE8
  2661                           indf1	equ	0xFE7
  2662                           postdec1	equ	0xFE5
  2663                           fsr1h	equ	0xFE2
  2664                           fsr1l	equ	0xFE1
  2665                           bsr	equ	0xFE0
  2666                           indf2	equ	0xFDF
  2667                           fsr2h	equ	0xFDA
  2668                           fsr2l	equ	0xFD9
  2669                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        17
    BSS         69
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     41      63
    BANK0           160     20      84
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    nrfSetRXAddr@addr	PTR unsigned char  size(2) Largest target is 4
		 -> RX_ADDRESS(COMRAM[4]), 

    nrfSetTXAddr@addr	PTR unsigned char  size(2) Largest target is 4
		 -> TX_ADDRESS(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->_spiConfig_1
    _spiConfig_1->___aldiv
    _nrfTXData->_setCSN
    _nrfConfig->_nrfSetRXAddr
    _spiTransfer->_setCSN
    _nrfSetTXAddr->_setCSN
    _nrfSetRXAddr->_setCSN
    _nrfConfigReg->_setCSN

Critical Paths under _highISR in COMRAM

    None.

Critical Paths under _lowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_spiConfig_1
    _spiConfig_1->___aldiv

Critical Paths under _highISR in BANK0

    None.

Critical Paths under _lowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _highISR in BANK1

    None.

Critical Paths under _lowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _highISR in BANK2

    None.

Critical Paths under _lowISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   10141
                                             16 BANK0      4     4      0
                          _delay10ms
                          _intConfig
                          _nrfConfig
                          _nrfTXData
                         _portConfig
                        _spiConfig_1
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiConfig_1                                         12    10      2     869
                                             39 COMRAM     2     0      2
                                              6 BANK0     10    10      0
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     705
                                             31 COMRAM     8     0      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _portConfig                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _nrfTXData                                            5     3      2    1037
                                             33 COMRAM     5     3      2
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (1) _nrfConfig                                            0     0      0    6313
                       _nrfConfigReg
                       _nrfSetRXAddr
                       _nrfSetTXAddr
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiTransfer                                          7     4      3    1709
                                             33 COMRAM     7     4      3
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfSetTXAddr                                         7     3      4    1133
                                             33 COMRAM     7     3      4
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfSetRXAddr                                         8     4      4    1164
                                             33 COMRAM     8     4      4
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfConfigReg                                         3     1      2    2307
                                             33 COMRAM     3     1      2
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _spiTransferByte                                      1     1      0      31
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setCSN                                               2     0      2     811
                                             31 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _intConfig                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _delay10ms                                            5     3      2     136
                                             31 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _lowISR                                              17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _highISR                                             14    14      0       0
                                             17 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay10ms
   _intConfig
   _nrfConfig
     _nrfConfigReg
       _setCSN
       _spiTransferByte
     _nrfSetRXAddr
       _setCSN
       _spiTransferByte
     _nrfSetTXAddr
       _setCSN
       _spiTransferByte
     _spiTransfer
       _setCSN
       _spiTransferByte
   _nrfTXData
     _setCSN
     _spiTransferByte
   _portConfig
   _spiConfig_1
     ___aldiv
   _spiTransfer
     _setCSN
     _spiTransferByte

 _lowISR (ROOT)

 _highISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       6        0.0%
BANK2              100      0       0       7        0.0%
BITBANK1           100      0       0       9        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     14      54       4       52.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     29      3F       1       66.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      93       8        0.0%
DATA                 0      0      93      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Thu Oct 02 09:50:03 2014

__size_of_spiTransferByte 0010                        l97 01B4                        bsr 000FE0  
              _RX_ADDRESS 0033               __CFG_LVP$ON 000000                       l100 0220  
                     l125 0820                       l165 080A                       l178 07B0  
                     u817 0218                       u827 0222                       u837 063C  
                     u685 024E                       u847 07A2                       u695 0280  
                     wreg 000FE8                _TX_ADDRESS 0037                      l1401 072A  
                    l1405 0740                      l1421 069A                      l1511 079C  
                    l1415 0670                      l1431 06CC                      l1419 0686  
                    l1435 06E2                      l1523 05FE                      l1437 06F6  
                    l1381 0476                      l1373 0458                      l1461 02D4  
                    l1453 029A                      l1391 04C8                      l1527 0618  
                    l1471 0314                      l1463 02D8                      l1447 0268  
                    l1385 0488                      l1377 0468                      l1529 062C  
                    l1459 02C6                      l1475 0324                      l1627 01DA  
                    l1389 04B4                      l1479 034A                      l1639 0210  
                    _LATA 000F89                      _LATB 000F8A                      _LATC 000F8B  
      spiTransfer@command 0022                      _main 00A6                      fsr0h 000FEA  
                    fsr1h 000FE2                      fsr0l 000FE9                      fsr2h 000FDA  
                    indf1 000FE7                      fsr1l 000FE1                      indf2 000FDF  
                    fsr2l 000FD9             __CFG_BORV$190 000000                      pclat 000FFA  
                    prodh 000FF4                      prodl 000FF3                      start 00A2  
           __CFG_IESO$OFF 000000            nrfConfigReg@wr 0024           __end_of___aldiv 035C  
                   ?_main 0001                     i2l107 05A0                     _TRISA 000F92  
                   _TRISB 000F93                     _TRISC 000F94           __end_of_highISR 05DA  
          __CFG_FCMEN$OFF 000000        __CFG_MCLRE$EXTMCLR 000000                     tablat 000FF5  
                   status 000FD8            __CFG_HFOFST$ON 000000            __CFG_FOSC$HSHP 000000  
         __initialization 074E              __end_of_main 0230       spiTransferByte@data 0020  
                  ??_main 002A             __activetblptr 000000         ??_spiTransferByte 0020  
          __CFG_PLLCFG$ON 000000             nrfSetRXAddr@i 0028             nrfSetTXAddr@i 0027  
                  i2l1059 059E            __CFG_WDTEN$OFF 000000              ?_spiConfig_1 0028  
          __CFG_PWRTEN$ON 000000            __CFG_XINST$OFF 000000                 ??___aldiv 0028  
          __CFG_STVREN$ON 000000                    _lowISR 0018                    _setCSN 0814  
                  clear_0 0754               setCSN@level 0020                 ??_highISR 0012  
           ?_nrfConfigReg 0022              _FEATURE_CURR 002D       spiConfig_1@spiSpeed 0028  
            __pdataCOMRAM 002A              ?_spiTransfer 0022                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8                __accesstop 0060  
 __end_of__initialization 0784           __CFG_PBADEN$OFF 000000             ?_nrfSetRXAddr 0022  
           ?_nrfSetTXAddr 0022            __pcstackCOMRAM 0001        __size_of_delay10ms 003C  
          _EN_RXADDR_CURR 002C            ??_nrfConfigReg 0024          nrfConfigReg@data 0023  
              _dataBufOut 0080                __pbssBANK0 0060        __size_of_intConfig 0012  
          ??_nrfSetRXAddr 0026            ??_nrfSetTXAddr 0026        __size_of_nrfTXData 006E  
      __size_of_nrfConfig 00DC       nrfConfigReg@command 0022        __CFG_CCP2MX$PORTC1 000000  
      __CFG_CCP3MX$PORTB5 000000                   ?_lowISR 0001                   ?_setCSN 0020  
                 _SSP1ADD 000FC8                   _SSP1BUF 000FC9         __end_of_delay10ms 07C6  
        nrfSetRXAddr@addr 0022          nrfSetRXAddr@pipe 0027                   __Hparam 0000  
                 __Lparam 0000      __size_of_spiConfig_1 0090           _spiTransferByte 0804  
              delay10ms@i 0023                   ___aldiv 0230             _RX_PW_P0_CURR 0030  
                 __pcinit 074E           __size_of_lowISR 008A           __size_of_setCSN 0010  
        nrfSetTXAddr@addr 0022                   __ramtop 0300         __end_of_intConfig 07F2  
                 _highISR 0008                   __ptext0 00A6                   __ptext1 04D6  
                 __ptext2 0230                   __ptext3 07C6                   __ptext4 05DA  
                 __ptext5 035C                   __ptext6 0438                   __ptext7 06A8  
                 __ptext8 0648                   __ptext9 0704                   _nrfBusy 003C  
       __end_of_nrfTXData 0648          ___aldiv@dividend 0020         __end_of_nrfConfig 0438  
    __size_of_spiTransfer 009E            __pintcode_body 0566      end_of_initialization 0784  
    spiConfig_1@sspAddVal 00AE                   int_func 0566      __end_of_nrfConfigReg 074E  
        ___aldiv@quotient 00A2                   postdec1 000FE5                   postinc0 000FEE  
            nrfTXData@len 0022                _portConfig 07C6                 _PORTBbits 000F81  
    __end_of_nrfSetRXAddr 06A8      __end_of_nrfSetTXAddr 0704                main@TXtime 00B2  
 __end_of_spiTransferByte 0814             __pidataCOMRAM 07F2            __end_of_lowISR 00A2  
          __end_of_setCSN 0824       start_initialization 074E          _spiConfig_1$1492 00AA  
                ??_lowISR 0001                  ??_setCSN 0022               ?_portConfig 0001  
              nrfTXData@i 0025               __pbssCOMRAM 003B             __pcstackBANK0 00A0  
   __size_of_nrfConfigReg 004A                 _dataBufIn 0060          ?_spiTransferByte 0001  
               _delay10ms 078A               _CONFIG_CURR 002A             _SETUP_AW_CURR 0031  
               __pintcode 0008                  ?___aldiv 0020     __size_of_nrfSetRXAddr 0060  
   __size_of_nrfSetTXAddr 005C           _SETUP_RETR_CURR 0032               __pintcodelo 0018  
        __CFG_PRICLKEN$ON 000000                  ?_highISR 0001              _nrfConfigReg 0704  
         nrfSetRXAddr@len 0024                 _intConfig 07E0                 _nrfSTATUS 003E  
               _nrfTXData 05DA           nrfSetTXAddr@len 0024                 _nrfConfig 035C  
         ___aldiv@divisor 0024           ___aldiv@counter 00A0                  _IOCBbits 000F62  
     __size_of_portConfig 001A                  _LATAbits 000F89                ?_delay10ms 0020  
           ??_spiConfig_1 00A6              _nrfSetRXAddr 0648              _nrfSetTXAddr 06A8  
            _nrfInterrupt 003D                 _spiTXFlag 003F                  _PIR1bits 000F9E  
                _RCONbits 000FD0          __CFG_WDTPS$32768 000000             _RF_SETUP_CURR 002F  
       delay10ms@ms_multi 0020             ??_spiTransfer 0025                 main@count 00B0  
              ?_intConfig 0001               _INTCON2bits 000FF1                ?_nrfTXData 0022  
               copy_data0 0778                ?_nrfConfig 0001                  __Hrparam 0000  
                __Lrparam 0000        __CFG_BOREN$SBORDIS 000000         __CFG_P2BMX$PORTB5 000000  
     __end_of_spiConfig_1 0566          __size_of___aldiv 012C          __size_of_highISR 05D2  
                __ptext10 0804                  __ptext11 0814                  __ptext12 07E0  
                __ptext13 078A              _SSP1CON1bits 000FC6       __end_of_spiTransfer 04D6  
           __size_of_main 018A               ??_delay10ms 0022                _EN_AA_CURR 003B  
            _SSP1STATbits 000FC7              ??_portConfig 0020                _DYNPD_CURR 002B  
              _INTCONbits 000FF2               ??_intConfig 0020               ??_nrfTXData 0024  
             ??_nrfConfig 002A                  intlevel1 0000                  intlevel2 0000  
      __end_of_portConfig 07E0               _spiConfig_1 04D6            spiTransfer@len 0023  
          spiTransfer@wrn 0026                _RF_CH_CURR 002E               _spiTransfer 0438  
            ___aldiv@sign 00A1         __CFG_T3CMX$PORTC0 000000              spiTransfer@i 0027  
