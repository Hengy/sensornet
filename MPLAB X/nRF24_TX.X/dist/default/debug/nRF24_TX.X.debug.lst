

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Thu Oct 02 08:58:30 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F24K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    31  0000                     
    32                           	psect	idataCOMRAM
    33  0007E4                     __pidataCOMRAM:
    34                           	opt stack 0
    35                           
    36                           ;initializer for _CONFIG_CURR
    37  0007E4  5A                 	db	90
    38                           
    39                           ;initializer for _DYNPD_CURR
    40  0007E5  01                 	db	1
    41                           
    42                           ;initializer for _EN_RXADDR_CURR
    43  0007E6  01                 	db	1
    44                           
    45                           ;initializer for _FEATURE_CURR
    46  0007E7  04                 	db	4
    47                           
    48                           ;initializer for _RF_CH_CURR
    49  0007E8  69                 	db	105
    50                           
    51                           ;initializer for _RF_SETUP_CURR
    52  0007E9  06                 	db	6
    53                           
    54                           ;initializer for _RX_PW_P0_CURR
    55  0007EA  01                 	db	1
    56                           
    57                           ;initializer for _SETUP_AW_CURR
    58  0007EB  02                 	db	2
    59                           
    60                           ;initializer for _SETUP_RETR_CURR
    61  0007EC  21                 	db	33
    62                           
    63                           ;initializer for _RX_ADDRESS
    64  0007ED  E7                 	db	231
    65  0007EE  E7                 	db	231
    66  0007EF  E7                 	db	231
    67  0007F0  E7                 	db	231
    68                           
    69                           ;initializer for _TX_ADDRESS
    70  0007F1  E7                 	db	231
    71  0007F2  E7                 	db	231
    72  0007F3  E7                 	db	231
    73  0007F4  E7                 	db	231
    74  0000                     _INTCON2bits	set	4081
    75  0000                     _INTCONbits	set	4082
    76  0000                     _IOCBbits	set	3938
    77  0000                     _LATA	set	3977
    78  0000                     _LATAbits	set	3977
    79  0000                     _LATB	set	3978
    80  0000                     _LATC	set	3979
    81  0000                     _PIR1bits	set	3998
    82  0000                     _PORTBbits	set	3969
    83  0000                     _RCONbits	set	4048
    84  0000                     _SSP1ADD	set	4040
    85  0000                     _SSP1BUF	set	4041
    86  0000                     _SSP1CON1bits	set	4038
    87  0000                     _SSP1STATbits	set	4039
    88  0000                     _TRISA	set	3986
    89  0000                     _TRISB	set	3987
    90  0000                     _TRISC	set	3988
    91                           
    92                           ; #config settings
    93  0000                     
    94                           	psect	cinit
    95  000740                     __pcinit:
    96                           	opt stack 0
    97  000740                     start_initialization:
    98                           	opt stack 0
    99  000740                     __initialization:
   100                           	opt stack 0
   101                           
   102                           ; Clear objects allocated to BANK0 (64 bytes)
   103  000740  EE00  F060         	lfsr	0,__pbssBANK0
   104  000744  0E40               	movlw	64
   105  000746                     clear_0:
   106  000746  6AEE               	clrf	postinc0,c
   107  000748  06E8               	decf	wreg,f,c
   108  00074A  E1FD               	bnz	clear_0
   109                           
   110                           ; Clear objects allocated to COMRAM (5 bytes)
   111  00074C  6A3F               	clrf	(__pbssCOMRAM+4)& (0+255),c
   112  00074E  6A3E               	clrf	(__pbssCOMRAM+3)& (0+255),c
   113  000750  6A3D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   114  000752  6A3C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   115  000754  6A3B               	clrf	__pbssCOMRAM& (0+255),c
   116                           
   117                           ; Initialize objects allocated to COMRAM (17 bytes)
   118                           ; load TBLPTR registers with __pidataCOMRAM
   119  000756  0EE4               	movlw	low __pidataCOMRAM
   120  000758  6EF6               	movwf	tblptrl,c
   121  00075A  0E07               	movlw	high __pidataCOMRAM
   122  00075C  6EF7               	movwf	tblptrh,c
   123  00075E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   124  000760  6EF8               	movwf	tblptru,c
   125  000762  EE00  F02A         	lfsr	0,__pdataCOMRAM
   126  000766  EE10 F011          	lfsr	1,17
   127  00076A                     copy_data0:
   128  00076A  0009               	tblrd		*+
   129  00076C  CFF5 FFEE          	movff	tablat,postinc0
   130  000770  50E5               	movf	postdec1,w,c
   131  000772  50E1               	movf	fsr1l,w,c
   132  000774  E1FA               	bnz	copy_data0
   133  000776                     end_of_initialization:
   134                           	opt stack 0
   135  000776                     __end_of__initialization:
   136                           	opt stack 0
   137  000776  0100               	movlb	0
   138  000778  EF53  F000         	goto	_main	;jump to C main() function
   139                           tblptru	equ	0xFF8
   140                           tblptrh	equ	0xFF7
   141                           tblptrl	equ	0xFF6
   142                           tablat	equ	0xFF5
   143                           postinc0	equ	0xFEE
   144                           wreg	equ	0xFE8
   145                           postdec1	equ	0xFE5
   146                           fsr1l	equ	0xFE1
   147                           
   148                           	psect	bssCOMRAM
   149  00003B                     __pbssCOMRAM:
   150                           	opt stack 0
   151  00003B                     _EN_AA_CURR:
   152                           	opt stack 0
   153  00003B                     	ds	1
   154  00003C                     _nrfBusy:
   155                           	opt stack 0
   156  00003C                     	ds	1
   157  00003D                     _nrfInterrupt:
   158                           	opt stack 0
   159  00003D                     	ds	1
   160  00003E                     _nrfSTATUS:
   161                           	opt stack 0
   162  00003E                     	ds	1
   163  00003F                     _spiTXFlag:
   164                           	opt stack 0
   165  00003F                     	ds	1
   166                           tblptru	equ	0xFF8
   167                           tblptrh	equ	0xFF7
   168                           tblptrl	equ	0xFF6
   169                           tablat	equ	0xFF5
   170                           postinc0	equ	0xFEE
   171                           wreg	equ	0xFE8
   172                           postdec1	equ	0xFE5
   173                           fsr1l	equ	0xFE1
   174                           
   175                           	psect	dataCOMRAM
   176  00002A                     __pdataCOMRAM:
   177                           	opt stack 0
   178  00002A                     _CONFIG_CURR:
   179                           	opt stack 0
   180  00002A                     	ds	1
   181  00002B                     _DYNPD_CURR:
   182                           	opt stack 0
   183  00002B                     	ds	1
   184  00002C                     _EN_RXADDR_CURR:
   185                           	opt stack 0
   186  00002C                     	ds	1
   187  00002D                     _FEATURE_CURR:
   188                           	opt stack 0
   189  00002D                     	ds	1
   190  00002E                     _RF_CH_CURR:
   191                           	opt stack 0
   192  00002E                     	ds	1
   193  00002F                     _RF_SETUP_CURR:
   194                           	opt stack 0
   195  00002F                     	ds	1
   196  000030                     _RX_PW_P0_CURR:
   197                           	opt stack 0
   198  000030                     	ds	1
   199  000031                     _SETUP_AW_CURR:
   200                           	opt stack 0
   201  000031                     	ds	1
   202  000032                     _SETUP_RETR_CURR:
   203                           	opt stack 0
   204  000032                     	ds	1
   205  000033                     _RX_ADDRESS:
   206                           	opt stack 0
   207  000033                     	ds	4
   208  000037                     _TX_ADDRESS:
   209                           	opt stack 0
   210  000037                     	ds	4
   211                           tblptru	equ	0xFF8
   212                           tblptrh	equ	0xFF7
   213                           tblptrl	equ	0xFF6
   214                           tablat	equ	0xFF5
   215                           postinc0	equ	0xFEE
   216                           wreg	equ	0xFE8
   217                           postdec1	equ	0xFE5
   218                           fsr1l	equ	0xFE1
   219                           
   220                           	psect	bssBANK0
   221  000060                     __pbssBANK0:
   222                           	opt stack 0
   223  000060                     _dataBufIn:
   224                           	opt stack 0
   225  000060                     	ds	32
   226  000080                     _dataBufOut:
   227                           	opt stack 0
   228  000080                     	ds	32
   229                           tblptru	equ	0xFF8
   230                           tblptrh	equ	0xFF7
   231                           tblptrl	equ	0xFF6
   232                           tablat	equ	0xFF5
   233                           postinc0	equ	0xFEE
   234                           wreg	equ	0xFE8
   235                           postdec1	equ	0xFE5
   236                           fsr1l	equ	0xFE1
   237                           
   238                           	psect	cstackBANK0
   239  0000A0                     __pcstackBANK0:
   240                           	opt stack 0
   241  0000A0                     ___aldiv@counter:
   242                           	opt stack 0
   243                           
   244                           ; 1 bytes @ 0x0
   245  0000A0                     	ds	1
   246  0000A1                     ___aldiv@sign:
   247                           	opt stack 0
   248                           
   249                           ; 1 bytes @ 0x1
   250  0000A1                     	ds	1
   251  0000A2                     ___aldiv@quotient:
   252                           	opt stack 0
   253                           
   254                           ; 4 bytes @ 0x2
   255  0000A2                     	ds	4
   256  0000A6                     ??_spiConfig_1:
   257                           
   258                           ; 0 bytes @ 0x6
   259  0000A6                     	ds	4
   260  0000AA                     _spiConfig_1$1492:
   261                           	opt stack 0
   262                           
   263                           ; 4 bytes @ 0xA
   264  0000AA                     	ds	4
   265  0000AE                     spiConfig_1@sspAddVal:
   266                           	opt stack 0
   267                           
   268                           ; 2 bytes @ 0xE
   269  0000AE                     	ds	2
   270  0000B0                     main@count:
   271                           	opt stack 0
   272                           
   273                           ; 2 bytes @ 0x10
   274  0000B0                     	ds	2
   275  0000B2                     main@TXtime:
   276                           	opt stack 0
   277                           
   278                           ; 2 bytes @ 0x12
   279  0000B2                     	ds	2
   280                           tblptru	equ	0xFF8
   281                           tblptrh	equ	0xFF7
   282                           tblptrl	equ	0xFF6
   283                           tablat	equ	0xFF5
   284                           postinc0	equ	0xFEE
   285                           wreg	equ	0xFE8
   286                           postdec1	equ	0xFE5
   287                           fsr1l	equ	0xFE1
   288                           
   289                           	psect	cstackCOMRAM
   290  000001                     __pcstackCOMRAM:
   291                           	opt stack 0
   292  000001                     ??_lowISR:
   293  000001                     
   294                           ; 1 bytes @ 0x0
   295  000001                     	ds	17
   296  000012                     ??_highISR:
   297                           
   298                           ; 0 bytes @ 0x11
   299  000012                     	ds	14
   300  000020                     ?___aldiv:
   301                           	opt stack 0
   302  000020                     spiTransferByte@data:
   303                           	opt stack 0
   304  000020                     setCSN@level:
   305                           	opt stack 0
   306  000020                     delay10ms@ms_multi:
   307                           	opt stack 0
   308  000020                     ___aldiv@dividend:
   309                           	opt stack 0
   310                           
   311                           ; 4 bytes @ 0x1F
   312  000020                     	ds	2
   313  000022                     ??_delay10ms:
   314  000022                     nrfConfigReg@command:
   315                           	opt stack 0
   316  000022                     spiTransfer@command:
   317                           	opt stack 0
   318  000022                     nrfSetTXAddr@addr:
   319                           	opt stack 0
   320  000022                     nrfSetRXAddr@addr:
   321                           	opt stack 0
   322  000022                     nrfTXData@len:
   323                           	opt stack 0
   324                           
   325                           ; 2 bytes @ 0x21
   326  000022                     	ds	1
   327  000023                     nrfConfigReg@data:
   328                           	opt stack 0
   329  000023                     spiTransfer@len:
   330                           	opt stack 0
   331  000023                     delay10ms@i:
   332                           	opt stack 0
   333                           
   334                           ; 2 bytes @ 0x22
   335  000023                     	ds	1
   336  000024                     ??_nrfTXData:
   337  000024                     nrfConfigReg@wr:
   338                           	opt stack 0
   339  000024                     nrfSetTXAddr@len:
   340                           	opt stack 0
   341  000024                     nrfSetRXAddr@len:
   342                           	opt stack 0
   343  000024                     ___aldiv@divisor:
   344                           	opt stack 0
   345                           
   346                           ; 4 bytes @ 0x23
   347  000024                     	ds	1
   348  000025                     ??_spiTransfer:
   349  000025                     nrfTXData@i:
   350                           	opt stack 0
   351                           
   352                           ; 2 bytes @ 0x24
   353  000025                     	ds	1
   354  000026                     ??_nrfSetRXAddr:
   355  000026                     ??_nrfSetTXAddr:
   356  000026                     spiTransfer@wrn:
   357                           	opt stack 0
   358                           
   359                           ; 1 bytes @ 0x25
   360  000026                     	ds	1
   361  000027                     nrfSetRXAddr@pipe:
   362                           	opt stack 0
   363  000027                     nrfSetTXAddr@i:
   364                           	opt stack 0
   365  000027                     spiTransfer@i:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0x26
   369  000027                     	ds	1
   370  000028                     spiConfig_1@spiSpeed:
   371                           	opt stack 0
   372  000028                     nrfSetRXAddr@i:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0x27
   376  000028                     	ds	2
   377  00002A                     tblptru	equ	0xFF8
   378                           tblptrh	equ	0xFF7
   379                           tblptrl	equ	0xFF6
   380                           tablat	equ	0xFF5
   381                           postinc0	equ	0xFEE
   382                           wreg	equ	0xFE8
   383                           postdec1	equ	0xFE5
   384                           fsr1l	equ	0xFE1
   385                           
   386                           ; 0 bytes @ 0x29
   387 ;;
   388 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   389 ;;
   390 ;; *************** function _main *****************
   391 ;; Defined at:
   392 ;;		line 202 in file "main.c"
   393 ;; Parameters:    Size  Location     Type
   394 ;;		None
   395 ;; Auto vars:     Size  Location     Type
   396 ;;  TXtime          2   18[BANK0 ] unsigned int 
   397 ;;  count           2   16[BANK0 ] int 
   398 ;; Return value:  Size  Location     Type
   399 ;;		None               void
   400 ;; Registers used:
   401 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   402 ;; Tracked objects:
   403 ;;		On entry : 0/0
   404 ;;		On exit  : 0/0
   405 ;;		Unchanged: 0/0
   406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   407 ;;      Params:         0       0       0       0
   408 ;;      Locals:         0       4       0       0
   409 ;;      Temps:          0       0       0       0
   410 ;;      Totals:         0       4       0       0
   411 ;;Total ram usage:        4 bytes
   412 ;; Hardware stack levels required when called:    5
   413 ;; This function calls:
   414 ;;		_delay10ms
   415 ;;		_intConfig
   416 ;;		_nrfConfig
   417 ;;		_nrfTXData
   418 ;;		_portConfig
   419 ;;		_spiConfig_1
   420 ;;		_spiTransfer
   421 ;; This function is called by:
   422 ;;		Startup code after reset
   423 ;; This function uses a non-reentrant model
   424 ;;
   425                           
   426                           	psect	text0
   427  0000A6                     __ptext0:
   428                           	opt stack 0
   429  0000A6                     _main:
   430                           	opt stack 25
   431                           
   432                           ;main.c: 205: portConfig();
   433                           
   434                           ;incstack = 0
   435  0000A6  ECDC  F003         	call	_portConfig	;wreg free
   436                           
   437                           ;main.c: 206: spiConfig_1(40);
   438  0000AA  0E00               	movlw	0
   439  0000AC  6E29               	movwf	spiConfig_1@spiSpeed+1,c
   440  0000AE  0E28               	movlw	40
   441  0000B0  6E28               	movwf	spiConfig_1@spiSpeed,c
   442  0000B2  EC64  F002         	call	_spiConfig_1	;wreg free
   443                           
   444                           ;main.c: 207: nrfConfig();
   445  0000B6  ECA7  F001         	call	_nrfConfig	;wreg free
   446                           
   447                           ;main.c: 208: intConfig();
   448  0000BA  ECE9  F003         	call	_intConfig	;wreg free
   449                           
   450                           ;main.c: 210: delay10ms(1);
   451  0000BE  0E00               	movlw	0
   452  0000C0  6E21               	movwf	delay10ms@ms_multi+1,c
   453  0000C2  0E01               	movlw	1
   454  0000C4  6E20               	movwf	delay10ms@ms_multi,c
   455  0000C6  ECBE  F003         	call	_delay10ms	;wreg free
   456                           
   457                           ;main.c: 212: dataBufOut[1] = 0x48;
   458  0000CA  0E48               	movlw	72
   459  0000CC  0100               	movlb	0	; () banked
   460  0000CE  6F81               	movwf	(_dataBufOut+1)& (0+255),b
   461                           
   462                           ; BSR set to: 0
   463                           ;main.c: 213: dataBufOut[2] = 0x4F;
   464  0000D0  0E4F               	movlw	79
   465  0000D2  0100               	movlb	0	; () banked
   466  0000D4  6F82               	movwf	(_dataBufOut+2)& (0+255),b
   467                           
   468                           ; BSR set to: 0
   469                           ;main.c: 214: dataBufOut[3] = 88;
   470  0000D6  0E58               	movlw	88
   471  0000D8  0100               	movlb	0	; () banked
   472  0000DA  6F83               	movwf	(_dataBufOut+3)& (0+255),b
   473                           
   474                           ; BSR set to: 0
   475                           ;main.c: 215: dataBufOut[4] = 0x49;
   476  0000DC  0E49               	movlw	73
   477  0000DE  0100               	movlb	0	; () banked
   478  0000E0  6F84               	movwf	(_dataBufOut+4)& (0+255),b
   479                           
   480                           ; BSR set to: 0
   481                           ;main.c: 216: dataBufOut[5] = 0x5F;
   482  0000E2  0E5F               	movlw	95
   483  0000E4  0100               	movlb	0	; () banked
   484  0000E6  6F85               	movwf	(_dataBufOut+5)& (0+255),b
   485                           
   486                           ; BSR set to: 0
   487                           ;main.c: 217: dataBufOut[6] = 47;
   488  0000E8  0E2F               	movlw	47
   489  0000EA  0100               	movlb	0	; () banked
   490  0000EC  6F86               	movwf	(_dataBufOut+6)& (0+255),b
   491                           
   492                           ; BSR set to: 0
   493                           ;main.c: 218: dataBufOut[7] = 0x74;
   494  0000EE  0E74               	movlw	116
   495  0000F0  0100               	movlb	0	; () banked
   496  0000F2  6F87               	movwf	(_dataBufOut+7)& (0+255),b
   497                           
   498                           ; BSR set to: 0
   499                           ;main.c: 219: dataBufOut[8] = 0x6F;
   500  0000F4  0E6F               	movlw	111
   501  0000F6  0100               	movlb	0	; () banked
   502  0000F8  6F88               	movwf	(_dataBufOut+8)& (0+255),b
   503                           
   504                           ; BSR set to: 0
   505                           ;main.c: 220: dataBufOut[9] = 58;
   506  0000FA  0E3A               	movlw	58
   507  0000FC  0100               	movlb	0	; () banked
   508  0000FE  6F89               	movwf	(_dataBufOut+9)& (0+255),b
   509                           
   510                           ; BSR set to: 0
   511                           ;main.c: 221: dataBufOut[10] = 0xA8;
   512  000100  0EA8               	movlw	168
   513  000102  0100               	movlb	0	; () banked
   514  000104  6F8A               	movwf	(_dataBufOut+10)& (0+255),b
   515                           
   516                           ; BSR set to: 0
   517                           ;main.c: 222: dataBufOut[11] = 0x6F;
   518  000106  0E6F               	movlw	111
   519  000108  0100               	movlb	0	; () banked
   520  00010A  6F8B               	movwf	(_dataBufOut+11)& (0+255),b
   521                           
   522                           ; BSR set to: 0
   523                           ;main.c: 223: dataBufOut[12] = 99;
   524  00010C  0E63               	movlw	99
   525  00010E  0100               	movlb	0	; () banked
   526  000110  6F8C               	movwf	(_dataBufOut+12)& (0+255),b
   527                           
   528                           ; BSR set to: 0
   529                           ;main.c: 224: dataBufOut[13] = 0x88;
   530  000112  0E88               	movlw	136
   531  000114  0100               	movlb	0	; () banked
   532  000116  6F8D               	movwf	(_dataBufOut+13)& (0+255),b
   533                           
   534                           ; BSR set to: 0
   535                           ;main.c: 225: dataBufOut[14] = 0x5F;
   536  000118  0E5F               	movlw	95
   537  00011A  0100               	movlb	0	; () banked
   538  00011C  6F8E               	movwf	(_dataBufOut+14)& (0+255),b
   539                           
   540                           ; BSR set to: 0
   541                           ;main.c: 226: dataBufOut[15] = 72;
   542  00011E  0E48               	movlw	72
   543  000120  0100               	movlb	0	; () banked
   544  000122  6F8F               	movwf	(_dataBufOut+15)& (0+255),b
   545                           
   546                           ; BSR set to: 0
   547                           ;main.c: 227: dataBufOut[16] = 0x98;
   548  000124  0E98               	movlw	152
   549  000126  0100               	movlb	0	; () banked
   550  000128  6F90               	movwf	(_dataBufOut+16)& (0+255),b
   551                           
   552                           ; BSR set to: 0
   553                           ;main.c: 228: dataBufOut[17] = 0x6F;
   554  00012A  0E6F               	movlw	111
   555  00012C  0100               	movlb	0	; () banked
   556  00012E  6F91               	movwf	(_dataBufOut+17)& (0+255),b
   557                           
   558                           ; BSR set to: 0
   559                           ;main.c: 229: dataBufOut[18] = 92;
   560  000130  0E5C               	movlw	92
   561  000132  0100               	movlb	0	; () banked
   562  000134  6F92               	movwf	(_dataBufOut+18)& (0+255),b
   563                           
   564                           ; BSR set to: 0
   565                           ;main.c: 230: dataBufOut[19] = 0x4A;
   566  000136  0E4A               	movlw	74
   567  000138  0100               	movlb	0	; () banked
   568  00013A  6F93               	movwf	(_dataBufOut+19)& (0+255),b
   569                           
   570                           ; BSR set to: 0
   571                           ;main.c: 231: dataBufOut[20] = 0x6F;
   572  00013C  0E6F               	movlw	111
   573  00013E  0100               	movlb	0	; () banked
   574  000140  6F94               	movwf	(_dataBufOut+20)& (0+255),b
   575                           
   576                           ; BSR set to: 0
   577                           ;main.c: 232: dataBufOut[21] = 62;
   578  000142  0E3E               	movlw	62
   579  000144  0100               	movlb	0	; () banked
   580  000146  6F95               	movwf	(_dataBufOut+21)& (0+255),b
   581                           
   582                           ; BSR set to: 0
   583                           ;main.c: 233: dataBufOut[22] = 0x62;
   584  000148  0E62               	movlw	98
   585  00014A  0100               	movlb	0	; () banked
   586  00014C  6F96               	movwf	(_dataBufOut+22)& (0+255),b
   587                           
   588                           ; BSR set to: 0
   589                           ;main.c: 234: dataBufOut[23] = 0x6F;
   590  00014E  0E6F               	movlw	111
   591  000150  0100               	movlb	0	; () banked
   592  000152  6F97               	movwf	(_dataBufOut+23)& (0+255),b
   593                           
   594                           ; BSR set to: 0
   595                           ;main.c: 235: dataBufOut[24] = 82;
   596  000154  0E52               	movlw	82
   597  000156  0100               	movlb	0	; () banked
   598  000158  6F98               	movwf	(_dataBufOut+24)& (0+255),b
   599                           
   600                           ; BSR set to: 0
   601                           ;main.c: 236: dataBufOut[25] = 0x86;
   602  00015A  0E86               	movlw	134
   603  00015C  0100               	movlb	0	; () banked
   604  00015E  6F99               	movwf	(_dataBufOut+25)& (0+255),b
   605                           
   606                           ; BSR set to: 0
   607                           ;main.c: 237: dataBufOut[26] = 0x7F;
   608  000160  0E7F               	movlw	127
   609  000162  0100               	movlb	0	; () banked
   610  000164  6F9A               	movwf	(_dataBufOut+26)& (0+255),b
   611                           
   612                           ; BSR set to: 0
   613                           ;main.c: 238: dataBufOut[27] = 72;
   614  000166  0E48               	movlw	72
   615  000168  0100               	movlb	0	; () banked
   616  00016A  6F9B               	movwf	(_dataBufOut+27)& (0+255),b
   617                           
   618                           ; BSR set to: 0
   619                           ;main.c: 239: dataBufOut[28] = 102;
   620  00016C  0E66               	movlw	102
   621  00016E  0100               	movlb	0	; () banked
   622  000170  6F9C               	movwf	(_dataBufOut+28)& (0+255),b
   623                           
   624                           ; BSR set to: 0
   625                           ;main.c: 240: dataBufOut[29] = 0xC0;
   626  000172  0EC0               	movlw	192
   627  000174  0100               	movlb	0	; () banked
   628  000176  6F9D               	movwf	(_dataBufOut+29)& (0+255),b
   629                           
   630                           ; BSR set to: 0
   631                           ;main.c: 241: dataBufOut[30] = 0x5F;
   632  000178  0E5F               	movlw	95
   633  00017A  0100               	movlb	0	; () banked
   634  00017C  6F9E               	movwf	(_dataBufOut+30)& (0+255),b
   635                           
   636                           ; BSR set to: 0
   637                           ;main.c: 242: dataBufOut[31] = 122;
   638  00017E  0E7A               	movlw	122
   639  000180  0100               	movlb	0	; () banked
   640  000182  6F9F               	movwf	(_dataBufOut+31)& (0+255),b
   641                           
   642                           ; BSR set to: 0
   643                           ;main.c: 245: int count = 1;
   644  000184  0E00               	movlw	0
   645  000186  0100               	movlb	0	; () banked
   646  000188  6FB1               	movwf	(main@count+1)& (0+255),b
   647  00018A  0E01               	movlw	1
   648  00018C  0100               	movlb	0	; () banked
   649  00018E  6FB0               	movwf	main@count& (0+255),b
   650                           
   651                           ; BSR set to: 0
   652                           ;main.c: 246: unsigned int TXtime = 20000;
   653  000190  0E4E               	movlw	78
   654  000192  0100               	movlb	0	; () banked
   655  000194  6FB3               	movwf	(main@TXtime+1)& (0+255),b
   656  000196  0E20               	movlw	32
   657  000198  0100               	movlb	0	; () banked
   658  00019A  6FB2               	movwf	main@TXtime& (0+255),b
   659  00019C                     l1611:
   660                           
   661                           ; BSR set to: 0
   662                           ;main.c: 251: if (nrfBusy) {
   663  00019C  503C               	movf	_nrfBusy,w,c
   664  00019E  B4D8               	btfsc	status,2,c
   665  0001A0  D009               	goto	l1619
   666                           
   667                           ; BSR set to: 0
   668                           ;main.c: 252: LATAbits.LATA0 = 1;
   669  0001A2  8089               	bsf	3977,0,c	;volatile
   670                           
   671                           ; BSR set to: 0
   672                           ;main.c: 253: _delay((unsigned long)((100)*(64000000/4000000.0)));
   673  0001A4  0EE4               	movlw	228
   674  0001A6                     u787:
   675  0001A6  D000               	nop2	
   676  0001A8  D000               	nop2	
   677  0001AA  2EE8               	decfsz	wreg,f,c
   678  0001AC  D7FC               	goto	u787
   679  0001AE  D000               	nop2		;nop
   680  0001B0  D000               	nop2		;nop
   681                           
   682                           ;main.c: 254: LATAbits.LATA0 = 0;
   683  0001B2  9089               	bcf	3977,0,c	;volatile
   684  0001B4                     l1619:
   685                           
   686                           ;main.c: 255: }
   687                           ;main.c: 257: if (TXtime >= 35000) {
   688  0001B4  0EB8               	movlw	184
   689  0001B6  0100               	movlb	0	; () banked
   690  0001B8  5DB2               	subwf	main@TXtime& (0+255),w,b
   691  0001BA  0E88               	movlw	136
   692  0001BC  0100               	movlb	0	; () banked
   693  0001BE  59B3               	subwfb	(main@TXtime+1)& (0+255),w,b
   694  0001C0  A0D8               	btfss	status,0,c
   695  0001C2  D011               	goto	l1629
   696                           
   697                           ; BSR set to: 0
   698                           ;main.c: 258: dataBufOut[0] = count;
   699  0001C4  C0B0  F080         	movff	main@count,_dataBufOut
   700                           
   701                           ; BSR set to: 0
   702                           ;main.c: 259: nrfTXData(8);
   703  0001C8  0E00               	movlw	0
   704  0001CA  6E23               	movwf	nrfTXData@len+1,c
   705  0001CC  0E08               	movlw	8
   706  0001CE  6E22               	movwf	nrfTXData@len,c
   707  0001D0  ECE6  F002         	call	_nrfTXData	;wreg free
   708                           
   709                           ;main.c: 260: count++;
   710  0001D4  0100               	movlb	0	; () banked
   711  0001D6  4BB0               	infsnz	main@count& (0+255),f,b
   712  0001D8  2BB1               	incf	(main@count+1)& (0+255),f,b
   713                           
   714                           ; BSR set to: 0
   715                           ;main.c: 261: TXtime = 0;
   716  0001DA  0E00               	movlw	0
   717  0001DC  0100               	movlb	0	; () banked
   718  0001DE  6FB3               	movwf	(main@TXtime+1)& (0+255),b
   719  0001E0  0E00               	movlw	0
   720  0001E2  0100               	movlb	0	; () banked
   721  0001E4  6FB2               	movwf	main@TXtime& (0+255),b
   722  0001E6                     l1629:
   723                           
   724                           ; BSR set to: 0
   725                           ;main.c: 262: }
   726                           ;main.c: 264: if (nrfInterrupt) {
   727  0001E6  503D               	movf	_nrfInterrupt,w,c	;volatile
   728  0001E8  B4D8               	btfsc	status,2,c
   729  0001EA  D010               	goto	l1639
   730                           
   731                           ; BSR set to: 0
   732                           ;main.c: 267: dataBufOut[0] = 0b00110000;
   733  0001EC  0E30               	movlw	48
   734  0001EE  0100               	movlb	0	; () banked
   735  0001F0  6F80               	movwf	_dataBufOut& (0+255),b
   736                           
   737                           ; BSR set to: 0
   738                           ;main.c: 268: spiTransfer('w',0x07,1);
   739  0001F2  0E07               	movlw	7
   740  0001F4  6E22               	movwf	spiTransfer@command,c
   741  0001F6  0E00               	movlw	0
   742  0001F8  6E24               	movwf	spiTransfer@len+1,c
   743  0001FA  0E01               	movlw	1
   744  0001FC  6E23               	movwf	spiTransfer@len,c
   745  0001FE  0E77               	movlw	119
   746  000200  EC15  F002         	call	_spiTransfer
   747                           
   748                           ;main.c: 270: nrfBusy = 0;
   749  000204  0E00               	movlw	0
   750  000206  6E3C               	movwf	_nrfBusy,c
   751                           
   752                           ;main.c: 271: nrfInterrupt = 0;
   753  000208  0E00               	movlw	0
   754  00020A  6E3D               	movwf	_nrfInterrupt,c	;volatile
   755  00020C                     l1639:
   756                           
   757                           ;main.c: 272: }
   758                           ;main.c: 274: _delay((unsigned long)((100)*(64000000/4000000.0)));
   759  00020C  0EE4               	movlw	228
   760  00020E                     u797:
   761  00020E  D000               	nop2	
   762  000210  D000               	nop2	
   763  000212  2EE8               	decfsz	wreg,f,c
   764  000214  D7FC               	goto	u797
   765  000216  D000               	nop2		;nop
   766  000218  D000               	nop2		;nop
   767                           
   768                           ;main.c: 275: TXtime++;
   769  00021A  0100               	movlb	0	; () banked
   770  00021C  4BB2               	infsnz	main@TXtime& (0+255),f,b
   771  00021E  2BB3               	incf	(main@TXtime+1)& (0+255),f,b
   772                           
   773                           ;main.c: 276: }
   774  000220  D7BD               	goto	l1611
   775  000222                     __end_of_main:
   776                           	opt stack 0
   777                           tblptru	equ	0xFF8
   778                           tblptrh	equ	0xFF7
   779                           tblptrl	equ	0xFF6
   780                           tablat	equ	0xFF5
   781                           postinc0	equ	0xFEE
   782                           wreg	equ	0xFE8
   783                           postdec1	equ	0xFE5
   784                           fsr1l	equ	0xFE1
   785                           status	equ	0xFD8
   786                           
   787 ;; *************** function _spiConfig_1 *****************
   788 ;; Defined at:
   789 ;;		line 340 in file "main.c"
   790 ;; Parameters:    Size  Location     Type
   791 ;;  spiSpeed        2   39[COMRAM] unsigned int 
   792 ;; Auto vars:     Size  Location     Type
   793 ;;  sspAddVal       2   14[BANK0 ] unsigned int 
   794 ;; Return value:  Size  Location     Type
   795 ;;		None               void
   796 ;; Registers used:
   797 ;;		wreg, status,2, status,0, cstack
   798 ;; Tracked objects:
   799 ;;		On entry : 0/0
   800 ;;		On exit  : 0/0
   801 ;;		Unchanged: 0/0
   802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   803 ;;      Params:         2       0       0       0
   804 ;;      Locals:         0       6       0       0
   805 ;;      Temps:          0       4       0       0
   806 ;;      Totals:         2      10       0       0
   807 ;;Total ram usage:       12 bytes
   808 ;; Hardware stack levels used:    1
   809 ;; Hardware stack levels required when called:    3
   810 ;; This function calls:
   811 ;;		___aldiv
   812 ;; This function is called by:
   813 ;;		_main
   814 ;; This function uses a non-reentrant model
   815 ;;
   816                           
   817                           	psect	text1
   818  0004C8                     __ptext1:
   819                           	opt stack 0
   820  0004C8                     _spiConfig_1:
   821                           	opt stack 26
   822                           
   823                           ;main.c: 342: SSP1CON1bits.CKP = 0;
   824                           
   825                           ; BSR set to: 0
   826                           ;incstack = 0
   827  0004C8  98C6               	bcf	4038,4,c	;volatile
   828                           
   829                           ;main.c: 343: SSP1STATbits.CKE = 1;
   830  0004CA  8CC7               	bsf	4039,6,c	;volatile
   831                           
   832                           ;main.c: 344: SSP1STATbits.SMP = 1;
   833  0004CC  8EC7               	bsf	4039,7,c	;volatile
   834                           
   835                           ;main.c: 347: unsigned int sspAddVal = (((64000000/100000)/spiSpeed)/4)-1;
   836  0004CE  C028  F024         	movff	spiConfig_1@spiSpeed,___aldiv@divisor
   837  0004D2  C029  F025         	movff	spiConfig_1@spiSpeed+1,___aldiv@divisor+1
   838  0004D6  6A26               	clrf	___aldiv@divisor+2,c
   839  0004D8  6A27               	clrf	___aldiv@divisor+3,c
   840  0004DA  0E80               	movlw	128
   841  0004DC  6E20               	movwf	___aldiv@dividend,c
   842  0004DE  0E02               	movlw	2
   843  0004E0  6E21               	movwf	___aldiv@dividend+1,c
   844  0004E2  0E00               	movlw	0
   845  0004E4  6E22               	movwf	___aldiv@dividend+2,c
   846  0004E6  0E00               	movlw	0
   847  0004E8  6E23               	movwf	___aldiv@dividend+3,c
   848  0004EA  EC11  F001         	call	___aldiv	;wreg free
   849  0004EE  C020  F0AA         	movff	?___aldiv,_spiConfig_1$1492
   850  0004F2  C021  F0AB         	movff	?___aldiv+1,_spiConfig_1$1492+1
   851  0004F6  C022  F0AC         	movff	?___aldiv+2,_spiConfig_1$1492+2
   852  0004FA  C023  F0AD         	movff	?___aldiv+3,_spiConfig_1$1492+3
   853                           
   854                           ;main.c: 347: unsigned int sspAddVal = (((64000000/100000)/spiSpeed)/4)-1;
   855  0004FE  C0AA  F020         	movff	_spiConfig_1$1492,___aldiv@dividend
   856  000502  C0AB  F021         	movff	_spiConfig_1$1492+1,___aldiv@dividend+1
   857  000506  C0AC  F022         	movff	_spiConfig_1$1492+2,___aldiv@dividend+2
   858  00050A  C0AD  F023         	movff	_spiConfig_1$1492+3,___aldiv@dividend+3
   859  00050E  0E04               	movlw	4
   860  000510  6E24               	movwf	___aldiv@divisor,c
   861  000512  0E00               	movlw	0
   862  000514  6E25               	movwf	___aldiv@divisor+1,c
   863  000516  0E00               	movlw	0
   864  000518  6E26               	movwf	___aldiv@divisor+2,c
   865  00051A  0E00               	movlw	0
   866  00051C  6E27               	movwf	___aldiv@divisor+3,c
   867  00051E  EC11  F001         	call	___aldiv	;wreg free
   868  000522  C020  F0A6         	movff	?___aldiv,??_spiConfig_1
   869  000526  C021  F0A7         	movff	?___aldiv+1,??_spiConfig_1+1
   870  00052A  C022  F0A8         	movff	?___aldiv+2,??_spiConfig_1+2
   871  00052E  C023  F0A9         	movff	?___aldiv+3,??_spiConfig_1+3
   872  000532  0EFF               	movlw	255
   873  000534  0100               	movlb	0	; () banked
   874  000536  25A6               	addwf	??_spiConfig_1& (0+255),w,b
   875  000538  0100               	movlb	0	; () banked
   876  00053A  6FAE               	movwf	spiConfig_1@sspAddVal& (0+255),b
   877  00053C  0EFF               	movlw	255
   878  00053E  0100               	movlb	0	; () banked
   879  000540  21A7               	addwfc	(??_spiConfig_1+1)& (0+255),w,b
   880  000542  0100               	movlb	0	; () banked
   881  000544  6FAF               	movwf	(spiConfig_1@sspAddVal+1)& (0+255),b
   882                           
   883                           ; BSR set to: 0
   884                           ;main.c: 348: SSP1ADD = sspAddVal;
   885  000546  C0AE  FFC8         	movff	spiConfig_1@sspAddVal,4040	;volatile
   886                           
   887                           ; BSR set to: 0
   888                           ;main.c: 349: SSP1CON1bits.SSPM = 0b1010;
   889  00054A  50C6               	movf	4038,w,c	;volatile
   890  00054C  0BF0               	andlw	-16
   891  00054E  090A               	iorlw	10
   892  000550  6EC6               	movwf	4038,c	;volatile
   893                           
   894                           ; BSR set to: 0
   895                           ;main.c: 351: SSP1CON1bits.SSPEN = 1;
   896  000552  8AC6               	bsf	4038,5,c	;volatile
   897                           
   898                           ; BSR set to: 0
   899                           ;main.c: 353: LATAbits.LATA2 = 1;
   900  000554  8489               	bsf	3977,2,c	;volatile
   901                           
   902                           ; BSR set to: 0
   903  000556  0012               	return	
   904  000558                     __end_of_spiConfig_1:
   905                           	opt stack 0
   906                           tblptru	equ	0xFF8
   907                           tblptrh	equ	0xFF7
   908                           tblptrl	equ	0xFF6
   909                           tablat	equ	0xFF5
   910                           postinc0	equ	0xFEE
   911                           wreg	equ	0xFE8
   912                           postdec1	equ	0xFE5
   913                           fsr1l	equ	0xFE1
   914                           status	equ	0xFD8
   915                           
   916 ;; *************** function ___aldiv *****************
   917 ;; Defined at:
   918 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\aldiv.c"
   919 ;; Parameters:    Size  Location     Type
   920 ;;  dividend        4   31[COMRAM] long 
   921 ;;  divisor         4   35[COMRAM] long 
   922 ;; Auto vars:     Size  Location     Type
   923 ;;  quotient        4    2[BANK0 ] long 
   924 ;;  sign            1    1[BANK0 ] unsigned char 
   925 ;;  counter         1    0[BANK0 ] unsigned char 
   926 ;; Return value:  Size  Location     Type
   927 ;;                  4   31[COMRAM] long 
   928 ;; Registers used:
   929 ;;		wreg, status,2, status,0
   930 ;; Tracked objects:
   931 ;;		On entry : 0/0
   932 ;;		On exit  : 0/0
   933 ;;		Unchanged: 0/0
   934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   935 ;;      Params:         8       0       0       0
   936 ;;      Locals:         0       6       0       0
   937 ;;      Temps:          0       0       0       0
   938 ;;      Totals:         8       6       0       0
   939 ;;Total ram usage:       14 bytes
   940 ;; Hardware stack levels used:    1
   941 ;; Hardware stack levels required when called:    2
   942 ;; This function calls:
   943 ;;		Nothing
   944 ;; This function is called by:
   945 ;;		_spiConfig_1
   946 ;; This function uses a non-reentrant model
   947 ;;
   948                           
   949                           	psect	text2
   950  000222                     __ptext2:
   951                           	opt stack 0
   952  000222                     ___aldiv:
   953                           	opt stack 26
   954                           
   955                           ; BSR set to: 0
   956                           ;incstack = 0
   957  000222  0E00               	movlw	0
   958  000224  0100               	movlb	0	; () banked
   959  000226  6FA1               	movwf	___aldiv@sign& (0+255),b
   960                           
   961                           ; BSR set to: 0
   962  000228  5027               	movf	___aldiv@divisor+3,w,c
   963  00022A  0A80               	xorlw	128
   964  00022C  0F80               	addlw	128
   965  00022E  E108               	bnz	u665
   966  000230  0E00               	movlw	0
   967  000232  5C26               	subwf	___aldiv@divisor+2,w,c
   968  000234  E105               	bnz	u665
   969  000236  0E00               	movlw	0
   970  000238  5C25               	subwf	___aldiv@divisor+1,w,c
   971  00023A  E102               	bnz	u665
   972  00023C  0E00               	movlw	0
   973  00023E  5C24               	subwf	___aldiv@divisor,w,c
   974  000240                     u665:
   975  000240  B0D8               	btfsc	status,0,c
   976  000242  D00B               	goto	l1443
   977                           
   978                           ; BSR set to: 0
   979  000244  1E27               	comf	___aldiv@divisor+3,f,c
   980  000246  1E26               	comf	___aldiv@divisor+2,f,c
   981  000248  1E25               	comf	___aldiv@divisor+1,f,c
   982  00024A  6C24               	negf	___aldiv@divisor,c
   983  00024C  0E00               	movlw	0
   984  00024E  2225               	addwfc	___aldiv@divisor+1,f,c
   985  000250  2226               	addwfc	___aldiv@divisor+2,f,c
   986  000252  2227               	addwfc	___aldiv@divisor+3,f,c
   987                           
   988                           ; BSR set to: 0
   989  000254  0E01               	movlw	1
   990  000256  0100               	movlb	0	; () banked
   991  000258  6FA1               	movwf	___aldiv@sign& (0+255),b
   992  00025A                     l1443:
   993                           
   994                           ; BSR set to: 0
   995  00025A  5023               	movf	___aldiv@dividend+3,w,c
   996  00025C  0A80               	xorlw	128
   997  00025E  0F80               	addlw	128
   998  000260  E108               	bnz	u675
   999  000262  0E00               	movlw	0
  1000  000264  5C22               	subwf	___aldiv@dividend+2,w,c
  1001  000266  E105               	bnz	u675
  1002  000268  0E00               	movlw	0
  1003  00026A  5C21               	subwf	___aldiv@dividend+1,w,c
  1004  00026C  E102               	bnz	u675
  1005  00026E  0E00               	movlw	0
  1006  000270  5C20               	subwf	___aldiv@dividend,w,c
  1007  000272                     u675:
  1008  000272  B0D8               	btfsc	status,0,c
  1009  000274  D00B               	goto	l1449
  1010                           
  1011                           ; BSR set to: 0
  1012  000276  1E23               	comf	___aldiv@dividend+3,f,c
  1013  000278  1E22               	comf	___aldiv@dividend+2,f,c
  1014  00027A  1E21               	comf	___aldiv@dividend+1,f,c
  1015  00027C  6C20               	negf	___aldiv@dividend,c
  1016  00027E  0E00               	movlw	0
  1017  000280  2221               	addwfc	___aldiv@dividend+1,f,c
  1018  000282  2222               	addwfc	___aldiv@dividend+2,f,c
  1019  000284  2223               	addwfc	___aldiv@dividend+3,f,c
  1020                           
  1021                           ; BSR set to: 0
  1022  000286  0E01               	movlw	1
  1023  000288  0100               	movlb	0	; () banked
  1024  00028A  1BA1               	xorwf	___aldiv@sign& (0+255),f,b
  1025  00028C                     l1449:
  1026                           
  1027                           ; BSR set to: 0
  1028  00028C  0E00               	movlw	0
  1029  00028E  0100               	movlb	0	; () banked
  1030  000290  6FA2               	movwf	___aldiv@quotient& (0+255),b
  1031  000292  0E00               	movlw	0
  1032  000294  0100               	movlb	0	; () banked
  1033  000296  6FA3               	movwf	(___aldiv@quotient+1)& (0+255),b
  1034  000298  0E00               	movlw	0
  1035  00029A  0100               	movlb	0	; () banked
  1036  00029C  6FA4               	movwf	(___aldiv@quotient+2)& (0+255),b
  1037  00029E  0E00               	movlw	0
  1038  0002A0  0100               	movlb	0	; () banked
  1039  0002A2  6FA5               	movwf	(___aldiv@quotient+3)& (0+255),b
  1040                           
  1041                           ; BSR set to: 0
  1042  0002A4  5027               	movf	___aldiv@divisor+3,w,c
  1043  0002A6  1024               	iorwf	___aldiv@divisor,w,c
  1044  0002A8  1025               	iorwf	___aldiv@divisor+1,w,c
  1045  0002AA  1026               	iorwf	___aldiv@divisor+2,w,c
  1046  0002AC  B4D8               	btfsc	status,2,c
  1047  0002AE  D033               	goto	l1471
  1048                           
  1049                           ; BSR set to: 0
  1050  0002B0  0E01               	movlw	1
  1051  0002B2  0100               	movlb	0	; () banked
  1052  0002B4  6FA0               	movwf	___aldiv@counter& (0+255),b
  1053  0002B6  D007               	goto	l1457
  1054  0002B8                     l1455:
  1055                           
  1056                           ; BSR set to: 0
  1057  0002B8  90D8               	bcf	status,0,c
  1058  0002BA  3624               	rlcf	___aldiv@divisor,f,c
  1059  0002BC  3625               	rlcf	___aldiv@divisor+1,f,c
  1060  0002BE  3626               	rlcf	___aldiv@divisor+2,f,c
  1061  0002C0  3627               	rlcf	___aldiv@divisor+3,f,c
  1062  0002C2  0100               	movlb	0	; () banked
  1063  0002C4  2BA0               	incf	___aldiv@counter& (0+255),f,b
  1064  0002C6                     l1457:
  1065                           
  1066                           ; BSR set to: 0
  1067  0002C6  AE27               	btfss	___aldiv@divisor+3,7,c
  1068  0002C8  D7F7               	goto	l1455
  1069  0002CA                     l1459:
  1070                           
  1071                           ; BSR set to: 0
  1072  0002CA  0100               	movlb	0	; () banked
  1073  0002CC  90D8               	bcf	status,0,c
  1074  0002CE  0100               	movlb	0	; () banked
  1075  0002D0  37A2               	rlcf	___aldiv@quotient& (0+255),f,b
  1076  0002D2  0100               	movlb	0	; () banked
  1077  0002D4  37A3               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  1078  0002D6  0100               	movlb	0	; () banked
  1079  0002D8  37A4               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  1080  0002DA  0100               	movlb	0	; () banked
  1081  0002DC  37A5               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  1082                           
  1083                           ; BSR set to: 0
  1084  0002DE  5024               	movf	___aldiv@divisor,w,c
  1085  0002E0  5C20               	subwf	___aldiv@dividend,w,c
  1086  0002E2  5025               	movf	___aldiv@divisor+1,w,c
  1087  0002E4  5821               	subwfb	___aldiv@dividend+1,w,c
  1088  0002E6  5026               	movf	___aldiv@divisor+2,w,c
  1089  0002E8  5822               	subwfb	___aldiv@dividend+2,w,c
  1090  0002EA  5027               	movf	___aldiv@divisor+3,w,c
  1091  0002EC  5823               	subwfb	___aldiv@dividend+3,w,c
  1092  0002EE  A0D8               	btfss	status,0,c
  1093  0002F0  D00A               	goto	l1467
  1094                           
  1095                           ; BSR set to: 0
  1096  0002F2  5024               	movf	___aldiv@divisor,w,c
  1097  0002F4  5E20               	subwf	___aldiv@dividend,f,c
  1098  0002F6  5025               	movf	___aldiv@divisor+1,w,c
  1099  0002F8  5A21               	subwfb	___aldiv@dividend+1,f,c
  1100  0002FA  5026               	movf	___aldiv@divisor+2,w,c
  1101  0002FC  5A22               	subwfb	___aldiv@dividend+2,f,c
  1102  0002FE  5027               	movf	___aldiv@divisor+3,w,c
  1103  000300  5A23               	subwfb	___aldiv@dividend+3,f,c
  1104                           
  1105                           ; BSR set to: 0
  1106  000302  0100               	movlb	0	; () banked
  1107  000304  81A2               	bsf	___aldiv@quotient& (0+255),0,b
  1108  000306                     l1467:
  1109                           
  1110                           ; BSR set to: 0
  1111  000306  90D8               	bcf	status,0,c
  1112  000308  3227               	rrcf	___aldiv@divisor+3,f,c
  1113  00030A  3226               	rrcf	___aldiv@divisor+2,f,c
  1114  00030C  3225               	rrcf	___aldiv@divisor+1,f,c
  1115  00030E  3224               	rrcf	___aldiv@divisor,f,c
  1116                           
  1117                           ; BSR set to: 0
  1118  000310  0100               	movlb	0	; () banked
  1119  000312  2FA0               	decfsz	___aldiv@counter& (0+255),f,b
  1120  000314  D7DA               	goto	l1459
  1121  000316                     l1471:
  1122                           
  1123                           ; BSR set to: 0
  1124  000316  0100               	movlb	0	; () banked
  1125  000318  51A1               	movf	___aldiv@sign& (0+255),w,b
  1126  00031A  B4D8               	btfsc	status,2,c
  1127  00031C  D00F               	goto	l1475
  1128                           
  1129                           ; BSR set to: 0
  1130  00031E  0100               	movlb	0	; () banked
  1131  000320  1FA5               	comf	(___aldiv@quotient+3)& (0+255),f,b
  1132  000322  0100               	movlb	0	; () banked
  1133  000324  1FA4               	comf	(___aldiv@quotient+2)& (0+255),f,b
  1134  000326  0100               	movlb	0	; () banked
  1135  000328  1FA3               	comf	(___aldiv@quotient+1)& (0+255),f,b
  1136  00032A  0100               	movlb	0	; () banked
  1137  00032C  6DA2               	negf	___aldiv@quotient& (0+255),b
  1138  00032E  0E00               	movlw	0
  1139  000330  0100               	movlb	0	; () banked
  1140  000332  23A3               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  1141  000334  0100               	movlb	0	; () banked
  1142  000336  23A4               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  1143  000338  0100               	movlb	0	; () banked
  1144  00033A  23A5               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  1145  00033C                     l1475:
  1146                           
  1147                           ; BSR set to: 0
  1148  00033C  C0A2  F020         	movff	___aldiv@quotient,?___aldiv
  1149  000340  C0A3  F021         	movff	___aldiv@quotient+1,?___aldiv+1
  1150  000344  C0A4  F022         	movff	___aldiv@quotient+2,?___aldiv+2
  1151  000348  C0A5  F023         	movff	___aldiv@quotient+3,?___aldiv+3
  1152  00034C  0012               	return	
  1153  00034E                     __end_of___aldiv:
  1154                           	opt stack 0
  1155                           tblptru	equ	0xFF8
  1156                           tblptrh	equ	0xFF7
  1157                           tblptrl	equ	0xFF6
  1158                           tablat	equ	0xFF5
  1159                           postinc0	equ	0xFEE
  1160                           wreg	equ	0xFE8
  1161                           postdec1	equ	0xFE5
  1162                           fsr1l	equ	0xFE1
  1163                           status	equ	0xFD8
  1164                           
  1165 ;; *************** function _portConfig *****************
  1166 ;; Defined at:
  1167 ;;		line 324 in file "main.c"
  1168 ;; Parameters:    Size  Location     Type
  1169 ;;		None
  1170 ;; Auto vars:     Size  Location     Type
  1171 ;;		None
  1172 ;; Return value:  Size  Location     Type
  1173 ;;		None               void
  1174 ;; Registers used:
  1175 ;;		wreg, status,2
  1176 ;; Tracked objects:
  1177 ;;		On entry : 0/0
  1178 ;;		On exit  : 0/0
  1179 ;;		Unchanged: 0/0
  1180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1181 ;;      Params:         0       0       0       0
  1182 ;;      Locals:         0       0       0       0
  1183 ;;      Temps:          0       0       0       0
  1184 ;;      Totals:         0       0       0       0
  1185 ;;Total ram usage:        0 bytes
  1186 ;; Hardware stack levels used:    1
  1187 ;; Hardware stack levels required when called:    2
  1188 ;; This function calls:
  1189 ;;		Nothing
  1190 ;; This function is called by:
  1191 ;;		_main
  1192 ;; This function uses a non-reentrant model
  1193 ;;
  1194                           
  1195                           	psect	text3
  1196  0007B8                     __ptext3:
  1197                           	opt stack 0
  1198  0007B8                     _portConfig:
  1199                           	opt stack 27
  1200                           
  1201                           ;main.c: 325: TRISA = 0b00000000;
  1202                           
  1203                           ; BSR set to: 0
  1204                           ;incstack = 0
  1205  0007B8  0E00               	movlw	0
  1206  0007BA  6E92               	movwf	3986,c	;volatile
  1207                           
  1208                           ;main.c: 326: TRISB = 0b00010000;
  1209  0007BC  0E10               	movlw	16
  1210  0007BE  6E93               	movwf	3987,c	;volatile
  1211                           
  1212                           ;main.c: 327: TRISC = 0b00010000;
  1213  0007C0  0E10               	movlw	16
  1214  0007C2  6E94               	movwf	3988,c	;volatile
  1215                           
  1216                           ;main.c: 329: LATA = 0b00000100;
  1217  0007C4  0E04               	movlw	4
  1218  0007C6  6E89               	movwf	3977,c	;volatile
  1219                           
  1220                           ;main.c: 330: LATB = 0x00;
  1221  0007C8  0E00               	movlw	0
  1222  0007CA  6E8A               	movwf	3978,c	;volatile
  1223                           
  1224                           ;main.c: 331: LATC = 0x00;
  1225  0007CC  0E00               	movlw	0
  1226  0007CE  6E8B               	movwf	3979,c	;volatile
  1227  0007D0  0012               	return	
  1228  0007D2                     __end_of_portConfig:
  1229                           	opt stack 0
  1230                           tblptru	equ	0xFF8
  1231                           tblptrh	equ	0xFF7
  1232                           tblptrl	equ	0xFF6
  1233                           tablat	equ	0xFF5
  1234                           postinc0	equ	0xFEE
  1235                           wreg	equ	0xFE8
  1236                           postdec1	equ	0xFE5
  1237                           fsr1l	equ	0xFE1
  1238                           status	equ	0xFD8
  1239                           
  1240 ;; *************** function _nrfTXData *****************
  1241 ;; Defined at:
  1242 ;;		line 525 in file "main.c"
  1243 ;; Parameters:    Size  Location     Type
  1244 ;;  len             2   33[COMRAM] int 
  1245 ;; Auto vars:     Size  Location     Type
  1246 ;;  i               2   36[COMRAM] int 
  1247 ;; Return value:  Size  Location     Type
  1248 ;;		None               void
  1249 ;; Registers used:
  1250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1251 ;; Tracked objects:
  1252 ;;		On entry : 0/0
  1253 ;;		On exit  : 0/0
  1254 ;;		Unchanged: 0/0
  1255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1256 ;;      Params:         2       0       0       0
  1257 ;;      Locals:         2       0       0       0
  1258 ;;      Temps:          1       0       0       0
  1259 ;;      Totals:         5       0       0       0
  1260 ;;Total ram usage:        5 bytes
  1261 ;; Hardware stack levels used:    1
  1262 ;; Hardware stack levels required when called:    3
  1263 ;; This function calls:
  1264 ;;		_setCSN
  1265 ;;		_spiTransferByte
  1266 ;; This function is called by:
  1267 ;;		_main
  1268 ;; This function uses a non-reentrant model
  1269 ;;
  1270                           
  1271                           	psect	text4
  1272  0005CC                     __ptext4:
  1273                           	opt stack 0
  1274  0005CC                     _nrfTXData:
  1275                           	opt stack 26
  1276                           
  1277                           ;main.c: 527: setCSN(0);
  1278                           
  1279                           ;incstack = 0
  1280  0005CC  0E00               	movlw	0
  1281  0005CE  6E21               	movwf	setCSN@level+1,c
  1282  0005D0  0E00               	movlw	0
  1283  0005D2  6E20               	movwf	setCSN@level,c
  1284  0005D4  EC03  F004         	call	_setCSN	;wreg free
  1285                           
  1286                           ;main.c: 529: spiTransferByte(0xA0);
  1287  0005D8  0EA0               	movlw	160
  1288  0005DA  ECFB  F003         	call	_spiTransferByte
  1289                           
  1290                           ;main.c: 531: if (len != 0) {
  1291  0005DE  5023               	movf	nrfTXData@len+1,w,c
  1292  0005E0  1022               	iorwf	nrfTXData@len,w,c
  1293  0005E2  B4D8               	btfsc	status,2,c
  1294  0005E4  D01C               	goto	l1525
  1295                           
  1296                           ;main.c: 532: for (int i=0;i<len;i++) {
  1297  0005E6  0E00               	movlw	0
  1298  0005E8  6E26               	movwf	nrfTXData@i+1,c
  1299  0005EA  0E00               	movlw	0
  1300  0005EC  6E25               	movwf	nrfTXData@i,c
  1301  0005EE  D00D               	goto	l1523
  1302  0005F0                     l1519:
  1303                           
  1304                           ;main.c: 533: spiTransferByte(dataBufOut[i]);
  1305  0005F0  0100               	movlb	0	; () banked
  1306  0005F2  0E80               	movlw	low _dataBufOut
  1307  0005F4  2425               	addwf	nrfTXData@i,w,c
  1308  0005F6  6ED9               	movwf	fsr2l,c
  1309  0005F8  0100               	movlb	0	; () banked
  1310  0005FA  0E00               	movlw	high _dataBufOut
  1311  0005FC  2026               	addwfc	nrfTXData@i+1,w,c
  1312  0005FE  6EDA               	movwf	fsr2h,c
  1313  000600  50DF               	movf	indf2,w,c
  1314  000602  ECFB  F003         	call	_spiTransferByte
  1315  000606  4A25               	infsnz	nrfTXData@i,f,c
  1316  000608  2A26               	incf	nrfTXData@i+1,f,c
  1317  00060A                     l1523:
  1318  00060A  5026               	movf	nrfTXData@i+1,w,c
  1319  00060C  0A80               	xorlw	128
  1320  00060E  6E24               	movwf	??_nrfTXData& (0+255),c
  1321  000610  5022               	movf	nrfTXData@len,w,c
  1322  000612  5C25               	subwf	nrfTXData@i,w,c
  1323  000614  5023               	movf	nrfTXData@len+1,w,c
  1324  000616  0A80               	xorlw	128
  1325  000618  5824               	subwfb	??_nrfTXData& (0+255),w,c
  1326  00061A  A0D8               	btfss	status,0,c
  1327  00061C  D7E9               	goto	l1519
  1328  00061E                     l1525:
  1329                           
  1330                           ;main.c: 534: }
  1331                           ;main.c: 535: }
  1332                           ;main.c: 537: setCSN(1);
  1333  00061E  0E00               	movlw	0
  1334  000620  6E21               	movwf	setCSN@level+1,c
  1335  000622  0E01               	movlw	1
  1336  000624  6E20               	movwf	setCSN@level,c
  1337  000626  EC03  F004         	call	_setCSN	;wreg free
  1338                           
  1339                           ;main.c: 540: LATAbits.LATA1 = 1;
  1340  00062A  8289               	bsf	3977,1,c	;volatile
  1341                           
  1342                           ;main.c: 541: _delay((unsigned long)((12)*(64000000/4000000.0)));
  1343  00062C  0E40               	movlw	64
  1344  00062E                     u807:
  1345  00062E  2EE8               	decfsz	wreg,f,c
  1346  000630  D7FE               	goto	u807
  1347                           
  1348                           ;main.c: 542: LATAbits.LATA1 = 0;
  1349  000632  9289               	bcf	3977,1,c	;volatile
  1350                           
  1351                           ;main.c: 548: nrfBusy = 1;
  1352  000634  0E01               	movlw	1
  1353  000636  6E3C               	movwf	_nrfBusy,c
  1354  000638  0012               	return	
  1355  00063A                     __end_of_nrfTXData:
  1356                           	opt stack 0
  1357                           tblptru	equ	0xFF8
  1358                           tblptrh	equ	0xFF7
  1359                           tblptrl	equ	0xFF6
  1360                           tablat	equ	0xFF5
  1361                           postinc0	equ	0xFEE
  1362                           wreg	equ	0xFE8
  1363                           postdec1	equ	0xFE5
  1364                           fsr1l	equ	0xFE1
  1365                           indf2	equ	0xFDF
  1366                           fsr2h	equ	0xFDA
  1367                           fsr2l	equ	0xFD9
  1368                           status	equ	0xFD8
  1369                           
  1370 ;; *************** function _nrfConfig *****************
  1371 ;; Defined at:
  1372 ;;		line 359 in file "main.c"
  1373 ;; Parameters:    Size  Location     Type
  1374 ;;		None
  1375 ;; Auto vars:     Size  Location     Type
  1376 ;;		None
  1377 ;; Return value:  Size  Location     Type
  1378 ;;		None               void
  1379 ;; Registers used:
  1380 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1381 ;; Tracked objects:
  1382 ;;		On entry : 0/0
  1383 ;;		On exit  : 0/0
  1384 ;;		Unchanged: 0/0
  1385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1386 ;;      Params:         0       0       0       0
  1387 ;;      Locals:         0       0       0       0
  1388 ;;      Temps:          0       0       0       0
  1389 ;;      Totals:         0       0       0       0
  1390 ;;Total ram usage:        0 bytes
  1391 ;; Hardware stack levels used:    1
  1392 ;; Hardware stack levels required when called:    4
  1393 ;; This function calls:
  1394 ;;		_nrfConfigReg
  1395 ;;		_nrfSetRXAddr
  1396 ;;		_nrfSetTXAddr
  1397 ;;		_spiTransfer
  1398 ;; This function is called by:
  1399 ;;		_main
  1400 ;; This function uses a non-reentrant model
  1401 ;;
  1402                           
  1403                           	psect	text5
  1404  00034E                     __ptext5:
  1405                           	opt stack 0
  1406  00034E                     _nrfConfig:
  1407                           	opt stack 25
  1408                           
  1409                           ;main.c: 362: nrfConfigReg('w',0x00,CONFIG_CURR);
  1410                           
  1411                           ;incstack = 0
  1412  00034E  0E00               	movlw	0
  1413  000350  6E22               	movwf	nrfConfigReg@command,c
  1414  000352  C02A  F023         	movff	_CONFIG_CURR,nrfConfigReg@data
  1415  000356  0E77               	movlw	119
  1416  000358  EC7B  F003         	call	_nrfConfigReg
  1417                           
  1418                           ;main.c: 364: nrfConfigReg('w',0x01,EN_AA_CURR);
  1419  00035C  0E01               	movlw	1
  1420  00035E  6E22               	movwf	nrfConfigReg@command,c
  1421  000360  C03B  F023         	movff	_EN_AA_CURR,nrfConfigReg@data
  1422  000364  0E77               	movlw	119
  1423  000366  EC7B  F003         	call	_nrfConfigReg
  1424                           
  1425                           ;main.c: 366: nrfConfigReg('w',0x02,EN_RXADDR_CURR);
  1426  00036A  0E02               	movlw	2
  1427  00036C  6E22               	movwf	nrfConfigReg@command,c
  1428  00036E  C02C  F023         	movff	_EN_RXADDR_CURR,nrfConfigReg@data
  1429  000372  0E77               	movlw	119
  1430  000374  EC7B  F003         	call	_nrfConfigReg
  1431                           
  1432                           ;main.c: 368: nrfConfigReg('w',0x03,SETUP_AW_CURR);
  1433  000378  0E03               	movlw	3
  1434  00037A  6E22               	movwf	nrfConfigReg@command,c
  1435  00037C  C031  F023         	movff	_SETUP_AW_CURR,nrfConfigReg@data
  1436  000380  0E77               	movlw	119
  1437  000382  EC7B  F003         	call	_nrfConfigReg
  1438                           
  1439                           ;main.c: 370: nrfConfigReg('w',0x04,SETUP_RETR_CURR);
  1440  000386  0E04               	movlw	4
  1441  000388  6E22               	movwf	nrfConfigReg@command,c
  1442  00038A  C032  F023         	movff	_SETUP_RETR_CURR,nrfConfigReg@data
  1443  00038E  0E77               	movlw	119
  1444  000390  EC7B  F003         	call	_nrfConfigReg
  1445                           
  1446                           ;main.c: 372: nrfConfigReg('w',0x05,RF_CH_CURR);
  1447  000394  0E05               	movlw	5
  1448  000396  6E22               	movwf	nrfConfigReg@command,c
  1449  000398  C02E  F023         	movff	_RF_CH_CURR,nrfConfigReg@data
  1450  00039C  0E77               	movlw	119
  1451  00039E  EC7B  F003         	call	_nrfConfigReg
  1452                           
  1453                           ;main.c: 374: nrfConfigReg('w',0x06,RF_SETUP_CURR);
  1454  0003A2  0E06               	movlw	6
  1455  0003A4  6E22               	movwf	nrfConfigReg@command,c
  1456  0003A6  C02F  F023         	movff	_RF_SETUP_CURR,nrfConfigReg@data
  1457  0003AA  0E77               	movlw	119
  1458  0003AC  EC7B  F003         	call	_nrfConfigReg
  1459                           
  1460                           ;main.c: 376: nrfSetRXAddr(0x0A,RX_ADDRESS,4);
  1461  0003B0  0E00               	movlw	high _RX_ADDRESS
  1462  0003B2  6E23               	movwf	nrfSetRXAddr@addr+1,c
  1463  0003B4  0E33               	movlw	low _RX_ADDRESS
  1464  0003B6  6E22               	movwf	nrfSetRXAddr@addr,c
  1465  0003B8  0E00               	movlw	0
  1466  0003BA  6E25               	movwf	nrfSetRXAddr@len+1,c
  1467  0003BC  0E04               	movlw	4
  1468  0003BE  6E24               	movwf	nrfSetRXAddr@len,c
  1469  0003C0  0E0A               	movlw	10
  1470  0003C2  EC1D  F003         	call	_nrfSetRXAddr
  1471                           
  1472                           ;main.c: 378: nrfSetTXAddr(TX_ADDRESS,4);
  1473  0003C6  0E00               	movlw	high _TX_ADDRESS
  1474  0003C8  6E23               	movwf	nrfSetTXAddr@addr+1,c
  1475  0003CA  0E37               	movlw	low _TX_ADDRESS
  1476  0003CC  6E22               	movwf	nrfSetTXAddr@addr,c
  1477  0003CE  0E00               	movlw	0
  1478  0003D0  6E25               	movwf	nrfSetTXAddr@len+1,c
  1479  0003D2  0E04               	movlw	4
  1480  0003D4  6E24               	movwf	nrfSetTXAddr@len,c
  1481  0003D6  EC4D  F003         	call	_nrfSetTXAddr	;wreg free
  1482                           
  1483                           ;main.c: 380: nrfConfigReg('w',0x11,RX_PW_P0_CURR);
  1484  0003DA  0E11               	movlw	17
  1485  0003DC  6E22               	movwf	nrfConfigReg@command,c
  1486  0003DE  C030  F023         	movff	_RX_PW_P0_CURR,nrfConfigReg@data
  1487  0003E2  0E77               	movlw	119
  1488  0003E4  EC7B  F003         	call	_nrfConfigReg
  1489                           
  1490                           ;main.c: 382: nrfConfigReg('w',0x1C,DYNPD_CURR);
  1491  0003E8  0E1C               	movlw	28
  1492  0003EA  6E22               	movwf	nrfConfigReg@command,c
  1493  0003EC  C02B  F023         	movff	_DYNPD_CURR,nrfConfigReg@data
  1494  0003F0  0E77               	movlw	119
  1495  0003F2  EC7B  F003         	call	_nrfConfigReg
  1496                           
  1497                           ;main.c: 384: nrfConfigReg('w',0x1D,FEATURE_CURR);
  1498  0003F6  0E1D               	movlw	29
  1499  0003F8  6E22               	movwf	nrfConfigReg@command,c
  1500  0003FA  C02D  F023         	movff	_FEATURE_CURR,nrfConfigReg@data
  1501  0003FE  0E77               	movlw	119
  1502  000400  EC7B  F003         	call	_nrfConfigReg
  1503                           
  1504                           ;main.c: 386: spiTransfer('n',0xE1,0);
  1505  000404  0EE1               	movlw	225
  1506  000406  6E22               	movwf	spiTransfer@command,c
  1507  000408  0E00               	movlw	0
  1508  00040A  6E24               	movwf	spiTransfer@len+1,c
  1509  00040C  0E00               	movlw	0
  1510  00040E  6E23               	movwf	spiTransfer@len,c
  1511  000410  0E6E               	movlw	110
  1512  000412  EC15  F002         	call	_spiTransfer
  1513                           
  1514                           ;main.c: 388: spiTransfer('n',0xE2,0);
  1515  000416  0EE2               	movlw	226
  1516  000418  6E22               	movwf	spiTransfer@command,c
  1517  00041A  0E00               	movlw	0
  1518  00041C  6E24               	movwf	spiTransfer@len+1,c
  1519  00041E  0E00               	movlw	0
  1520  000420  6E23               	movwf	spiTransfer@len,c
  1521  000422  0E6E               	movlw	110
  1522  000424  EC15  F002         	call	_spiTransfer
  1523  000428  0012               	return	
  1524  00042A                     __end_of_nrfConfig:
  1525                           	opt stack 0
  1526                           tblptru	equ	0xFF8
  1527                           tblptrh	equ	0xFF7
  1528                           tblptrl	equ	0xFF6
  1529                           tablat	equ	0xFF5
  1530                           postinc0	equ	0xFEE
  1531                           wreg	equ	0xFE8
  1532                           postdec1	equ	0xFE5
  1533                           fsr1l	equ	0xFE1
  1534                           indf2	equ	0xFDF
  1535                           fsr2h	equ	0xFDA
  1536                           fsr2l	equ	0xFD9
  1537                           status	equ	0xFD8
  1538                           
  1539 ;; *************** function _spiTransfer *****************
  1540 ;; Defined at:
  1541 ;;		line 487 in file "main.c"
  1542 ;; Parameters:    Size  Location     Type
  1543 ;;  wrn             1    wreg     unsigned char 
  1544 ;;  command         1   33[COMRAM] unsigned char 
  1545 ;;  len             2   34[COMRAM] int 
  1546 ;; Auto vars:     Size  Location     Type
  1547 ;;  wrn             1   37[COMRAM] unsigned char 
  1548 ;;  i               2   38[COMRAM] int 
  1549 ;; Return value:  Size  Location     Type
  1550 ;;		None               void
  1551 ;; Registers used:
  1552 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1553 ;; Tracked objects:
  1554 ;;		On entry : 0/0
  1555 ;;		On exit  : 0/0
  1556 ;;		Unchanged: 0/0
  1557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1558 ;;      Params:         3       0       0       0
  1559 ;;      Locals:         3       0       0       0
  1560 ;;      Temps:          1       0       0       0
  1561 ;;      Totals:         7       0       0       0
  1562 ;;Total ram usage:        7 bytes
  1563 ;; Hardware stack levels used:    1
  1564 ;; Hardware stack levels required when called:    3
  1565 ;; This function calls:
  1566 ;;		_setCSN
  1567 ;;		_spiTransferByte
  1568 ;; This function is called by:
  1569 ;;		_main
  1570 ;;		_nrfConfig
  1571 ;; This function uses a non-reentrant model
  1572 ;;
  1573                           
  1574                           	psect	text6
  1575  00042A                     __ptext6:
  1576                           	opt stack 0
  1577  00042A                     _spiTransfer:
  1578                           	opt stack 26
  1579                           
  1580                           ;incstack = 0
  1581                           ;spiTransfer@wrn stored from wreg
  1582  00042A  6E26               	movwf	spiTransfer@wrn,c
  1583                           
  1584                           ;main.c: 489: setCSN(0);
  1585  00042C  0E00               	movlw	0
  1586  00042E  6E21               	movwf	setCSN@level+1,c
  1587  000430  0E00               	movlw	0
  1588  000432  6E20               	movwf	setCSN@level,c
  1589  000434  EC03  F004         	call	_setCSN	;wreg free
  1590                           
  1591                           ;main.c: 491: if (wrn == 'w') {
  1592  000438  5026               	movf	spiTransfer@wrn,w,c
  1593  00043A  0A77               	xorlw	119
  1594  00043C  A4D8               	btfss	status,2,c
  1595  00043E  D005               	goto	l1369
  1596                           
  1597                           ;main.c: 492: spiTransferByte(0x20|command);
  1598  000440  5022               	movf	spiTransfer@command,w,c
  1599  000442  0920               	iorlw	32
  1600  000444  ECFB  F003         	call	_spiTransferByte
  1601                           
  1602                           ;main.c: 493: } else if (wrn == 'r') {
  1603  000448  D00F               	goto	l1377
  1604  00044A                     l1369:
  1605  00044A  5026               	movf	spiTransfer@wrn,w,c
  1606  00044C  0A72               	xorlw	114
  1607  00044E  A4D8               	btfss	status,2,c
  1608  000450  D004               	goto	l1373
  1609                           
  1610                           ;main.c: 494: spiTransferByte(0x00|command);
  1611  000452  5022               	movf	spiTransfer@command,w,c
  1612  000454  ECFB  F003         	call	_spiTransferByte
  1613                           
  1614                           ;main.c: 495: } else if(wrn == 'n') {
  1615  000458  D007               	goto	l1377
  1616  00045A                     l1373:
  1617  00045A  5026               	movf	spiTransfer@wrn,w,c
  1618  00045C  0A6E               	xorlw	110
  1619  00045E  A4D8               	btfss	status,2,c
  1620  000460  D003               	goto	l1377
  1621                           
  1622                           ;main.c: 496: spiTransferByte(command);
  1623  000462  5022               	movf	spiTransfer@command,w,c
  1624  000464  ECFB  F003         	call	_spiTransferByte
  1625  000468                     l1377:
  1626                           
  1627                           ;main.c: 497: }
  1628                           ;main.c: 499: if (len != 0) {
  1629  000468  5024               	movf	spiTransfer@len+1,w,c
  1630  00046A  1023               	iorwf	spiTransfer@len,w,c
  1631  00046C  B4D8               	btfsc	status,2,c
  1632  00046E  D025               	goto	l1387
  1633                           
  1634                           ;main.c: 500: for (int i=0;i<len;i++) {
  1635  000470  0E00               	movlw	0
  1636  000472  6E28               	movwf	spiTransfer@i+1,c
  1637  000474  0E00               	movlw	0
  1638  000476  6E27               	movwf	spiTransfer@i,c
  1639  000478  D016               	goto	l1385
  1640  00047A                     l1381:
  1641                           
  1642                           ;main.c: 501: dataBufIn[i] = spiTransferByte(dataBufOut[i]);
  1643  00047A  0100               	movlb	0	; () banked
  1644  00047C  0E60               	movlw	low _dataBufIn
  1645  00047E  2427               	addwf	spiTransfer@i,w,c
  1646  000480  6ED9               	movwf	fsr2l,c
  1647  000482  0100               	movlb	0	; () banked
  1648  000484  0E00               	movlw	high _dataBufIn
  1649  000486  2028               	addwfc	spiTransfer@i+1,w,c
  1650  000488  6EDA               	movwf	fsr2h,c
  1651  00048A  0100               	movlb	0	; () banked
  1652  00048C  0E80               	movlw	low _dataBufOut
  1653  00048E  2427               	addwf	spiTransfer@i,w,c
  1654  000490  6EE1               	movwf	fsr1l,c
  1655  000492  0100               	movlb	0	; () banked
  1656  000494  0E00               	movlw	high _dataBufOut
  1657  000496  2028               	addwfc	spiTransfer@i+1,w,c
  1658  000498  6EE2               	movwf	fsr1h,c
  1659  00049A  50E7               	movf	indf1,w,c
  1660  00049C  ECFB  F003         	call	_spiTransferByte
  1661  0004A0  6EDF               	movwf	indf2,c
  1662  0004A2  4A27               	infsnz	spiTransfer@i,f,c
  1663  0004A4  2A28               	incf	spiTransfer@i+1,f,c
  1664  0004A6                     l1385:
  1665  0004A6  5028               	movf	spiTransfer@i+1,w,c
  1666  0004A8  0A80               	xorlw	128
  1667  0004AA  6E25               	movwf	??_spiTransfer& (0+255),c
  1668  0004AC  5023               	movf	spiTransfer@len,w,c
  1669  0004AE  5C27               	subwf	spiTransfer@i,w,c
  1670  0004B0  5024               	movf	spiTransfer@len+1,w,c
  1671  0004B2  0A80               	xorlw	128
  1672  0004B4  5825               	subwfb	??_spiTransfer& (0+255),w,c
  1673  0004B6  A0D8               	btfss	status,0,c
  1674  0004B8  D7E0               	goto	l1381
  1675  0004BA                     l1387:
  1676                           
  1677                           ;main.c: 502: }
  1678                           ;main.c: 503: }
  1679                           ;main.c: 505: setCSN(1);
  1680  0004BA  0E00               	movlw	0
  1681  0004BC  6E21               	movwf	setCSN@level+1,c
  1682  0004BE  0E01               	movlw	1
  1683  0004C0  6E20               	movwf	setCSN@level,c
  1684  0004C2  EC03  F004         	call	_setCSN	;wreg free
  1685  0004C6  0012               	return	
  1686  0004C8                     __end_of_spiTransfer:
  1687                           	opt stack 0
  1688                           tblptru	equ	0xFF8
  1689                           tblptrh	equ	0xFF7
  1690                           tblptrl	equ	0xFF6
  1691                           tablat	equ	0xFF5
  1692                           postinc0	equ	0xFEE
  1693                           wreg	equ	0xFE8
  1694                           indf1	equ	0xFE7
  1695                           postdec1	equ	0xFE5
  1696                           fsr1h	equ	0xFE2
  1697                           fsr1l	equ	0xFE1
  1698                           indf2	equ	0xFDF
  1699                           fsr2h	equ	0xFDA
  1700                           fsr2l	equ	0xFD9
  1701                           status	equ	0xFD8
  1702                           
  1703 ;; *************** function _nrfSetTXAddr *****************
  1704 ;; Defined at:
  1705 ;;		line 441 in file "main.c"
  1706 ;; Parameters:    Size  Location     Type
  1707 ;;  addr            2   33[COMRAM] PTR unsigned char 
  1708 ;;		 -> TX_ADDRESS(4), 
  1709 ;;  len             2   35[COMRAM] int 
  1710 ;; Auto vars:     Size  Location     Type
  1711 ;;  i               2   38[COMRAM] int 
  1712 ;; Return value:  Size  Location     Type
  1713 ;;		None               void
  1714 ;; Registers used:
  1715 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1716 ;; Tracked objects:
  1717 ;;		On entry : 0/0
  1718 ;;		On exit  : 0/0
  1719 ;;		Unchanged: 0/0
  1720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1721 ;;      Params:         4       0       0       0
  1722 ;;      Locals:         2       0       0       0
  1723 ;;      Temps:          1       0       0       0
  1724 ;;      Totals:         7       0       0       0
  1725 ;;Total ram usage:        7 bytes
  1726 ;; Hardware stack levels used:    1
  1727 ;; Hardware stack levels required when called:    3
  1728 ;; This function calls:
  1729 ;;		_setCSN
  1730 ;;		_spiTransferByte
  1731 ;; This function is called by:
  1732 ;;		_nrfConfig
  1733 ;; This function uses a non-reentrant model
  1734 ;;
  1735                           
  1736                           	psect	text7
  1737  00069A                     __ptext7:
  1738                           	opt stack 0
  1739  00069A                     _nrfSetTXAddr:
  1740                           	opt stack 25
  1741                           
  1742                           ;main.c: 443: setCSN(0);
  1743                           
  1744                           ;incstack = 0
  1745  00069A  0E00               	movlw	0
  1746  00069C  6E21               	movwf	setCSN@level+1,c
  1747  00069E  0E00               	movlw	0
  1748  0006A0  6E20               	movwf	setCSN@level,c
  1749  0006A2  EC03  F004         	call	_setCSN	;wreg free
  1750                           
  1751                           ;main.c: 445: spiTransferByte(0x20|0x10);
  1752  0006A6  0E30               	movlw	48
  1753  0006A8  ECFB  F003         	call	_spiTransferByte
  1754                           
  1755                           ;main.c: 447: if (len != 0) {
  1756  0006AC  5025               	movf	nrfSetTXAddr@len+1,w,c
  1757  0006AE  1024               	iorwf	nrfSetTXAddr@len,w,c
  1758  0006B0  B4D8               	btfsc	status,2,c
  1759  0006B2  D01A               	goto	l1433
  1760                           
  1761                           ;main.c: 449: for (int i=0;i<len;i++) {
  1762  0006B4  0E00               	movlw	0
  1763  0006B6  6E28               	movwf	nrfSetTXAddr@i+1,c
  1764  0006B8  0E00               	movlw	0
  1765  0006BA  6E27               	movwf	nrfSetTXAddr@i,c
  1766  0006BC  D00B               	goto	l1431
  1767  0006BE                     l1427:
  1768                           
  1769                           ;main.c: 450: spiTransferByte(addr[i]);
  1770  0006BE  5027               	movf	nrfSetTXAddr@i,w,c
  1771  0006C0  2422               	addwf	nrfSetTXAddr@addr,w,c
  1772  0006C2  6ED9               	movwf	fsr2l,c
  1773  0006C4  5028               	movf	nrfSetTXAddr@i+1,w,c
  1774  0006C6  2023               	addwfc	nrfSetTXAddr@addr+1,w,c
  1775  0006C8  6EDA               	movwf	fsr2h,c
  1776  0006CA  50DF               	movf	indf2,w,c
  1777  0006CC  ECFB  F003         	call	_spiTransferByte
  1778  0006D0  4A27               	infsnz	nrfSetTXAddr@i,f,c
  1779  0006D2  2A28               	incf	nrfSetTXAddr@i+1,f,c
  1780  0006D4                     l1431:
  1781  0006D4  5028               	movf	nrfSetTXAddr@i+1,w,c
  1782  0006D6  0A80               	xorlw	128
  1783  0006D8  6E26               	movwf	??_nrfSetTXAddr& (0+255),c
  1784  0006DA  5024               	movf	nrfSetTXAddr@len,w,c
  1785  0006DC  5C27               	subwf	nrfSetTXAddr@i,w,c
  1786  0006DE  5025               	movf	nrfSetTXAddr@len+1,w,c
  1787  0006E0  0A80               	xorlw	128
  1788  0006E2  5826               	subwfb	??_nrfSetTXAddr& (0+255),w,c
  1789  0006E4  A0D8               	btfss	status,0,c
  1790  0006E6  D7EB               	goto	l1427
  1791  0006E8                     l1433:
  1792                           
  1793                           ;main.c: 451: }
  1794                           ;main.c: 452: }
  1795                           ;main.c: 454: setCSN(1);
  1796  0006E8  0E00               	movlw	0
  1797  0006EA  6E21               	movwf	setCSN@level+1,c
  1798  0006EC  0E01               	movlw	1
  1799  0006EE  6E20               	movwf	setCSN@level,c
  1800  0006F0  EC03  F004         	call	_setCSN	;wreg free
  1801  0006F4  0012               	return	
  1802  0006F6                     __end_of_nrfSetTXAddr:
  1803                           	opt stack 0
  1804                           tblptru	equ	0xFF8
  1805                           tblptrh	equ	0xFF7
  1806                           tblptrl	equ	0xFF6
  1807                           tablat	equ	0xFF5
  1808                           postinc0	equ	0xFEE
  1809                           wreg	equ	0xFE8
  1810                           indf1	equ	0xFE7
  1811                           postdec1	equ	0xFE5
  1812                           fsr1h	equ	0xFE2
  1813                           fsr1l	equ	0xFE1
  1814                           indf2	equ	0xFDF
  1815                           fsr2h	equ	0xFDA
  1816                           fsr2l	equ	0xFD9
  1817                           status	equ	0xFD8
  1818                           
  1819 ;; *************** function _nrfSetRXAddr *****************
  1820 ;; Defined at:
  1821 ;;		line 463 in file "main.c"
  1822 ;; Parameters:    Size  Location     Type
  1823 ;;  pipe            1    wreg     unsigned char 
  1824 ;;  addr            2   33[COMRAM] PTR unsigned char 
  1825 ;;		 -> RX_ADDRESS(4), 
  1826 ;;  len             2   35[COMRAM] int 
  1827 ;; Auto vars:     Size  Location     Type
  1828 ;;  pipe            1   38[COMRAM] unsigned char 
  1829 ;;  i               2   39[COMRAM] int 
  1830 ;; Return value:  Size  Location     Type
  1831 ;;		None               void
  1832 ;; Registers used:
  1833 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1834 ;; Tracked objects:
  1835 ;;		On entry : 0/0
  1836 ;;		On exit  : 0/0
  1837 ;;		Unchanged: 0/0
  1838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1839 ;;      Params:         4       0       0       0
  1840 ;;      Locals:         3       0       0       0
  1841 ;;      Temps:          1       0       0       0
  1842 ;;      Totals:         8       0       0       0
  1843 ;;Total ram usage:        8 bytes
  1844 ;; Hardware stack levels used:    1
  1845 ;; Hardware stack levels required when called:    3
  1846 ;; This function calls:
  1847 ;;		_setCSN
  1848 ;;		_spiTransferByte
  1849 ;; This function is called by:
  1850 ;;		_nrfConfig
  1851 ;; This function uses a non-reentrant model
  1852 ;;
  1853                           
  1854                           	psect	text8
  1855  00063A                     __ptext8:
  1856                           	opt stack 0
  1857  00063A                     _nrfSetRXAddr:
  1858                           	opt stack 25
  1859                           
  1860                           ;incstack = 0
  1861                           ;nrfSetRXAddr@pipe stored from wreg
  1862  00063A  6E27               	movwf	nrfSetRXAddr@pipe,c
  1863                           
  1864                           ;main.c: 465: setCSN(0);
  1865  00063C  0E00               	movlw	0
  1866  00063E  6E21               	movwf	setCSN@level+1,c
  1867  000640  0E00               	movlw	0
  1868  000642  6E20               	movwf	setCSN@level,c
  1869  000644  EC03  F004         	call	_setCSN	;wreg free
  1870                           
  1871                           ;main.c: 467: spiTransferByte(0x20|pipe);
  1872  000648  5027               	movf	nrfSetRXAddr@pipe,w,c
  1873  00064A  0920               	iorlw	32
  1874  00064C  ECFB  F003         	call	_spiTransferByte
  1875                           
  1876                           ;main.c: 469: if (len != 0) {
  1877  000650  5025               	movf	nrfSetRXAddr@len+1,w,c
  1878  000652  1024               	iorwf	nrfSetRXAddr@len,w,c
  1879  000654  B4D8               	btfsc	status,2,c
  1880  000656  D01A               	goto	l1417
  1881                           
  1882                           ;main.c: 471: for (int i=0;i<len;i++) {
  1883  000658  0E00               	movlw	0
  1884  00065A  6E29               	movwf	nrfSetRXAddr@i+1,c
  1885  00065C  0E00               	movlw	0
  1886  00065E  6E28               	movwf	nrfSetRXAddr@i,c
  1887  000660  D00B               	goto	l1415
  1888  000662                     l1411:
  1889                           
  1890                           ;main.c: 472: spiTransferByte(addr[i]);
  1891  000662  5028               	movf	nrfSetRXAddr@i,w,c
  1892  000664  2422               	addwf	nrfSetRXAddr@addr,w,c
  1893  000666  6ED9               	movwf	fsr2l,c
  1894  000668  5029               	movf	nrfSetRXAddr@i+1,w,c
  1895  00066A  2023               	addwfc	nrfSetRXAddr@addr+1,w,c
  1896  00066C  6EDA               	movwf	fsr2h,c
  1897  00066E  50DF               	movf	indf2,w,c
  1898  000670  ECFB  F003         	call	_spiTransferByte
  1899  000674  4A28               	infsnz	nrfSetRXAddr@i,f,c
  1900  000676  2A29               	incf	nrfSetRXAddr@i+1,f,c
  1901  000678                     l1415:
  1902  000678  5029               	movf	nrfSetRXAddr@i+1,w,c
  1903  00067A  0A80               	xorlw	128
  1904  00067C  6E26               	movwf	??_nrfSetRXAddr& (0+255),c
  1905  00067E  5024               	movf	nrfSetRXAddr@len,w,c
  1906  000680  5C28               	subwf	nrfSetRXAddr@i,w,c
  1907  000682  5025               	movf	nrfSetRXAddr@len+1,w,c
  1908  000684  0A80               	xorlw	128
  1909  000686  5826               	subwfb	??_nrfSetRXAddr& (0+255),w,c
  1910  000688  A0D8               	btfss	status,0,c
  1911  00068A  D7EB               	goto	l1411
  1912  00068C                     l1417:
  1913                           
  1914                           ;main.c: 473: }
  1915                           ;main.c: 474: }
  1916                           ;main.c: 476: setCSN(1);
  1917  00068C  0E00               	movlw	0
  1918  00068E  6E21               	movwf	setCSN@level+1,c
  1919  000690  0E01               	movlw	1
  1920  000692  6E20               	movwf	setCSN@level,c
  1921  000694  EC03  F004         	call	_setCSN	;wreg free
  1922  000698  0012               	return	
  1923  00069A                     __end_of_nrfSetRXAddr:
  1924                           	opt stack 0
  1925                           tblptru	equ	0xFF8
  1926                           tblptrh	equ	0xFF7
  1927                           tblptrl	equ	0xFF6
  1928                           tablat	equ	0xFF5
  1929                           postinc0	equ	0xFEE
  1930                           wreg	equ	0xFE8
  1931                           indf1	equ	0xFE7
  1932                           postdec1	equ	0xFE5
  1933                           fsr1h	equ	0xFE2
  1934                           fsr1l	equ	0xFE1
  1935                           indf2	equ	0xFDF
  1936                           fsr2h	equ	0xFDA
  1937                           fsr2l	equ	0xFD9
  1938                           status	equ	0xFD8
  1939                           
  1940 ;; *************** function _nrfConfigReg *****************
  1941 ;; Defined at:
  1942 ;;		line 419 in file "main.c"
  1943 ;; Parameters:    Size  Location     Type
  1944 ;;  wr              1    wreg     unsigned char 
  1945 ;;  command         1   33[COMRAM] unsigned char 
  1946 ;;  data            1   34[COMRAM] unsigned char 
  1947 ;; Auto vars:     Size  Location     Type
  1948 ;;  wr              1   35[COMRAM] unsigned char 
  1949 ;; Return value:  Size  Location     Type
  1950 ;;                  1    wreg      unsigned char 
  1951 ;; Registers used:
  1952 ;;		wreg, status,2, status,0, cstack
  1953 ;; Tracked objects:
  1954 ;;		On entry : 0/0
  1955 ;;		On exit  : 0/0
  1956 ;;		Unchanged: 0/0
  1957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1958 ;;      Params:         2       0       0       0
  1959 ;;      Locals:         1       0       0       0
  1960 ;;      Temps:          0       0       0       0
  1961 ;;      Totals:         3       0       0       0
  1962 ;;Total ram usage:        3 bytes
  1963 ;; Hardware stack levels used:    1
  1964 ;; Hardware stack levels required when called:    3
  1965 ;; This function calls:
  1966 ;;		_setCSN
  1967 ;;		_spiTransferByte
  1968 ;; This function is called by:
  1969 ;;		_nrfConfig
  1970 ;; This function uses a non-reentrant model
  1971 ;;
  1972                           
  1973                           	psect	text9
  1974  0006F6                     __ptext9:
  1975                           	opt stack 0
  1976  0006F6                     _nrfConfigReg:
  1977                           	opt stack 25
  1978                           
  1979                           ;incstack = 0
  1980                           ;nrfConfigReg@wr stored from wreg
  1981  0006F6  6E24               	movwf	nrfConfigReg@wr,c
  1982                           
  1983                           ;main.c: 421: setCSN(0);
  1984  0006F8  0E00               	movlw	0
  1985  0006FA  6E21               	movwf	setCSN@level+1,c
  1986  0006FC  0E00               	movlw	0
  1987  0006FE  6E20               	movwf	setCSN@level,c
  1988  000700  EC03  F004         	call	_setCSN	;wreg free
  1989                           
  1990                           ;main.c: 423: if (wr == 'w') {
  1991  000704  5024               	movf	nrfConfigReg@wr,w,c
  1992  000706  0A77               	xorlw	119
  1993  000708  A4D8               	btfss	status,2,c
  1994  00070A  D008               	goto	l1397
  1995                           
  1996                           ;main.c: 424: spiTransferByte(0x20|command);
  1997  00070C  5022               	movf	nrfConfigReg@command,w,c
  1998  00070E  0920               	iorlw	32
  1999  000710  ECFB  F003         	call	_spiTransferByte
  2000                           
  2001                           ;main.c: 425: spiTransferByte(data);
  2002  000714  5023               	movf	nrfConfigReg@data,w,c
  2003  000716  ECFB  F003         	call	_spiTransferByte
  2004                           
  2005                           ;main.c: 426: } else if (wr == 'r') {
  2006  00071A  D00B               	goto	l1401
  2007  00071C                     l1397:
  2008  00071C  5024               	movf	nrfConfigReg@wr,w,c
  2009  00071E  0A72               	xorlw	114
  2010  000720  A4D8               	btfss	status,2,c
  2011  000722  D007               	goto	l1401
  2012                           
  2013                           ;main.c: 427: spiTransferByte(0x00|command);
  2014  000724  5022               	movf	nrfConfigReg@command,w,c
  2015  000726  ECFB  F003         	call	_spiTransferByte
  2016                           
  2017                           ;main.c: 428: data = spiTransferByte(0xFF);
  2018  00072A  0EFF               	movlw	255
  2019  00072C  ECFB  F003         	call	_spiTransferByte
  2020  000730  6E23               	movwf	nrfConfigReg@data,c
  2021  000732                     l1401:
  2022                           
  2023                           ;main.c: 429: }
  2024                           ;main.c: 431: setCSN(1);
  2025  000732  0E00               	movlw	0
  2026  000734  6E21               	movwf	setCSN@level+1,c
  2027  000736  0E01               	movlw	1
  2028  000738  6E20               	movwf	setCSN@level,c
  2029  00073A  EC03  F004         	call	_setCSN	;wreg free
  2030  00073E  0012               	return	
  2031  000740                     __end_of_nrfConfigReg:
  2032                           	opt stack 0
  2033                           tblptru	equ	0xFF8
  2034                           tblptrh	equ	0xFF7
  2035                           tblptrl	equ	0xFF6
  2036                           tablat	equ	0xFF5
  2037                           postinc0	equ	0xFEE
  2038                           wreg	equ	0xFE8
  2039                           indf1	equ	0xFE7
  2040                           postdec1	equ	0xFE5
  2041                           fsr1h	equ	0xFE2
  2042                           fsr1l	equ	0xFE1
  2043                           indf2	equ	0xFDF
  2044                           fsr2h	equ	0xFDA
  2045                           fsr2l	equ	0xFD9
  2046                           status	equ	0xFD8
  2047                           
  2048 ;; *************** function _spiTransferByte *****************
  2049 ;; Defined at:
  2050 ;;		line 511 in file "main.c"
  2051 ;; Parameters:    Size  Location     Type
  2052 ;;  data            1    wreg     unsigned char 
  2053 ;; Auto vars:     Size  Location     Type
  2054 ;;  data            1   31[COMRAM] unsigned char 
  2055 ;; Return value:  Size  Location     Type
  2056 ;;                  1    wreg      unsigned char 
  2057 ;; Registers used:
  2058 ;;		wreg, status,2
  2059 ;; Tracked objects:
  2060 ;;		On entry : 0/0
  2061 ;;		On exit  : 0/0
  2062 ;;		Unchanged: 0/0
  2063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2064 ;;      Params:         0       0       0       0
  2065 ;;      Locals:         1       0       0       0
  2066 ;;      Temps:          0       0       0       0
  2067 ;;      Totals:         1       0       0       0
  2068 ;;Total ram usage:        1 bytes
  2069 ;; Hardware stack levels used:    1
  2070 ;; Hardware stack levels required when called:    2
  2071 ;; This function calls:
  2072 ;;		Nothing
  2073 ;; This function is called by:
  2074 ;;		_nrfConfigReg
  2075 ;;		_nrfSetTXAddr
  2076 ;;		_nrfSetRXAddr
  2077 ;;		_spiTransfer
  2078 ;;		_nrfTXData
  2079 ;;		_nrfGetStatus
  2080 ;; This function uses a non-reentrant model
  2081 ;;
  2082                           
  2083                           	psect	text10
  2084  0007F6                     __ptext10:
  2085                           	opt stack 0
  2086  0007F6                     _spiTransferByte:
  2087                           	opt stack 26
  2088                           
  2089                           ;incstack = 0
  2090                           ;spiTransferByte@data stored from wreg
  2091  0007F6  6E20               	movwf	spiTransferByte@data,c
  2092                           
  2093                           ;main.c: 513: SSP1BUF = data;
  2094  0007F8  C020  FFC9         	movff	spiTransferByte@data,4041	;volatile
  2095  0007FC                     l165:
  2096  0007FC  A69E               	btfss	3998,3,c	;volatile
  2097  0007FE  D7FE               	goto	l165
  2098                           
  2099                           ;main.c: 516: PIR1bits.SSP1IF = 0;
  2100  000800  969E               	bcf	3998,3,c	;volatile
  2101                           
  2102                           ;main.c: 518: return SSP1BUF;
  2103  000802  50C9               	movf	4041,w,c	;volatile
  2104  000804  0012               	return	
  2105  000806                     __end_of_spiTransferByte:
  2106                           	opt stack 0
  2107                           tblptru	equ	0xFF8
  2108                           tblptrh	equ	0xFF7
  2109                           tblptrl	equ	0xFF6
  2110                           tablat	equ	0xFF5
  2111                           postinc0	equ	0xFEE
  2112                           wreg	equ	0xFE8
  2113                           indf1	equ	0xFE7
  2114                           postdec1	equ	0xFE5
  2115                           fsr1h	equ	0xFE2
  2116                           fsr1l	equ	0xFE1
  2117                           indf2	equ	0xFDF
  2118                           fsr2h	equ	0xFDA
  2119                           fsr2l	equ	0xFD9
  2120                           status	equ	0xFD8
  2121                           
  2122 ;; *************** function _setCSN *****************
  2123 ;; Defined at:
  2124 ;;		line 394 in file "main.c"
  2125 ;; Parameters:    Size  Location     Type
  2126 ;;  level           2   31[COMRAM] int 
  2127 ;; Auto vars:     Size  Location     Type
  2128 ;;		None
  2129 ;; Return value:  Size  Location     Type
  2130 ;;		None               void
  2131 ;; Registers used:
  2132 ;;		wreg, status,2, status,0
  2133 ;; Tracked objects:
  2134 ;;		On entry : 0/0
  2135 ;;		On exit  : 0/0
  2136 ;;		Unchanged: 0/0
  2137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2138 ;;      Params:         2       0       0       0
  2139 ;;      Locals:         0       0       0       0
  2140 ;;      Temps:          0       0       0       0
  2141 ;;      Totals:         2       0       0       0
  2142 ;;Total ram usage:        2 bytes
  2143 ;; Hardware stack levels used:    1
  2144 ;; Hardware stack levels required when called:    2
  2145 ;; This function calls:
  2146 ;;		Nothing
  2147 ;; This function is called by:
  2148 ;;		_nrfConfigReg
  2149 ;;		_nrfSetTXAddr
  2150 ;;		_nrfSetRXAddr
  2151 ;;		_spiTransfer
  2152 ;;		_nrfTXData
  2153 ;;		_nrfGetStatus
  2154 ;; This function uses a non-reentrant model
  2155 ;;
  2156                           
  2157                           	psect	text11
  2158  000806                     __ptext11:
  2159                           	opt stack 0
  2160  000806                     _setCSN:
  2161                           	opt stack 26
  2162                           
  2163                           ;main.c: 396: if (level == 1) {
  2164                           
  2165                           ;incstack = 0
  2166  000806  0420               	decf	setCSN@level,w,c
  2167  000808  1021               	iorwf	setCSN@level+1,w,c
  2168  00080A  A4D8               	btfss	status,2,c
  2169  00080C  D002               	goto	l125
  2170                           
  2171                           ;main.c: 397: LATAbits.LATA2 = 1;
  2172  00080E  8489               	bsf	3977,2,c	;volatile
  2173                           
  2174                           ;main.c: 398: } else {
  2175  000810  0012               	return	
  2176  000812                     l125:
  2177                           
  2178                           ;main.c: 399: LATAbits.LATA2 = 0;
  2179  000812  9489               	bcf	3977,2,c	;volatile
  2180  000814  0012               	return	
  2181  000816                     __end_of_setCSN:
  2182                           	opt stack 0
  2183                           tblptru	equ	0xFF8
  2184                           tblptrh	equ	0xFF7
  2185                           tblptrl	equ	0xFF6
  2186                           tablat	equ	0xFF5
  2187                           postinc0	equ	0xFEE
  2188                           wreg	equ	0xFE8
  2189                           indf1	equ	0xFE7
  2190                           postdec1	equ	0xFE5
  2191                           fsr1h	equ	0xFE2
  2192                           fsr1l	equ	0xFE1
  2193                           indf2	equ	0xFDF
  2194                           fsr2h	equ	0xFDA
  2195                           fsr2l	equ	0xFD9
  2196                           status	equ	0xFD8
  2197                           
  2198 ;; *************** function _intConfig *****************
  2199 ;; Defined at:
  2200 ;;		line 304 in file "main.c"
  2201 ;; Parameters:    Size  Location     Type
  2202 ;;		None
  2203 ;; Auto vars:     Size  Location     Type
  2204 ;;		None
  2205 ;; Return value:  Size  Location     Type
  2206 ;;		None               void
  2207 ;; Registers used:
  2208 ;;		None
  2209 ;; Tracked objects:
  2210 ;;		On entry : 0/0
  2211 ;;		On exit  : 0/0
  2212 ;;		Unchanged: 0/0
  2213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2214 ;;      Params:         0       0       0       0
  2215 ;;      Locals:         0       0       0       0
  2216 ;;      Temps:          0       0       0       0
  2217 ;;      Totals:         0       0       0       0
  2218 ;;Total ram usage:        0 bytes
  2219 ;; Hardware stack levels used:    1
  2220 ;; Hardware stack levels required when called:    2
  2221 ;; This function calls:
  2222 ;;		Nothing
  2223 ;; This function is called by:
  2224 ;;		_main
  2225 ;; This function uses a non-reentrant model
  2226 ;;
  2227                           
  2228                           	psect	text12
  2229  0007D2                     __ptext12:
  2230                           	opt stack 0
  2231  0007D2                     _intConfig:
  2232                           	opt stack 27
  2233                           
  2234                           ;main.c: 307: PIR1bits.SSP1IF = 0;
  2235                           
  2236                           ;incstack = 0
  2237  0007D2  969E               	bcf	3998,3,c	;volatile
  2238                           
  2239                           ;main.c: 310: IOCBbits.IOCB4 = 1;
  2240  0007D4  8862               	bsf	3938,4,c	;volatile
  2241                           
  2242                           ;main.c: 311: INTCONbits.RBIF = 0;
  2243  0007D6  90F2               	bcf	intcon,0,c	;volatile
  2244                           
  2245                           ;main.c: 312: INTCON2bits.RBIP = 1;
  2246  0007D8  80F1               	bsf	intcon2,0,c	;volatile
  2247                           
  2248                           ;main.c: 313: INTCONbits.RBIE = 1;
  2249  0007DA  86F2               	bsf	intcon,3,c	;volatile
  2250                           
  2251                           ;main.c: 316: RCONbits.IPEN = 1;
  2252  0007DC  8ED0               	bsf	4048,7,c	;volatile
  2253                           
  2254                           ;main.c: 317: INTCONbits.GIEH = 1;
  2255  0007DE  8EF2               	bsf	intcon,7,c	;volatile
  2256                           
  2257                           ;main.c: 318: INTCONbits.GIEL = 1;
  2258  0007E0  8CF2               	bsf	intcon,6,c	;volatile
  2259  0007E2  0012               	return	
  2260  0007E4                     __end_of_intConfig:
  2261                           	opt stack 0
  2262                           tblptru	equ	0xFF8
  2263                           tblptrh	equ	0xFF7
  2264                           tblptrl	equ	0xFF6
  2265                           tablat	equ	0xFF5
  2266                           intcon	equ	0xFF2
  2267                           intcon2	equ	0xFF1
  2268                           postinc0	equ	0xFEE
  2269                           wreg	equ	0xFE8
  2270                           indf1	equ	0xFE7
  2271                           postdec1	equ	0xFE5
  2272                           fsr1h	equ	0xFE2
  2273                           fsr1l	equ	0xFE1
  2274                           indf2	equ	0xFDF
  2275                           fsr2h	equ	0xFDA
  2276                           fsr2l	equ	0xFD9
  2277                           status	equ	0xFD8
  2278                           
  2279 ;; *************** function _delay10ms *****************
  2280 ;; Defined at:
  2281 ;;		line 554 in file "main.c"
  2282 ;; Parameters:    Size  Location     Type
  2283 ;;  ms_multi        2   31[COMRAM] int 
  2284 ;; Auto vars:     Size  Location     Type
  2285 ;;  i               2   34[COMRAM] int 
  2286 ;; Return value:  Size  Location     Type
  2287 ;;		None               void
  2288 ;; Registers used:
  2289 ;;		wreg, status,2, status,0
  2290 ;; Tracked objects:
  2291 ;;		On entry : 0/0
  2292 ;;		On exit  : 0/0
  2293 ;;		Unchanged: 0/0
  2294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2295 ;;      Params:         2       0       0       0
  2296 ;;      Locals:         2       0       0       0
  2297 ;;      Temps:          1       0       0       0
  2298 ;;      Totals:         5       0       0       0
  2299 ;;Total ram usage:        5 bytes
  2300 ;; Hardware stack levels used:    1
  2301 ;; Hardware stack levels required when called:    2
  2302 ;; This function calls:
  2303 ;;		Nothing
  2304 ;; This function is called by:
  2305 ;;		_main
  2306 ;; This function uses a non-reentrant model
  2307 ;;
  2308                           
  2309                           	psect	text13
  2310  00077C                     __ptext13:
  2311                           	opt stack 0
  2312  00077C                     _delay10ms:
  2313                           	opt stack 27
  2314                           
  2315                           ;main.c: 555: int i = 0;
  2316                           
  2317                           ;incstack = 0
  2318  00077C  0E00               	movlw	0
  2319  00077E  6E24               	movwf	delay10ms@i+1,c
  2320  000780  0E00               	movlw	0
  2321  000782  6E23               	movwf	delay10ms@i,c
  2322                           
  2323                           ;main.c: 556: for (i=0;i<ms_multi;i++) {
  2324  000784  0E00               	movlw	0
  2325  000786  6E24               	movwf	delay10ms@i+1,c
  2326  000788  0E00               	movlw	0
  2327  00078A  6E23               	movwf	delay10ms@i,c
  2328  00078C  D00A               	goto	l178
  2329  00078E                     l1507:
  2330                           
  2331                           ;main.c: 557: _delay((unsigned long)((11)*(64000000/4000.0)));
  2332  00078E  0EE5               	movlw	229
  2333  000790  6E22               	movwf	??_delay10ms& (0+255),c
  2334  000792  0E91               	movlw	145
  2335  000794                     u817:
  2336  000794  2EE8               	decfsz	wreg,f,c
  2337  000796  D7FE               	goto	u817
  2338  000798  2E22               	decfsz	??_delay10ms& (0+255),f,c
  2339  00079A  D7FC               	goto	u817
  2340  00079C  F000               	nop	
  2341  00079E  4A23               	infsnz	delay10ms@i,f,c
  2342  0007A0  2A24               	incf	delay10ms@i+1,f,c
  2343  0007A2                     l178:
  2344  0007A2  5024               	movf	delay10ms@i+1,w,c
  2345  0007A4  0A80               	xorlw	128
  2346  0007A6  6E22               	movwf	??_delay10ms& (0+255),c
  2347  0007A8  5020               	movf	delay10ms@ms_multi,w,c
  2348  0007AA  5C23               	subwf	delay10ms@i,w,c
  2349  0007AC  5021               	movf	delay10ms@ms_multi+1,w,c
  2350  0007AE  0A80               	xorlw	128
  2351  0007B0  5822               	subwfb	??_delay10ms& (0+255),w,c
  2352  0007B2  B0D8               	btfsc	status,0,c
  2353  0007B4  0012               	return	
  2354  0007B6  D7EB               	goto	l1507
  2355  0007B8                     __end_of_delay10ms:
  2356                           	opt stack 0
  2357                           tblptru	equ	0xFF8
  2358                           tblptrh	equ	0xFF7
  2359                           tblptrl	equ	0xFF6
  2360                           tablat	equ	0xFF5
  2361                           intcon	equ	0xFF2
  2362                           intcon2	equ	0xFF1
  2363                           postinc0	equ	0xFEE
  2364                           wreg	equ	0xFE8
  2365                           indf1	equ	0xFE7
  2366                           postdec1	equ	0xFE5
  2367                           fsr1h	equ	0xFE2
  2368                           fsr1l	equ	0xFE1
  2369                           indf2	equ	0xFDF
  2370                           fsr2h	equ	0xFDA
  2371                           fsr2l	equ	0xFD9
  2372                           status	equ	0xFD8
  2373                           
  2374 ;; *************** function _lowISR *****************
  2375 ;; Defined at:
  2376 ;;		line 297 in file "main.c"
  2377 ;; Parameters:    Size  Location     Type
  2378 ;;		None
  2379 ;; Auto vars:     Size  Location     Type
  2380 ;;		None
  2381 ;; Return value:  Size  Location     Type
  2382 ;;		None               void
  2383 ;; Registers used:
  2384 ;;		None
  2385 ;; Tracked objects:
  2386 ;;		On entry : 0/0
  2387 ;;		On exit  : 0/0
  2388 ;;		Unchanged: 0/0
  2389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2390 ;;      Params:         0       0       0       0
  2391 ;;      Locals:         0       0       0       0
  2392 ;;      Temps:         17       0       0       0
  2393 ;;      Totals:        17       0       0       0
  2394 ;;Total ram usage:       17 bytes
  2395 ;; Hardware stack levels used:    1
  2396 ;; Hardware stack levels required when called:    1
  2397 ;; This function calls:
  2398 ;;		Nothing
  2399 ;; This function is called by:
  2400 ;;		Interrupt level 1
  2401 ;; This function uses a non-reentrant model
  2402 ;;
  2403                           
  2404                           	psect	intcodelo
  2405  000018                     __pintcodelo:
  2406                           	opt stack 0
  2407  000018                     _lowISR:
  2408                           	opt stack 25
  2409                           
  2410                           ;incstack = 0
  2411  000018  CFD8 F001          	movff	status,??_lowISR
  2412  00001C  CFE8 F002          	movff	wreg,??_lowISR+1
  2413  000020  CFE0 F003          	movff	bsr,??_lowISR+2
  2414  000024  CFFA F004          	movff	pclath,??_lowISR+3
  2415  000028  CFFB F005          	movff	pclatu,??_lowISR+4
  2416  00002C  CFE9 F006          	movff	fsr0l,??_lowISR+5
  2417  000030  CFEA F007          	movff	fsr0h,??_lowISR+6
  2418  000034  CFE1 F008          	movff	fsr1l,??_lowISR+7
  2419  000038  CFE2 F009          	movff	fsr1h,??_lowISR+8
  2420  00003C  CFD9 F00A          	movff	fsr2l,??_lowISR+9
  2421  000040  CFDA F00B          	movff	fsr2h,??_lowISR+10
  2422  000044  CFF3 F00C          	movff	prodl,??_lowISR+11
  2423  000048  CFF4 F00D          	movff	prodh,??_lowISR+12
  2424  00004C  CFF6 F00E          	movff	tblptrl,??_lowISR+13
  2425  000050  CFF7 F00F          	movff	tblptrh,??_lowISR+14
  2426  000054  CFF8 F010          	movff	tblptru,??_lowISR+15
  2427  000058  CFF5 F011          	movff	tablat,??_lowISR+16
  2428  00005C  C011  FFF5         	movff	??_lowISR+16,tablat
  2429  000060  C010  FFF8         	movff	??_lowISR+15,tblptru
  2430  000064  C00F  FFF7         	movff	??_lowISR+14,tblptrh
  2431  000068  C00E  FFF6         	movff	??_lowISR+13,tblptrl
  2432  00006C  C00D  FFF4         	movff	??_lowISR+12,prodh
  2433  000070  C00C  FFF3         	movff	??_lowISR+11,prodl
  2434  000074  C00B  FFDA         	movff	??_lowISR+10,fsr2h
  2435  000078  C00A  FFD9         	movff	??_lowISR+9,fsr2l
  2436  00007C  C009  FFE2         	movff	??_lowISR+8,fsr1h
  2437  000080  C008  FFE1         	movff	??_lowISR+7,fsr1l
  2438  000084  C007  FFEA         	movff	??_lowISR+6,fsr0h
  2439  000088  C006  FFE9         	movff	??_lowISR+5,fsr0l
  2440  00008C  C005  FFFB         	movff	??_lowISR+4,pclatu
  2441  000090  C004  FFFA         	movff	??_lowISR+3,pclath
  2442  000094  C003  FFE0         	movff	??_lowISR+2,bsr
  2443  000098  C002  FFE8         	movff	??_lowISR+1,wreg
  2444  00009C  C001  FFD8         	movff	??_lowISR,status
  2445  0000A0  0010               	retfie	
  2446  0000A2                     __end_of_lowISR:
  2447                           	opt stack 0
  2448                           pclatu	equ	0xFFB
  2449                           pclath	equ	0xFFA
  2450                           tblptru	equ	0xFF8
  2451                           tblptrh	equ	0xFF7
  2452                           tblptrl	equ	0xFF6
  2453                           tablat	equ	0xFF5
  2454                           prodh	equ	0xFF4
  2455                           prodl	equ	0xFF3
  2456                           intcon	equ	0xFF2
  2457                           intcon2	equ	0xFF1
  2458                           postinc0	equ	0xFEE
  2459                           fsr0h	equ	0xFEA
  2460                           fsr0l	equ	0xFE9
  2461                           wreg	equ	0xFE8
  2462                           indf1	equ	0xFE7
  2463                           postdec1	equ	0xFE5
  2464                           fsr1h	equ	0xFE2
  2465                           fsr1l	equ	0xFE1
  2466                           bsr	equ	0xFE0
  2467                           indf2	equ	0xFDF
  2468                           fsr2h	equ	0xFDA
  2469                           fsr2l	equ	0xFD9
  2470                           status	equ	0xFD8
  2471                           
  2472 ;; *************** function _highISR *****************
  2473 ;; Defined at:
  2474 ;;		line 282 in file "main.c"
  2475 ;; Parameters:    Size  Location     Type
  2476 ;;		None
  2477 ;; Auto vars:     Size  Location     Type
  2478 ;;		None
  2479 ;; Return value:  Size  Location     Type
  2480 ;;		None               void
  2481 ;; Registers used:
  2482 ;;		wreg, status,2
  2483 ;; Tracked objects:
  2484 ;;		On entry : 0/0
  2485 ;;		On exit  : 0/0
  2486 ;;		Unchanged: 0/0
  2487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2488 ;;      Params:         0       0       0       0
  2489 ;;      Locals:         0       0       0       0
  2490 ;;      Temps:         14       0       0       0
  2491 ;;      Totals:        14       0       0       0
  2492 ;;Total ram usage:       14 bytes
  2493 ;; Hardware stack levels used:    1
  2494 ;; This function calls:
  2495 ;;		Nothing
  2496 ;; This function is called by:
  2497 ;;		Interrupt level 2
  2498 ;; This function uses a non-reentrant model
  2499 ;;
  2500                           
  2501                           	psect	intcode
  2502  000008                     __pintcode:
  2503                           	opt stack 0
  2504  000008                     _highISR:
  2505                           	opt stack 25
  2506                           
  2507                           ;incstack = 0
  2508  000008  CFFA F012          	movff	pclath,??_highISR
  2509  00000C  CFFB F013          	movff	pclatu,??_highISR+1
  2510  000010  CFE9 F014          	movff	fsr0l,??_highISR+2
  2511  000014  EFAC  F002         	goto	int_func
  2512                           pclatu	equ	0xFFB
  2513                           pclath	equ	0xFFA
  2514                           tblptru	equ	0xFF8
  2515                           tblptrh	equ	0xFF7
  2516                           tblptrl	equ	0xFF6
  2517                           tablat	equ	0xFF5
  2518                           prodh	equ	0xFF4
  2519                           prodl	equ	0xFF3
  2520                           intcon	equ	0xFF2
  2521                           intcon2	equ	0xFF1
  2522                           postinc0	equ	0xFEE
  2523                           fsr0h	equ	0xFEA
  2524                           fsr0l	equ	0xFE9
  2525                           wreg	equ	0xFE8
  2526                           indf1	equ	0xFE7
  2527                           postdec1	equ	0xFE5
  2528                           fsr1h	equ	0xFE2
  2529                           fsr1l	equ	0xFE1
  2530                           bsr	equ	0xFE0
  2531                           indf2	equ	0xFDF
  2532                           fsr2h	equ	0xFDA
  2533                           fsr2l	equ	0xFD9
  2534                           status	equ	0xFD8
  2535                           
  2536                           	psect	intcode_body
  2537  000558                     __pintcode_body:
  2538                           	opt stack 25
  2539  000558                     int_func:
  2540                           	opt stack 25
  2541  000558  CFEA F015          	movff	fsr0h,??_highISR+3
  2542  00055C  CFE1 F016          	movff	fsr1l,??_highISR+4
  2543  000560  CFE2 F017          	movff	fsr1h,??_highISR+5
  2544  000564  CFD9 F018          	movff	fsr2l,??_highISR+6
  2545  000568  CFDA F019          	movff	fsr2h,??_highISR+7
  2546  00056C  CFF3 F01A          	movff	prodl,??_highISR+8
  2547  000570  CFF4 F01B          	movff	prodh,??_highISR+9
  2548  000574  CFF6 F01C          	movff	tblptrl,??_highISR+10
  2549  000578  CFF7 F01D          	movff	tblptrh,??_highISR+11
  2550  00057C  CFF8 F01E          	movff	tblptru,??_highISR+12
  2551  000580  CFF5 F01F          	movff	tablat,??_highISR+13
  2552                           
  2553                           ;main.c: 284: if (INTCONbits.RBIF) {
  2554  000584  A0F2               	btfss	intcon,0,c	;volatile
  2555  000586  D005               	goto	i2l107
  2556                           
  2557                           ;main.c: 286: if (PORTBbits.RB4 == 0) {
  2558  000588  B881               	btfsc	3969,4,c	;volatile
  2559  00058A  D002               	goto	i2l1057
  2560                           
  2561                           ;main.c: 287: nrfInterrupt = 1;
  2562  00058C  0E01               	movlw	1
  2563  00058E  6E3D               	movwf	_nrfInterrupt,c	;volatile
  2564  000590                     i2l1057:
  2565                           
  2566                           ;main.c: 288: }
  2567                           ;main.c: 290: INTCONbits.RBIF = 0;
  2568  000590  90F2               	bcf	intcon,0,c	;volatile
  2569  000592                     i2l107:
  2570  000592  C01F  FFF5         	movff	??_highISR+13,tablat
  2571  000596  C01E  FFF8         	movff	??_highISR+12,tblptru
  2572  00059A  C01D  FFF7         	movff	??_highISR+11,tblptrh
  2573  00059E  C01C  FFF6         	movff	??_highISR+10,tblptrl
  2574  0005A2  C01B  FFF4         	movff	??_highISR+9,prodh
  2575  0005A6  C01A  FFF3         	movff	??_highISR+8,prodl
  2576  0005AA  C019  FFDA         	movff	??_highISR+7,fsr2h
  2577  0005AE  C018  FFD9         	movff	??_highISR+6,fsr2l
  2578  0005B2  C017  FFE2         	movff	??_highISR+5,fsr1h
  2579  0005B6  C016  FFE1         	movff	??_highISR+4,fsr1l
  2580  0005BA  C015  FFEA         	movff	??_highISR+3,fsr0h
  2581  0005BE  C014  FFE9         	movff	??_highISR+2,fsr0l
  2582  0005C2  C013  FFFB         	movff	??_highISR+1,pclatu
  2583  0005C6  C012  FFFA         	movff	??_highISR,pclath
  2584  0005CA  0011               	retfie		f
  2585  0005CC                     __end_of_highISR:
  2586                           	opt stack 0
  2587  0000                     pclatu	equ	0xFFB
  2588                           pclath	equ	0xFFA
  2589                           tblptru	equ	0xFF8
  2590                           tblptrh	equ	0xFF7
  2591                           tblptrl	equ	0xFF6
  2592                           tablat	equ	0xFF5
  2593                           prodh	equ	0xFF4
  2594                           prodl	equ	0xFF3
  2595                           intcon	equ	0xFF2
  2596                           intcon2	equ	0xFF1
  2597                           postinc0	equ	0xFEE
  2598                           fsr0h	equ	0xFEA
  2599                           fsr0l	equ	0xFE9
  2600                           wreg	equ	0xFE8
  2601                           indf1	equ	0xFE7
  2602                           postdec1	equ	0xFE5
  2603                           fsr1h	equ	0xFE2
  2604                           fsr1l	equ	0xFE1
  2605                           bsr	equ	0xFE0
  2606                           indf2	equ	0xFDF
  2607                           fsr2h	equ	0xFDA
  2608                           fsr2l	equ	0xFD9
  2609                           status	equ	0xFD8
  2610                           pclatu	equ	0xFFB
  2611                           pclath	equ	0xFFA
  2612                           tblptru	equ	0xFF8
  2613                           tblptrh	equ	0xFF7
  2614                           tblptrl	equ	0xFF6
  2615                           tablat	equ	0xFF5
  2616                           prodh	equ	0xFF4
  2617                           prodl	equ	0xFF3
  2618                           intcon	equ	0xFF2
  2619                           intcon2	equ	0xFF1
  2620                           postinc0	equ	0xFEE
  2621                           fsr0h	equ	0xFEA
  2622                           fsr0l	equ	0xFE9
  2623                           wreg	equ	0xFE8
  2624                           indf1	equ	0xFE7
  2625                           postdec1	equ	0xFE5
  2626                           fsr1h	equ	0xFE2
  2627                           fsr1l	equ	0xFE1
  2628                           bsr	equ	0xFE0
  2629                           indf2	equ	0xFDF
  2630                           fsr2h	equ	0xFDA
  2631                           fsr2l	equ	0xFD9
  2632                           status	equ	0xFD8
  2633                           
  2634                           	psect	rparam
  2635  0000                     pclatu	equ	0xFFB
  2636                           pclath	equ	0xFFA
  2637                           tblptru	equ	0xFF8
  2638                           tblptrh	equ	0xFF7
  2639                           tblptrl	equ	0xFF6
  2640                           tablat	equ	0xFF5
  2641                           prodh	equ	0xFF4
  2642                           prodl	equ	0xFF3
  2643                           intcon	equ	0xFF2
  2644                           intcon2	equ	0xFF1
  2645                           postinc0	equ	0xFEE
  2646                           fsr0h	equ	0xFEA
  2647                           fsr0l	equ	0xFE9
  2648                           wreg	equ	0xFE8
  2649                           indf1	equ	0xFE7
  2650                           postdec1	equ	0xFE5
  2651                           fsr1h	equ	0xFE2
  2652                           fsr1l	equ	0xFE1
  2653                           bsr	equ	0xFE0
  2654                           indf2	equ	0xFDF
  2655                           fsr2h	equ	0xFDA
  2656                           fsr2l	equ	0xFD9
  2657                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        17
    BSS         69
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     41      63
    BANK0           160     20      84
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    nrfSetRXAddr@addr	PTR unsigned char  size(2) Largest target is 4
		 -> RX_ADDRESS(COMRAM[4]), 

    nrfSetTXAddr@addr	PTR unsigned char  size(2) Largest target is 4
		 -> TX_ADDRESS(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->_spiConfig_1
    _spiConfig_1->___aldiv
    _nrfTXData->_setCSN
    _nrfConfig->_nrfSetRXAddr
    _spiTransfer->_setCSN
    _nrfSetTXAddr->_setCSN
    _nrfSetRXAddr->_setCSN
    _nrfConfigReg->_setCSN

Critical Paths under _highISR in COMRAM

    None.

Critical Paths under _lowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_spiConfig_1
    _spiConfig_1->___aldiv

Critical Paths under _highISR in BANK0

    None.

Critical Paths under _lowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _highISR in BANK1

    None.

Critical Paths under _lowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _highISR in BANK2

    None.

Critical Paths under _lowISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    9881
                                             16 BANK0      4     4      0
                          _delay10ms
                          _intConfig
                          _nrfConfig
                          _nrfTXData
                         _portConfig
                        _spiConfig_1
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiConfig_1                                         12    10      2     869
                                             39 COMRAM     2     0      2
                                              6 BANK0     10    10      0
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     705
                                             31 COMRAM     8     0      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _portConfig                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _nrfTXData                                            5     3      2    1037
                                             33 COMRAM     5     3      2
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (1) _nrfConfig                                            0     0      0    6183
                       _nrfConfigReg
                       _nrfSetRXAddr
                       _nrfSetTXAddr
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiTransfer                                          7     4      3    1579
                                             33 COMRAM     7     4      3
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfSetTXAddr                                         7     3      4    1133
                                             33 COMRAM     7     3      4
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfSetRXAddr                                         8     4      4    1164
                                             33 COMRAM     8     4      4
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfConfigReg                                         3     1      2    2307
                                             33 COMRAM     3     1      2
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _spiTransferByte                                      1     1      0      31
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setCSN                                               2     0      2     811
                                             31 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _intConfig                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _delay10ms                                            5     3      2     136
                                             31 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _lowISR                                              17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _highISR                                             14    14      0       0
                                             17 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay10ms
   _intConfig
   _nrfConfig
     _nrfConfigReg
       _setCSN
       _spiTransferByte
     _nrfSetRXAddr
       _setCSN
       _spiTransferByte
     _nrfSetTXAddr
       _setCSN
       _spiTransferByte
     _spiTransfer
       _setCSN
       _spiTransferByte
   _nrfTXData
     _setCSN
     _spiTransferByte
   _portConfig
   _spiConfig_1
     ___aldiv
   _spiTransfer
     _setCSN
     _spiTransferByte

 _lowISR (ROOT)

 _highISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     14      54       4       52.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     29      3F       1       66.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      93       9        0.0%
DATA                 0      0      93      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Thu Oct 02 08:58:30 2014

__size_of_spiTransferByte 0010                        bsr 000FE0                _RX_ADDRESS 0033  
             __CFG_LVP$ON 000000                       l125 0812                       l165 07FC  
                     l178 07A2                       u807 062E                       u817 0794  
                     u665 0240                       u675 0272                       u787 01A6  
                     u797 020E                       wreg 000FE8                _TX_ADDRESS 0037  
                    l1401 0732                      l1411 0662                      l1415 0678  
                    l1431 06D4                      l1417 068C                      l1433 06E8  
                    l1507 078E                      l1427 06BE                      l1523 060A  
                    l1443 025A                      l1611 019C                      l1381 047A  
                    l1373 045A                      l1525 061E                      l1519 05F0  
                    l1455 02B8                      l1471 0316                      l1385 04A6  
                    l1377 0468                      l1369 044A                      l1457 02C6  
                    l1449 028C                      l1387 04BA                      l1475 033C  
                    l1467 0306                      l1459 02CA                      l1619 01B4  
                    l1397 071C                      l1629 01E6                      l1639 020C  
                    _LATA 000F89                      _LATB 000F8A                      _LATC 000F8B  
      spiTransfer@command 0022                      _main 00A6                      fsr0h 000FEA  
                    fsr1h 000FE2                      fsr0l 000FE9                      fsr2h 000FDA  
                    indf1 000FE7                      fsr1l 000FE1                      indf2 000FDF  
                    fsr2l 000FD9             __CFG_BORV$190 000000                      pclat 000FFA  
                    prodh 000FF4                      prodl 000FF3                      start 00A2  
           __CFG_IESO$OFF 000000            nrfConfigReg@wr 0024           __end_of___aldiv 034E  
                   ?_main 0001                     i2l107 0592                     _TRISA 000F92  
                   _TRISB 000F93                     _TRISC 000F94           __end_of_highISR 05CC  
          __CFG_FCMEN$OFF 000000        __CFG_MCLRE$EXTMCLR 000000                     tablat 000FF5  
                   status 000FD8            __CFG_HFOFST$ON 000000            __CFG_FOSC$HSHP 000000  
         __initialization 0740              __end_of_main 0222       spiTransferByte@data 0020  
                  ??_main 002A             __activetblptr 000000         ??_spiTransferByte 0020  
          __CFG_PLLCFG$ON 000000             nrfSetRXAddr@i 0028             nrfSetTXAddr@i 0027  
                  i2l1057 0590            __CFG_WDTEN$OFF 000000              ?_spiConfig_1 0028  
          __CFG_PWRTEN$ON 000000            __CFG_XINST$OFF 000000                 ??___aldiv 0028  
          __CFG_STVREN$ON 000000                    _lowISR 0018                    _setCSN 0806  
                  clear_0 0746               setCSN@level 0020                 ??_highISR 0012  
           ?_nrfConfigReg 0022              _FEATURE_CURR 002D       spiConfig_1@spiSpeed 0028  
            __pdataCOMRAM 002A              ?_spiTransfer 0022                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8                __accesstop 0060  
 __end_of__initialization 0776           __CFG_PBADEN$OFF 000000             ?_nrfSetRXAddr 0022  
           ?_nrfSetTXAddr 0022            __pcstackCOMRAM 0001        __size_of_delay10ms 003C  
          _EN_RXADDR_CURR 002C            ??_nrfConfigReg 0024          nrfConfigReg@data 0023  
              _dataBufOut 0080                __pbssBANK0 0060        __size_of_intConfig 0012  
          ??_nrfSetRXAddr 0026            ??_nrfSetTXAddr 0026        __size_of_nrfTXData 006E  
      __size_of_nrfConfig 00DC       nrfConfigReg@command 0022        __CFG_CCP2MX$PORTC1 000000  
      __CFG_CCP3MX$PORTB5 000000                   ?_lowISR 0001                   ?_setCSN 0020  
                 _SSP1ADD 000FC8                   _SSP1BUF 000FC9         __end_of_delay10ms 07B8  
        nrfSetRXAddr@addr 0022          nrfSetRXAddr@pipe 0027                   __Hparam 0000  
                 __Lparam 0000      __size_of_spiConfig_1 0090           _spiTransferByte 07F6  
              delay10ms@i 0023                   ___aldiv 0222             _RX_PW_P0_CURR 0030  
                 __pcinit 0740           __size_of_lowISR 008A           __size_of_setCSN 0010  
        nrfSetTXAddr@addr 0022                   __ramtop 0300         __end_of_intConfig 07E4  
                 _highISR 0008                   __ptext0 00A6                   __ptext1 04C8  
                 __ptext2 0222                   __ptext3 07B8                   __ptext4 05CC  
                 __ptext5 034E                   __ptext6 042A                   __ptext7 069A  
                 __ptext8 063A                   __ptext9 06F6                   _nrfBusy 003C  
       __end_of_nrfTXData 063A          ___aldiv@dividend 0020         __end_of_nrfConfig 042A  
    __size_of_spiTransfer 009E            __pintcode_body 0558      end_of_initialization 0776  
    spiConfig_1@sspAddVal 00AE                   int_func 0558      __end_of_nrfConfigReg 0740  
        ___aldiv@quotient 00A2                   postdec1 000FE5                   postinc0 000FEE  
            nrfTXData@len 0022                _portConfig 07B8                 _PORTBbits 000F81  
    __end_of_nrfSetRXAddr 069A      __end_of_nrfSetTXAddr 06F6                main@TXtime 00B2  
 __end_of_spiTransferByte 0806             __pidataCOMRAM 07E4            __end_of_lowISR 00A2  
          __end_of_setCSN 0816       start_initialization 0740          _spiConfig_1$1492 00AA  
                ??_lowISR 0001                  ??_setCSN 0022               ?_portConfig 0001  
              nrfTXData@i 0025               __pbssCOMRAM 003B             __pcstackBANK0 00A0  
   __size_of_nrfConfigReg 004A                 _dataBufIn 0060          ?_spiTransferByte 0001  
               _delay10ms 077C               _CONFIG_CURR 002A             _SETUP_AW_CURR 0031  
               __pintcode 0008                  ?___aldiv 0020     __size_of_nrfSetRXAddr 0060  
   __size_of_nrfSetTXAddr 005C           _SETUP_RETR_CURR 0032               __pintcodelo 0018  
        __CFG_PRICLKEN$ON 000000                  ?_highISR 0001              _nrfConfigReg 06F6  
         nrfSetRXAddr@len 0024                 _intConfig 07D2                 _nrfSTATUS 003E  
               _nrfTXData 05CC           nrfSetTXAddr@len 0024                 _nrfConfig 034E  
         ___aldiv@divisor 0024           ___aldiv@counter 00A0                  _IOCBbits 000F62  
     __size_of_portConfig 001A                  _LATAbits 000F89                ?_delay10ms 0020  
           ??_spiConfig_1 00A6              _nrfSetRXAddr 063A              _nrfSetTXAddr 069A  
            _nrfInterrupt 003D                 _spiTXFlag 003F                  _PIR1bits 000F9E  
                _RCONbits 000FD0          __CFG_WDTPS$32768 000000             _RF_SETUP_CURR 002F  
       delay10ms@ms_multi 0020             ??_spiTransfer 0025                 main@count 00B0  
              ?_intConfig 0001               _INTCON2bits 000FF1                ?_nrfTXData 0022  
               copy_data0 076A                ?_nrfConfig 0001                  __Hrparam 0000  
                __Lrparam 0000        __CFG_BOREN$SBORDIS 000000         __CFG_P2BMX$PORTB5 000000  
     __end_of_spiConfig_1 0558          __size_of___aldiv 012C          __size_of_highISR 05C4  
                __ptext10 07F6                  __ptext11 0806                  __ptext12 07D2  
                __ptext13 077C              _SSP1CON1bits 000FC6       __end_of_spiTransfer 04C8  
           __size_of_main 017C               ??_delay10ms 0022                _EN_AA_CURR 003B  
            _SSP1STATbits 000FC7              ??_portConfig 0020                _DYNPD_CURR 002B  
              _INTCONbits 000FF2               ??_intConfig 0020               ??_nrfTXData 0024  
             ??_nrfConfig 002A                  intlevel1 0000                  intlevel2 0000  
      __end_of_portConfig 07D2               _spiConfig_1 04C8            spiTransfer@len 0023  
          spiTransfer@wrn 0026                _RF_CH_CURR 002E               _spiTransfer 042A  
            ___aldiv@sign 00A1         __CFG_T3CMX$PORTC0 000000              spiTransfer@i 0027  
