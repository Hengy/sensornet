

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Oct 01 19:50:55 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F24K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    32  0000                     
    33                           	psect	idataCOMRAM
    34  000844                     __pidataCOMRAM:
    35                           	opt stack 0
    36                           
    37                           ;initializer for _CONFIG_CURR
    38  000844  5A                 	db	90
    39                           
    40                           ;initializer for _DYNPD_CURR
    41  000845  01                 	db	1
    42                           
    43                           ;initializer for _EN_RXADDR_CURR
    44  000846  01                 	db	1
    45                           
    46                           ;initializer for _FEATURE_CURR
    47  000847  04                 	db	4
    48                           
    49                           ;initializer for _RF_CH_CURR
    50  000848  69                 	db	105
    51                           
    52                           ;initializer for _RF_SETUP_CURR
    53  000849  06                 	db	6
    54                           
    55                           ;initializer for _RX_PW_P0_CURR
    56  00084A  01                 	db	1
    57                           
    58                           ;initializer for _SETUP_AW_CURR
    59  00084B  02                 	db	2
    60                           
    61                           ;initializer for _SETUP_RETR_CURR
    62  00084C  21                 	db	33
    63                           
    64                           ;initializer for _RX_ADDRESS
    65  00084D  E7                 	db	231
    66  00084E  E7                 	db	231
    67  00084F  E7                 	db	231
    68  000850  E7                 	db	231
    69                           
    70                           ;initializer for _TX_ADDRESS
    71  000851  E7                 	db	231
    72  000852  E7                 	db	231
    73  000853  E7                 	db	231
    74  000854  E7                 	db	231
    75  0000                     _INTCON2bits	set	4081
    76  0000                     _INTCONbits	set	4082
    77  0000                     _IOCBbits	set	3938
    78  0000                     _LATA	set	3977
    79  0000                     _LATAbits	set	3977
    80  0000                     _LATB	set	3978
    81  0000                     _LATC	set	3979
    82  0000                     _PIR1bits	set	3998
    83  0000                     _RCONbits	set	4048
    84  0000                     _SSP1ADD	set	4040
    85  0000                     _SSP1BUF	set	4041
    86  0000                     _SSP1CON1bits	set	4038
    87  0000                     _SSP1STATbits	set	4039
    88  0000                     _TRISA	set	3986
    89  0000                     _TRISB	set	3987
    90  0000                     _TRISC	set	3988
    91                           
    92                           ; #config settings
    93  0000                     
    94                           	psect	cinit
    95  0007BE                     __pcinit:
    96                           	opt stack 0
    97  0007BE                     start_initialization:
    98                           	opt stack 0
    99  0007BE                     __initialization:
   100                           	opt stack 0
   101                           
   102                           ; Clear objects allocated to BANK0 (66 bytes)
   103  0007BE  EE00  F060         	lfsr	0,__pbssBANK0
   104  0007C2  0E42               	movlw	66
   105  0007C4                     clear_0:
   106  0007C4  6AEE               	clrf	postinc0,c
   107  0007C6  06E8               	decf	wreg,f,c
   108  0007C8  E1FD               	bnz	clear_0
   109                           
   110                           ; Clear objects allocated to COMRAM (3 bytes)
   111  0007CA  6A3E               	clrf	(__pbssCOMRAM+2)& (0+255),c
   112  0007CC  6A3D               	clrf	(__pbssCOMRAM+1)& (0+255),c
   113  0007CE  6A3C               	clrf	__pbssCOMRAM& (0+255),c
   114                           
   115                           ; Initialize objects allocated to COMRAM (17 bytes)
   116                           ; load TBLPTR registers with __pidataCOMRAM
   117  0007D0  0E44               	movlw	low __pidataCOMRAM
   118  0007D2  6EF6               	movwf	tblptrl,c
   119  0007D4  0E08               	movlw	high __pidataCOMRAM
   120  0007D6  6EF7               	movwf	tblptrh,c
   121  0007D8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   122  0007DA  6EF8               	movwf	tblptru,c
   123  0007DC  EE00  F02B         	lfsr	0,__pdataCOMRAM
   124  0007E0  EE10 F011          	lfsr	1,17
   125  0007E4                     copy_data0:
   126  0007E4  0009               	tblrd		*+
   127  0007E6  CFF5 FFEE          	movff	tablat,postinc0
   128  0007EA  50E5               	movf	postdec1,w,c
   129  0007EC  50E1               	movf	fsr1l,w,c
   130  0007EE  E1FA               	bnz	copy_data0
   131  0007F0                     end_of_initialization:
   132                           	opt stack 0
   133  0007F0                     __end_of__initialization:
   134                           	opt stack 0
   135  0007F0  0100               	movlb	0
   136  0007F2  EF53  F000         	goto	_main	;jump to C main() function
   137                           tblptru	equ	0xFF8
   138                           tblptrh	equ	0xFF7
   139                           tblptrl	equ	0xFF6
   140                           tablat	equ	0xFF5
   141                           postinc0	equ	0xFEE
   142                           wreg	equ	0xFE8
   143                           postdec1	equ	0xFE5
   144                           fsr1l	equ	0xFE1
   145                           
   146                           	psect	bssCOMRAM
   147  00003C                     __pbssCOMRAM:
   148                           	opt stack 0
   149  00003C                     _EN_AA_CURR:
   150                           	opt stack 0
   151  00003C                     	ds	1
   152  00003D                     _nrfSTATUS:
   153                           	opt stack 0
   154  00003D                     	ds	1
   155  00003E                     _spiTXFlag:
   156                           	opt stack 0
   157  00003E                     	ds	1
   158                           tblptru	equ	0xFF8
   159                           tblptrh	equ	0xFF7
   160                           tblptrl	equ	0xFF6
   161                           tablat	equ	0xFF5
   162                           postinc0	equ	0xFEE
   163                           wreg	equ	0xFE8
   164                           postdec1	equ	0xFE5
   165                           fsr1l	equ	0xFE1
   166                           
   167                           	psect	dataCOMRAM
   168  00002B                     __pdataCOMRAM:
   169                           	opt stack 0
   170  00002B                     _CONFIG_CURR:
   171                           	opt stack 0
   172  00002B                     	ds	1
   173  00002C                     _DYNPD_CURR:
   174                           	opt stack 0
   175  00002C                     	ds	1
   176  00002D                     _EN_RXADDR_CURR:
   177                           	opt stack 0
   178  00002D                     	ds	1
   179  00002E                     _FEATURE_CURR:
   180                           	opt stack 0
   181  00002E                     	ds	1
   182  00002F                     _RF_CH_CURR:
   183                           	opt stack 0
   184  00002F                     	ds	1
   185  000030                     _RF_SETUP_CURR:
   186                           	opt stack 0
   187  000030                     	ds	1
   188  000031                     _RX_PW_P0_CURR:
   189                           	opt stack 0
   190  000031                     	ds	1
   191  000032                     _SETUP_AW_CURR:
   192                           	opt stack 0
   193  000032                     	ds	1
   194  000033                     _SETUP_RETR_CURR:
   195                           	opt stack 0
   196  000033                     	ds	1
   197  000034                     _RX_ADDRESS:
   198                           	opt stack 0
   199  000034                     	ds	4
   200  000038                     _TX_ADDRESS:
   201                           	opt stack 0
   202  000038                     	ds	4
   203                           tblptru	equ	0xFF8
   204                           tblptrh	equ	0xFF7
   205                           tblptrl	equ	0xFF6
   206                           tablat	equ	0xFF5
   207                           postinc0	equ	0xFEE
   208                           wreg	equ	0xFE8
   209                           postdec1	equ	0xFE5
   210                           fsr1l	equ	0xFE1
   211                           
   212                           	psect	bssBANK0
   213  000060                     __pbssBANK0:
   214                           	opt stack 0
   215  000060                     _dataBufIn:
   216                           	opt stack 0
   217  000060                     	ds	32
   218  000080                     _dataBufOut:
   219                           	opt stack 0
   220  000080                     	ds	32
   221  0000A0                     _nrfBusy:
   222                           	opt stack 0
   223  0000A0                     	ds	1
   224  0000A1                     _nrfInterrupt:
   225                           	opt stack 0
   226  0000A1                     	ds	1
   227                           tblptru	equ	0xFF8
   228                           tblptrh	equ	0xFF7
   229                           tblptrl	equ	0xFF6
   230                           tablat	equ	0xFF5
   231                           postinc0	equ	0xFEE
   232                           wreg	equ	0xFE8
   233                           postdec1	equ	0xFE5
   234                           fsr1l	equ	0xFE1
   235                           
   236                           	psect	cstackBANK0
   237  0000A2                     __pcstackBANK0:
   238                           	opt stack 0
   239  0000A2                     ___aldiv@counter:
   240                           	opt stack 0
   241                           
   242                           ; 1 bytes @ 0x0
   243  0000A2                     	ds	1
   244  0000A3                     ___aldiv@sign:
   245                           	opt stack 0
   246                           
   247                           ; 1 bytes @ 0x1
   248  0000A3                     	ds	1
   249  0000A4                     ___aldiv@quotient:
   250                           	opt stack 0
   251                           
   252                           ; 4 bytes @ 0x2
   253  0000A4                     	ds	4
   254  0000A8                     ??_spiConfig_1:
   255                           
   256                           ; 0 bytes @ 0x6
   257  0000A8                     	ds	4
   258  0000AC                     _spiConfig_1$1331:
   259                           	opt stack 0
   260                           
   261                           ; 4 bytes @ 0xA
   262  0000AC                     	ds	4
   263  0000B0                     _spiConfig_1$1332:
   264                           	opt stack 0
   265                           
   266                           ; 4 bytes @ 0xE
   267  0000B0                     	ds	4
   268  0000B4                     spiConfig_1@addVal:
   269                           	opt stack 0
   270                           
   271                           ; 2 bytes @ 0x12
   272  0000B4                     	ds	2
   273  0000B6                     main@count:
   274                           	opt stack 0
   275                           
   276                           ; 2 bytes @ 0x14
   277  0000B6                     	ds	2
   278  0000B8                     main@TXtime:
   279                           	opt stack 0
   280                           
   281                           ; 2 bytes @ 0x16
   282  0000B8                     	ds	2
   283                           tblptru	equ	0xFF8
   284                           tblptrh	equ	0xFF7
   285                           tblptrl	equ	0xFF6
   286                           tablat	equ	0xFF5
   287                           postinc0	equ	0xFEE
   288                           wreg	equ	0xFE8
   289                           postdec1	equ	0xFE5
   290                           fsr1l	equ	0xFE1
   291                           
   292                           	psect	cstackCOMRAM
   293  000001                     __pcstackCOMRAM:
   294                           	opt stack 0
   295  000001                     ??_lowISR:
   296  000001                     
   297                           ; 1 bytes @ 0x0
   298  000001                     	ds	17
   299  000012                     ??_highISR:
   300                           
   301                           ; 0 bytes @ 0x11
   302  000012                     	ds	14
   303  000020                     ?___aldiv:
   304                           	opt stack 0
   305  000020                     spiTransferByte@data:
   306                           	opt stack 0
   307  000020                     setCSN@level:
   308                           	opt stack 0
   309  000020                     delay10ms@ms_multi:
   310                           	opt stack 0
   311  000020                     ___aldiv@dividend:
   312                           	opt stack 0
   313                           
   314                           ; 4 bytes @ 0x1F
   315  000020                     	ds	2
   316  000022                     ??_delay10ms:
   317  000022                     nrfConfigReg@command:
   318                           	opt stack 0
   319  000022                     spiTransfer@command:
   320                           	opt stack 0
   321  000022                     nrfSetTXAddr@addr:
   322                           	opt stack 0
   323  000022                     nrfSetRXAddr@addr:
   324                           	opt stack 0
   325  000022                     nrfTXData@len:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0x21
   329  000022                     	ds	1
   330  000023                     nrfConfigReg@data:
   331                           	opt stack 0
   332  000023                     spiTransfer@len:
   333                           	opt stack 0
   334  000023                     delay10ms@i:
   335                           	opt stack 0
   336                           
   337                           ; 2 bytes @ 0x22
   338  000023                     	ds	1
   339  000024                     ??_nrfTXData:
   340  000024                     nrfConfigReg@wr:
   341                           	opt stack 0
   342  000024                     nrfSetTXAddr@len:
   343                           	opt stack 0
   344  000024                     nrfSetRXAddr@len:
   345                           	opt stack 0
   346  000024                     ___aldiv@divisor:
   347                           	opt stack 0
   348                           
   349                           ; 4 bytes @ 0x23
   350  000024                     	ds	1
   351  000025                     ??_spiTransfer:
   352  000025                     nrfTXData@i:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x24
   356  000025                     	ds	1
   357  000026                     ??_nrfSetRXAddr:
   358  000026                     ??_nrfSetTXAddr:
   359  000026                     spiTransfer@wrn:
   360                           	opt stack 0
   361                           
   362                           ; 1 bytes @ 0x25
   363  000026                     	ds	1
   364  000027                     nrfSetRXAddr@pipe:
   365                           	opt stack 0
   366  000027                     nrfSetTXAddr@i:
   367                           	opt stack 0
   368  000027                     spiTransfer@i:
   369                           	opt stack 0
   370                           
   371                           ; 2 bytes @ 0x26
   372  000027                     	ds	1
   373  000028                     spiConfig_1@spiSpeed:
   374                           	opt stack 0
   375  000028                     nrfSetRXAddr@i:
   376                           	opt stack 0
   377                           
   378                           ; 2 bytes @ 0x27
   379  000028                     	ds	2
   380  00002A                     ??_main:
   381                           
   382                           ; 0 bytes @ 0x29
   383  00002A                     	ds	1
   384                           tblptru	equ	0xFF8
   385                           tblptrh	equ	0xFF7
   386                           tblptrl	equ	0xFF6
   387                           tablat	equ	0xFF5
   388                           postinc0	equ	0xFEE
   389                           wreg	equ	0xFE8
   390                           postdec1	equ	0xFE5
   391                           fsr1l	equ	0xFE1
   392                           
   393 ;;
   394 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   395 ;;
   396 ;; *************** function _main *****************
   397 ;; Defined at:
   398 ;;		line 202 in file "main.c"
   399 ;; Parameters:    Size  Location     Type
   400 ;;		None
   401 ;; Auto vars:     Size  Location     Type
   402 ;;  TXtime          2   22[BANK0 ] int 
   403 ;;  count           2   20[BANK0 ] int 
   404 ;; Return value:  Size  Location     Type
   405 ;;		None               void
   406 ;; Registers used:
   407 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   408 ;; Tracked objects:
   409 ;;		On entry : 0/0
   410 ;;		On exit  : 0/0
   411 ;;		Unchanged: 0/0
   412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   413 ;;      Params:         0       0       0       0
   414 ;;      Locals:         0       4       0       0
   415 ;;      Temps:          1       0       0       0
   416 ;;      Totals:         1       4       0       0
   417 ;;Total ram usage:        5 bytes
   418 ;; Hardware stack levels required when called:    5
   419 ;; This function calls:
   420 ;;		_delay10ms
   421 ;;		_intConfig
   422 ;;		_nrfConfig
   423 ;;		_nrfGetStatus
   424 ;;		_nrfTXData
   425 ;;		_portConfig
   426 ;;		_spiConfig_1
   427 ;;		_spiTransfer
   428 ;; This function is called by:
   429 ;;		Startup code after reset
   430 ;; This function uses a non-reentrant model
   431 ;;
   432                           
   433                           	psect	text0
   434  0000A6                     __ptext0:
   435                           	opt stack 0
   436  0000A6                     _main:
   437                           	opt stack 25
   438                           
   439                           ;main.c: 205: portConfig();
   440                           
   441                           ;incstack = 0
   442  0000A6  EC0C  F004         	call	_portConfig	;wreg free
   443                           
   444                           ;main.c: 206: spiConfig_1(40);
   445  0000AA  0E00               	movlw	0
   446  0000AC  6E29               	movwf	spiConfig_1@spiSpeed+1,c
   447  0000AE  0E28               	movlw	40
   448  0000B0  6E28               	movwf	spiConfig_1@spiSpeed,c
   449  0000B2  EC1C  F002         	call	_spiConfig_1	;wreg free
   450                           
   451                           ;main.c: 207: nrfConfig();
   452  0000B6  ECAE  F001         	call	_nrfConfig	;wreg free
   453                           
   454                           ;main.c: 209: delay10ms(1);
   455  0000BA  0E00               	movlw	0
   456  0000BC  6E21               	movwf	delay10ms@ms_multi+1,c
   457  0000BE  0E01               	movlw	1
   458  0000C0  6E20               	movwf	delay10ms@ms_multi,c
   459  0000C2  ECC1  F003         	call	_delay10ms	;wreg free
   460                           
   461                           ;main.c: 211: dataBufOut[1] = 0x48;
   462  0000C6  0E48               	movlw	72
   463  0000C8  0100               	movlb	0	; () banked
   464  0000CA  6F81               	movwf	(_dataBufOut+1)& (0+255),b
   465                           
   466                           ; BSR set to: 0
   467                           ;main.c: 212: dataBufOut[2] = 0x4F;
   468  0000CC  0E4F               	movlw	79
   469  0000CE  0100               	movlb	0	; () banked
   470  0000D0  6F82               	movwf	(_dataBufOut+2)& (0+255),b
   471                           
   472                           ; BSR set to: 0
   473                           ;main.c: 213: dataBufOut[3] = 88;
   474  0000D2  0E58               	movlw	88
   475  0000D4  0100               	movlb	0	; () banked
   476  0000D6  6F83               	movwf	(_dataBufOut+3)& (0+255),b
   477                           
   478                           ; BSR set to: 0
   479                           ;main.c: 214: dataBufOut[4] = 0x49;
   480  0000D8  0E49               	movlw	73
   481  0000DA  0100               	movlb	0	; () banked
   482  0000DC  6F84               	movwf	(_dataBufOut+4)& (0+255),b
   483                           
   484                           ; BSR set to: 0
   485                           ;main.c: 215: dataBufOut[5] = 0x5F;
   486  0000DE  0E5F               	movlw	95
   487  0000E0  0100               	movlb	0	; () banked
   488  0000E2  6F85               	movwf	(_dataBufOut+5)& (0+255),b
   489                           
   490                           ; BSR set to: 0
   491                           ;main.c: 216: dataBufOut[6] = 47;
   492  0000E4  0E2F               	movlw	47
   493  0000E6  0100               	movlb	0	; () banked
   494  0000E8  6F86               	movwf	(_dataBufOut+6)& (0+255),b
   495                           
   496                           ; BSR set to: 0
   497                           ;main.c: 217: dataBufOut[7] = 0x74;
   498  0000EA  0E74               	movlw	116
   499  0000EC  0100               	movlb	0	; () banked
   500  0000EE  6F87               	movwf	(_dataBufOut+7)& (0+255),b
   501                           
   502                           ; BSR set to: 0
   503                           ;main.c: 218: dataBufOut[8] = 0x6F;
   504  0000F0  0E6F               	movlw	111
   505  0000F2  0100               	movlb	0	; () banked
   506  0000F4  6F88               	movwf	(_dataBufOut+8)& (0+255),b
   507                           
   508                           ; BSR set to: 0
   509                           ;main.c: 219: dataBufOut[9] = 58;
   510  0000F6  0E3A               	movlw	58
   511  0000F8  0100               	movlb	0	; () banked
   512  0000FA  6F89               	movwf	(_dataBufOut+9)& (0+255),b
   513                           
   514                           ; BSR set to: 0
   515                           ;main.c: 220: dataBufOut[10] = 0xA8;
   516  0000FC  0EA8               	movlw	168
   517  0000FE  0100               	movlb	0	; () banked
   518  000100  6F8A               	movwf	(_dataBufOut+10)& (0+255),b
   519                           
   520                           ; BSR set to: 0
   521                           ;main.c: 221: dataBufOut[11] = 0x6F;
   522  000102  0E6F               	movlw	111
   523  000104  0100               	movlb	0	; () banked
   524  000106  6F8B               	movwf	(_dataBufOut+11)& (0+255),b
   525                           
   526                           ; BSR set to: 0
   527                           ;main.c: 222: dataBufOut[12] = 99;
   528  000108  0E63               	movlw	99
   529  00010A  0100               	movlb	0	; () banked
   530  00010C  6F8C               	movwf	(_dataBufOut+12)& (0+255),b
   531                           
   532                           ; BSR set to: 0
   533                           ;main.c: 223: dataBufOut[13] = 0x88;
   534  00010E  0E88               	movlw	136
   535  000110  0100               	movlb	0	; () banked
   536  000112  6F8D               	movwf	(_dataBufOut+13)& (0+255),b
   537                           
   538                           ; BSR set to: 0
   539                           ;main.c: 224: dataBufOut[14] = 0x5F;
   540  000114  0E5F               	movlw	95
   541  000116  0100               	movlb	0	; () banked
   542  000118  6F8E               	movwf	(_dataBufOut+14)& (0+255),b
   543                           
   544                           ; BSR set to: 0
   545                           ;main.c: 225: dataBufOut[15] = 72;
   546  00011A  0E48               	movlw	72
   547  00011C  0100               	movlb	0	; () banked
   548  00011E  6F8F               	movwf	(_dataBufOut+15)& (0+255),b
   549                           
   550                           ; BSR set to: 0
   551                           ;main.c: 226: dataBufOut[16] = 0x98;
   552  000120  0E98               	movlw	152
   553  000122  0100               	movlb	0	; () banked
   554  000124  6F90               	movwf	(_dataBufOut+16)& (0+255),b
   555                           
   556                           ; BSR set to: 0
   557                           ;main.c: 227: dataBufOut[17] = 0x6F;
   558  000126  0E6F               	movlw	111
   559  000128  0100               	movlb	0	; () banked
   560  00012A  6F91               	movwf	(_dataBufOut+17)& (0+255),b
   561                           
   562                           ; BSR set to: 0
   563                           ;main.c: 228: dataBufOut[18] = 92;
   564  00012C  0E5C               	movlw	92
   565  00012E  0100               	movlb	0	; () banked
   566  000130  6F92               	movwf	(_dataBufOut+18)& (0+255),b
   567                           
   568                           ; BSR set to: 0
   569                           ;main.c: 229: dataBufOut[19] = 0x4A;
   570  000132  0E4A               	movlw	74
   571  000134  0100               	movlb	0	; () banked
   572  000136  6F93               	movwf	(_dataBufOut+19)& (0+255),b
   573                           
   574                           ; BSR set to: 0
   575                           ;main.c: 230: dataBufOut[20] = 0x6F;
   576  000138  0E6F               	movlw	111
   577  00013A  0100               	movlb	0	; () banked
   578  00013C  6F94               	movwf	(_dataBufOut+20)& (0+255),b
   579                           
   580                           ; BSR set to: 0
   581                           ;main.c: 231: dataBufOut[21] = 62;
   582  00013E  0E3E               	movlw	62
   583  000140  0100               	movlb	0	; () banked
   584  000142  6F95               	movwf	(_dataBufOut+21)& (0+255),b
   585                           
   586                           ; BSR set to: 0
   587                           ;main.c: 232: dataBufOut[22] = 0x62;
   588  000144  0E62               	movlw	98
   589  000146  0100               	movlb	0	; () banked
   590  000148  6F96               	movwf	(_dataBufOut+22)& (0+255),b
   591                           
   592                           ; BSR set to: 0
   593                           ;main.c: 233: dataBufOut[23] = 0x6F;
   594  00014A  0E6F               	movlw	111
   595  00014C  0100               	movlb	0	; () banked
   596  00014E  6F97               	movwf	(_dataBufOut+23)& (0+255),b
   597                           
   598                           ; BSR set to: 0
   599                           ;main.c: 234: dataBufOut[24] = 82;
   600  000150  0E52               	movlw	82
   601  000152  0100               	movlb	0	; () banked
   602  000154  6F98               	movwf	(_dataBufOut+24)& (0+255),b
   603                           
   604                           ; BSR set to: 0
   605                           ;main.c: 235: dataBufOut[25] = 0x86;
   606  000156  0E86               	movlw	134
   607  000158  0100               	movlb	0	; () banked
   608  00015A  6F99               	movwf	(_dataBufOut+25)& (0+255),b
   609                           
   610                           ; BSR set to: 0
   611                           ;main.c: 236: dataBufOut[26] = 0x7F;
   612  00015C  0E7F               	movlw	127
   613  00015E  0100               	movlb	0	; () banked
   614  000160  6F9A               	movwf	(_dataBufOut+26)& (0+255),b
   615                           
   616                           ; BSR set to: 0
   617                           ;main.c: 237: dataBufOut[27] = 72;
   618  000162  0E48               	movlw	72
   619  000164  0100               	movlb	0	; () banked
   620  000166  6F9B               	movwf	(_dataBufOut+27)& (0+255),b
   621                           
   622                           ; BSR set to: 0
   623                           ;main.c: 238: dataBufOut[28] = 102;
   624  000168  0E66               	movlw	102
   625  00016A  0100               	movlb	0	; () banked
   626  00016C  6F9C               	movwf	(_dataBufOut+28)& (0+255),b
   627                           
   628                           ; BSR set to: 0
   629                           ;main.c: 239: dataBufOut[29] = 0xC0;
   630  00016E  0EC0               	movlw	192
   631  000170  0100               	movlb	0	; () banked
   632  000172  6F9D               	movwf	(_dataBufOut+29)& (0+255),b
   633                           
   634                           ; BSR set to: 0
   635                           ;main.c: 240: dataBufOut[30] = 0x5F;
   636  000174  0E5F               	movlw	95
   637  000176  0100               	movlb	0	; () banked
   638  000178  6F9E               	movwf	(_dataBufOut+30)& (0+255),b
   639                           
   640                           ; BSR set to: 0
   641                           ;main.c: 241: dataBufOut[31] = 122;
   642  00017A  0E7A               	movlw	122
   643  00017C  0100               	movlb	0	; () banked
   644  00017E  6F9F               	movwf	(_dataBufOut+31)& (0+255),b
   645                           
   646                           ; BSR set to: 0
   647                           ;main.c: 243: intConfig();
   648  000180  EC19  F004         	call	_intConfig	;wreg free
   649                           
   650                           ;main.c: 246: int count = 1;
   651  000184  0E00               	movlw	0
   652  000186  0100               	movlb	0	; () banked
   653  000188  6FB7               	movwf	(main@count+1)& (0+255),b
   654  00018A  0E01               	movlw	1
   655  00018C  0100               	movlb	0	; () banked
   656  00018E  6FB6               	movwf	main@count& (0+255),b
   657                           
   658                           ; BSR set to: 0
   659                           ;main.c: 247: int TXtime = 20000;
   660  000190  0E4E               	movlw	78
   661  000192  0100               	movlb	0	; () banked
   662  000194  6FB9               	movwf	(main@TXtime+1)& (0+255),b
   663  000196  0E20               	movlw	32
   664  000198  0100               	movlb	0	; () banked
   665  00019A  6FB8               	movwf	main@TXtime& (0+255),b
   666  00019C                     l1496:
   667                           
   668                           ; BSR set to: 0
   669                           ;main.c: 250: nrfGetStatus();
   670  00019C  ECFB  F003         	call	_nrfGetStatus	;wreg free
   671                           
   672                           ;main.c: 252: if (!nrfBusy) {
   673  0001A0  0100               	movlb	0	; () banked
   674  0001A2  67A0               	tstfsz	_nrfBusy& (0+255),b
   675  0001A4  D009               	goto	l1506
   676                           
   677                           ; BSR set to: 0
   678                           ;main.c: 253: LATAbits.LATA0 = 1;
   679  0001A6  8089               	bsf	3977,0,c	;volatile
   680                           
   681                           ; BSR set to: 0
   682                           ;main.c: 254: _delay((unsigned long)((100)*(64000000/4000000.0)));
   683  0001A8  0EE4               	movlw	228
   684  0001AA                     u627:
   685  0001AA  D000               	nop2	
   686  0001AC  D000               	nop2	
   687  0001AE  2EE8               	decfsz	wreg,f,c
   688  0001B0  D7FC               	goto	u627
   689  0001B2  D000               	nop2		;nop
   690  0001B4  D000               	nop2		;nop
   691                           
   692                           ;main.c: 255: LATAbits.LATA0 = 0;
   693  0001B6  9089               	bcf	3977,0,c	;volatile
   694  0001B8                     l1506:
   695                           
   696                           ;main.c: 256: }
   697                           ;main.c: 258: if ((TXtime >= 20000)) {
   698  0001B8  0100               	movlb	0	; () banked
   699  0001BA  51B9               	movf	(main@TXtime+1)& (0+255),w,b
   700  0001BC  0A80               	xorlw	128
   701  0001BE  0F32               	addlw	-206
   702  0001C0  0E20               	movlw	32
   703  0001C2  B4D8               	btfsc	status,2,c
   704  0001C4  5DB8               	subwf	main@TXtime& (0+255),w,b
   705  0001C6  A0D8               	btfss	status,0,c
   706  0001C8  D011               	goto	l1516
   707                           
   708                           ; BSR set to: 0
   709                           ;main.c: 259: dataBufOut[0] = count;
   710  0001CA  C0B6  F080         	movff	main@count,_dataBufOut
   711                           
   712                           ; BSR set to: 0
   713                           ;main.c: 260: nrfTXData(8);
   714  0001CE  0E00               	movlw	0
   715  0001D0  6E23               	movwf	nrfTXData@len+1,c
   716  0001D2  0E08               	movlw	8
   717  0001D4  6E22               	movwf	nrfTXData@len,c
   718  0001D6  EC06  F003         	call	_nrfTXData	;wreg free
   719                           
   720                           ;main.c: 261: count++;
   721  0001DA  0100               	movlb	0	; () banked
   722  0001DC  4BB6               	infsnz	main@count& (0+255),f,b
   723  0001DE  2BB7               	incf	(main@count+1)& (0+255),f,b
   724                           
   725                           ; BSR set to: 0
   726                           ;main.c: 262: TXtime = 0;
   727  0001E0  0E00               	movlw	0
   728  0001E2  0100               	movlb	0	; () banked
   729  0001E4  6FB9               	movwf	(main@TXtime+1)& (0+255),b
   730  0001E6  0E00               	movlw	0
   731  0001E8  0100               	movlb	0	; () banked
   732  0001EA  6FB8               	movwf	main@TXtime& (0+255),b
   733  0001EC                     l1516:
   734                           
   735                           ; BSR set to: 0
   736                           ;main.c: 263: }
   737                           ;main.c: 265: if (nrfInterrupt == 1) {
   738  0001EC  0100               	movlb	0	; () banked
   739  0001EE  05A1               	decf	_nrfInterrupt& (0+255),w,b
   740  0001F0  A4D8               	btfss	status,2,c
   741  0001F2  D012               	goto	l1526
   742                           
   743                           ; BSR set to: 0
   744                           ;main.c: 268: dataBufOut[0] = 0b00110000;
   745  0001F4  0E30               	movlw	48
   746  0001F6  0100               	movlb	0	; () banked
   747  0001F8  6F80               	movwf	_dataBufOut& (0+255),b
   748                           
   749                           ; BSR set to: 0
   750                           ;main.c: 269: spiTransfer('w',0x07,1);
   751  0001FA  0E07               	movlw	7
   752  0001FC  6E22               	movwf	spiTransfer@command,c
   753  0001FE  0E00               	movlw	0
   754  000200  6E24               	movwf	spiTransfer@len+1,c
   755  000202  0E01               	movlw	1
   756  000204  6E23               	movwf	spiTransfer@len,c
   757  000206  0E77               	movlw	119
   758  000208  EC7E  F002         	call	_spiTransfer
   759                           
   760                           ;main.c: 271: nrfBusy = 0;
   761  00020C  0E00               	movlw	0
   762  00020E  0100               	movlb	0	; () banked
   763  000210  6FA0               	movwf	_nrfBusy& (0+255),b
   764                           
   765                           ; BSR set to: 0
   766                           ;main.c: 272: nrfInterrupt = 0;
   767  000212  0E00               	movlw	0
   768  000214  0100               	movlb	0	; () banked
   769  000216  6FA1               	movwf	_nrfInterrupt& (0+255),b
   770  000218                     l1526:
   771                           
   772                           ; BSR set to: 0
   773                           ;main.c: 273: }
   774                           ;main.c: 275: _delay((unsigned long)((200)*(64000000/4000000.0)));
   775  000218  0E05               	movlw	5
   776  00021A  6E2A               	movwf	??_main& (0+255),c
   777  00021C  0E26               	movlw	38
   778  00021E                     u637:
   779  00021E  2EE8               	decfsz	wreg,f,c
   780  000220  D7FE               	goto	u637
   781  000222  2E2A               	decfsz	??_main& (0+255),f,c
   782  000224  D7FC               	goto	u637
   783  000226  D000               	nop2	
   784                           
   785                           ;main.c: 276: TXtime++;
   786  000228  0100               	movlb	0	; () banked
   787  00022A  4BB8               	infsnz	main@TXtime& (0+255),f,b
   788  00022C  2BB9               	incf	(main@TXtime+1)& (0+255),f,b
   789                           
   790                           ;main.c: 277: }
   791  00022E  D7B6               	goto	l1496
   792  000230                     __end_of_main:
   793                           	opt stack 0
   794                           tblptru	equ	0xFF8
   795                           tblptrh	equ	0xFF7
   796                           tblptrl	equ	0xFF6
   797                           tablat	equ	0xFF5
   798                           postinc0	equ	0xFEE
   799                           wreg	equ	0xFE8
   800                           postdec1	equ	0xFE5
   801                           fsr1l	equ	0xFE1
   802                           status	equ	0xFD8
   803                           
   804 ;; *************** function _spiConfig_1 *****************
   805 ;; Defined at:
   806 ;;		line 335 in file "main.c"
   807 ;; Parameters:    Size  Location     Type
   808 ;;  spiSpeed        2   39[COMRAM] unsigned int 
   809 ;; Auto vars:     Size  Location     Type
   810 ;;  addVal          2   18[BANK0 ] unsigned int 
   811 ;; Return value:  Size  Location     Type
   812 ;;		None               void
   813 ;; Registers used:
   814 ;;		wreg, status,2, status,0, cstack
   815 ;; Tracked objects:
   816 ;;		On entry : 0/0
   817 ;;		On exit  : 0/0
   818 ;;		Unchanged: 0/0
   819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   820 ;;      Params:         2       0       0       0
   821 ;;      Locals:         0      10       0       0
   822 ;;      Temps:          0       4       0       0
   823 ;;      Totals:         2      14       0       0
   824 ;;Total ram usage:       16 bytes
   825 ;; Hardware stack levels used:    1
   826 ;; Hardware stack levels required when called:    3
   827 ;; This function calls:
   828 ;;		___aldiv
   829 ;; This function is called by:
   830 ;;		_main
   831 ;; This function uses a non-reentrant model
   832 ;;
   833                           
   834                           	psect	text1
   835  000438                     __ptext1:
   836                           	opt stack 0
   837  000438                     _spiConfig_1:
   838                           	opt stack 26
   839                           
   840                           ;main.c: 337: SSP1CON1bits.CKP = 0;
   841                           
   842                           ; BSR set to: 0
   843                           ;incstack = 0
   844  000438  98C6               	bcf	4038,4,c	;volatile
   845                           
   846                           ;main.c: 338: SSP1STATbits.CKE = 1;
   847  00043A  8CC7               	bsf	4039,6,c	;volatile
   848                           
   849                           ;main.c: 339: SSP1STATbits.SMP = 1;
   850  00043C  8EC7               	bsf	4039,7,c	;volatile
   851                           
   852                           ;main.c: 342: unsigned int addVal = ((((64000000/1000)/spiSpeed)/100)/4)-1;
   853  00043E  C028  F024         	movff	spiConfig_1@spiSpeed,___aldiv@divisor
   854  000442  C029  F025         	movff	spiConfig_1@spiSpeed+1,___aldiv@divisor+1
   855  000446  6A26               	clrf	___aldiv@divisor+2,c
   856  000448  6A27               	clrf	___aldiv@divisor+3,c
   857  00044A  0E00               	movlw	0
   858  00044C  6E20               	movwf	___aldiv@dividend,c
   859  00044E  0EFA               	movlw	250
   860  000450  6E21               	movwf	___aldiv@dividend+1,c
   861  000452  0E00               	movlw	0
   862  000454  6E22               	movwf	___aldiv@dividend+2,c
   863  000456  0E00               	movlw	0
   864  000458  6E23               	movwf	___aldiv@dividend+3,c
   865  00045A  EC18  F001         	call	___aldiv	;wreg free
   866  00045E  C020  F0AC         	movff	?___aldiv,_spiConfig_1$1331
   867  000462  C021  F0AD         	movff	?___aldiv+1,_spiConfig_1$1331+1
   868  000466  C022  F0AE         	movff	?___aldiv+2,_spiConfig_1$1331+2
   869  00046A  C023  F0AF         	movff	?___aldiv+3,_spiConfig_1$1331+3
   870                           
   871                           ;main.c: 342: unsigned int addVal = ((((64000000/1000)/spiSpeed)/100)/4)-1;
   872  00046E  0E64               	movlw	100
   873  000470  6E24               	movwf	___aldiv@divisor,c
   874  000472  0E00               	movlw	0
   875  000474  6E25               	movwf	___aldiv@divisor+1,c
   876  000476  0E00               	movlw	0
   877  000478  6E26               	movwf	___aldiv@divisor+2,c
   878  00047A  0E00               	movlw	0
   879  00047C  6E27               	movwf	___aldiv@divisor+3,c
   880  00047E  C0AC  F020         	movff	_spiConfig_1$1331,___aldiv@dividend
   881  000482  C0AD  F021         	movff	_spiConfig_1$1331+1,___aldiv@dividend+1
   882  000486  C0AE  F022         	movff	_spiConfig_1$1331+2,___aldiv@dividend+2
   883  00048A  C0AF  F023         	movff	_spiConfig_1$1331+3,___aldiv@dividend+3
   884  00048E  EC18  F001         	call	___aldiv	;wreg free
   885  000492  C020  F0B0         	movff	?___aldiv,_spiConfig_1$1332
   886  000496  C021  F0B1         	movff	?___aldiv+1,_spiConfig_1$1332+1
   887  00049A  C022  F0B2         	movff	?___aldiv+2,_spiConfig_1$1332+2
   888  00049E  C023  F0B3         	movff	?___aldiv+3,_spiConfig_1$1332+3
   889                           
   890                           ;main.c: 342: unsigned int addVal = ((((64000000/1000)/spiSpeed)/100)/4)-1;
   891  0004A2  C0B0  F020         	movff	_spiConfig_1$1332,___aldiv@dividend
   892  0004A6  C0B1  F021         	movff	_spiConfig_1$1332+1,___aldiv@dividend+1
   893  0004AA  C0B2  F022         	movff	_spiConfig_1$1332+2,___aldiv@dividend+2
   894  0004AE  C0B3  F023         	movff	_spiConfig_1$1332+3,___aldiv@dividend+3
   895  0004B2  0E04               	movlw	4
   896  0004B4  6E24               	movwf	___aldiv@divisor,c
   897  0004B6  0E00               	movlw	0
   898  0004B8  6E25               	movwf	___aldiv@divisor+1,c
   899  0004BA  0E00               	movlw	0
   900  0004BC  6E26               	movwf	___aldiv@divisor+2,c
   901  0004BE  0E00               	movlw	0
   902  0004C0  6E27               	movwf	___aldiv@divisor+3,c
   903  0004C2  EC18  F001         	call	___aldiv	;wreg free
   904  0004C6  C020  F0A8         	movff	?___aldiv,??_spiConfig_1
   905  0004CA  C021  F0A9         	movff	?___aldiv+1,??_spiConfig_1+1
   906  0004CE  C022  F0AA         	movff	?___aldiv+2,??_spiConfig_1+2
   907  0004D2  C023  F0AB         	movff	?___aldiv+3,??_spiConfig_1+3
   908  0004D6  0EFF               	movlw	255
   909  0004D8  0100               	movlb	0	; () banked
   910  0004DA  25A8               	addwf	??_spiConfig_1& (0+255),w,b
   911  0004DC  0100               	movlb	0	; () banked
   912  0004DE  6FB4               	movwf	spiConfig_1@addVal& (0+255),b
   913  0004E0  0EFF               	movlw	255
   914  0004E2  0100               	movlb	0	; () banked
   915  0004E4  21A9               	addwfc	(??_spiConfig_1+1)& (0+255),w,b
   916  0004E6  0100               	movlb	0	; () banked
   917  0004E8  6FB5               	movwf	(spiConfig_1@addVal+1)& (0+255),b
   918                           
   919                           ; BSR set to: 0
   920                           ;main.c: 343: SSP1ADD = addVal;
   921  0004EA  C0B4  FFC8         	movff	spiConfig_1@addVal,4040	;volatile
   922                           
   923                           ; BSR set to: 0
   924                           ;main.c: 344: SSP1CON1bits.SSPM = 0b1010;
   925  0004EE  50C6               	movf	4038,w,c	;volatile
   926  0004F0  0BF0               	andlw	-16
   927  0004F2  090A               	iorlw	10
   928  0004F4  6EC6               	movwf	4038,c	;volatile
   929                           
   930                           ; BSR set to: 0
   931                           ;main.c: 346: SSP1CON1bits.SSPEN = 1;
   932  0004F6  8AC6               	bsf	4038,5,c	;volatile
   933                           
   934                           ; BSR set to: 0
   935                           ;main.c: 348: LATAbits.LATA2 = 1;
   936  0004F8  8489               	bsf	3977,2,c	;volatile
   937                           
   938                           ; BSR set to: 0
   939  0004FA  0012               	return	
   940  0004FC                     __end_of_spiConfig_1:
   941                           	opt stack 0
   942                           tblptru	equ	0xFF8
   943                           tblptrh	equ	0xFF7
   944                           tblptrl	equ	0xFF6
   945                           tablat	equ	0xFF5
   946                           postinc0	equ	0xFEE
   947                           wreg	equ	0xFE8
   948                           postdec1	equ	0xFE5
   949                           fsr1l	equ	0xFE1
   950                           status	equ	0xFD8
   951                           
   952 ;; *************** function ___aldiv *****************
   953 ;; Defined at:
   954 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\aldiv.c"
   955 ;; Parameters:    Size  Location     Type
   956 ;;  dividend        4   31[COMRAM] long 
   957 ;;  divisor         4   35[COMRAM] long 
   958 ;; Auto vars:     Size  Location     Type
   959 ;;  quotient        4    2[BANK0 ] long 
   960 ;;  sign            1    1[BANK0 ] unsigned char 
   961 ;;  counter         1    0[BANK0 ] unsigned char 
   962 ;; Return value:  Size  Location     Type
   963 ;;                  4   31[COMRAM] long 
   964 ;; Registers used:
   965 ;;		wreg, status,2, status,0
   966 ;; Tracked objects:
   967 ;;		On entry : 0/0
   968 ;;		On exit  : 0/0
   969 ;;		Unchanged: 0/0
   970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   971 ;;      Params:         8       0       0       0
   972 ;;      Locals:         0       6       0       0
   973 ;;      Temps:          0       0       0       0
   974 ;;      Totals:         8       6       0       0
   975 ;;Total ram usage:       14 bytes
   976 ;; Hardware stack levels used:    1
   977 ;; Hardware stack levels required when called:    2
   978 ;; This function calls:
   979 ;;		Nothing
   980 ;; This function is called by:
   981 ;;		_spiConfig_1
   982 ;; This function uses a non-reentrant model
   983 ;;
   984                           
   985                           	psect	text2
   986  000230                     __ptext2:
   987                           	opt stack 0
   988  000230                     ___aldiv:
   989                           	opt stack 26
   990                           
   991                           ; BSR set to: 0
   992                           ;incstack = 0
   993  000230  0E00               	movlw	0
   994  000232  0100               	movlb	0	; () banked
   995  000234  6FA3               	movwf	___aldiv@sign& (0+255),b
   996                           
   997                           ; BSR set to: 0
   998  000236  5027               	movf	___aldiv@divisor+3,w,c
   999  000238  0A80               	xorlw	128
  1000  00023A  0F80               	addlw	128
  1001  00023C  E108               	bnz	u535
  1002  00023E  0E00               	movlw	0
  1003  000240  5C26               	subwf	___aldiv@divisor+2,w,c
  1004  000242  E105               	bnz	u535
  1005  000244  0E00               	movlw	0
  1006  000246  5C25               	subwf	___aldiv@divisor+1,w,c
  1007  000248  E102               	bnz	u535
  1008  00024A  0E00               	movlw	0
  1009  00024C  5C24               	subwf	___aldiv@divisor,w,c
  1010  00024E                     u535:
  1011  00024E  B0D8               	btfsc	status,0,c
  1012  000250  D00B               	goto	l1372
  1013                           
  1014                           ; BSR set to: 0
  1015  000252  1E27               	comf	___aldiv@divisor+3,f,c
  1016  000254  1E26               	comf	___aldiv@divisor+2,f,c
  1017  000256  1E25               	comf	___aldiv@divisor+1,f,c
  1018  000258  6C24               	negf	___aldiv@divisor,c
  1019  00025A  0E00               	movlw	0
  1020  00025C  2225               	addwfc	___aldiv@divisor+1,f,c
  1021  00025E  2226               	addwfc	___aldiv@divisor+2,f,c
  1022  000260  2227               	addwfc	___aldiv@divisor+3,f,c
  1023                           
  1024                           ; BSR set to: 0
  1025  000262  0E01               	movlw	1
  1026  000264  0100               	movlb	0	; () banked
  1027  000266  6FA3               	movwf	___aldiv@sign& (0+255),b
  1028  000268                     l1372:
  1029                           
  1030                           ; BSR set to: 0
  1031  000268  5023               	movf	___aldiv@dividend+3,w,c
  1032  00026A  0A80               	xorlw	128
  1033  00026C  0F80               	addlw	128
  1034  00026E  E108               	bnz	u545
  1035  000270  0E00               	movlw	0
  1036  000272  5C22               	subwf	___aldiv@dividend+2,w,c
  1037  000274  E105               	bnz	u545
  1038  000276  0E00               	movlw	0
  1039  000278  5C21               	subwf	___aldiv@dividend+1,w,c
  1040  00027A  E102               	bnz	u545
  1041  00027C  0E00               	movlw	0
  1042  00027E  5C20               	subwf	___aldiv@dividend,w,c
  1043  000280                     u545:
  1044  000280  B0D8               	btfsc	status,0,c
  1045  000282  D00B               	goto	l1378
  1046                           
  1047                           ; BSR set to: 0
  1048  000284  1E23               	comf	___aldiv@dividend+3,f,c
  1049  000286  1E22               	comf	___aldiv@dividend+2,f,c
  1050  000288  1E21               	comf	___aldiv@dividend+1,f,c
  1051  00028A  6C20               	negf	___aldiv@dividend,c
  1052  00028C  0E00               	movlw	0
  1053  00028E  2221               	addwfc	___aldiv@dividend+1,f,c
  1054  000290  2222               	addwfc	___aldiv@dividend+2,f,c
  1055  000292  2223               	addwfc	___aldiv@dividend+3,f,c
  1056                           
  1057                           ; BSR set to: 0
  1058  000294  0E01               	movlw	1
  1059  000296  0100               	movlb	0	; () banked
  1060  000298  1BA3               	xorwf	___aldiv@sign& (0+255),f,b
  1061  00029A                     l1378:
  1062                           
  1063                           ; BSR set to: 0
  1064  00029A  0E00               	movlw	0
  1065  00029C  0100               	movlb	0	; () banked
  1066  00029E  6FA4               	movwf	___aldiv@quotient& (0+255),b
  1067  0002A0  0E00               	movlw	0
  1068  0002A2  0100               	movlb	0	; () banked
  1069  0002A4  6FA5               	movwf	(___aldiv@quotient+1)& (0+255),b
  1070  0002A6  0E00               	movlw	0
  1071  0002A8  0100               	movlb	0	; () banked
  1072  0002AA  6FA6               	movwf	(___aldiv@quotient+2)& (0+255),b
  1073  0002AC  0E00               	movlw	0
  1074  0002AE  0100               	movlb	0	; () banked
  1075  0002B0  6FA7               	movwf	(___aldiv@quotient+3)& (0+255),b
  1076                           
  1077                           ; BSR set to: 0
  1078  0002B2  5027               	movf	___aldiv@divisor+3,w,c
  1079  0002B4  1024               	iorwf	___aldiv@divisor,w,c
  1080  0002B6  1025               	iorwf	___aldiv@divisor+1,w,c
  1081  0002B8  1026               	iorwf	___aldiv@divisor+2,w,c
  1082  0002BA  B4D8               	btfsc	status,2,c
  1083  0002BC  D033               	goto	l1400
  1084                           
  1085                           ; BSR set to: 0
  1086  0002BE  0E01               	movlw	1
  1087  0002C0  0100               	movlb	0	; () banked
  1088  0002C2  6FA2               	movwf	___aldiv@counter& (0+255),b
  1089  0002C4  D007               	goto	l1386
  1090  0002C6                     l1384:
  1091                           
  1092                           ; BSR set to: 0
  1093  0002C6  90D8               	bcf	status,0,c
  1094  0002C8  3624               	rlcf	___aldiv@divisor,f,c
  1095  0002CA  3625               	rlcf	___aldiv@divisor+1,f,c
  1096  0002CC  3626               	rlcf	___aldiv@divisor+2,f,c
  1097  0002CE  3627               	rlcf	___aldiv@divisor+3,f,c
  1098  0002D0  0100               	movlb	0	; () banked
  1099  0002D2  2BA2               	incf	___aldiv@counter& (0+255),f,b
  1100  0002D4                     l1386:
  1101                           
  1102                           ; BSR set to: 0
  1103  0002D4  AE27               	btfss	___aldiv@divisor+3,7,c
  1104  0002D6  D7F7               	goto	l1384
  1105  0002D8                     l1388:
  1106                           
  1107                           ; BSR set to: 0
  1108  0002D8  0100               	movlb	0	; () banked
  1109  0002DA  90D8               	bcf	status,0,c
  1110  0002DC  0100               	movlb	0	; () banked
  1111  0002DE  37A4               	rlcf	___aldiv@quotient& (0+255),f,b
  1112  0002E0  0100               	movlb	0	; () banked
  1113  0002E2  37A5               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  1114  0002E4  0100               	movlb	0	; () banked
  1115  0002E6  37A6               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  1116  0002E8  0100               	movlb	0	; () banked
  1117  0002EA  37A7               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  1118                           
  1119                           ; BSR set to: 0
  1120  0002EC  5024               	movf	___aldiv@divisor,w,c
  1121  0002EE  5C20               	subwf	___aldiv@dividend,w,c
  1122  0002F0  5025               	movf	___aldiv@divisor+1,w,c
  1123  0002F2  5821               	subwfb	___aldiv@dividend+1,w,c
  1124  0002F4  5026               	movf	___aldiv@divisor+2,w,c
  1125  0002F6  5822               	subwfb	___aldiv@dividend+2,w,c
  1126  0002F8  5027               	movf	___aldiv@divisor+3,w,c
  1127  0002FA  5823               	subwfb	___aldiv@dividend+3,w,c
  1128  0002FC  A0D8               	btfss	status,0,c
  1129  0002FE  D00A               	goto	l1396
  1130                           
  1131                           ; BSR set to: 0
  1132  000300  5024               	movf	___aldiv@divisor,w,c
  1133  000302  5E20               	subwf	___aldiv@dividend,f,c
  1134  000304  5025               	movf	___aldiv@divisor+1,w,c
  1135  000306  5A21               	subwfb	___aldiv@dividend+1,f,c
  1136  000308  5026               	movf	___aldiv@divisor+2,w,c
  1137  00030A  5A22               	subwfb	___aldiv@dividend+2,f,c
  1138  00030C  5027               	movf	___aldiv@divisor+3,w,c
  1139  00030E  5A23               	subwfb	___aldiv@dividend+3,f,c
  1140                           
  1141                           ; BSR set to: 0
  1142  000310  0100               	movlb	0	; () banked
  1143  000312  81A4               	bsf	___aldiv@quotient& (0+255),0,b
  1144  000314                     l1396:
  1145                           
  1146                           ; BSR set to: 0
  1147  000314  90D8               	bcf	status,0,c
  1148  000316  3227               	rrcf	___aldiv@divisor+3,f,c
  1149  000318  3226               	rrcf	___aldiv@divisor+2,f,c
  1150  00031A  3225               	rrcf	___aldiv@divisor+1,f,c
  1151  00031C  3224               	rrcf	___aldiv@divisor,f,c
  1152                           
  1153                           ; BSR set to: 0
  1154  00031E  0100               	movlb	0	; () banked
  1155  000320  2FA2               	decfsz	___aldiv@counter& (0+255),f,b
  1156  000322  D7DA               	goto	l1388
  1157  000324                     l1400:
  1158                           
  1159                           ; BSR set to: 0
  1160  000324  0100               	movlb	0	; () banked
  1161  000326  51A3               	movf	___aldiv@sign& (0+255),w,b
  1162  000328  B4D8               	btfsc	status,2,c
  1163  00032A  D00F               	goto	l1404
  1164                           
  1165                           ; BSR set to: 0
  1166  00032C  0100               	movlb	0	; () banked
  1167  00032E  1FA7               	comf	(___aldiv@quotient+3)& (0+255),f,b
  1168  000330  0100               	movlb	0	; () banked
  1169  000332  1FA6               	comf	(___aldiv@quotient+2)& (0+255),f,b
  1170  000334  0100               	movlb	0	; () banked
  1171  000336  1FA5               	comf	(___aldiv@quotient+1)& (0+255),f,b
  1172  000338  0100               	movlb	0	; () banked
  1173  00033A  6DA4               	negf	___aldiv@quotient& (0+255),b
  1174  00033C  0E00               	movlw	0
  1175  00033E  0100               	movlb	0	; () banked
  1176  000340  23A5               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  1177  000342  0100               	movlb	0	; () banked
  1178  000344  23A6               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  1179  000346  0100               	movlb	0	; () banked
  1180  000348  23A7               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  1181  00034A                     l1404:
  1182                           
  1183                           ; BSR set to: 0
  1184  00034A  C0A4  F020         	movff	___aldiv@quotient,?___aldiv
  1185  00034E  C0A5  F021         	movff	___aldiv@quotient+1,?___aldiv+1
  1186  000352  C0A6  F022         	movff	___aldiv@quotient+2,?___aldiv+2
  1187  000356  C0A7  F023         	movff	___aldiv@quotient+3,?___aldiv+3
  1188  00035A  0012               	return	
  1189  00035C                     __end_of___aldiv:
  1190                           	opt stack 0
  1191                           tblptru	equ	0xFF8
  1192                           tblptrh	equ	0xFF7
  1193                           tblptrl	equ	0xFF6
  1194                           tablat	equ	0xFF5
  1195                           postinc0	equ	0xFEE
  1196                           wreg	equ	0xFE8
  1197                           postdec1	equ	0xFE5
  1198                           fsr1l	equ	0xFE1
  1199                           status	equ	0xFD8
  1200                           
  1201 ;; *************** function _portConfig *****************
  1202 ;; Defined at:
  1203 ;;		line 321 in file "main.c"
  1204 ;; Parameters:    Size  Location     Type
  1205 ;;		None
  1206 ;; Auto vars:     Size  Location     Type
  1207 ;;		None
  1208 ;; Return value:  Size  Location     Type
  1209 ;;		None               void
  1210 ;; Registers used:
  1211 ;;		wreg, status,2
  1212 ;; Tracked objects:
  1213 ;;		On entry : 0/0
  1214 ;;		On exit  : 0/0
  1215 ;;		Unchanged: 0/0
  1216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1217 ;;      Params:         0       0       0       0
  1218 ;;      Locals:         0       0       0       0
  1219 ;;      Temps:          0       0       0       0
  1220 ;;      Totals:         0       0       0       0
  1221 ;;Total ram usage:        0 bytes
  1222 ;; Hardware stack levels used:    1
  1223 ;; Hardware stack levels required when called:    2
  1224 ;; This function calls:
  1225 ;;		Nothing
  1226 ;; This function is called by:
  1227 ;;		_main
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230                           
  1231                           	psect	text3
  1232  000818                     __ptext3:
  1233                           	opt stack 0
  1234  000818                     _portConfig:
  1235                           	opt stack 27
  1236                           
  1237                           ;main.c: 322: TRISA = 0b00000000;
  1238                           
  1239                           ; BSR set to: 0
  1240                           ;incstack = 0
  1241  000818  0E00               	movlw	0
  1242  00081A  6E92               	movwf	3986,c	;volatile
  1243                           
  1244                           ;main.c: 323: TRISB = 0b00010000;
  1245  00081C  0E10               	movlw	16
  1246  00081E  6E93               	movwf	3987,c	;volatile
  1247                           
  1248                           ;main.c: 324: TRISC = 0b00010000;
  1249  000820  0E10               	movlw	16
  1250  000822  6E94               	movwf	3988,c	;volatile
  1251                           
  1252                           ;main.c: 326: LATA = 0b00000100;
  1253  000824  0E04               	movlw	4
  1254  000826  6E89               	movwf	3977,c	;volatile
  1255                           
  1256                           ;main.c: 327: LATB = 0x00;
  1257  000828  0E00               	movlw	0
  1258  00082A  6E8A               	movwf	3978,c	;volatile
  1259                           
  1260                           ;main.c: 328: LATC = 0x00;
  1261  00082C  0E00               	movlw	0
  1262  00082E  6E8B               	movwf	3979,c	;volatile
  1263  000830  0012               	return	
  1264  000832                     __end_of_portConfig:
  1265                           	opt stack 0
  1266                           tblptru	equ	0xFF8
  1267                           tblptrh	equ	0xFF7
  1268                           tblptrl	equ	0xFF6
  1269                           tablat	equ	0xFF5
  1270                           postinc0	equ	0xFEE
  1271                           wreg	equ	0xFE8
  1272                           postdec1	equ	0xFE5
  1273                           fsr1l	equ	0xFE1
  1274                           status	equ	0xFD8
  1275                           
  1276 ;; *************** function _nrfTXData *****************
  1277 ;; Defined at:
  1278 ;;		line 520 in file "main.c"
  1279 ;; Parameters:    Size  Location     Type
  1280 ;;  len             2   33[COMRAM] int 
  1281 ;; Auto vars:     Size  Location     Type
  1282 ;;  i               2   36[COMRAM] int 
  1283 ;; Return value:  Size  Location     Type
  1284 ;;		None               void
  1285 ;; Registers used:
  1286 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1287 ;; Tracked objects:
  1288 ;;		On entry : 0/0
  1289 ;;		On exit  : 0/0
  1290 ;;		Unchanged: 0/0
  1291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1292 ;;      Params:         2       0       0       0
  1293 ;;      Locals:         2       0       0       0
  1294 ;;      Temps:          1       0       0       0
  1295 ;;      Totals:         5       0       0       0
  1296 ;;Total ram usage:        5 bytes
  1297 ;; Hardware stack levels used:    1
  1298 ;; Hardware stack levels required when called:    3
  1299 ;; This function calls:
  1300 ;;		_setCSN
  1301 ;;		_spiTransferByte
  1302 ;; This function is called by:
  1303 ;;		_main
  1304 ;; This function uses a non-reentrant model
  1305 ;;
  1306                           
  1307                           	psect	text4
  1308  00060C                     __ptext4:
  1309                           	opt stack 0
  1310  00060C                     _nrfTXData:
  1311                           	opt stack 26
  1312                           
  1313                           ;main.c: 522: setCSN(0);
  1314                           
  1315                           ;incstack = 0
  1316  00060C  0E00               	movlw	0
  1317  00060E  6E21               	movwf	setCSN@level+1,c
  1318  000610  0E00               	movlw	0
  1319  000612  6E20               	movwf	setCSN@level,c
  1320  000614  EC33  F004         	call	_setCSN	;wreg free
  1321                           
  1322                           ;main.c: 524: spiTransferByte(0xA0);
  1323  000618  0EA0               	movlw	160
  1324  00061A  EC2B  F004         	call	_spiTransferByte
  1325                           
  1326                           ;main.c: 526: if (len != 0) {
  1327  00061E  5023               	movf	nrfTXData@len+1,w,c
  1328  000620  1022               	iorwf	nrfTXData@len,w,c
  1329  000622  B4D8               	btfsc	status,2,c
  1330  000624  D01C               	goto	l1238
  1331                           
  1332                           ;main.c: 527: for (int i=0;i<len;i++) {
  1333  000626  0E00               	movlw	0
  1334  000628  6E26               	movwf	nrfTXData@i+1,c
  1335  00062A  0E00               	movlw	0
  1336  00062C  6E25               	movwf	nrfTXData@i,c
  1337  00062E  D00D               	goto	l1236
  1338  000630                     l1232:
  1339                           
  1340                           ;main.c: 528: spiTransferByte(dataBufOut[i]);
  1341  000630  0100               	movlb	0	; () banked
  1342  000632  0E80               	movlw	low _dataBufOut
  1343  000634  2425               	addwf	nrfTXData@i,w,c
  1344  000636  6ED9               	movwf	fsr2l,c
  1345  000638  0100               	movlb	0	; () banked
  1346  00063A  0E00               	movlw	high _dataBufOut
  1347  00063C  2026               	addwfc	nrfTXData@i+1,w,c
  1348  00063E  6EDA               	movwf	fsr2h,c
  1349  000640  50DF               	movf	indf2,w,c
  1350  000642  EC2B  F004         	call	_spiTransferByte
  1351  000646  4A25               	infsnz	nrfTXData@i,f,c
  1352  000648  2A26               	incf	nrfTXData@i+1,f,c
  1353  00064A                     l1236:
  1354  00064A  5026               	movf	nrfTXData@i+1,w,c
  1355  00064C  0A80               	xorlw	128
  1356  00064E  6E24               	movwf	??_nrfTXData& (0+255),c
  1357  000650  5022               	movf	nrfTXData@len,w,c
  1358  000652  5C25               	subwf	nrfTXData@i,w,c
  1359  000654  5023               	movf	nrfTXData@len+1,w,c
  1360  000656  0A80               	xorlw	128
  1361  000658  5824               	subwfb	??_nrfTXData& (0+255),w,c
  1362  00065A  A0D8               	btfss	status,0,c
  1363  00065C  D7E9               	goto	l1232
  1364  00065E                     l1238:
  1365                           
  1366                           ;main.c: 529: }
  1367                           ;main.c: 530: }
  1368                           ;main.c: 532: setCSN(1);
  1369  00065E  0E00               	movlw	0
  1370  000660  6E21               	movwf	setCSN@level+1,c
  1371  000662  0E01               	movlw	1
  1372  000664  6E20               	movwf	setCSN@level,c
  1373  000666  EC33  F004         	call	_setCSN	;wreg free
  1374                           
  1375                           ;main.c: 535: LATAbits.LATA1 = 1;
  1376  00066A  8289               	bsf	3977,1,c	;volatile
  1377                           
  1378                           ;main.c: 536: _delay((unsigned long)((12)*(64000000/4000000.0)));
  1379  00066C  0E40               	movlw	64
  1380  00066E                     u647:
  1381  00066E  2EE8               	decfsz	wreg,f,c
  1382  000670  D7FE               	goto	u647
  1383                           
  1384                           ;main.c: 537: LATAbits.LATA1 = 0;
  1385  000672  9289               	bcf	3977,1,c	;volatile
  1386                           
  1387                           ;main.c: 543: nrfBusy = 1;
  1388  000674  0E01               	movlw	1
  1389  000676  0100               	movlb	0	; () banked
  1390  000678  6FA0               	movwf	_nrfBusy& (0+255),b
  1391                           
  1392                           ; BSR set to: 0
  1393  00067A  0012               	return	
  1394  00067C                     __end_of_nrfTXData:
  1395                           	opt stack 0
  1396                           tblptru	equ	0xFF8
  1397                           tblptrh	equ	0xFF7
  1398                           tblptrl	equ	0xFF6
  1399                           tablat	equ	0xFF5
  1400                           postinc0	equ	0xFEE
  1401                           wreg	equ	0xFE8
  1402                           postdec1	equ	0xFE5
  1403                           fsr1l	equ	0xFE1
  1404                           indf2	equ	0xFDF
  1405                           fsr2h	equ	0xFDA
  1406                           fsr2l	equ	0xFD9
  1407                           status	equ	0xFD8
  1408                           
  1409 ;; *************** function _nrfGetStatus *****************
  1410 ;; Defined at:
  1411 ;;		line 402 in file "main.c"
  1412 ;; Parameters:    Size  Location     Type
  1413 ;;		None
  1414 ;; Auto vars:     Size  Location     Type
  1415 ;;		None
  1416 ;; Return value:  Size  Location     Type
  1417 ;;		None               void
  1418 ;; Registers used:
  1419 ;;		wreg, status,2, status,0, cstack
  1420 ;; Tracked objects:
  1421 ;;		On entry : 0/0
  1422 ;;		On exit  : 0/0
  1423 ;;		Unchanged: 0/0
  1424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1425 ;;      Params:         0       0       0       0
  1426 ;;      Locals:         0       0       0       0
  1427 ;;      Temps:          0       0       0       0
  1428 ;;      Totals:         0       0       0       0
  1429 ;;Total ram usage:        0 bytes
  1430 ;; Hardware stack levels used:    1
  1431 ;; Hardware stack levels required when called:    3
  1432 ;; This function calls:
  1433 ;;		_setCSN
  1434 ;;		_spiTransferByte
  1435 ;; This function is called by:
  1436 ;;		_main
  1437 ;; This function uses a non-reentrant model
  1438 ;;
  1439                           
  1440                           	psect	text5
  1441  0007F6                     __ptext5:
  1442                           	opt stack 0
  1443  0007F6                     _nrfGetStatus:
  1444                           	opt stack 26
  1445                           
  1446                           ;main.c: 404: setCSN(0);
  1447                           
  1448                           ; BSR set to: 0
  1449                           ;incstack = 0
  1450  0007F6  0E00               	movlw	0
  1451  0007F8  6E21               	movwf	setCSN@level+1,c
  1452  0007FA  0E00               	movlw	0
  1453  0007FC  6E20               	movwf	setCSN@level,c
  1454  0007FE  EC33  F004         	call	_setCSN	;wreg free
  1455                           
  1456                           ;main.c: 406: nrfSTATUS = spiTransferByte(0xFF);
  1457  000802  0EFF               	movlw	255
  1458  000804  EC2B  F004         	call	_spiTransferByte
  1459  000808  6E3D               	movwf	_nrfSTATUS,c
  1460                           
  1461                           ;main.c: 408: setCSN(1);
  1462  00080A  0E00               	movlw	0
  1463  00080C  6E21               	movwf	setCSN@level+1,c
  1464  00080E  0E01               	movlw	1
  1465  000810  6E20               	movwf	setCSN@level,c
  1466  000812  EC33  F004         	call	_setCSN	;wreg free
  1467  000816  0012               	return	
  1468  000818                     __end_of_nrfGetStatus:
  1469                           	opt stack 0
  1470                           tblptru	equ	0xFF8
  1471                           tblptrh	equ	0xFF7
  1472                           tblptrl	equ	0xFF6
  1473                           tablat	equ	0xFF5
  1474                           postinc0	equ	0xFEE
  1475                           wreg	equ	0xFE8
  1476                           postdec1	equ	0xFE5
  1477                           fsr1l	equ	0xFE1
  1478                           indf2	equ	0xFDF
  1479                           fsr2h	equ	0xFDA
  1480                           fsr2l	equ	0xFD9
  1481                           status	equ	0xFD8
  1482                           
  1483 ;; *************** function _nrfConfig *****************
  1484 ;; Defined at:
  1485 ;;		line 354 in file "main.c"
  1486 ;; Parameters:    Size  Location     Type
  1487 ;;		None
  1488 ;; Auto vars:     Size  Location     Type
  1489 ;;		None
  1490 ;; Return value:  Size  Location     Type
  1491 ;;		None               void
  1492 ;; Registers used:
  1493 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1494 ;; Tracked objects:
  1495 ;;		On entry : 0/0
  1496 ;;		On exit  : 0/0
  1497 ;;		Unchanged: 0/0
  1498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1499 ;;      Params:         0       0       0       0
  1500 ;;      Locals:         0       0       0       0
  1501 ;;      Temps:          0       0       0       0
  1502 ;;      Totals:         0       0       0       0
  1503 ;;Total ram usage:        0 bytes
  1504 ;; Hardware stack levels used:    1
  1505 ;; Hardware stack levels required when called:    4
  1506 ;; This function calls:
  1507 ;;		_nrfConfigReg
  1508 ;;		_nrfSetRXAddr
  1509 ;;		_nrfSetTXAddr
  1510 ;;		_spiTransfer
  1511 ;; This function is called by:
  1512 ;;		_main
  1513 ;; This function uses a non-reentrant model
  1514 ;;
  1515                           
  1516                           	psect	text6
  1517  00035C                     __ptext6:
  1518                           	opt stack 0
  1519  00035C                     _nrfConfig:
  1520                           	opt stack 25
  1521                           
  1522                           ;main.c: 357: nrfConfigReg('w',0x00,CONFIG_CURR);
  1523                           
  1524                           ;incstack = 0
  1525  00035C  0E00               	movlw	0
  1526  00035E  6E22               	movwf	nrfConfigReg@command,c
  1527  000360  C02B  F023         	movff	_CONFIG_CURR,nrfConfigReg@data
  1528  000364  0E77               	movlw	119
  1529  000366  EC9C  F003         	call	_nrfConfigReg
  1530                           
  1531                           ;main.c: 359: nrfConfigReg('w',0x01,EN_AA_CURR);
  1532  00036A  0E01               	movlw	1
  1533  00036C  6E22               	movwf	nrfConfigReg@command,c
  1534  00036E  C03C  F023         	movff	_EN_AA_CURR,nrfConfigReg@data
  1535  000372  0E77               	movlw	119
  1536  000374  EC9C  F003         	call	_nrfConfigReg
  1537                           
  1538                           ;main.c: 361: nrfConfigReg('w',0x02,EN_RXADDR_CURR);
  1539  000378  0E02               	movlw	2
  1540  00037A  6E22               	movwf	nrfConfigReg@command,c
  1541  00037C  C02D  F023         	movff	_EN_RXADDR_CURR,nrfConfigReg@data
  1542  000380  0E77               	movlw	119
  1543  000382  EC9C  F003         	call	_nrfConfigReg
  1544                           
  1545                           ;main.c: 363: nrfConfigReg('w',0x03,SETUP_AW_CURR);
  1546  000386  0E03               	movlw	3
  1547  000388  6E22               	movwf	nrfConfigReg@command,c
  1548  00038A  C032  F023         	movff	_SETUP_AW_CURR,nrfConfigReg@data
  1549  00038E  0E77               	movlw	119
  1550  000390  EC9C  F003         	call	_nrfConfigReg
  1551                           
  1552                           ;main.c: 365: nrfConfigReg('w',0x04,SETUP_RETR_CURR);
  1553  000394  0E04               	movlw	4
  1554  000396  6E22               	movwf	nrfConfigReg@command,c
  1555  000398  C033  F023         	movff	_SETUP_RETR_CURR,nrfConfigReg@data
  1556  00039C  0E77               	movlw	119
  1557  00039E  EC9C  F003         	call	_nrfConfigReg
  1558                           
  1559                           ;main.c: 367: nrfConfigReg('w',0x05,RF_CH_CURR);
  1560  0003A2  0E05               	movlw	5
  1561  0003A4  6E22               	movwf	nrfConfigReg@command,c
  1562  0003A6  C02F  F023         	movff	_RF_CH_CURR,nrfConfigReg@data
  1563  0003AA  0E77               	movlw	119
  1564  0003AC  EC9C  F003         	call	_nrfConfigReg
  1565                           
  1566                           ;main.c: 369: nrfConfigReg('w',0x06,RF_SETUP_CURR);
  1567  0003B0  0E06               	movlw	6
  1568  0003B2  6E22               	movwf	nrfConfigReg@command,c
  1569  0003B4  C030  F023         	movff	_RF_SETUP_CURR,nrfConfigReg@data
  1570  0003B8  0E77               	movlw	119
  1571  0003BA  EC9C  F003         	call	_nrfConfigReg
  1572                           
  1573                           ;main.c: 371: nrfSetRXAddr(0x0A,RX_ADDRESS,4);
  1574  0003BE  0E00               	movlw	high _RX_ADDRESS
  1575  0003C0  6E23               	movwf	nrfSetRXAddr@addr+1,c
  1576  0003C2  0E34               	movlw	low _RX_ADDRESS
  1577  0003C4  6E22               	movwf	nrfSetRXAddr@addr,c
  1578  0003C6  0E00               	movlw	0
  1579  0003C8  6E25               	movwf	nrfSetRXAddr@len+1,c
  1580  0003CA  0E04               	movlw	4
  1581  0003CC  6E24               	movwf	nrfSetRXAddr@len,c
  1582  0003CE  0E0A               	movlw	10
  1583  0003D0  EC3E  F003         	call	_nrfSetRXAddr
  1584                           
  1585                           ;main.c: 373: nrfSetTXAddr(TX_ADDRESS,4);
  1586  0003D4  0E00               	movlw	high _TX_ADDRESS
  1587  0003D6  6E23               	movwf	nrfSetTXAddr@addr+1,c
  1588  0003D8  0E38               	movlw	low _TX_ADDRESS
  1589  0003DA  6E22               	movwf	nrfSetTXAddr@addr,c
  1590  0003DC  0E00               	movlw	0
  1591  0003DE  6E25               	movwf	nrfSetTXAddr@len+1,c
  1592  0003E0  0E04               	movlw	4
  1593  0003E2  6E24               	movwf	nrfSetTXAddr@len,c
  1594  0003E4  EC6E  F003         	call	_nrfSetTXAddr	;wreg free
  1595                           
  1596                           ;main.c: 375: nrfConfigReg('w',0x11,RX_PW_P0_CURR);
  1597  0003E8  0E11               	movlw	17
  1598  0003EA  6E22               	movwf	nrfConfigReg@command,c
  1599  0003EC  C031  F023         	movff	_RX_PW_P0_CURR,nrfConfigReg@data
  1600  0003F0  0E77               	movlw	119
  1601  0003F2  EC9C  F003         	call	_nrfConfigReg
  1602                           
  1603                           ;main.c: 377: nrfConfigReg('w',0x1C,DYNPD_CURR);
  1604  0003F6  0E1C               	movlw	28
  1605  0003F8  6E22               	movwf	nrfConfigReg@command,c
  1606  0003FA  C02C  F023         	movff	_DYNPD_CURR,nrfConfigReg@data
  1607  0003FE  0E77               	movlw	119
  1608  000400  EC9C  F003         	call	_nrfConfigReg
  1609                           
  1610                           ;main.c: 379: nrfConfigReg('w',0x1D,FEATURE_CURR);
  1611  000404  0E1D               	movlw	29
  1612  000406  6E22               	movwf	nrfConfigReg@command,c
  1613  000408  C02E  F023         	movff	_FEATURE_CURR,nrfConfigReg@data
  1614  00040C  0E77               	movlw	119
  1615  00040E  EC9C  F003         	call	_nrfConfigReg
  1616                           
  1617                           ;main.c: 381: spiTransfer('n',0xE1,0);
  1618  000412  0EE1               	movlw	225
  1619  000414  6E22               	movwf	spiTransfer@command,c
  1620  000416  0E00               	movlw	0
  1621  000418  6E24               	movwf	spiTransfer@len+1,c
  1622  00041A  0E00               	movlw	0
  1623  00041C  6E23               	movwf	spiTransfer@len,c
  1624  00041E  0E6E               	movlw	110
  1625  000420  EC7E  F002         	call	_spiTransfer
  1626                           
  1627                           ;main.c: 383: spiTransfer('n',0xE2,0);
  1628  000424  0EE2               	movlw	226
  1629  000426  6E22               	movwf	spiTransfer@command,c
  1630  000428  0E00               	movlw	0
  1631  00042A  6E24               	movwf	spiTransfer@len+1,c
  1632  00042C  0E00               	movlw	0
  1633  00042E  6E23               	movwf	spiTransfer@len,c
  1634  000430  0E6E               	movlw	110
  1635  000432  EC7E  F002         	call	_spiTransfer
  1636  000436  0012               	return	
  1637  000438                     __end_of_nrfConfig:
  1638                           	opt stack 0
  1639                           tblptru	equ	0xFF8
  1640                           tblptrh	equ	0xFF7
  1641                           tblptrl	equ	0xFF6
  1642                           tablat	equ	0xFF5
  1643                           postinc0	equ	0xFEE
  1644                           wreg	equ	0xFE8
  1645                           postdec1	equ	0xFE5
  1646                           fsr1l	equ	0xFE1
  1647                           indf2	equ	0xFDF
  1648                           fsr2h	equ	0xFDA
  1649                           fsr2l	equ	0xFD9
  1650                           status	equ	0xFD8
  1651                           
  1652 ;; *************** function _spiTransfer *****************
  1653 ;; Defined at:
  1654 ;;		line 482 in file "main.c"
  1655 ;; Parameters:    Size  Location     Type
  1656 ;;  wrn             1    wreg     unsigned char 
  1657 ;;  command         1   33[COMRAM] unsigned char 
  1658 ;;  len             2   34[COMRAM] int 
  1659 ;; Auto vars:     Size  Location     Type
  1660 ;;  wrn             1   37[COMRAM] unsigned char 
  1661 ;;  i               2   38[COMRAM] int 
  1662 ;; Return value:  Size  Location     Type
  1663 ;;		None               void
  1664 ;; Registers used:
  1665 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1666 ;; Tracked objects:
  1667 ;;		On entry : 0/0
  1668 ;;		On exit  : 0/0
  1669 ;;		Unchanged: 0/0
  1670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1671 ;;      Params:         3       0       0       0
  1672 ;;      Locals:         3       0       0       0
  1673 ;;      Temps:          1       0       0       0
  1674 ;;      Totals:         7       0       0       0
  1675 ;;Total ram usage:        7 bytes
  1676 ;; Hardware stack levels used:    1
  1677 ;; Hardware stack levels required when called:    3
  1678 ;; This function calls:
  1679 ;;		_setCSN
  1680 ;;		_spiTransferByte
  1681 ;; This function is called by:
  1682 ;;		_main
  1683 ;;		_nrfConfig
  1684 ;; This function uses a non-reentrant model
  1685 ;;
  1686                           
  1687                           	psect	text7
  1688  0004FC                     __ptext7:
  1689                           	opt stack 0
  1690  0004FC                     _spiTransfer:
  1691                           	opt stack 26
  1692                           
  1693                           ;incstack = 0
  1694                           ;spiTransfer@wrn stored from wreg
  1695  0004FC  6E26               	movwf	spiTransfer@wrn,c
  1696                           
  1697                           ;main.c: 484: setCSN(0);
  1698  0004FE  0E00               	movlw	0
  1699  000500  6E21               	movwf	setCSN@level+1,c
  1700  000502  0E00               	movlw	0
  1701  000504  6E20               	movwf	setCSN@level,c
  1702  000506  EC33  F004         	call	_setCSN	;wreg free
  1703                           
  1704                           ;main.c: 486: if (wrn == 'w') {
  1705  00050A  5026               	movf	spiTransfer@wrn,w,c
  1706  00050C  0A77               	xorlw	119
  1707  00050E  A4D8               	btfss	status,2,c
  1708  000510  D005               	goto	l1076
  1709                           
  1710                           ;main.c: 487: spiTransferByte(0x20|command);
  1711  000512  5022               	movf	spiTransfer@command,w,c
  1712  000514  0920               	iorlw	32
  1713  000516  EC2B  F004         	call	_spiTransferByte
  1714                           
  1715                           ;main.c: 488: } else if (wrn == 'r') {
  1716  00051A  D00F               	goto	l1084
  1717  00051C                     l1076:
  1718  00051C  5026               	movf	spiTransfer@wrn,w,c
  1719  00051E  0A72               	xorlw	114
  1720  000520  A4D8               	btfss	status,2,c
  1721  000522  D004               	goto	l1080
  1722                           
  1723                           ;main.c: 489: spiTransferByte(0x00|command);
  1724  000524  5022               	movf	spiTransfer@command,w,c
  1725  000526  EC2B  F004         	call	_spiTransferByte
  1726                           
  1727                           ;main.c: 490: } else if(wrn == 'n') {
  1728  00052A  D007               	goto	l1084
  1729  00052C                     l1080:
  1730  00052C  5026               	movf	spiTransfer@wrn,w,c
  1731  00052E  0A6E               	xorlw	110
  1732  000530  A4D8               	btfss	status,2,c
  1733  000532  D003               	goto	l1084
  1734                           
  1735                           ;main.c: 491: spiTransferByte(command);
  1736  000534  5022               	movf	spiTransfer@command,w,c
  1737  000536  EC2B  F004         	call	_spiTransferByte
  1738  00053A                     l1084:
  1739                           
  1740                           ;main.c: 492: }
  1741                           ;main.c: 494: if (len != 0) {
  1742  00053A  5024               	movf	spiTransfer@len+1,w,c
  1743  00053C  1023               	iorwf	spiTransfer@len,w,c
  1744  00053E  B4D8               	btfsc	status,2,c
  1745  000540  D025               	goto	l1094
  1746                           
  1747                           ;main.c: 495: for (int i=0;i<len;i++) {
  1748  000542  0E00               	movlw	0
  1749  000544  6E28               	movwf	spiTransfer@i+1,c
  1750  000546  0E00               	movlw	0
  1751  000548  6E27               	movwf	spiTransfer@i,c
  1752  00054A  D016               	goto	l1092
  1753  00054C                     l1088:
  1754                           
  1755                           ;main.c: 496: dataBufIn[i] = spiTransferByte(dataBufOut[i]);
  1756  00054C  0100               	movlb	0	; () banked
  1757  00054E  0E60               	movlw	low _dataBufIn
  1758  000550  2427               	addwf	spiTransfer@i,w,c
  1759  000552  6ED9               	movwf	fsr2l,c
  1760  000554  0100               	movlb	0	; () banked
  1761  000556  0E00               	movlw	high _dataBufIn
  1762  000558  2028               	addwfc	spiTransfer@i+1,w,c
  1763  00055A  6EDA               	movwf	fsr2h,c
  1764  00055C  0100               	movlb	0	; () banked
  1765  00055E  0E80               	movlw	low _dataBufOut
  1766  000560  2427               	addwf	spiTransfer@i,w,c
  1767  000562  6EE1               	movwf	fsr1l,c
  1768  000564  0100               	movlb	0	; () banked
  1769  000566  0E00               	movlw	high _dataBufOut
  1770  000568  2028               	addwfc	spiTransfer@i+1,w,c
  1771  00056A  6EE2               	movwf	fsr1h,c
  1772  00056C  50E7               	movf	indf1,w,c
  1773  00056E  EC2B  F004         	call	_spiTransferByte
  1774  000572  6EDF               	movwf	indf2,c
  1775  000574  4A27               	infsnz	spiTransfer@i,f,c
  1776  000576  2A28               	incf	spiTransfer@i+1,f,c
  1777  000578                     l1092:
  1778  000578  5028               	movf	spiTransfer@i+1,w,c
  1779  00057A  0A80               	xorlw	128
  1780  00057C  6E25               	movwf	??_spiTransfer& (0+255),c
  1781  00057E  5023               	movf	spiTransfer@len,w,c
  1782  000580  5C27               	subwf	spiTransfer@i,w,c
  1783  000582  5024               	movf	spiTransfer@len+1,w,c
  1784  000584  0A80               	xorlw	128
  1785  000586  5825               	subwfb	??_spiTransfer& (0+255),w,c
  1786  000588  A0D8               	btfss	status,0,c
  1787  00058A  D7E0               	goto	l1088
  1788  00058C                     l1094:
  1789                           
  1790                           ;main.c: 497: }
  1791                           ;main.c: 498: }
  1792                           ;main.c: 500: setCSN(1);
  1793  00058C  0E00               	movlw	0
  1794  00058E  6E21               	movwf	setCSN@level+1,c
  1795  000590  0E01               	movlw	1
  1796  000592  6E20               	movwf	setCSN@level,c
  1797  000594  EC33  F004         	call	_setCSN	;wreg free
  1798  000598  0012               	return	
  1799  00059A                     __end_of_spiTransfer:
  1800                           	opt stack 0
  1801                           tblptru	equ	0xFF8
  1802                           tblptrh	equ	0xFF7
  1803                           tblptrl	equ	0xFF6
  1804                           tablat	equ	0xFF5
  1805                           postinc0	equ	0xFEE
  1806                           wreg	equ	0xFE8
  1807                           indf1	equ	0xFE7
  1808                           postdec1	equ	0xFE5
  1809                           fsr1h	equ	0xFE2
  1810                           fsr1l	equ	0xFE1
  1811                           indf2	equ	0xFDF
  1812                           fsr2h	equ	0xFDA
  1813                           fsr2l	equ	0xFD9
  1814                           status	equ	0xFD8
  1815                           
  1816 ;; *************** function _nrfSetTXAddr *****************
  1817 ;; Defined at:
  1818 ;;		line 436 in file "main.c"
  1819 ;; Parameters:    Size  Location     Type
  1820 ;;  addr            2   33[COMRAM] PTR unsigned char 
  1821 ;;		 -> TX_ADDRESS(4), 
  1822 ;;  len             2   35[COMRAM] int 
  1823 ;; Auto vars:     Size  Location     Type
  1824 ;;  i               2   38[COMRAM] int 
  1825 ;; Return value:  Size  Location     Type
  1826 ;;		None               void
  1827 ;; Registers used:
  1828 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1829 ;; Tracked objects:
  1830 ;;		On entry : 0/0
  1831 ;;		On exit  : 0/0
  1832 ;;		Unchanged: 0/0
  1833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1834 ;;      Params:         4       0       0       0
  1835 ;;      Locals:         2       0       0       0
  1836 ;;      Temps:          1       0       0       0
  1837 ;;      Totals:         7       0       0       0
  1838 ;;Total ram usage:        7 bytes
  1839 ;; Hardware stack levels used:    1
  1840 ;; Hardware stack levels required when called:    3
  1841 ;; This function calls:
  1842 ;;		_setCSN
  1843 ;;		_spiTransferByte
  1844 ;; This function is called by:
  1845 ;;		_nrfConfig
  1846 ;; This function uses a non-reentrant model
  1847 ;;
  1848                           
  1849                           	psect	text8
  1850  0006DC                     __ptext8:
  1851                           	opt stack 0
  1852  0006DC                     _nrfSetTXAddr:
  1853                           	opt stack 25
  1854                           
  1855                           ;main.c: 438: setCSN(0);
  1856                           
  1857                           ;incstack = 0
  1858  0006DC  0E00               	movlw	0
  1859  0006DE  6E21               	movwf	setCSN@level+1,c
  1860  0006E0  0E00               	movlw	0
  1861  0006E2  6E20               	movwf	setCSN@level,c
  1862  0006E4  EC33  F004         	call	_setCSN	;wreg free
  1863                           
  1864                           ;main.c: 440: spiTransferByte(0x20|0x10);
  1865  0006E8  0E30               	movlw	48
  1866  0006EA  EC2B  F004         	call	_spiTransferByte
  1867                           
  1868                           ;main.c: 442: if (len != 0) {
  1869  0006EE  5025               	movf	nrfSetTXAddr@len+1,w,c
  1870  0006F0  1024               	iorwf	nrfSetTXAddr@len,w,c
  1871  0006F2  B4D8               	btfsc	status,2,c
  1872  0006F4  D01A               	goto	l1140
  1873                           
  1874                           ;main.c: 444: for (int i=0;i<len;i++) {
  1875  0006F6  0E00               	movlw	0
  1876  0006F8  6E28               	movwf	nrfSetTXAddr@i+1,c
  1877  0006FA  0E00               	movlw	0
  1878  0006FC  6E27               	movwf	nrfSetTXAddr@i,c
  1879  0006FE  D00B               	goto	l1138
  1880  000700                     l1134:
  1881                           
  1882                           ;main.c: 445: spiTransferByte(addr[i]);
  1883  000700  5027               	movf	nrfSetTXAddr@i,w,c
  1884  000702  2422               	addwf	nrfSetTXAddr@addr,w,c
  1885  000704  6ED9               	movwf	fsr2l,c
  1886  000706  5028               	movf	nrfSetTXAddr@i+1,w,c
  1887  000708  2023               	addwfc	nrfSetTXAddr@addr+1,w,c
  1888  00070A  6EDA               	movwf	fsr2h,c
  1889  00070C  50DF               	movf	indf2,w,c
  1890  00070E  EC2B  F004         	call	_spiTransferByte
  1891  000712  4A27               	infsnz	nrfSetTXAddr@i,f,c
  1892  000714  2A28               	incf	nrfSetTXAddr@i+1,f,c
  1893  000716                     l1138:
  1894  000716  5028               	movf	nrfSetTXAddr@i+1,w,c
  1895  000718  0A80               	xorlw	128
  1896  00071A  6E26               	movwf	??_nrfSetTXAddr& (0+255),c
  1897  00071C  5024               	movf	nrfSetTXAddr@len,w,c
  1898  00071E  5C27               	subwf	nrfSetTXAddr@i,w,c
  1899  000720  5025               	movf	nrfSetTXAddr@len+1,w,c
  1900  000722  0A80               	xorlw	128
  1901  000724  5826               	subwfb	??_nrfSetTXAddr& (0+255),w,c
  1902  000726  A0D8               	btfss	status,0,c
  1903  000728  D7EB               	goto	l1134
  1904  00072A                     l1140:
  1905                           
  1906                           ;main.c: 446: }
  1907                           ;main.c: 447: }
  1908                           ;main.c: 449: setCSN(1);
  1909  00072A  0E00               	movlw	0
  1910  00072C  6E21               	movwf	setCSN@level+1,c
  1911  00072E  0E01               	movlw	1
  1912  000730  6E20               	movwf	setCSN@level,c
  1913  000732  EC33  F004         	call	_setCSN	;wreg free
  1914  000736  0012               	return	
  1915  000738                     __end_of_nrfSetTXAddr:
  1916                           	opt stack 0
  1917                           tblptru	equ	0xFF8
  1918                           tblptrh	equ	0xFF7
  1919                           tblptrl	equ	0xFF6
  1920                           tablat	equ	0xFF5
  1921                           postinc0	equ	0xFEE
  1922                           wreg	equ	0xFE8
  1923                           indf1	equ	0xFE7
  1924                           postdec1	equ	0xFE5
  1925                           fsr1h	equ	0xFE2
  1926                           fsr1l	equ	0xFE1
  1927                           indf2	equ	0xFDF
  1928                           fsr2h	equ	0xFDA
  1929                           fsr2l	equ	0xFD9
  1930                           status	equ	0xFD8
  1931                           
  1932 ;; *************** function _nrfSetRXAddr *****************
  1933 ;; Defined at:
  1934 ;;		line 458 in file "main.c"
  1935 ;; Parameters:    Size  Location     Type
  1936 ;;  pipe            1    wreg     unsigned char 
  1937 ;;  addr            2   33[COMRAM] PTR unsigned char 
  1938 ;;		 -> RX_ADDRESS(4), 
  1939 ;;  len             2   35[COMRAM] int 
  1940 ;; Auto vars:     Size  Location     Type
  1941 ;;  pipe            1   38[COMRAM] unsigned char 
  1942 ;;  i               2   39[COMRAM] int 
  1943 ;; Return value:  Size  Location     Type
  1944 ;;		None               void
  1945 ;; Registers used:
  1946 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1947 ;; Tracked objects:
  1948 ;;		On entry : 0/0
  1949 ;;		On exit  : 0/0
  1950 ;;		Unchanged: 0/0
  1951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1952 ;;      Params:         4       0       0       0
  1953 ;;      Locals:         3       0       0       0
  1954 ;;      Temps:          1       0       0       0
  1955 ;;      Totals:         8       0       0       0
  1956 ;;Total ram usage:        8 bytes
  1957 ;; Hardware stack levels used:    1
  1958 ;; Hardware stack levels required when called:    3
  1959 ;; This function calls:
  1960 ;;		_setCSN
  1961 ;;		_spiTransferByte
  1962 ;; This function is called by:
  1963 ;;		_nrfConfig
  1964 ;; This function uses a non-reentrant model
  1965 ;;
  1966                           
  1967                           	psect	text9
  1968  00067C                     __ptext9:
  1969                           	opt stack 0
  1970  00067C                     _nrfSetRXAddr:
  1971                           	opt stack 25
  1972                           
  1973                           ;incstack = 0
  1974                           ;nrfSetRXAddr@pipe stored from wreg
  1975  00067C  6E27               	movwf	nrfSetRXAddr@pipe,c
  1976                           
  1977                           ;main.c: 460: setCSN(0);
  1978  00067E  0E00               	movlw	0
  1979  000680  6E21               	movwf	setCSN@level+1,c
  1980  000682  0E00               	movlw	0
  1981  000684  6E20               	movwf	setCSN@level,c
  1982  000686  EC33  F004         	call	_setCSN	;wreg free
  1983                           
  1984                           ;main.c: 462: spiTransferByte(0x20|pipe);
  1985  00068A  5027               	movf	nrfSetRXAddr@pipe,w,c
  1986  00068C  0920               	iorlw	32
  1987  00068E  EC2B  F004         	call	_spiTransferByte
  1988                           
  1989                           ;main.c: 464: if (len != 0) {
  1990  000692  5025               	movf	nrfSetRXAddr@len+1,w,c
  1991  000694  1024               	iorwf	nrfSetRXAddr@len,w,c
  1992  000696  B4D8               	btfsc	status,2,c
  1993  000698  D01A               	goto	l1124
  1994                           
  1995                           ;main.c: 466: for (int i=0;i<len;i++) {
  1996  00069A  0E00               	movlw	0
  1997  00069C  6E29               	movwf	nrfSetRXAddr@i+1,c
  1998  00069E  0E00               	movlw	0
  1999  0006A0  6E28               	movwf	nrfSetRXAddr@i,c
  2000  0006A2  D00B               	goto	l1122
  2001  0006A4                     l1118:
  2002                           
  2003                           ;main.c: 467: spiTransferByte(addr[i]);
  2004  0006A4  5028               	movf	nrfSetRXAddr@i,w,c
  2005  0006A6  2422               	addwf	nrfSetRXAddr@addr,w,c
  2006  0006A8  6ED9               	movwf	fsr2l,c
  2007  0006AA  5029               	movf	nrfSetRXAddr@i+1,w,c
  2008  0006AC  2023               	addwfc	nrfSetRXAddr@addr+1,w,c
  2009  0006AE  6EDA               	movwf	fsr2h,c
  2010  0006B0  50DF               	movf	indf2,w,c
  2011  0006B2  EC2B  F004         	call	_spiTransferByte
  2012  0006B6  4A28               	infsnz	nrfSetRXAddr@i,f,c
  2013  0006B8  2A29               	incf	nrfSetRXAddr@i+1,f,c
  2014  0006BA                     l1122:
  2015  0006BA  5029               	movf	nrfSetRXAddr@i+1,w,c
  2016  0006BC  0A80               	xorlw	128
  2017  0006BE  6E26               	movwf	??_nrfSetRXAddr& (0+255),c
  2018  0006C0  5024               	movf	nrfSetRXAddr@len,w,c
  2019  0006C2  5C28               	subwf	nrfSetRXAddr@i,w,c
  2020  0006C4  5025               	movf	nrfSetRXAddr@len+1,w,c
  2021  0006C6  0A80               	xorlw	128
  2022  0006C8  5826               	subwfb	??_nrfSetRXAddr& (0+255),w,c
  2023  0006CA  A0D8               	btfss	status,0,c
  2024  0006CC  D7EB               	goto	l1118
  2025  0006CE                     l1124:
  2026                           
  2027                           ;main.c: 468: }
  2028                           ;main.c: 469: }
  2029                           ;main.c: 471: setCSN(1);
  2030  0006CE  0E00               	movlw	0
  2031  0006D0  6E21               	movwf	setCSN@level+1,c
  2032  0006D2  0E01               	movlw	1
  2033  0006D4  6E20               	movwf	setCSN@level,c
  2034  0006D6  EC33  F004         	call	_setCSN	;wreg free
  2035  0006DA  0012               	return	
  2036  0006DC                     __end_of_nrfSetRXAddr:
  2037                           	opt stack 0
  2038                           tblptru	equ	0xFF8
  2039                           tblptrh	equ	0xFF7
  2040                           tblptrl	equ	0xFF6
  2041                           tablat	equ	0xFF5
  2042                           postinc0	equ	0xFEE
  2043                           wreg	equ	0xFE8
  2044                           indf1	equ	0xFE7
  2045                           postdec1	equ	0xFE5
  2046                           fsr1h	equ	0xFE2
  2047                           fsr1l	equ	0xFE1
  2048                           indf2	equ	0xFDF
  2049                           fsr2h	equ	0xFDA
  2050                           fsr2l	equ	0xFD9
  2051                           status	equ	0xFD8
  2052                           
  2053 ;; *************** function _nrfConfigReg *****************
  2054 ;; Defined at:
  2055 ;;		line 414 in file "main.c"
  2056 ;; Parameters:    Size  Location     Type
  2057 ;;  wr              1    wreg     unsigned char 
  2058 ;;  command         1   33[COMRAM] unsigned char 
  2059 ;;  data            1   34[COMRAM] unsigned char 
  2060 ;; Auto vars:     Size  Location     Type
  2061 ;;  wr              1   35[COMRAM] unsigned char 
  2062 ;; Return value:  Size  Location     Type
  2063 ;;                  1    wreg      unsigned char 
  2064 ;; Registers used:
  2065 ;;		wreg, status,2, status,0, cstack
  2066 ;; Tracked objects:
  2067 ;;		On entry : 0/0
  2068 ;;		On exit  : 0/0
  2069 ;;		Unchanged: 0/0
  2070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2071 ;;      Params:         2       0       0       0
  2072 ;;      Locals:         1       0       0       0
  2073 ;;      Temps:          0       0       0       0
  2074 ;;      Totals:         3       0       0       0
  2075 ;;Total ram usage:        3 bytes
  2076 ;; Hardware stack levels used:    1
  2077 ;; Hardware stack levels required when called:    3
  2078 ;; This function calls:
  2079 ;;		_setCSN
  2080 ;;		_spiTransferByte
  2081 ;; This function is called by:
  2082 ;;		_nrfConfig
  2083 ;; This function uses a non-reentrant model
  2084 ;;
  2085                           
  2086                           	psect	text10
  2087  000738                     __ptext10:
  2088                           	opt stack 0
  2089  000738                     _nrfConfigReg:
  2090                           	opt stack 25
  2091                           
  2092                           ;incstack = 0
  2093                           ;nrfConfigReg@wr stored from wreg
  2094  000738  6E24               	movwf	nrfConfigReg@wr,c
  2095                           
  2096                           ;main.c: 416: setCSN(0);
  2097  00073A  0E00               	movlw	0
  2098  00073C  6E21               	movwf	setCSN@level+1,c
  2099  00073E  0E00               	movlw	0
  2100  000740  6E20               	movwf	setCSN@level,c
  2101  000742  EC33  F004         	call	_setCSN	;wreg free
  2102                           
  2103                           ;main.c: 418: if (wr == 'w') {
  2104  000746  5024               	movf	nrfConfigReg@wr,w,c
  2105  000748  0A77               	xorlw	119
  2106  00074A  A4D8               	btfss	status,2,c
  2107  00074C  D008               	goto	l1104
  2108                           
  2109                           ;main.c: 419: spiTransferByte(0x20|command);
  2110  00074E  5022               	movf	nrfConfigReg@command,w,c
  2111  000750  0920               	iorlw	32
  2112  000752  EC2B  F004         	call	_spiTransferByte
  2113                           
  2114                           ;main.c: 420: spiTransferByte(data);
  2115  000756  5023               	movf	nrfConfigReg@data,w,c
  2116  000758  EC2B  F004         	call	_spiTransferByte
  2117                           
  2118                           ;main.c: 421: } else if (wr == 'r') {
  2119  00075C  D00B               	goto	l1108
  2120  00075E                     l1104:
  2121  00075E  5024               	movf	nrfConfigReg@wr,w,c
  2122  000760  0A72               	xorlw	114
  2123  000762  A4D8               	btfss	status,2,c
  2124  000764  D007               	goto	l1108
  2125                           
  2126                           ;main.c: 422: spiTransferByte(0x00|command);
  2127  000766  5022               	movf	nrfConfigReg@command,w,c
  2128  000768  EC2B  F004         	call	_spiTransferByte
  2129                           
  2130                           ;main.c: 423: data = spiTransferByte(0xFF);
  2131  00076C  0EFF               	movlw	255
  2132  00076E  EC2B  F004         	call	_spiTransferByte
  2133  000772  6E23               	movwf	nrfConfigReg@data,c
  2134  000774                     l1108:
  2135                           
  2136                           ;main.c: 424: }
  2137                           ;main.c: 426: setCSN(1);
  2138  000774  0E00               	movlw	0
  2139  000776  6E21               	movwf	setCSN@level+1,c
  2140  000778  0E01               	movlw	1
  2141  00077A  6E20               	movwf	setCSN@level,c
  2142  00077C  EC33  F004         	call	_setCSN	;wreg free
  2143  000780  0012               	return	
  2144  000782                     __end_of_nrfConfigReg:
  2145                           	opt stack 0
  2146                           tblptru	equ	0xFF8
  2147                           tblptrh	equ	0xFF7
  2148                           tblptrl	equ	0xFF6
  2149                           tablat	equ	0xFF5
  2150                           postinc0	equ	0xFEE
  2151                           wreg	equ	0xFE8
  2152                           indf1	equ	0xFE7
  2153                           postdec1	equ	0xFE5
  2154                           fsr1h	equ	0xFE2
  2155                           fsr1l	equ	0xFE1
  2156                           indf2	equ	0xFDF
  2157                           fsr2h	equ	0xFDA
  2158                           fsr2l	equ	0xFD9
  2159                           status	equ	0xFD8
  2160                           
  2161 ;; *************** function _spiTransferByte *****************
  2162 ;; Defined at:
  2163 ;;		line 506 in file "main.c"
  2164 ;; Parameters:    Size  Location     Type
  2165 ;;  data            1    wreg     unsigned char 
  2166 ;; Auto vars:     Size  Location     Type
  2167 ;;  data            1   31[COMRAM] unsigned char 
  2168 ;; Return value:  Size  Location     Type
  2169 ;;                  1    wreg      unsigned char 
  2170 ;; Registers used:
  2171 ;;		wreg, status,2
  2172 ;; Tracked objects:
  2173 ;;		On entry : 0/0
  2174 ;;		On exit  : 0/0
  2175 ;;		Unchanged: 0/0
  2176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2177 ;;      Params:         0       0       0       0
  2178 ;;      Locals:         1       0       0       0
  2179 ;;      Temps:          0       0       0       0
  2180 ;;      Totals:         1       0       0       0
  2181 ;;Total ram usage:        1 bytes
  2182 ;; Hardware stack levels used:    1
  2183 ;; Hardware stack levels required when called:    2
  2184 ;; This function calls:
  2185 ;;		Nothing
  2186 ;; This function is called by:
  2187 ;;		_nrfGetStatus
  2188 ;;		_nrfConfigReg
  2189 ;;		_nrfSetTXAddr
  2190 ;;		_nrfSetRXAddr
  2191 ;;		_spiTransfer
  2192 ;;		_nrfTXData
  2193 ;; This function uses a non-reentrant model
  2194 ;;
  2195                           
  2196                           	psect	text11
  2197  000856                     __ptext11:
  2198                           	opt stack 0
  2199  000856                     _spiTransferByte:
  2200                           	opt stack 26
  2201                           
  2202                           ;incstack = 0
  2203                           ;spiTransferByte@data stored from wreg
  2204  000856  6E20               	movwf	spiTransferByte@data,c
  2205                           
  2206                           ;main.c: 508: SSP1BUF = data;
  2207  000858  C020  FFC9         	movff	spiTransferByte@data,4041	;volatile
  2208  00085C                     l164:
  2209  00085C  A69E               	btfss	3998,3,c	;volatile
  2210  00085E  D7FE               	goto	l164
  2211                           
  2212                           ;main.c: 511: PIR1bits.SSP1IF = 0;
  2213  000860  969E               	bcf	3998,3,c	;volatile
  2214                           
  2215                           ;main.c: 513: return SSP1BUF;
  2216  000862  50C9               	movf	4041,w,c	;volatile
  2217  000864  0012               	return	
  2218  000866                     __end_of_spiTransferByte:
  2219                           	opt stack 0
  2220                           tblptru	equ	0xFF8
  2221                           tblptrh	equ	0xFF7
  2222                           tblptrl	equ	0xFF6
  2223                           tablat	equ	0xFF5
  2224                           postinc0	equ	0xFEE
  2225                           wreg	equ	0xFE8
  2226                           indf1	equ	0xFE7
  2227                           postdec1	equ	0xFE5
  2228                           fsr1h	equ	0xFE2
  2229                           fsr1l	equ	0xFE1
  2230                           indf2	equ	0xFDF
  2231                           fsr2h	equ	0xFDA
  2232                           fsr2l	equ	0xFD9
  2233                           status	equ	0xFD8
  2234                           
  2235 ;; *************** function _setCSN *****************
  2236 ;; Defined at:
  2237 ;;		line 389 in file "main.c"
  2238 ;; Parameters:    Size  Location     Type
  2239 ;;  level           2   31[COMRAM] int 
  2240 ;; Auto vars:     Size  Location     Type
  2241 ;;		None
  2242 ;; Return value:  Size  Location     Type
  2243 ;;		None               void
  2244 ;; Registers used:
  2245 ;;		wreg, status,2, status,0
  2246 ;; Tracked objects:
  2247 ;;		On entry : 0/0
  2248 ;;		On exit  : 0/0
  2249 ;;		Unchanged: 0/0
  2250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2251 ;;      Params:         2       0       0       0
  2252 ;;      Locals:         0       0       0       0
  2253 ;;      Temps:          0       0       0       0
  2254 ;;      Totals:         2       0       0       0
  2255 ;;Total ram usage:        2 bytes
  2256 ;; Hardware stack levels used:    1
  2257 ;; Hardware stack levels required when called:    2
  2258 ;; This function calls:
  2259 ;;		Nothing
  2260 ;; This function is called by:
  2261 ;;		_nrfGetStatus
  2262 ;;		_nrfConfigReg
  2263 ;;		_nrfSetTXAddr
  2264 ;;		_nrfSetRXAddr
  2265 ;;		_spiTransfer
  2266 ;;		_nrfTXData
  2267 ;; This function uses a non-reentrant model
  2268 ;;
  2269                           
  2270                           	psect	text12
  2271  000866                     __ptext12:
  2272                           	opt stack 0
  2273  000866                     _setCSN:
  2274                           	opt stack 26
  2275                           
  2276                           ;main.c: 391: if (level == 1) {
  2277                           
  2278                           ;incstack = 0
  2279  000866  0420               	decf	setCSN@level,w,c
  2280  000868  1021               	iorwf	setCSN@level+1,w,c
  2281  00086A  A4D8               	btfss	status,2,c
  2282  00086C  D002               	goto	l124
  2283                           
  2284                           ;main.c: 392: LATAbits.LATA2 = 1;
  2285  00086E  8489               	bsf	3977,2,c	;volatile
  2286                           
  2287                           ;main.c: 393: } else {
  2288  000870  0012               	return	
  2289  000872                     l124:
  2290                           
  2291                           ;main.c: 394: LATAbits.LATA2 = 0;
  2292  000872  9489               	bcf	3977,2,c	;volatile
  2293  000874  0012               	return	
  2294  000876                     __end_of_setCSN:
  2295                           	opt stack 0
  2296                           tblptru	equ	0xFF8
  2297                           tblptrh	equ	0xFF7
  2298                           tblptrl	equ	0xFF6
  2299                           tablat	equ	0xFF5
  2300                           postinc0	equ	0xFEE
  2301                           wreg	equ	0xFE8
  2302                           indf1	equ	0xFE7
  2303                           postdec1	equ	0xFE5
  2304                           fsr1h	equ	0xFE2
  2305                           fsr1l	equ	0xFE1
  2306                           indf2	equ	0xFDF
  2307                           fsr2h	equ	0xFDA
  2308                           fsr2l	equ	0xFD9
  2309                           status	equ	0xFD8
  2310                           
  2311 ;; *************** function _intConfig *****************
  2312 ;; Defined at:
  2313 ;;		line 301 in file "main.c"
  2314 ;; Parameters:    Size  Location     Type
  2315 ;;		None
  2316 ;; Auto vars:     Size  Location     Type
  2317 ;;		None
  2318 ;; Return value:  Size  Location     Type
  2319 ;;		None               void
  2320 ;; Registers used:
  2321 ;;		None
  2322 ;; Tracked objects:
  2323 ;;		On entry : 0/0
  2324 ;;		On exit  : 0/0
  2325 ;;		Unchanged: 0/0
  2326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2327 ;;      Params:         0       0       0       0
  2328 ;;      Locals:         0       0       0       0
  2329 ;;      Temps:          0       0       0       0
  2330 ;;      Totals:         0       0       0       0
  2331 ;;Total ram usage:        0 bytes
  2332 ;; Hardware stack levels used:    1
  2333 ;; Hardware stack levels required when called:    2
  2334 ;; This function calls:
  2335 ;;		Nothing
  2336 ;; This function is called by:
  2337 ;;		_main
  2338 ;; This function uses a non-reentrant model
  2339 ;;
  2340                           
  2341                           	psect	text13
  2342  000832                     __ptext13:
  2343                           	opt stack 0
  2344  000832                     _intConfig:
  2345                           	opt stack 27
  2346                           
  2347                           ;main.c: 304: PIR1bits.SSP1IF = 0;
  2348                           
  2349                           ;incstack = 0
  2350  000832  969E               	bcf	3998,3,c	;volatile
  2351                           
  2352                           ;main.c: 307: INTCONbits.RBIE = 1;
  2353  000834  86F2               	bsf	intcon,3,c	;volatile
  2354                           
  2355                           ;main.c: 308: INTCON2bits.RBIP = 1;
  2356  000836  80F1               	bsf	intcon2,0,c	;volatile
  2357                           
  2358                           ;main.c: 309: IOCBbits.IOCB4 = 1;
  2359  000838  8862               	bsf	3938,4,c	;volatile
  2360                           
  2361                           ;main.c: 310: INTCONbits.RBIF = 0;
  2362  00083A  90F2               	bcf	intcon,0,c	;volatile
  2363                           
  2364                           ;main.c: 313: RCONbits.IPEN = 1;
  2365  00083C  8ED0               	bsf	4048,7,c	;volatile
  2366                           
  2367                           ;main.c: 314: INTCONbits.GIEH = 1;
  2368  00083E  8EF2               	bsf	intcon,7,c	;volatile
  2369                           
  2370                           ;main.c: 315: INTCONbits.GIEL = 1;
  2371  000840  8CF2               	bsf	intcon,6,c	;volatile
  2372  000842  0012               	return	
  2373  000844                     __end_of_intConfig:
  2374                           	opt stack 0
  2375                           tblptru	equ	0xFF8
  2376                           tblptrh	equ	0xFF7
  2377                           tblptrl	equ	0xFF6
  2378                           tablat	equ	0xFF5
  2379                           intcon	equ	0xFF2
  2380                           intcon2	equ	0xFF1
  2381                           postinc0	equ	0xFEE
  2382                           wreg	equ	0xFE8
  2383                           indf1	equ	0xFE7
  2384                           postdec1	equ	0xFE5
  2385                           fsr1h	equ	0xFE2
  2386                           fsr1l	equ	0xFE1
  2387                           indf2	equ	0xFDF
  2388                           fsr2h	equ	0xFDA
  2389                           fsr2l	equ	0xFD9
  2390                           status	equ	0xFD8
  2391                           
  2392 ;; *************** function _delay10ms *****************
  2393 ;; Defined at:
  2394 ;;		line 549 in file "main.c"
  2395 ;; Parameters:    Size  Location     Type
  2396 ;;  ms_multi        2   31[COMRAM] int 
  2397 ;; Auto vars:     Size  Location     Type
  2398 ;;  i               2   34[COMRAM] int 
  2399 ;; Return value:  Size  Location     Type
  2400 ;;		None               void
  2401 ;; Registers used:
  2402 ;;		wreg, status,2, status,0
  2403 ;; Tracked objects:
  2404 ;;		On entry : 0/0
  2405 ;;		On exit  : 0/0
  2406 ;;		Unchanged: 0/0
  2407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2408 ;;      Params:         2       0       0       0
  2409 ;;      Locals:         2       0       0       0
  2410 ;;      Temps:          1       0       0       0
  2411 ;;      Totals:         5       0       0       0
  2412 ;;Total ram usage:        5 bytes
  2413 ;; Hardware stack levels used:    1
  2414 ;; Hardware stack levels required when called:    2
  2415 ;; This function calls:
  2416 ;;		Nothing
  2417 ;; This function is called by:
  2418 ;;		_main
  2419 ;; This function uses a non-reentrant model
  2420 ;;
  2421                           
  2422                           	psect	text14
  2423  000782                     __ptext14:
  2424                           	opt stack 0
  2425  000782                     _delay10ms:
  2426                           	opt stack 27
  2427                           
  2428                           ;main.c: 550: int i = 0;
  2429                           
  2430                           ;incstack = 0
  2431  000782  0E00               	movlw	0
  2432  000784  6E24               	movwf	delay10ms@i+1,c
  2433  000786  0E00               	movlw	0
  2434  000788  6E23               	movwf	delay10ms@i,c
  2435                           
  2436                           ;main.c: 551: for (i=0;i<ms_multi;i++) {
  2437  00078A  0E00               	movlw	0
  2438  00078C  6E24               	movwf	delay10ms@i+1,c
  2439  00078E  0E00               	movlw	0
  2440  000790  6E23               	movwf	delay10ms@i,c
  2441  000792  D00A               	goto	l177
  2442  000794                     l1212:
  2443                           
  2444                           ;main.c: 552: _delay((unsigned long)((11)*(64000000/4000.0)));
  2445  000794  0EE5               	movlw	229
  2446  000796  6E22               	movwf	??_delay10ms& (0+255),c
  2447  000798  0E91               	movlw	145
  2448  00079A                     u657:
  2449  00079A  2EE8               	decfsz	wreg,f,c
  2450  00079C  D7FE               	goto	u657
  2451  00079E  2E22               	decfsz	??_delay10ms& (0+255),f,c
  2452  0007A0  D7FC               	goto	u657
  2453  0007A2  F000               	nop	
  2454  0007A4  4A23               	infsnz	delay10ms@i,f,c
  2455  0007A6  2A24               	incf	delay10ms@i+1,f,c
  2456  0007A8                     l177:
  2457  0007A8  5024               	movf	delay10ms@i+1,w,c
  2458  0007AA  0A80               	xorlw	128
  2459  0007AC  6E22               	movwf	??_delay10ms& (0+255),c
  2460  0007AE  5020               	movf	delay10ms@ms_multi,w,c
  2461  0007B0  5C23               	subwf	delay10ms@i,w,c
  2462  0007B2  5021               	movf	delay10ms@ms_multi+1,w,c
  2463  0007B4  0A80               	xorlw	128
  2464  0007B6  5822               	subwfb	??_delay10ms& (0+255),w,c
  2465  0007B8  B0D8               	btfsc	status,0,c
  2466  0007BA  0012               	return	
  2467  0007BC  D7EB               	goto	l1212
  2468  0007BE                     __end_of_delay10ms:
  2469                           	opt stack 0
  2470                           tblptru	equ	0xFF8
  2471                           tblptrh	equ	0xFF7
  2472                           tblptrl	equ	0xFF6
  2473                           tablat	equ	0xFF5
  2474                           intcon	equ	0xFF2
  2475                           intcon2	equ	0xFF1
  2476                           postinc0	equ	0xFEE
  2477                           wreg	equ	0xFE8
  2478                           indf1	equ	0xFE7
  2479                           postdec1	equ	0xFE5
  2480                           fsr1h	equ	0xFE2
  2481                           fsr1l	equ	0xFE1
  2482                           indf2	equ	0xFDF
  2483                           fsr2h	equ	0xFDA
  2484                           fsr2l	equ	0xFD9
  2485                           status	equ	0xFD8
  2486                           
  2487 ;; *************** function _lowISR *****************
  2488 ;; Defined at:
  2489 ;;		line 294 in file "main.c"
  2490 ;; Parameters:    Size  Location     Type
  2491 ;;		None
  2492 ;; Auto vars:     Size  Location     Type
  2493 ;;		None
  2494 ;; Return value:  Size  Location     Type
  2495 ;;		None               void
  2496 ;; Registers used:
  2497 ;;		None
  2498 ;; Tracked objects:
  2499 ;;		On entry : 0/0
  2500 ;;		On exit  : 0/0
  2501 ;;		Unchanged: 0/0
  2502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2503 ;;      Params:         0       0       0       0
  2504 ;;      Locals:         0       0       0       0
  2505 ;;      Temps:         17       0       0       0
  2506 ;;      Totals:        17       0       0       0
  2507 ;;Total ram usage:       17 bytes
  2508 ;; Hardware stack levels used:    1
  2509 ;; Hardware stack levels required when called:    1
  2510 ;; This function calls:
  2511 ;;		Nothing
  2512 ;; This function is called by:
  2513 ;;		Interrupt level 1
  2514 ;; This function uses a non-reentrant model
  2515 ;;
  2516                           
  2517                           	psect	intcodelo
  2518  000018                     __pintcodelo:
  2519                           	opt stack 0
  2520  000018                     _lowISR:
  2521                           	opt stack 25
  2522                           
  2523                           ;incstack = 0
  2524  000018  CFD8 F001          	movff	status,??_lowISR
  2525  00001C  CFE8 F002          	movff	wreg,??_lowISR+1
  2526  000020  CFE0 F003          	movff	bsr,??_lowISR+2
  2527  000024  CFFA F004          	movff	pclath,??_lowISR+3
  2528  000028  CFFB F005          	movff	pclatu,??_lowISR+4
  2529  00002C  CFE9 F006          	movff	fsr0l,??_lowISR+5
  2530  000030  CFEA F007          	movff	fsr0h,??_lowISR+6
  2531  000034  CFE1 F008          	movff	fsr1l,??_lowISR+7
  2532  000038  CFE2 F009          	movff	fsr1h,??_lowISR+8
  2533  00003C  CFD9 F00A          	movff	fsr2l,??_lowISR+9
  2534  000040  CFDA F00B          	movff	fsr2h,??_lowISR+10
  2535  000044  CFF3 F00C          	movff	prodl,??_lowISR+11
  2536  000048  CFF4 F00D          	movff	prodh,??_lowISR+12
  2537  00004C  CFF6 F00E          	movff	tblptrl,??_lowISR+13
  2538  000050  CFF7 F00F          	movff	tblptrh,??_lowISR+14
  2539  000054  CFF8 F010          	movff	tblptru,??_lowISR+15
  2540  000058  CFF5 F011          	movff	tablat,??_lowISR+16
  2541  00005C  C011  FFF5         	movff	??_lowISR+16,tablat
  2542  000060  C010  FFF8         	movff	??_lowISR+15,tblptru
  2543  000064  C00F  FFF7         	movff	??_lowISR+14,tblptrh
  2544  000068  C00E  FFF6         	movff	??_lowISR+13,tblptrl
  2545  00006C  C00D  FFF4         	movff	??_lowISR+12,prodh
  2546  000070  C00C  FFF3         	movff	??_lowISR+11,prodl
  2547  000074  C00B  FFDA         	movff	??_lowISR+10,fsr2h
  2548  000078  C00A  FFD9         	movff	??_lowISR+9,fsr2l
  2549  00007C  C009  FFE2         	movff	??_lowISR+8,fsr1h
  2550  000080  C008  FFE1         	movff	??_lowISR+7,fsr1l
  2551  000084  C007  FFEA         	movff	??_lowISR+6,fsr0h
  2552  000088  C006  FFE9         	movff	??_lowISR+5,fsr0l
  2553  00008C  C005  FFFB         	movff	??_lowISR+4,pclatu
  2554  000090  C004  FFFA         	movff	??_lowISR+3,pclath
  2555  000094  C003  FFE0         	movff	??_lowISR+2,bsr
  2556  000098  C002  FFE8         	movff	??_lowISR+1,wreg
  2557  00009C  C001  FFD8         	movff	??_lowISR,status
  2558  0000A0  0010               	retfie	
  2559  0000A2                     __end_of_lowISR:
  2560                           	opt stack 0
  2561                           pclatu	equ	0xFFB
  2562                           pclath	equ	0xFFA
  2563                           tblptru	equ	0xFF8
  2564                           tblptrh	equ	0xFF7
  2565                           tblptrl	equ	0xFF6
  2566                           tablat	equ	0xFF5
  2567                           prodh	equ	0xFF4
  2568                           prodl	equ	0xFF3
  2569                           intcon	equ	0xFF2
  2570                           intcon2	equ	0xFF1
  2571                           postinc0	equ	0xFEE
  2572                           fsr0h	equ	0xFEA
  2573                           fsr0l	equ	0xFE9
  2574                           wreg	equ	0xFE8
  2575                           indf1	equ	0xFE7
  2576                           postdec1	equ	0xFE5
  2577                           fsr1h	equ	0xFE2
  2578                           fsr1l	equ	0xFE1
  2579                           bsr	equ	0xFE0
  2580                           indf2	equ	0xFDF
  2581                           fsr2h	equ	0xFDA
  2582                           fsr2l	equ	0xFD9
  2583                           status	equ	0xFD8
  2584                           
  2585 ;; *************** function _highISR *****************
  2586 ;; Defined at:
  2587 ;;		line 283 in file "main.c"
  2588 ;; Parameters:    Size  Location     Type
  2589 ;;		None
  2590 ;; Auto vars:     Size  Location     Type
  2591 ;;		None
  2592 ;; Return value:  Size  Location     Type
  2593 ;;		None               void
  2594 ;; Registers used:
  2595 ;;		wreg, status,2
  2596 ;; Tracked objects:
  2597 ;;		On entry : 0/0
  2598 ;;		On exit  : 0/0
  2599 ;;		Unchanged: 0/0
  2600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2601 ;;      Params:         0       0       0       0
  2602 ;;      Locals:         0       0       0       0
  2603 ;;      Temps:         14       0       0       0
  2604 ;;      Totals:        14       0       0       0
  2605 ;;Total ram usage:       14 bytes
  2606 ;; Hardware stack levels used:    1
  2607 ;; This function calls:
  2608 ;;		Nothing
  2609 ;; This function is called by:
  2610 ;;		Interrupt level 2
  2611 ;; This function uses a non-reentrant model
  2612 ;;
  2613                           
  2614                           	psect	intcode
  2615  000008                     __pintcode:
  2616                           	opt stack 0
  2617  000008                     _highISR:
  2618                           	opt stack 25
  2619                           
  2620                           ;incstack = 0
  2621  000008  CFFA F012          	movff	pclath,??_highISR
  2622  00000C  CFFB F013          	movff	pclatu,??_highISR+1
  2623  000010  CFE9 F014          	movff	fsr0l,??_highISR+2
  2624  000014  EFCD  F002         	goto	int_func
  2625                           pclatu	equ	0xFFB
  2626                           pclath	equ	0xFFA
  2627                           tblptru	equ	0xFF8
  2628                           tblptrh	equ	0xFF7
  2629                           tblptrl	equ	0xFF6
  2630                           tablat	equ	0xFF5
  2631                           prodh	equ	0xFF4
  2632                           prodl	equ	0xFF3
  2633                           intcon	equ	0xFF2
  2634                           intcon2	equ	0xFF1
  2635                           postinc0	equ	0xFEE
  2636                           fsr0h	equ	0xFEA
  2637                           fsr0l	equ	0xFE9
  2638                           wreg	equ	0xFE8
  2639                           indf1	equ	0xFE7
  2640                           postdec1	equ	0xFE5
  2641                           fsr1h	equ	0xFE2
  2642                           fsr1l	equ	0xFE1
  2643                           bsr	equ	0xFE0
  2644                           indf2	equ	0xFDF
  2645                           fsr2h	equ	0xFDA
  2646                           fsr2l	equ	0xFD9
  2647                           status	equ	0xFD8
  2648                           
  2649                           	psect	intcode_body
  2650  00059A                     __pintcode_body:
  2651                           	opt stack 25
  2652  00059A                     int_func:
  2653                           	opt stack 25
  2654  00059A  CFEA F015          	movff	fsr0h,??_highISR+3
  2655  00059E  CFE1 F016          	movff	fsr1l,??_highISR+4
  2656  0005A2  CFE2 F017          	movff	fsr1h,??_highISR+5
  2657  0005A6  CFD9 F018          	movff	fsr2l,??_highISR+6
  2658  0005AA  CFDA F019          	movff	fsr2h,??_highISR+7
  2659  0005AE  CFF3 F01A          	movff	prodl,??_highISR+8
  2660  0005B2  CFF4 F01B          	movff	prodh,??_highISR+9
  2661  0005B6  CFF6 F01C          	movff	tblptrl,??_highISR+10
  2662  0005BA  CFF7 F01D          	movff	tblptrh,??_highISR+11
  2663  0005BE  CFF8 F01E          	movff	tblptru,??_highISR+12
  2664  0005C2  CFF5 F01F          	movff	tablat,??_highISR+13
  2665                           
  2666                           ;main.c: 285: if (INTCONbits.RBIF) {
  2667  0005C6  A0F2               	btfss	intcon,0,c	;volatile
  2668  0005C8  D004               	goto	i2l106
  2669                           
  2670                           ;main.c: 286: nrfInterrupt = 1;
  2671  0005CA  0E01               	movlw	1
  2672  0005CC  0100               	movlb	0	; () banked
  2673  0005CE  6FA1               	movwf	_nrfInterrupt& (0+255),b
  2674                           
  2675                           ; BSR set to: 0
  2676                           ;main.c: 287: INTCONbits.RBIF = 0;
  2677  0005D0  90F2               	bcf	intcon,0,c	;volatile
  2678  0005D2                     i2l106:
  2679  0005D2  C01F  FFF5         	movff	??_highISR+13,tablat
  2680  0005D6  C01E  FFF8         	movff	??_highISR+12,tblptru
  2681  0005DA  C01D  FFF7         	movff	??_highISR+11,tblptrh
  2682  0005DE  C01C  FFF6         	movff	??_highISR+10,tblptrl
  2683  0005E2  C01B  FFF4         	movff	??_highISR+9,prodh
  2684  0005E6  C01A  FFF3         	movff	??_highISR+8,prodl
  2685  0005EA  C019  FFDA         	movff	??_highISR+7,fsr2h
  2686  0005EE  C018  FFD9         	movff	??_highISR+6,fsr2l
  2687  0005F2  C017  FFE2         	movff	??_highISR+5,fsr1h
  2688  0005F6  C016  FFE1         	movff	??_highISR+4,fsr1l
  2689  0005FA  C015  FFEA         	movff	??_highISR+3,fsr0h
  2690  0005FE  C014  FFE9         	movff	??_highISR+2,fsr0l
  2691  000602  C013  FFFB         	movff	??_highISR+1,pclatu
  2692  000606  C012  FFFA         	movff	??_highISR,pclath
  2693  00060A  0011               	retfie		f
  2694  00060C                     __end_of_highISR:
  2695                           	opt stack 0
  2696  0000                     pclatu	equ	0xFFB
  2697                           pclath	equ	0xFFA
  2698                           tblptru	equ	0xFF8
  2699                           tblptrh	equ	0xFF7
  2700                           tblptrl	equ	0xFF6
  2701                           tablat	equ	0xFF5
  2702                           prodh	equ	0xFF4
  2703                           prodl	equ	0xFF3
  2704                           intcon	equ	0xFF2
  2705                           intcon2	equ	0xFF1
  2706                           postinc0	equ	0xFEE
  2707                           fsr0h	equ	0xFEA
  2708                           fsr0l	equ	0xFE9
  2709                           wreg	equ	0xFE8
  2710                           indf1	equ	0xFE7
  2711                           postdec1	equ	0xFE5
  2712                           fsr1h	equ	0xFE2
  2713                           fsr1l	equ	0xFE1
  2714                           bsr	equ	0xFE0
  2715                           indf2	equ	0xFDF
  2716                           fsr2h	equ	0xFDA
  2717                           fsr2l	equ	0xFD9
  2718                           status	equ	0xFD8
  2719                           pclatu	equ	0xFFB
  2720                           pclath	equ	0xFFA
  2721                           tblptru	equ	0xFF8
  2722                           tblptrh	equ	0xFF7
  2723                           tblptrl	equ	0xFF6
  2724                           tablat	equ	0xFF5
  2725                           prodh	equ	0xFF4
  2726                           prodl	equ	0xFF3
  2727                           intcon	equ	0xFF2
  2728                           intcon2	equ	0xFF1
  2729                           postinc0	equ	0xFEE
  2730                           fsr0h	equ	0xFEA
  2731                           fsr0l	equ	0xFE9
  2732                           wreg	equ	0xFE8
  2733                           indf1	equ	0xFE7
  2734                           postdec1	equ	0xFE5
  2735                           fsr1h	equ	0xFE2
  2736                           fsr1l	equ	0xFE1
  2737                           bsr	equ	0xFE0
  2738                           indf2	equ	0xFDF
  2739                           fsr2h	equ	0xFDA
  2740                           fsr2l	equ	0xFD9
  2741                           status	equ	0xFD8
  2742                           
  2743                           	psect	rparam
  2744  0000                     pclatu	equ	0xFFB
  2745                           pclath	equ	0xFFA
  2746                           tblptru	equ	0xFF8
  2747                           tblptrh	equ	0xFF7
  2748                           tblptrl	equ	0xFF6
  2749                           tablat	equ	0xFF5
  2750                           prodh	equ	0xFF4
  2751                           prodl	equ	0xFF3
  2752                           intcon	equ	0xFF2
  2753                           intcon2	equ	0xFF1
  2754                           postinc0	equ	0xFEE
  2755                           fsr0h	equ	0xFEA
  2756                           fsr0l	equ	0xFE9
  2757                           wreg	equ	0xFE8
  2758                           indf1	equ	0xFE7
  2759                           postdec1	equ	0xFE5
  2760                           fsr1h	equ	0xFE2
  2761                           fsr1l	equ	0xFE1
  2762                           bsr	equ	0xFE0
  2763                           indf2	equ	0xFDF
  2764                           fsr2h	equ	0xFDA
  2765                           fsr2l	equ	0xFD9
  2766                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        17
    BSS         69
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     42      62
    BANK0           160     24      90
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    nrfSetRXAddr@addr	PTR unsigned char  size(2) Largest target is 4
		 -> RX_ADDRESS(COMRAM[4]), 

    nrfSetTXAddr@addr	PTR unsigned char  size(2) Largest target is 4
		 -> TX_ADDRESS(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->_spiConfig_1
    _spiConfig_1->___aldiv
    _nrfTXData->_setCSN
    _nrfGetStatus->_setCSN
    _nrfConfig->_nrfSetRXAddr
    _spiTransfer->_setCSN
    _nrfSetTXAddr->_setCSN
    _nrfSetRXAddr->_setCSN
    _nrfConfigReg->_setCSN

Critical Paths under _highISR in COMRAM

    None.

Critical Paths under _lowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_spiConfig_1
    _spiConfig_1->___aldiv

Critical Paths under _highISR in BANK0

    None.

Critical Paths under _lowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _highISR in BANK1

    None.

Critical Paths under _lowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _highISR in BANK2

    None.

Critical Paths under _lowISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    8872
                                             41 COMRAM     1     1      0
                                             20 BANK0      4     4      0
                          _delay10ms
                          _intConfig
                          _nrfConfig
                       _nrfGetStatus
                          _nrfTXData
                         _portConfig
                        _spiConfig_1
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiConfig_1                                         16    14      2    1033
                                             39 COMRAM     2     0      2
                                              6 BANK0     14    14      0
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     835
                                             31 COMRAM     8     0      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _portConfig                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _nrfTXData                                            5     3      2     823
                                             33 COMRAM     5     3      2
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (1) _nrfGetStatus                                         0     0      0     680
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (1) _nrfConfig                                            0     0      0    4917
                       _nrfConfigReg
                       _nrfSetRXAddr
                       _nrfSetTXAddr
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiTransfer                                          7     4      3    1242
                                             33 COMRAM     7     4      3
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfSetTXAddr                                         7     3      4     898
                                             33 COMRAM     7     3      4
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfSetRXAddr                                         8     4      4     920
                                             33 COMRAM     8     4      4
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _nrfConfigReg                                         3     1      2    1857
                                             33 COMRAM     3     1      2
                             _setCSN
                    _spiTransferByte
 ---------------------------------------------------------------------------------
 (2) _spiTransferByte                                      1     1      0      22
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setCSN                                               2     0      2     658
                                             31 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _intConfig                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _delay10ms                                            5     3      2     100
                                             31 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _lowISR                                              17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _highISR                                             14    14      0       0
                                             17 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay10ms
   _intConfig
   _nrfConfig
     _nrfConfigReg
       _setCSN
       _spiTransferByte
     _nrfSetRXAddr
       _setCSN
       _spiTransferByte
     _nrfSetTXAddr
       _setCSN
       _spiTransferByte
     _spiTransfer
       _setCSN
       _spiTransferByte
   _nrfGetStatus
     _setCSN
     _spiTransferByte
   _nrfTXData
     _setCSN
     _spiTransferByte
   _portConfig
   _spiConfig_1
     ___aldiv
   _spiTransfer
     _setCSN
     _spiTransferByte

 _lowISR (ROOT)

 _highISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     18      5A       4       56.3%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2A      3E       1       65.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      98       9        0.0%
DATA                 0      0      98      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Oct 01 19:50:55 2014

__size_of_spiTransferByte 0010                        bsr 000FE0                _RX_ADDRESS 0034  
             __CFG_LVP$ON 000000                       l124 0872                       l164 085C  
                     l177 07A8                       u535 024E                       u545 0280  
                     u627 01AA                       u637 021E                       u647 066E  
                     u657 079A                       wreg 000FE8                _TX_ADDRESS 0038  
                    l1104 075E                      l1122 06BA                      l1212 0794  
                    l1108 0774                      l1124 06CE                      l1140 072A  
                    l1118 06A4                      l1134 0700                      l1080 052C  
                    l1232 0630                      l1400 0324                      l1138 0716  
                    l1092 0578                      l1084 053A                      l1076 051C  
                    l1236 064A                      l1404 034A                      l1094 058C  
                    l1238 065E                      l1088 054C                      l1506 01B8  
                    l1372 0268                      l1516 01EC                      l1526 0218  
                    l1384 02C6                      l1386 02D4                      l1378 029A  
                    l1396 0314                      l1388 02D8                      l1496 019C  
                    _LATA 000F89                      _LATB 000F8A                      _LATC 000F8B  
      spiTransfer@command 0022                      _main 00A6                      fsr0h 000FEA  
                    fsr1h 000FE2                      fsr0l 000FE9                      fsr2h 000FDA  
                    indf1 000FE7                      fsr1l 000FE1                      indf2 000FDF  
                    fsr2l 000FD9             __CFG_BORV$190 000000                      pclat 000FFA  
                    prodh 000FF4                      prodl 000FF3                      start 00A2  
           __CFG_IESO$OFF 000000            nrfConfigReg@wr 0024           __end_of___aldiv 035C  
                   ?_main 0001                     i2l106 05D2                     _TRISA 000F92  
                   _TRISB 000F93                     _TRISC 000F94           __end_of_highISR 060C  
          __CFG_FCMEN$OFF 000000        __CFG_MCLRE$EXTMCLR 000000                     tablat 000FF5  
                   status 000FD8            __CFG_HFOFST$ON 000000            __CFG_FOSC$HSHP 000000  
         __initialization 07BE              __end_of_main 0230       spiTransferByte@data 0020  
                  ??_main 002A             __activetblptr 000000         ??_spiTransferByte 0020  
          __CFG_PLLCFG$ON 000000             nrfSetRXAddr@i 0028             nrfSetTXAddr@i 0027  
          __CFG_WDTEN$OFF 000000              ?_spiConfig_1 0028            __CFG_PWRTEN$ON 000000  
          __CFG_XINST$OFF 000000                 ??___aldiv 0028            __CFG_STVREN$ON 000000  
                  _lowISR 0018                    _setCSN 0866                    clear_0 07C4  
             setCSN@level 0020                 ??_highISR 0012             ?_nrfGetStatus 0001  
           ?_nrfConfigReg 0022              _FEATURE_CURR 002E       spiConfig_1@spiSpeed 0028  
            __pdataCOMRAM 002B              ?_spiTransfer 0022                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8                __accesstop 0060  
 __end_of__initialization 07F0           __CFG_PBADEN$OFF 000000             ?_nrfSetRXAddr 0022  
           ?_nrfSetTXAddr 0022            __pcstackCOMRAM 0001        __size_of_delay10ms 003C  
          ??_nrfGetStatus 0022            _EN_RXADDR_CURR 002D            ??_nrfConfigReg 0024  
        nrfConfigReg@data 0023                _dataBufOut 0080                __pbssBANK0 0060  
      __size_of_intConfig 0012            ??_nrfSetRXAddr 0026            ??_nrfSetTXAddr 0026  
      __size_of_nrfTXData 0070        __size_of_nrfConfig 00DC       nrfConfigReg@command 0022  
      __CFG_CCP2MX$PORTC1 000000        __CFG_CCP3MX$PORTB5 000000                   ?_lowISR 0001  
                 ?_setCSN 0020                   _SSP1ADD 000FC8                   _SSP1BUF 000FC9  
       __end_of_delay10ms 07BE          nrfSetRXAddr@addr 0022          nrfSetRXAddr@pipe 0027  
                 __Hparam 0000                   __Lparam 0000      __size_of_spiConfig_1 00C4  
         _spiTransferByte 0856                delay10ms@i 0023                   ___aldiv 0230  
           _RX_PW_P0_CURR 0031                   __pcinit 07BE           __size_of_lowISR 008A  
         __size_of_setCSN 0010          nrfSetTXAddr@addr 0022                   __ramtop 0300  
       __end_of_intConfig 0844                   _highISR 0008                   __ptext0 00A6  
                 __ptext1 0438                   __ptext2 0230                   __ptext3 0818  
                 __ptext4 060C                   __ptext5 07F6                   __ptext6 035C  
                 __ptext7 04FC                   __ptext8 06DC                   __ptext9 067C  
                 _nrfBusy 00A0         __end_of_nrfTXData 067C          ___aldiv@dividend 0020  
       __end_of_nrfConfig 0438      __size_of_spiTransfer 009E            __pintcode_body 059A  
    end_of_initialization 07F0                   int_func 059A      __end_of_nrfGetStatus 0818  
    __end_of_nrfConfigReg 0782          ___aldiv@quotient 00A4                   postdec1 000FE5  
                 postinc0 000FEE              nrfTXData@len 0022                _portConfig 0818  
    __end_of_nrfSetRXAddr 06DC      __end_of_nrfSetTXAddr 0738                main@TXtime 00B8  
 __end_of_spiTransferByte 0866             __pidataCOMRAM 0844            __end_of_lowISR 00A2  
          __end_of_setCSN 0876       start_initialization 07BE          _spiConfig_1$1331 00AC  
        _spiConfig_1$1332 00B0                  ??_lowISR 0001                  ??_setCSN 0022  
             ?_portConfig 0001                nrfTXData@i 0025               __pbssCOMRAM 003C  
           __pcstackBANK0 00A2     __size_of_nrfGetStatus 0022     __size_of_nrfConfigReg 004A  
               _dataBufIn 0060          ?_spiTransferByte 0001                 _delay10ms 0782  
             _CONFIG_CURR 002B             _SETUP_AW_CURR 0032                 __pintcode 0008  
                ?___aldiv 0020     __size_of_nrfSetRXAddr 0060     __size_of_nrfSetTXAddr 005C  
         _SETUP_RETR_CURR 0033               __pintcodelo 0018          __CFG_PRICLKEN$ON 000000  
                ?_highISR 0001              _nrfGetStatus 07F6              _nrfConfigReg 0738  
         nrfSetRXAddr@len 0024                 _intConfig 0832                 _nrfSTATUS 003D  
               _nrfTXData 060C           nrfSetTXAddr@len 0024                 _nrfConfig 035C  
         ___aldiv@divisor 0024           ___aldiv@counter 00A2                  _IOCBbits 000F62  
     __size_of_portConfig 001A                  _LATAbits 000F89                ?_delay10ms 0020  
           ??_spiConfig_1 00A8              _nrfSetRXAddr 067C              _nrfSetTXAddr 06DC  
            _nrfInterrupt 00A1                 _spiTXFlag 003E                  _PIR1bits 000F9E  
                _RCONbits 000FD0          __CFG_WDTPS$32768 000000             _RF_SETUP_CURR 0030  
       delay10ms@ms_multi 0020             ??_spiTransfer 0025                 main@count 00B6  
              ?_intConfig 0001               _INTCON2bits 000FF1                ?_nrfTXData 0022  
               copy_data0 07E4                ?_nrfConfig 0001         spiConfig_1@addVal 00B4  
                __Hrparam 0000                  __Lrparam 0000        __CFG_BOREN$SBORDIS 000000  
       __CFG_P2BMX$PORTB5 000000       __end_of_spiConfig_1 04FC          __size_of___aldiv 012C  
        __size_of_highISR 0604                  __ptext10 0738                  __ptext11 0856  
                __ptext12 0866                  __ptext13 0832                  __ptext14 0782  
            _SSP1CON1bits 000FC6       __end_of_spiTransfer 059A             __size_of_main 018A  
             ??_delay10ms 0022                _EN_AA_CURR 003C              _SSP1STATbits 000FC7  
            ??_portConfig 0020                _DYNPD_CURR 002C                _INTCONbits 000FF2  
             ??_intConfig 0020               ??_nrfTXData 0024               ??_nrfConfig 002A  
                intlevel1 0000                  intlevel2 0000        __end_of_portConfig 0832  
             _spiConfig_1 0438            spiTransfer@len 0023            spiTransfer@wrn 0026  
              _RF_CH_CURR 002F               _spiTransfer 04FC              ___aldiv@sign 00A3  
       __CFG_T3CMX$PORTC0 000000              spiTransfer@i 0027  
